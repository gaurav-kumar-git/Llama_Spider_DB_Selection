
You are given multiple databases. Each database has a schema consisting of tables, columns, and relationships (foreign keys).
---
database_id: perpetrator
database schema :
table perpetrator, columns = [ perpetrator.Perpetrator_ID ( integer | primary key | values: 1, 2 ), perpetrator.People_ID ( integer | values: 1, 3 ), perpetrator.Date ( text | values: 04.26 April 26/27, 11.18 Nov. 18 ), perpetrator.Year ( real | values: 1982.0, 1995.0 ), perpetrator.Location ( text | values: Uiryeong, Zhaodong ), perpetrator.Country ( text | values: South Korea, China ), perpetrator.Killed ( real | values: 56, 32 ), perpetrator.Injured ( real | values: 37, 16 ) ]
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Name ( text | values: Ron Baxter, Brent Boyd ), people.Height ( real | values: 6.4, 6.3 ), people.Weight ( real | values: 205.0, 185.0 ), people.Home Town ( text | values: Los Angeles, CA, Baton Rouge, LA ) ]
foreign keys:
perpetrator.People_ID = people.People_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many perpetrators are there?
-- List the date of perpetrators in descending order of the number of people killed.
-- List the number of people injured by perpetrators in ascending order.
-- What is the average number of people injured by all perpetrators?
-- What is the location of the perpetrator with the largest kills.
------------------------------------------------------------------------------------------
database_id: college_2
database schema :
table classroom, columns = [ classroom.building ( text | primary key | values: Alumni, Bronfman ), classroom.room_number ( text | values: 143, 547 ), classroom.capacity ( real | values: 10, 27 ) ]
table department, columns = [ department.dept_name ( text | primary key | values: Accounting, Astronomy ), department.building ( text | values: Chandler, Candlestick ), department.budget ( real | values: 255041.46, 647610.55 ) ]
table course, columns = [ course.course_id ( text | primary key | values: 101, 105 ), course.title ( text | values: C  Programming, The Music of Donovan ), course.dept_name ( text | values: Mech. Eng., Comp. Sci. ), course.credits ( real | values: 4, 3 ) ]
table instructor, columns = [ instructor.ID ( text | primary key | values: 14365, 15347 ), instructor.name ( text | values: McKinnon, Pingr ), instructor.dept_name ( text | values: Cybernetics, Statistics ), instructor.salary ( real | values: 94333.99, 59303.62 ) ]
table section, columns = [ section.course_id ( text | primary key | values: 105, 137 ), section.sec_id ( text | values: 1, 2 ), section.semester ( text | values: Fall, Spring ), section.year ( real | values: 2009, 2002 ), section.building ( text | values: Chandler, Gates ), section.room_number ( text | values: 804, 314 ), section.time_slot_id ( text | values: N, K ) ]
table teaches, columns = [ teaches.ID ( text | primary key | values: 14365, 15347 ), teaches.course_id ( text | values: 747, 169 ), teaches.sec_id ( text | values: 1, 2 ), teaches.semester ( text | values: Spring, Fall ), teaches.year ( integer | values: 2004, 2007 ) ]
table student, columns = [ student.ID ( text | primary key | values: 1000, 10033 ), student.name ( text | values: Schrefl, Rumat ), student.dept_name ( text | values: History, Finance ), student.tot_cred ( real | values: 4, 100 ) ]
table takes, columns = [ takes.ID ( text | primary key | values: 1000, 10033 ), takes.course_id ( text | values: 239, 319 ), takes.sec_id ( text | values: 1, 2 ), takes.semester ( text | values: Fall, Spring ), takes.year ( integer | values: 2006, 2003 ), takes.grade ( text | values: C-, B- ) ]
table advisor, columns = [ advisor.s_ID ( text | primary key | values: 1000, 10033 ), advisor.i_ID ( text | values: 19368, 95030 ) ]
table time_slot, columns = [ time_slot.time_slot_id ( text | primary key | values: A, B ), time_slot.day ( text | values: F, M ), time_slot.start_hr ( real | values: 8, 9 ), time_slot.start_min ( real | values: 0, 30 ), time_slot.end_hr ( real | values: 8, 9 ), time_slot.end_min ( real | values: 50, 45 ) ]
table prereq, columns = [ prereq.course_id ( text | primary key | values: 133, 158 ), prereq.prereq_id ( text | values: 130, 169 ) ]
foreign keys:
course.dept_name = department.dept_name
instructor.dept_name = department.dept_name
section.building = classroom.building
section.room_number = classroom.room_number
section.course_id = course.course_id
teaches.ID = instructor.ID
teaches.course_id = section.course_id
teaches.sec_id = section.sec_id
teaches.semester = section.semester
teaches.year = section.year
student.dept_name = department.dept_name
takes.ID = student.ID
takes.course_id = section.course_id
takes.sec_id = section.sec_id
takes.semester = section.semester
takes.year = section.year
advisor.s_ID = student.ID
advisor.i_ID = instructor.ID
prereq.prereq_id = course.course_id
prereq.course_id = course.course_id

# Here are some example questions that CAN be answered by the schema below:
-- Find the buildings which have rooms with capacity more than 50.
-- What are the distinct buildings with capacities of greater than 50?
-- Count the number of rooms that are not in the Lamberton building.
-- How many classrooms are not in Lamberton?
-- What is the name and building of the departments whose budget is more than the average budget?
------------------------------------------------------------------------------------------
database_id: flight_company
database schema :
table airport, columns = [ airport.id ( integer | primary key | values: 1, 2 ), airport.City ( text | values: Akureyri, Amsterdam ), airport.Country ( text | values: Iceland, Netherlands ), airport.IATA ( text | values: AEY, AMS ), airport.ICAO ( text | values: BIAR, EHAM ), airport.name ( text | values: Akureyri Airport, Schiphol Airport ) ]
table operate_company, columns = [ operate_company.id ( integer | primary key | values: 1, 2 ), operate_company.name ( text | values: Air China, Air China Cargo ), operate_company.Type ( text | values: Corporate, Joint Venture ), operate_company.Principal_activities ( text | values: Airline, Cargo airline ), operate_company.Incorporated_in ( text | values: China, Hong Kong ), operate_company.Group_Equity_Shareholding ( real | values: 18.77, 49.0 ) ]
table flight, columns = [ flight.id ( integer | primary key | values: 1, 2 ), flight.Vehicle_Flight_number ( text | values: M2-F1 #0, M2-F1 #1 ), flight.Date ( text | values: March 1, 1963, August 16, 1963 ), flight.Pilot ( text | values: Thompson, Peterson ), flight.Velocity ( real | values: 135.0, 240.0 ), flight.Altitude ( real | values: 0.0, 3650.0 ), flight.airport_id ( integer | values: 1, 2 ), flight.company_id ( integer | values: 2, 3 ) ]
foreign keys:
flight.company_id = operate_company.id
flight.airport_id = airport.id

# Here are some example questions that CAN be answered by the schema below:
-- How many flights have a velocity larger than 200?
-- List the vehicle flight number, date and pilot of all the flights, ordered by altitude.
-- List the id, country, city and name of the airports ordered alphabetically by the name.
-- What is maximum group equity shareholding of the companies?
-- What is the velocity of the pilot named 'Thompson'?
------------------------------------------------------------------------------------------
database_id: icfp_1
database schema :
table Inst, columns = [ Inst.instID ( integer | primary key | values: 1000, 1010 ), Inst.name ( text | values: University of Oxford, Northeastern University ), Inst.country ( text | values: UK, USA ) ]
table Authors, columns = [ Authors.authID ( integer | primary key | values: 50, 51 ), Authors.lname ( text | values: Gibbons, Hinze ), Authors.fname ( text | values: Jeremy, Ralf ) ]
table Papers, columns = [ Papers.paperID ( integer | primary key | values: 200, 201 ), Papers.title ( text | values: Just do it: Simple Monadic Equational Reasoning, Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory ) ]
table Authorship, columns = [ Authorship.authID ( integer | primary key | values: 50, 51 ), Authorship.instID ( integer | values: 1000, 1010 ), Authorship.paperID ( integer | values: 200, 201 ), Authorship.authOrder ( real | values: 1, 2 ) ]
foreign keys:
Authorship.paperID = Papers.paperID
Authorship.instID = Inst.instID
Authorship.authID = Authors.authID

# Here are some example questions that CAN be answered by the schema below:
-- How many authors are there?
-- Count the number of authors.
-- How many institutions are there?
-- Count the number of institutions.
-- How many papers are published in total?
------------------------------------------------------------------------------------------
database_id: body_builder
database schema :
table body_builder, columns = [ body_builder.Body_Builder_ID ( integer | primary key | values: 1, 2 ), body_builder.People_ID ( integer | values: 1, 2 ), body_builder.Snatch ( real | values: 142.5, 137.5 ), body_builder.Clean_Jerk ( real | values: 175.0, 177.5 ), body_builder.Total ( real | values: 317.5, 315.0 ) ]
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Name ( text | values: Jack Campbell, Ty Conklin ), people.Height ( real | values: 182.0, 192.0 ), people.Weight ( real | values: 80.0, 90.0 ), people.Birth_Date ( text | values: January 1, 1992, March 30, 1976 ), people.Birth_Place ( text | values: Port Huron, Michigan, Anchorage, Alaska ) ]
foreign keys:
body_builder.People_ID = people.People_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many body builders are there?
-- List the total scores of body builders in ascending order.
-- List the snatch score and clean jerk score of body builders in ascending order of snatch score.
-- What is the average snatch score of body builders?
-- What are the clean and jerk score of the body builder with the highest total score?
------------------------------------------------------------------------------------------
database_id: storm_record
database schema :
table storm, columns = [ storm.Storm_ID ( integer | primary key | values: 1, 2 ), storm.Name ( text | values: One, Two ), storm.Dates_active ( text | values: May19–May25, August3–August10 ), storm.Max_speed ( real | values: 995, 972 ), storm.Damage_millions_USD ( real | values: 13.0, 10.75 ), storm.Number_Deaths ( real | values: 0, 7 ) ]
table region, columns = [ region.Region_id ( integer | primary key | values: 1, 2 ), region.Region_code ( text | values: AF, AL ), region.Region_name ( text | values: Afghanistan, Albania ) ]
table affected_region, columns = [ affected_region.Region_id ( integer | primary key | values: 1, 2 ), affected_region.Storm_ID ( integer | values: 1, 4 ), affected_region.Number_city_affected ( real | values: 10.0, 15.0 ) ]
foreign keys:
affected_region.Storm_ID = storm.Storm_ID
affected_region.Region_id = region.Region_id

# Here are some example questions that CAN be answered by the schema below:
-- How many regions do we have?
-- Count the number of regions.
-- Show all region code and region name sorted by the codes.
-- What are the codes and names for all regions, sorted by codes?
-- List all region names in alphabetical order.
------------------------------------------------------------------------------------------
database_id: pilot_record
database schema :
table aircraft, columns = [ aircraft.Aircraft_ID ( integer | primary key | values: 1, 2 ), aircraft.Order_Year ( real | values: 1992, 1996 ), aircraft.Manufacturer ( text | values: Gillig, NFI ), aircraft.Model ( text | values: Phantom (High Floor), Advantage (Low Floor) ), aircraft.Fleet_Series ( text | values: 444-464 (21), 465-467 (3) ), aircraft.Powertrain ( text | values: DD S50EGR Allison WB-400R, DD S50 Allison WB-400R ), aircraft.Fuel_Propulsion ( text | values: Diesel, Hybrid ) ]
table pilot, columns = [ pilot.Pilot_ID ( integer | primary key | values: 1, 2 ), pilot.Pilot_name ( text | values: Patrick O'Bryant, Jermaine O'Neal ), pilot.Rank ( real | values: 13, 6 ), pilot.Age ( real | values: 33, 40 ), pilot.Nationality ( text | values: United States, United Kindom ), pilot.Position ( text | values: Center Team, Forward-Center Team ), pilot.Join_Year ( real | values: 2009, 2008 ), pilot.Team ( text | values: Bradley, Eau Claire High School ) ]
table pilot_record, columns = [ pilot_record.Record_ID ( real | values: 1, 2 ), pilot_record.Pilot_ID ( integer | primary key | values: 1, 2 ), pilot_record.Aircraft_ID ( integer | values: 1, 4 ), pilot_record.Date ( text | values: 2003/01/04, 2005/01/04 ) ]
foreign keys:
pilot_record.Aircraft_ID = aircraft.Aircraft_ID
pilot_record.Pilot_ID = pilot.Pilot_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many pilots are there?
-- List the names of pilots in ascending order of rank.
-- What are the positions and teams of pilots?
-- List the distinct positions of pilots older than 30.
-- Show the names of pilots from team "Bradley" or "Fordham".
------------------------------------------------------------------------------------------
database_id: race_track
database schema :
table race, columns = [ race.Race_ID ( integer | primary key | values: 1, 2 ), race.Name ( text | values: Rolex 24 At Daytona, Gainsco Grand Prix of Miami ), race.Class ( text | values: DP/GT, GT ), race.Date ( text | values: January 26 January 27, March 29 ), race.Track_ID ( text | values: 1, 2 ) ]
table track, columns = [ track.Track_ID ( integer | primary key | values: 1, 2 ), track.Name ( text | values: Auto Club Speedway, Chicagoland Speedway ), track.Location ( text | values: Fontana, CA, Joliet, IL ), track.Seating ( real | values: 92000.0, 75000.0 ), track.Year_Opened ( real | values: 1997.0, 2001.0 ) ]
foreign keys:
race.Track_ID = track.Track_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many tracks do we have?
-- Count the number of tracks.
-- Show the name and location for all tracks.
-- What are the names and locations of all tracks?
-- Show names and seatings, ordered by seating for all tracks opened after 2000.
------------------------------------------------------------------------------------------
database_id: academic
database schema :
table author, columns = [ author.aid ( integer | primary key | values: N/A ), author.homepage ( text | values: N/A ), author.name ( text | values: N/A ), author.oid ( real | values: N/A ) ]
table conference, columns = [ conference.cid ( integer | primary key | values: N/A ), conference.homepage ( text | values: N/A ), conference.name ( text | values: N/A ) ]
table domain, columns = [ domain.did ( integer | primary key | values: N/A ), domain.name ( text | values: N/A ) ]
table domain_author, columns = [ domain_author.aid ( integer | values: N/A ), domain_author.did ( integer | primary key | values: N/A ) ]
table domain_conference, columns = [ domain_conference.cid ( integer | values: N/A ), domain_conference.did ( integer | primary key | values: N/A ) ]
table journal, columns = [ journal.homepage ( text | values: N/A ), journal.jid ( integer | primary key | values: N/A ), journal.name ( text | values: N/A ) ]
table domain_journal, columns = [ domain_journal.did ( integer | primary key | values: N/A ), domain_journal.jid ( integer | values: N/A ) ]
table keyword, columns = [ keyword.keyword ( text | values: N/A ), keyword.kid ( integer | primary key | values: N/A ) ]
table domain_keyword, columns = [ domain_keyword.did ( integer | primary key | values: N/A ), domain_keyword.kid ( integer | values: N/A ) ]
table publication, columns = [ publication.abstract ( text | values: N/A ), publication.cid ( text | values: N/A ), publication.citation_num ( real | values: N/A ), publication.jid ( integer | values: N/A ), publication.pid ( integer | primary key | values: N/A ), publication.reference_num ( real | values: N/A ), publication.title ( text | values: N/A ), publication.year ( real | values: N/A ) ]
table domain_publication, columns = [ domain_publication.did ( integer | primary key | values: N/A ), domain_publication.pid ( integer | values: N/A ) ]
table organization, columns = [ organization.continent ( text | values: N/A ), organization.homepage ( text | values: N/A ), organization.name ( text | values: N/A ), organization.oid ( integer | primary key | values: N/A ) ]
table publication_keyword, columns = [ publication_keyword.pid ( integer | values: N/A ), publication_keyword.kid ( integer | primary key | values: N/A ) ]
table writes, columns = [ writes.aid ( integer | primary key | values: N/A ), writes.pid ( integer | values: N/A ) ]
table cite, columns = [ cite.cited ( integer | values: N/A ), cite.citing ( integer | values: N/A ) ]
foreign keys:
domain_author.did = domain.did
domain_author.aid = author.aid
domain_conference.did = domain.did
domain_conference.cid = conference.cid
domain_journal.did = domain.did
domain_journal.jid = journal.jid
domain_keyword.did = domain.did
domain_keyword.kid = keyword.kid
publication.cid = conference.cid
publication.jid = journal.jid
domain_publication.did = domain.did
domain_publication.pid = publication.pid
publication_keyword.kid = keyword.kid
publication_keyword.pid = publication.pid
writes.aid = author.aid
writes.pid = publication.pid
cite.citing = publication.pid
cite.cited = publication.pid

# Here are some example questions that CAN be answered by the schema below:
-- return me the homepage of PVLDB .
-- return me the homepage of " H. V. Jagadish " .
-- return me the abstract of " Making database systems usable " .
-- return me the year of " Making database systems usable "
-- return me the year of " Making database systems usable " .
------------------------------------------------------------------------------------------
database_id: department_store
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.address_details ( text | values: 28481 Crist Circle
East Burdettestad, IA 21232, 0292 Mitchel Pike
Port Abefurt, IA 84402-4249 ) ]
table Staff, columns = [ Staff.staff_id ( integer | primary key | values: 1, 2 ), Staff.staff_gender ( text | values: 1, 0 ), Staff.staff_name ( text | values: Tom, Malika ) ]
table Suppliers, columns = [ Suppliers.supplier_id ( integer | primary key | values: 1, 2 ), Suppliers.supplier_name ( text | values: Lidl, AB Store ), Suppliers.supplier_phone ( text | values: (692)009-5928, 1-483-283-4742 ) ]
table Department_Store_Chain, columns = [ Department_Store_Chain.dept_store_chain_id ( integer | primary key | values: 1, 2 ), Department_Store_Chain.dept_store_chain_name ( text | values: South, West ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.payment_method_code ( text | values: Credit Card, Direct Debit ), Customers.customer_code ( text | values: 401, 665 ), Customers.customer_name ( text | values: Ahmed, Chauncey ), Customers.customer_address ( text | values: 75099 Tremblay Port Apt. 163
South Norrisland, SC 80546, 8408 Lindsay Court
East Dasiabury, IL 72656-3552 ), Customers.customer_phone ( text | values: 254-072-4068x33935, +41(8)1897032009 ), Customers.customer_email ( text | values: margarett.vonrueden@example.com, stiedemann.sigrid@example.com ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.product_type_code ( text | values: Clothes, Hardware ), Products.product_name ( text | values: red jeans, yellow jeans ), Products.product_price ( real | values: 734.73, 687.23 ) ]
table Supplier_Addresses, columns = [ Supplier_Addresses.supplier_id ( integer | primary key | values: 2, 3 ), Supplier_Addresses.address_id ( integer | values: 11, 2 ), Supplier_Addresses.date_from ( datetime | values: 2016-09-22 16:41:31, 2014-11-07 19:18:49 ), Supplier_Addresses.date_to ( datetime | values: 2018-03-14 20:06:37, 2018-03-16 16:39:58 ) ]
table Customer_Addresses, columns = [ Customer_Addresses.customer_id ( integer | primary key | values: 1, 2 ), Customer_Addresses.address_id ( integer | values: 2, 6 ), Customer_Addresses.date_from ( datetime | values: 2017-12-11 05:00:22, 2017-10-07 23:00:26 ), Customer_Addresses.date_to ( datetime | values: 2018-03-20 20:52:34, 2018-02-28 14:53:52 ) ]
table Customer_Orders, columns = [ Customer_Orders.order_id ( integer | primary key | values: 1, 2 ), Customer_Orders.customer_id ( integer | values: 12, 4 ), Customer_Orders.order_status_code ( text | values: Completed, New ), Customer_Orders.order_date ( datetime | values: 2018-02-10 15:44:48, 2018-01-31 17:49:18 ) ]
table Department_Stores, columns = [ Department_Stores.dept_store_id ( integer | primary key | values: 1, 2 ), Department_Stores.dept_store_chain_id ( integer | values: 1, 3 ), Department_Stores.store_name ( text | values: store_name ), Department_Stores.store_address ( text | values: 01290 Jeremie Parkway Suite 753
North Arielle, MS 51249, 082 Purdy Expressway
O'Connellshire, IL 31732 ), Department_Stores.store_phone ( text | values: (948)944-5099x2027, 877-917-5029 ), Department_Stores.store_email ( text | values: bmaggio@example.com, larissa10@example.org ) ]
table Departments, columns = [ Departments.department_id ( integer | primary key | values: 1, 2 ), Departments.dept_store_id ( integer | values: 5, 11 ), Departments.department_name ( text | values: human resource, purchasing ) ]
table Order_Items, columns = [ Order_Items.order_item_id ( integer | primary key | values: 1, 2 ), Order_Items.order_id ( integer | values: 9, 1 ), Order_Items.product_id ( integer | values: 7, 3 ) ]
table Product_Suppliers, columns = [ Product_Suppliers.product_id ( integer | primary key | values: 3, 4 ), Product_Suppliers.supplier_id ( integer | values: 3, 1 ), Product_Suppliers.date_supplied_from ( datetime | values: 2017-06-19 00:49:05, 2017-07-02 00:35:12 ), Product_Suppliers.date_supplied_to ( datetime | values: 2018-03-24 19:29:18, 2018-03-25 07:30:49 ), Product_Suppliers.total_amount_purchased ( text | values: 89366.05, 25085.57 ), Product_Suppliers.total_value_purchased ( real | values: 36014.6, 36274.56 ) ]
table Staff_Department_Assignments, columns = [ Staff_Department_Assignments.staff_id ( integer | primary key | values: 1, 2 ), Staff_Department_Assignments.department_id ( integer | values: 5, 3 ), Staff_Department_Assignments.date_assigned_from ( datetime | values: 2017-06-11 22:55:20, 2017-12-18 19:12:15 ), Staff_Department_Assignments.job_title_code ( text | values: Department Manager, Sales Person ), Staff_Department_Assignments.date_assigned_to ( datetime | values: 2018-03-23 21:59:11, 2018-03-23 20:25:24 ) ]
foreign keys:
Supplier_Addresses.supplier_id = Suppliers.supplier_id
Supplier_Addresses.address_id = Addresses.address_id
Customer_Addresses.customer_id = Customers.customer_id
Customer_Addresses.address_id = Addresses.address_id
Customer_Orders.customer_id = Customers.customer_id
Department_Stores.dept_store_chain_id = Department_Store_Chain.dept_store_chain_id
Departments.dept_store_id = Department_Stores.dept_store_id
Order_Items.product_id = Products.product_id
Order_Items.order_id = Customer_Orders.order_id
Product_Suppliers.product_id = Products.product_id
Product_Suppliers.supplier_id = Suppliers.supplier_id
Staff_Department_Assignments.staff_id = Staff.staff_id
Staff_Department_Assignments.department_id = Departments.department_id

# Here are some example questions that CAN be answered by the schema below:
-- What are the ids of the top three products that were purchased in the largest amount?
-- Give the ids of the three products purchased in the largest amounts.
-- What are the product id and product type of the cheapest product?
-- Give the id and product type of the product with the lowest price.
-- Find the number of different product types.
------------------------------------------------------------------------------------------
database_id: music_4
database schema :
table artist, columns = [ artist.Artist_ID ( integer | primary key | values: 1, 2 ), artist.Artist ( text | values: Gorgoroth, Ophiolatry ), artist.Age ( real | values: 34, 35 ), artist.Famous_Title ( text | values: Bergen 1996, Transmutation ), artist.Famous_Release_date ( text | values: November 2007, January 21, 2008 ) ]
table volume, columns = [ volume.Volume_ID ( integer | primary key | values: 1, 2 ), volume.Volume_Issue ( text | values: 45:14 §, 45:15 ), volume.Issue_Date ( text | values: 27 December 1986 - 10 January, 17 January ), volume.Weeks_on_Top ( real | values: 3.0, 1.0 ), volume.Song ( text | values:  The Way,  Everybody Have Fun Tonight  ), volume.Artist_ID ( integer | values: 1, 2 ) ]
table music_festival, columns = [ music_festival.ID ( integer | primary key | values: 1, 2 ), music_festival.Music_Festival ( text | values: 34th England Academy Prize, 34th Japan Academy Prize ), music_festival.Date_of_ceremony ( text | values: 18 February 2011 ), music_festival.Category ( text | values: Best Song, Best Lyrics ), music_festival.Volume ( integer | values: 1, 2 ), music_festival.Result ( text | values: Nominated, Awarded ) ]
foreign keys:
volume.Artist_ID = artist.Artist_ID
music_festival.Volume = volume.Volume_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many artists are there?
-- Count the number of artists.
-- List the age of all music artists.
-- What are the ages of all music artists?
-- What is the average age of all artists?
------------------------------------------------------------------------------------------
database_id: insurance_fnol
database schema :
table Customers, columns = [ Customers.Customer_ID ( integer | primary key | values: 194, 214 ), Customers.Customer_name ( text | values: America Jaskolski, Ellsworth Paucek ) ]
table Services, columns = [ Services.Service_ID ( integer | primary key | values: 1, 4 ), Services.Service_name ( text | values: New policy application, Close a policy ) ]
table Available_Policies, columns = [ Available_Policies.Policy_ID ( integer | primary key | values: 246, 257 ), Available_Policies.policy_type_code ( text | values: Life Insurance, Property Insurance ), Available_Policies.Customer_Phone ( text | values: +16(2)5838999222, 242.763.9214 ) ]
table Customers_Policies, columns = [ Customers_Policies.Customer_ID ( integer | primary key | values: 214, 256 ), Customers_Policies.Policy_ID ( integer | values: 257, 301 ), Customers_Policies.Date_Opened ( datetime | values: 2016-11-19, 2016-04-12 ), Customers_Policies.Date_Closed ( datetime | values: 2018-03-04, 2018-02-07 ) ]
table First_Notification_of_Loss, columns = [ First_Notification_of_Loss.FNOL_ID ( integer | primary key | values: 532, 1611 ), First_Notification_of_Loss.Customer_ID ( integer | values: 214, 996 ), First_Notification_of_Loss.Policy_ID ( integer | values: 257, 993 ), First_Notification_of_Loss.Service_ID ( integer | values: 6, 9 ) ]
table Claims, columns = [ Claims.Claim_ID ( integer | primary key | values: 134, 145 ), Claims.FNOL_ID ( integer | values: 1722, 1611 ), Claims.Effective_Date ( datetime | values: 1973-08-18, 2014-10-19 ) ]
table Settlements, columns = [ Settlements.Settlement_ID ( integer | primary key | values: 161, 176 ), Settlements.Claim_ID ( integer | values: 717, 641 ), Settlements.Effective_Date ( datetime | values: 2009-11-20, 1971-06-29 ), Settlements.Settlement_Amount ( real | values: 6451.65, 1588.45 ) ]
foreign keys:
Customers_Policies.Policy_ID = Available_Policies.Policy_ID
Customers_Policies.Customer_ID = Customers.Customer_ID
First_Notification_of_Loss.Customer_ID = Customers_Policies.Customer_ID
First_Notification_of_Loss.Policy_ID = Customers_Policies.Policy_ID
First_Notification_of_Loss.Service_ID = Services.Service_ID
Claims.FNOL_ID = First_Notification_of_Loss.FNOL_ID
Settlements.Claim_ID = Claims.Claim_ID

# Here are some example questions that CAN be answered by the schema below:
-- Find all the phone numbers.
-- What are all the phone numbers?
-- What are the customer phone numbers under the policy "Life Insurance"?
-- What are the phone numbers of customers using the policy with the code "Life Insurance"?
-- Which policy type has the most records in the database?
------------------------------------------------------------------------------------------
database_id: cinema
database schema :
table film, columns = [ film.Film_ID ( integer | primary key | values: 1, 2 ), film.Rank_in_series ( real | values: 26, 27 ), film.Number_in_season ( real | values: 1, 2 ), film.Title ( text | values: The Case of the Mystery Weekend, The Case of the Smart Dummy ), film.Directed_by ( text | values: Bill Schreiner, Jesus Salvador Treviño ), film.Original_air_date ( text | values: September 21–25, 1992, September 28–October 2, 1992 ), film.Production_code ( text | values: 50021–50025, 50231–50235 ) ]
table cinema, columns = [ cinema.Cinema_ID ( integer | primary key | values: 1, 2 ), cinema.Name ( text | values: Codling, Carrowleagh ), cinema.Openning_year ( real | values: 2010, 2012 ), cinema.Capacity ( real | values: 1100, 368 ), cinema.Location ( text | values: County Wicklow, County Cork ) ]
table schedule, columns = [ schedule.Cinema_ID ( integer | primary key | values: 1, 2 ), schedule.Film_ID ( integer | values: 1, 2 ), schedule.Date ( text | values: 21 May, 21 Jun ), schedule.Show_times_per_day ( real | values: 5, 3 ), schedule.Price ( real | values: 12.99, 8.99 ) ]
foreign keys:
schedule.Cinema_ID = cinema.Cinema_ID
schedule.Film_ID = film.Film_ID

# Here are some example questions that CAN be answered by the schema below:
-- Show all the locations where no cinema has capacity over 800.
-- Show all the locations where some cinemas were opened in both year 2010 and year 2011.
-- How many cinema do we have?
-- Count the number of cinemas.
-- Show name, opening year, and capacity for each cinema.
------------------------------------------------------------------------------------------
database_id: decoration_competition
database schema :
table college, columns = [ college.College_ID ( integer | primary key | values: 1, 2 ), college.Name ( text | values: Saskatchewan School, B.C. School ), college.Leader_Name ( text | values: Ousame Tounkara, Ryan Thelwell ), college.College_Location ( text | values: Ottawa, Minnesota ) ]
table member, columns = [ member.Member_ID ( integer | primary key | values: 1, 2 ), member.Name ( text | values: Jack Nicklaus, Billy Casper ), member.Country ( text | values: United States, Canada ), member.College_ID ( integer | values: 1, 4 ) ]
table round, columns = [ round.Round_ID ( real | values: 1, 2 ), round.Member_ID ( integer | primary key | values: 1, 2 ), round.Decoration_Theme ( text | values: Walk on the Moon, Soft Dream ), round.Rank_in_Round ( real | values: 1, 2 ) ]
foreign keys:
member.College_ID = college.College_ID
round.Member_ID = member.Member_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many members are there?
-- List the names of members in ascending alphabetical order.
-- What are the names and countries of members?
-- Show the names of members whose country is "United States" or "Canada".
-- Show the different countries and the number of members from each.
------------------------------------------------------------------------------------------
database_id: phone_market
database schema :
table phone, columns = [ phone.Name ( text | values: IPhone 5s, IPhone 6 ), phone.Phone_ID ( integer | primary key | values: 1, 2 ), phone.Memory_in_G ( real | values: 32, 128 ), phone.Carrier ( text | values: Sprint, TMobile ), phone.Price ( real | values: 320.0, 480.0 ) ]
table market, columns = [ market.Market_ID ( integer | primary key | values: 1, 2 ), market.District ( text | values: Alberta, British Columbia ), market.Num_of_employees ( real | values: 1966, 1965 ), market.Num_of_shops ( real | values: 40.0, 49.0 ), market.Ranking ( real | values: 1, 21 ) ]
table phone_market, columns = [ phone_market.Market_ID ( integer | primary key | values: 1, 2 ), phone_market.Phone_ID ( text | values: 1, 4 ), phone_market.Num_of_stock ( real | values: 2232, 4324 ) ]
foreign keys:
phone_market.Phone_ID = phone.Phone_ID
phone_market.Market_ID = market.Market_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many phones are there?
-- List the names of phones in ascending order of price.
-- What are the memories and carriers of phones?
-- List the distinct carriers of phones with memories bigger than 32.
-- Show the names of phones with carrier either "Sprint" or "TMobile".
------------------------------------------------------------------------------------------
database_id: store_product
database schema :
table product, columns = [ product.product_id ( integer | primary key | values: 1, 2 ), product.product ( text | values: Fujitsu fi-6130 A4 Series Scanner, Plustek MobileOffice D28 Corporate ), product.dimensions ( text | values: 301 x 160 x 158, 303 x 94 x 60 ), product.dpi ( real | values: 600.0 ), product.pages_per_minute_color ( real | values: 30.0, 28.0 ), product.max_page_size ( text | values: A4, 216mm x 356mm ), product.interface ( text | values: USB 2.0 ) ]
table store, columns = [ store.Store_ID ( integer | primary key | values: 1, 2 ), store.Store_Name ( text | values: Miramichi, Neguac ), store.Type ( text | values: City Mall, Village Store ), store.Area_size ( real | values: 179.84, 26.69 ), store.Number_of_product_category ( real | values: 17811.0, 1678.0 ), store.Ranking ( real | values: 2, 3 ) ]
table district, columns = [ district.District_ID ( integer | primary key | values: 1, 2 ), district.District_name ( text | values: Attock District, Bahawalnagar District ), district.Headquartered_City ( text | values: Attock City, Bahawalnagar City ), district.City_Population ( real | values: 94620.0, 134936.0 ), district.City_Area ( real | values: 20.0, 13.0 ) ]
table store_product, columns = [ store_product.Store_ID ( integer | primary key | values: 1, 2 ), store_product.Product_ID ( real | values: 1, 2 ) ]
table store_district, columns = [ store_district.Store_ID ( integer | primary key | values: 1, 2 ), store_district.District_ID ( integer | values: 15, 11 ) ]
foreign keys:
store_product.Store_ID = store.Store_ID
store_district.District_ID = district.District_ID
store_district.Store_ID = store.Store_ID

# Here are some example questions that CAN be answered by the schema below:
-- Find all the distinct district names ordered by city area in descending.
-- What are the different district names in order of descending city area?
-- Find the list of page size which have more than 3 product listed
-- What is the maximum page size for everything that has more than 3 products listed?
-- Find the name and population of district with population between 200000 and 2000000
------------------------------------------------------------------------------------------
database_id: assets_maintenance
database schema :
table Third_Party_Companies, columns = [ Third_Party_Companies.company_id ( integer | primary key | values: 1, 2 ), Third_Party_Companies.company_type ( text | values: Maintenance Contractor, Supplier ), Third_Party_Companies.company_name ( text | values: Langworth-Funk, McDermott Group ), Third_Party_Companies.company_address ( text | values: 615 Jacobs Mews, 873 Conrad Creek Apt. 286 ), Third_Party_Companies.other_company_details ( text | values: Uganda, China ) ]
table Maintenance_Contracts, columns = [ Maintenance_Contracts.maintenance_contract_id ( integer | primary key | values: 1, 2 ), Maintenance_Contracts.maintenance_contract_company_id ( integer | values: 15, 9 ), Maintenance_Contracts.contract_start_date ( datetime | values: 2017-09-13 11:51:29, 2017-12-18 11:43:16 ), Maintenance_Contracts.contract_end_date ( datetime | values: 2018-03-16 21:21:50, 2018-03-22 06:00:37 ), Maintenance_Contracts.other_contract_details ( text | values: N/A ) ]
table Parts, columns = [ Parts.part_id ( integer | primary key | values: 1, 2 ), Parts.part_name ( text | values: top, middle ), Parts.chargeable_yn ( text | values: 0, 1 ), Parts.chargeable_amount ( text | values: 4, 9 ), Parts.other_part_details ( text | values: N/A ) ]
table Skills, columns = [ Skills.skill_id ( integer | primary key | values: 1, 2 ), Skills.skill_code ( text | values: ELEC, MECH ), Skills.skill_description ( text | values: Electrical, Mechanical ) ]
table Staff, columns = [ Staff.staff_id ( integer | primary key | values: 1, 2 ), Staff.staff_name ( text | values: Audreanne, Berneice ), Staff.gender ( text | values: 1, 0 ), Staff.other_staff_details ( text | values: Manager, Woker ) ]
table Assets, columns = [ Assets.asset_id ( integer | primary key | values: 1, 2 ), Assets.maintenance_contract_id ( integer | values: 2, 14 ), Assets.supplier_company_id ( integer | values: 2, 1 ), Assets.asset_details ( text | values: dell laptop1, dell laptop2 ), Assets.asset_make ( text | values: PT, IN ), Assets.asset_model ( text | values: 58 ub, 35 xt ), Assets.asset_acquired_date ( datetime | values: 2017-12-25 00:31:27, 2018-01-27 00:59:46 ), Assets.asset_disposed_date ( datetime | values: 2018-03-14 10:50:00, 2018-03-20 04:24:09 ), Assets.other_asset_details ( text | values: Bad condition ) ]
table Asset_Parts, columns = [ Asset_Parts.asset_id ( integer | values: 5, 3 ), Asset_Parts.part_id ( integer | values: 3, 1 ) ]
table Maintenance_Engineers, columns = [ Maintenance_Engineers.engineer_id ( integer | primary key | values: 1, 2 ), Maintenance_Engineers.company_id ( integer | values: 14, 2 ), Maintenance_Engineers.first_name ( text | values: Etha, Clemens ), Maintenance_Engineers.last_name ( text | values: Reinger, Orn ), Maintenance_Engineers.other_details ( text | values: Skilled ) ]
table Engineer_Skills, columns = [ Engineer_Skills.engineer_id ( integer | values: 10, 15 ), Engineer_Skills.skill_id ( integer | values: 2, 1 ) ]
table Fault_Log, columns = [ Fault_Log.fault_log_entry_id ( integer | primary key | values: 1, 2 ), Fault_Log.asset_id ( integer | values: 3, 7 ), Fault_Log.recorded_by_staff_id ( integer | values: 14, 4 ), Fault_Log.fault_log_entry_datetime ( datetime | values: 2018-03-21 04:25:00, 2018-03-13 09:43:05 ), Fault_Log.fault_description ( text | values: system error, failed parts ), Fault_Log.other_fault_details ( text | values: N/A ) ]
table Engineer_Visits, columns = [ Engineer_Visits.engineer_visit_id ( integer | primary key | values: 1, 2 ), Engineer_Visits.contact_staff_id ( integer | values: 8, 7 ), Engineer_Visits.engineer_id ( integer | values: 8, 15 ), Engineer_Visits.fault_log_entry_id ( integer | values: 13, 4 ), Engineer_Visits.fault_status ( text | values: Waiting, Return ), Engineer_Visits.visit_start_datetime ( datetime | values: 1978-10-12 23:14:40, 1980-05-02 23:31:18 ), Engineer_Visits.visit_end_datetime ( datetime | values: 1988-01-07 06:41:51, 1990-08-30 22:44:16 ), Engineer_Visits.other_visit_details ( text | values: N/A ) ]
table Part_Faults, columns = [ Part_Faults.part_fault_id ( integer | primary key | values: 1, 2 ), Part_Faults.part_id ( integer | values: 1, 3 ), Part_Faults.fault_short_name ( text | values: PW, TW ), Part_Faults.fault_description ( text | values: Package Wrong, Top Parts Wrong ), Part_Faults.other_fault_details ( text | values: N/A ) ]
table Fault_Log_Parts, columns = [ Fault_Log_Parts.fault_log_entry_id ( integer | values: 12, 7 ), Fault_Log_Parts.part_fault_id ( integer | values: 3, 4 ), Fault_Log_Parts.fault_status ( text | values: Reported, Return ) ]
table Skills_Required_To_Fix, columns = [ Skills_Required_To_Fix.part_fault_id ( integer | values: 3, 12 ), Skills_Required_To_Fix.skill_id ( integer | values: 2, 3 ) ]
foreign keys:
Maintenance_Contracts.maintenance_contract_company_id = Third_Party_Companies.company_id
Assets.supplier_company_id = Third_Party_Companies.company_id
Assets.maintenance_contract_id = Maintenance_Contracts.maintenance_contract_id
Asset_Parts.asset_id = Assets.asset_id
Asset_Parts.part_id = Parts.part_id
Maintenance_Engineers.company_id = Third_Party_Companies.company_id
Engineer_Skills.skill_id = Skills.skill_id
Engineer_Skills.engineer_id = Maintenance_Engineers.engineer_id
Fault_Log.recorded_by_staff_id = Staff.staff_id
Fault_Log.asset_id = Assets.asset_id
Engineer_Visits.contact_staff_id = Staff.staff_id
Engineer_Visits.engineer_id = Maintenance_Engineers.engineer_id
Engineer_Visits.fault_log_entry_id = Fault_Log.fault_log_entry_id
Part_Faults.part_id = Parts.part_id
Fault_Log_Parts.fault_log_entry_id = Fault_Log.fault_log_entry_id
Fault_Log_Parts.part_fault_id = Part_Faults.part_fault_id
Skills_Required_To_Fix.skill_id = Skills.skill_id
Skills_Required_To_Fix.part_fault_id = Part_Faults.part_fault_id

# Here are some example questions that CAN be answered by the schema below:
-- Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.
-- How many assets does each maintenance contract contain? List the number and the contract id.
-- How many assets does each third party company supply? List the count and the company id.
-- Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.
-- What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?
------------------------------------------------------------------------------------------
database_id: student_assessment
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 5, 9 ), Addresses.line_1 ( text | values: 0900 Roderick Oval
New Albina, WA 19200-7914, 966 Dach Ports Apt. 322
Lake Harmonyhaven, VA 65235 ), Addresses.line_2 ( text | values: Suite 096, Apt. 163 ), Addresses.city ( text | values: Linnealand, South Minnie ), Addresses.zip_postcode ( text | values: 862, 716 ), Addresses.state_province_county ( text | values: Montana, Texas ), Addresses.country ( text | values: USA ) ]
table People, columns = [ People.person_id ( integer | primary key | values: 111, 121 ), People.first_name ( text | values: Shannon, Virginie ), People.middle_name ( text | values: Elissa, Jasmin ), People.last_name ( text | values: Senger, Hartmann ), People.cell_mobile_number ( text | values: 01955267735, (508)319-2970x043 ), People.email_address ( text | values: javier.trantow@example.net, boyer.lonie@example.com ), People.login_name ( text | values: pgub, bkkv ), People.password ( text | values: 5e4ff49a61b3544da3ad7dc7e2cf28847564c64c, b063331ea8116befaa7b84c59c6a22200f5f8caa ) ]
table Students, columns = [ Students.student_id ( integer | primary key | values: 111, 121 ), Students.student_details ( text | values: Marry, Martin ) ]
table Courses, columns = [ Courses.course_id ( text | primary key | values: 301, 302 ), Courses.course_name ( text | values: statistics, English ), Courses.course_description ( text | values: statistics, English ), Courses.other_details ( text | values: N/A ) ]
table People_Addresses, columns = [ People_Addresses.person_address_id ( integer | primary key | values: 122, 257 ), People_Addresses.person_id ( integer | values: 111, 121 ), People_Addresses.address_id ( integer | values: 9, 5 ), People_Addresses.date_from ( datetime | values: 2012-09-26 13:21:00, 2008-07-31 02:17:25 ), People_Addresses.date_to ( datetime | values: 2018-03-21 09:46:30, 2018-03-09 02:11:12 ) ]
table Student_Course_Registrations, columns = [ Student_Course_Registrations.student_id ( integer | primary key | values: 111, 121 ), Student_Course_Registrations.course_id ( integer | values: 301, 303 ), Student_Course_Registrations.registration_date ( datetime | values: 2008-11-04 10:35:13, 2008-10-04 10:35:13 ) ]
table Student_Course_Attendance, columns = [ Student_Course_Attendance.student_id ( integer | primary key | values: 111, 121 ), Student_Course_Attendance.course_id ( integer | values: 301, 303 ), Student_Course_Attendance.date_of_attendance ( datetime | values: 2008-11-04 10:35:13, 2012-04-09 11:44:34 ) ]
table Candidates, columns = [ Candidates.candidate_id ( integer | primary key | values: 111, 121 ), Candidates.candidate_details ( text | values: Jane, Robert ) ]
table Candidate_Assessments, columns = [ Candidate_Assessments.candidate_id ( integer | primary key | values: 111, 121 ), Candidate_Assessments.qualification ( text | values: A, B ), Candidate_Assessments.assessment_date ( datetime | values: 2010-04-07 11:44:34, 2010-04-17 11:44:34 ), Candidate_Assessments.asessment_outcome_code ( text | values: Pass, Fail ) ]
foreign keys:
Students.student_id = People.person_id
People_Addresses.address_id = Addresses.address_id
People_Addresses.person_id = People.person_id
Student_Course_Registrations.course_id = Courses.course_id
Student_Course_Registrations.student_id = Students.student_id
Student_Course_Attendance.student_id = Student_Course_Registrations.student_id
Student_Course_Attendance.course_id = Student_Course_Registrations.course_id
Candidates.candidate_id = People.person_id
Candidate_Assessments.candidate_id = Candidates.candidate_id

# Here are some example questions that CAN be answered by the schema below:
-- which course has most number of registered students?
-- What is the name of the course with the most registered students?
-- what is id of students who registered some courses but the least number of courses in these students?
-- What are the ids of the students who registered for some courses but had the least number of courses for all students?
-- what are the first name and last name of all candidates?
------------------------------------------------------------------------------------------
database_id: dog_kennels
database schema :
table Breeds, columns = [ Breeds.breed_code ( text | primary key | values: BUL, ESK ), Breeds.breed_name ( text | values: Eskimo, Husky ) ]
table Charges, columns = [ Charges.charge_id ( integer | primary key | values: 1, 2 ), Charges.charge_type ( text | values: Daily Accommodation, Drugs ), Charges.charge_amount ( real | values: 98, 322 ) ]
table Sizes, columns = [ Sizes.size_code ( text | primary key | values: LGE, MED ), Sizes.size_description ( text | values: Small, Medium ) ]
table Treatment_Types, columns = [ Treatment_Types.treatment_type_code ( text | primary key | values: EXAM, VAC ), Treatment_Types.treatment_type_description ( text | values: Physical examination, Vaccination ) ]
table Owners, columns = [ Owners.owner_id ( integer | primary key | values: 1, 2 ), Owners.first_name ( text | values: Nora, Melisa ), Owners.last_name ( text | values: Haley, DuBuque ), Owners.street ( text | values: 0647 Hintz Village Apt. 024, 1204 Mae Highway Apt. 107 ), Owners.city ( text | values: Lake Tia, Port Reannamouth ), Owners.state ( text | values: Wisconsin, Virginia ), Owners.zip_code ( text | values: 93165, 45244 ), Owners.email_address ( text | values: lynn81@example.org, ykris@example.com ), Owners.home_phone ( text | values: 1-682-845-0116x63235, (799)563-0260x454 ), Owners.cell_number ( text | values: 478.978.0729, (722)768-5439x484 ) ]
table Dogs, columns = [ Dogs.dog_id ( integer | primary key | values: 1, 2 ), Dogs.owner_id ( integer | values: 3, 11 ), Dogs.abandoned_yn ( text | values: 1, 0 ), Dogs.breed_code ( text | values: ESK, BUL ), Dogs.size_code ( text | values: LGE, MED ), Dogs.name ( text | values: Kacey, Hipolito ), Dogs.age ( text | values: 6, 9 ), Dogs.date_of_birth ( datetime | values: 2012-01-27 05:11:53, 2013-02-13 05:15:21 ), Dogs.gender ( text | values: 1, 0 ), Dogs.weight ( text | values: 7.57, 1.72 ), Dogs.date_arrived ( datetime | values: 2017-09-08 20:10:13, 2017-12-22 05:02:02 ), Dogs.date_adopted ( datetime | values: 2018-03-06 16:32:11, 2018-03-25 08:12:51 ), Dogs.date_departed ( datetime | values: 2018-03-25 06:58:44, 2018-03-25 02:11:32 ) ]
table Professionals, columns = [ Professionals.professional_id ( integer | primary key | values: 1, 2 ), Professionals.role_code ( text | values: Employee, Veterenarian ), Professionals.first_name ( text | values: Taryn, Jayson ), Professionals.street ( text | values: 6915 Oberbrunner Point Suite 491
Gleasonville, LA , 88665 Terence Lodge Apt. 904
Corneliusfort, NC 194 ), Professionals.city ( text | values: West Heidi, North Odellfurt ), Professionals.state ( text | values: Indiana, Connecticut ), Professionals.zip_code ( text | values: 06646, 43129 ), Professionals.last_name ( text | values: Braun, Ullrich ), Professionals.email_address ( text | values: deanna.schuster@example.com, lucile.shanahan@example.org ), Professionals.home_phone ( text | values: +71(6)2898266914, +02(1)0259033559 ), Professionals.cell_number ( text | values: (275)939-2435x80863, 889-940-2676 ) ]
table Treatments, columns = [ Treatments.treatment_id ( integer | primary key | values: 1, 2 ), Treatments.dog_id ( integer | values: 14, 4 ), Treatments.professional_id ( integer | values: 9, 10 ), Treatments.treatment_type_code ( text | values: WALK, VAC ), Treatments.date_of_treatment ( datetime | values: 2018-03-19 04:39:54, 2018-03-15 20:25:34 ), Treatments.cost_of_treatment ( real | values: 567, 147 ) ]
foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code

# Here are some example questions that CAN be answered by the schema below:
-- Which states have both owners and professionals living there?
-- Find the states where both owners and professionals live.
-- What is the average age of the dogs who have gone through any treatments?
-- Find the average age of the dogs who went through treatments.
-- Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.
------------------------------------------------------------------------------------------
database_id: music_1
database schema :
table genre, columns = [ genre.g_name ( text | primary key | values: blues, folk ), genre.rating ( text | values: 8, 7 ), genre.most_popular_in ( text | values: Bangladesh, Sylhet,Chittagong,Kustia ) ]
table artist, columns = [ artist.artist_name ( text | primary key | values: Enrique, Farida ), artist.country ( text | values: India, Bangladesh ), artist.gender ( text | values: Male, Female ), artist.preferred_genre ( text | values: tagore, nazrul ) ]
table files, columns = [ files.f_id ( integer | primary key | values: 1, 2 ), files.artist_name ( text | values: Shrikanta, Prity ), files.file_size ( text | values: 3.78 MB, 4.12 MB ), files.duration ( text | values: 3:45, 2:56 ), files.formats ( text | values: mp4, mp3 ) ]
table song, columns = [ song.song_name ( text | primary key | values: Aj ei akash, Ami opar hoye ), song.artist_name ( text | values: Shrikanta, Prity ), song.country ( text | values: India, Bangladesh ), song.f_id ( integer | values: 1, 2 ), song.genre_is ( text | values: tagore, nazrul ), song.rating ( real | values: 8, 5 ), song.languages ( text | values: bangla, english ), song.releasedate ( datetime | values: 28-AUG-2011, 21-SEP-1997 ), song.resolution ( real | values: 1080, 512 ) ]
foreign keys:
artist.preferred_genre = genre.g_name
files.artist_name = artist.artist_name
song.genre_is = genre.g_name
song.f_id = files.f_id
song.artist_name = artist.artist_name

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the song that was released in the most recent year?
-- What is the name of the song that was released most recently?
-- What is the id of the longest song?
-- Find the id of the song that lasts the longest.
-- Find the names of all English songs.
------------------------------------------------------------------------------------------
database_id: company_employee
database schema :
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Age ( real | values: 27, 25 ), people.Name ( text | values: Reggie Lewis, Brad Lohaus ), people.Nationality ( text | values: United States, United Kindom ), people.Graduation_College ( text | values: Northeastern, Iowa ) ]
table company, columns = [ company.Company_ID ( integer | primary key | values: 1.0, 2.0 ), company.Name ( text | values: ExxonMobil, JPMorgan Chase ), company.Headquarters ( text | values: USA, Netherlands ), company.Industry ( text | values: Oil and gas, Banking ), company.Sales_in_Billion ( real | values: 433.5, 110.8 ), company.Profits_in_Billion ( real | values: 41.1, 19.0 ), company.Assets_in_Billion ( real | values: 331.1, 2265.8 ), company.Market_Value_in_Billion ( real | values: 407.4, 170.1 ) ]
table employment, columns = [ employment.Company_ID ( integer | primary key | values: 7, 11 ), employment.People_ID ( integer | values: 4, 3 ), employment.Year_working ( real | values: 2, 3 ) ]
foreign keys:
employment.People_ID = people.People_ID
employment.Company_ID = company.Company_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many companies are headquartered in the US?
-- List the names of companies by ascending number of sales.
-- What are the headquarters and industries of all companies?
-- Show the names of companies in the banking or retailing industry?
-- What is the maximum and minimum market value of companies?
------------------------------------------------------------------------------------------
database_id: farm
database schema :
table city, columns = [ city.City_ID ( integer | primary key | values: 1, 2 ), city.Official_Name ( text | values: Grand Falls/Grand-Sault, Perth-Andover ), city.Status ( text | values: Town, Village ), city.Area_km_2 ( real | values: 18.06, 8.89 ), city.Population ( real | values: 5706.0, 1778.0 ), city.Census_Ranking ( text | values: 636 of 5008, 1442 of 5,008 ) ]
table farm, columns = [ farm.Farm_ID ( integer | primary key | values: 1, 2 ), farm.Year ( real | values: 1927, 1928 ), farm.Total_Horses ( real | values: 5056.5, 5486.9 ), farm.Working_Horses ( real | values: 3900.1, 4090.5 ), farm.Total_Cattle ( real | values: 8374.5, 8604.8 ), farm.Oxen ( real | values: 805.5, 895.3 ), farm.Bulls ( real | values: 31.6, 32.8 ), farm.Cows ( real | values: 3852.1, 3987.0 ), farm.Pigs ( real | values: 4412.4, 6962.9 ), farm.Sheep_and_Goats ( real | values: 7956.3, 8112.2 ) ]
table farm_competition, columns = [ farm_competition.Competition_ID ( integer | primary key | values: 1, 2 ), farm_competition.Year ( real | values: 2013, 2006 ), farm_competition.Theme ( text | values: Carnival M is back!, Codehunters ), farm_competition.Host_city_ID ( integer | values: 1, 2 ), farm_competition.Hosts ( text | values: Miley Cyrus Jared Leto and Karen Mok, Leehom Wang and Kelly Rowland ) ]
table competition_record, columns = [ competition_record.Competition_ID ( integer | primary key | values: 1, 2 ), competition_record.Farm_ID ( integer | values: 2, 3 ), competition_record.Rank ( real | values: 1, 2 ) ]
foreign keys:
farm_competition.Host_city_ID = city.City_ID
competition_record.Farm_ID = farm.Farm_ID
competition_record.Competition_ID = farm_competition.Competition_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many farms are there?
-- Count the number of farms.
-- List the total number of horses on farms in ascending order.
-- What is the total horses record for each farm, sorted ascending?
-- What are the hosts of competitions whose theme is not "Aliens"?
------------------------------------------------------------------------------------------
database_id: solvency_ii
database schema :
table Addresses, columns = [ Addresses.Address_ID ( integer | primary key | values: 1, 2 ), Addresses.address_details ( text | values: 465 Emely Bypass
West Mafalda, CO 23309, 669 Carter Trafficway
Port Delbert, OK 66249 ) ]
table Locations, columns = [ Locations.Location_ID ( integer | primary key | values: 1, 2 ), Locations.Other_Details ( text | values: Rowe PLC, Ebert, Green and Bogisich ) ]
table Products, columns = [ Products.Product_ID ( integer | primary key | values: 1, 3 ), Products.Product_Type_Code ( text | values: Books, Food ), Products.Product_Name ( text | values: Business Policy, Special Dinning ), Products.Product_Price ( real | values: 1336.26, 2894.94 ) ]
table Parties, columns = [ Parties.Party_ID ( integer | primary key | values: 3, 4 ), Parties.Party_Details ( text | values: European People's Party, European Free Alliance ) ]
table Assets, columns = [ Assets.Asset_ID ( integer | primary key | values: 1, 2 ), Assets.Other_Details ( text | values: Transportation Cars, Meeting Rooms ) ]
table Channels, columns = [ Channels.Channel_ID ( integer | primary key | values: 1, 2 ), Channels.Other_Details ( text | values: 145, 348 ) ]
table Finances, columns = [ Finances.Finance_ID ( integer | primary key | values: 1, 2 ), Finances.Other_Details ( text | values: Mutual, Good ) ]
table Events, columns = [ Events.Event_ID ( integer | primary key | values: 1, 2 ), Events.Address_ID ( integer | values: 3, 15 ), Events.Channel_ID ( real | values: 12, 13 ), Events.Event_Type_Code ( text | values: Trade Show, Press Conferenc ), Events.Finance_ID ( integer | values: 2, 8 ), Events.Location_ID ( integer | values: 13, 11 ) ]
table Products_in_Events, columns = [ Products_in_Events.Product_in_Event_ID ( integer | primary key | values: 13, 23 ), Products_in_Events.Event_ID ( integer | values: 4, 8 ), Products_in_Events.Product_ID ( integer | values: 29, 3 ) ]
table Parties_in_Events, columns = [ Parties_in_Events.Party_ID ( integer | primary key | values: 3, 4 ), Parties_in_Events.Event_ID ( integer | values: 7, 8 ), Parties_in_Events.Role_Code ( text | values: Organizer, Participant ) ]
table Agreements, columns = [ Agreements.Document_ID ( integer | primary key | values: 1, 2 ), Agreements.Event_ID ( integer | values: 13, 15 ) ]
table Assets_in_Events, columns = [ Assets_in_Events.Asset_ID ( integer | primary key | values: 1, 2 ), Assets_in_Events.Event_ID ( integer | values: 4, 5 ) ]
foreign keys:
Events.Finance_ID = Finances.Finance_ID
Events.Address_ID = Addresses.Address_ID
Events.Location_ID = Locations.Location_ID
Products_in_Events.Product_ID = Products.Product_ID
Products_in_Events.Event_ID = Events.Event_ID
Parties_in_Events.Event_ID = Events.Event_ID
Parties_in_Events.Party_ID = Parties.Party_ID
Agreements.Event_ID = Events.Event_ID
Assets_in_Events.Event_ID = Events.Event_ID
Assets_in_Events.Event_ID = Events.Event_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many products are there?
-- List the name of products in ascending order of price.
-- What are the names and type codes of products?
-- Show the prices of the products named "Dining" or "Trading Policy".
-- What is the average price for products?
------------------------------------------------------------------------------------------
database_id: city_record
database schema :
table city, columns = [ city.City_ID ( integer | primary key | values: 1, 2 ), city.City ( text | values: Shanghai, Nanjing ( Jiangsu ) ), city.Hanzi ( text | values: 上海, 南京 ), city.Hanyu_Pinyin ( text | values: Shànghǎi, Nánjīng ), city.Regional_Population ( real | values: 23019148, 8004680 ), city.GDP ( real | values: 1919.57, 614.55 ) ]
table match, columns = [ match.Match_ID ( integer | primary key | values: 1, 2 ), match.Date ( text | values: 18 February 1992, 19 July 1992 ), match.Venue ( text | values: Estadio Cuscatlán , San Salvador , El Salvador, Estadio Rigoberto López , Managua , Nicaragua ), match.Score ( text | values: 1-0, 3-0 ), match.Result ( text | values: 2-0, 5-0 ), match.Competition ( text | values: Friendly match, 1994 FIFA World Cup qualification ) ]
table temperature, columns = [ temperature.City_ID ( integer | primary key | values: 1, 2 ), temperature.Jan ( real | values: 17.8, 26.1 ), temperature.Feb ( real | values: 17.8, 26.1 ), temperature.Mar ( real | values: 18.3, 26.1 ), temperature.Apr ( real | values: 18.9, 26.1 ), temperature.Jun ( real | values: 20.0, 27.8 ), temperature.Jul ( real | values: 20.6, 27.8 ), temperature.Aug ( real | values: 20.6, 28.3 ), temperature.Sep ( real | values: 20.6, 28.3 ), temperature.Oct ( real | values: 20.0, 28.3 ), temperature.Nov ( real | values: 19.4, 27.2 ), temperature.Dec ( real | values: 18.3, 26.7 ) ]
table hosting_city, columns = [ hosting_city.Year ( integer | primary key | values: 2008, 2009 ), hosting_city.Match_ID ( integer | values: 1, 2 ), hosting_city.Host_City ( text | values: 1, 2 ) ]
foreign keys:
temperature.City_ID = city.City_ID
hosting_city.Match_ID = match.Match_ID
hosting_city.Host_City = city.City_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is id of the city that hosted events in the most recent year?
-- Find the city that hosted some events in the most recent year. What is the id of this city?
-- Find the match ids of the cities that hosted competition "1994 FIFA World Cup qualification"?
-- What is the match id of the competition called "1994 FIFA World Cup qualification"?
-- Find the cities which were once a host city after 2010?
------------------------------------------------------------------------------------------
database_id: swimming
database schema :
table swimmer, columns = [ swimmer.ID ( integer | primary key | values: 1, 2 ), swimmer.name ( text | values: Przemysław Stańczyk, Craig Stevens ), swimmer.Nationality ( text | values: Poland, Australia ), swimmer.meter_100 ( real | values: 57.31, 57.35 ), swimmer.meter_200 ( text | values: 1:57.10, 1:56.34 ), swimmer.meter_300 ( text | values: 2:56.02, 2:55.90 ), swimmer.meter_400 ( text | values: 3:55.36, 3:55.72 ), swimmer.meter_500 ( text | values: 4:54.21, 4:55.08 ), swimmer.meter_600 ( text | values: 5:52.59, 5:54.45 ), swimmer.meter_700 ( text | values: 6:50.91, 6:52.69 ), swimmer.Time ( text | values: 7:47.91, 7:48.67 ) ]
table stadium, columns = [ stadium.ID ( integer | primary key | values: 1, 2 ), stadium.name ( text | values: Nou Mestalla, Gazprom Arena ), stadium.Capacity ( real | values: 75000, 69501 ), stadium.City ( text | values: Valencia, Saint Petersburg ), stadium.Country ( text | values: Spain, Russia ), stadium.Opening_year ( real | values: 2004, 2005 ) ]
table event, columns = [ event.ID ( integer | primary key | values: 1, 2 ), event.Name ( text | values: FINA, Pacific ), event.Stadium_ID ( integer | values: 1, 10 ), event.Year ( text | values: 2016, 2011 ) ]
table record, columns = [ record.ID ( real | values: 1, 2 ), record.Result ( text | values: NC, Win ), record.Swimmer_ID ( integer | primary key | values: 1, 2 ), record.Event_ID ( integer | values: 1, 2 ) ]
foreign keys:
event.Stadium_ID = stadium.ID
record.Swimmer_ID = swimmer.ID
record.Event_ID = event.ID

# Here are some example questions that CAN be answered by the schema below:
-- How many events are there?
-- List all the event names by year from the most recent to the oldest.
-- What is the name of the event that happened in the most recent year?
-- How many stadiums are there?
-- Find the name of the stadium that has the maximum capacity.
------------------------------------------------------------------------------------------
database_id: flight_2
database schema :
table airlines, columns = [ airlines.uid ( integer | primary key | values: 1, 2 ), airlines.Airline ( text | values: United Airlines, US Airways ), airlines.Abbreviation ( text | values: UAL, USAir ), airlines.Country ( text | values: USA ) ]
table airports, columns = [ airports.City ( text | values: Aberdeen , Abilene  ), airports.AirportCode ( text | primary key | values: AAF, ABI ), airports.AirportName ( text | values: Phillips AAF , Municipal  ), airports.Country ( text | values: United States  ), airports.CountryAbbrev ( text | values: US , US ) ]
table flights, columns = [ flights.Airline ( integer | primary key | values: 1, 2 ), flights.FlightNo ( real | values: 28, 29 ), flights.SourceAirport ( text | values:  APG,  ASY ), flights.DestAirport ( text | values:  ASY,  APG ) ]
foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode

# Here are some example questions that CAN be answered by the schema below:
-- Which country does Airline "JetBlue Airways" belong to?
-- What country is Jetblue Airways affiliated with?
-- What is the abbreviation of Airline "JetBlue Airways"?
-- Which abbreviation corresponds to Jetblue Airways?
-- List all airline names and their abbreviations in "USA".
------------------------------------------------------------------------------------------
database_id: election
database schema :
table county, columns = [ county.County_Id ( integer | primary key | values: 1, 2 ), county.County_name ( text | values: Howard, Baltimore County ), county.Population ( real | values: 21000.0, 90000.0 ), county.Zip_code ( text | values: D21, D08 ) ]
table party, columns = [ party.Party_ID ( integer | primary key | values: 1, 2 ), party.Year ( real | values: 1998.0, 2002.0 ), party.Party ( text | values: Democratic, Liberal ), party.Governor ( text | values: Peter Vallone, Betsy McCaughey Ross ), party.Lieutenant_Governor ( text | values: Sandra Frankel, Jonathan Reiter ), party.Comptroller ( text | values: Carl McCall, Alan Hevesi ), party.Attorney_General ( text | values: Eliot Spitzer, Andrew Cuomo ), party.US_Senate ( text | values: Charles Schumer, (no election) ) ]
table election, columns = [ election.Election_ID ( integer | primary key | values: 1, 2 ), election.Counties_Represented ( text | values: 09.1 9A, 12.1 12A ), election.District ( integer | values: 1, 2 ), election.Delegate ( text | values: Bates, Gail H. Gail H. Bates, Miller, Warren E. Warren E. Miller ), election.Party ( integer | values: 1, 2 ), election.First_Elected ( real | values: 2002.0, 2003.0 ), election.Committee ( text | values: Appropriations, Economic Matters ) ]
foreign keys:
election.District = county.County_Id
election.Party = party.Party_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many counties are there in total?
-- Count the total number of counties.
-- Show the county name and population of all counties.
-- What are the name and population of each county?
-- Show the average population of all counties.
------------------------------------------------------------------------------------------
database_id: manufactory_1
database schema :
table Manufacturers, columns = [ Manufacturers.Code ( integer | primary key | values: 1, 2 ), Manufacturers.Name ( text | values: Sony, Creative Labs ), Manufacturers.Headquarter ( text | values: Tokyo, Austin ), Manufacturers.Founder ( text | values: Andy, Owen ), Manufacturers.Revenue ( real | values: 120.0, 100.0 ) ]
table Products, columns = [ Products.Code ( integer | primary key | values: 1, 2 ), Products.Name ( text | values: Hard drive, Memory ), Products.Price ( real | values: 240, 120 ), Products.Manufacturer ( integer | values: 5, 6 ) ]
foreign keys:
Products.Manufacturer = Manufacturers.Code

# Here are some example questions that CAN be answered by the schema below:
-- Who is the founder of Sony?
-- Return the founder of Sony.
-- Where is the headquarter of the company founded by James?
-- What is the headquarter of the company whose founder is James?
-- Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.
------------------------------------------------------------------------------------------
database_id: debate
database schema :
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.District ( text | values: New York 1, New York 2 ), people.Name ( text | values: Luther C. Carter, James Humphrey ), people.Party ( text | values: Republican, Democratic ), people.Age ( real | values: 35, 38 ) ]
table debate, columns = [ debate.Debate_ID ( integer | primary key | values: 1, 2 ), debate.Date ( text | values: October 21, 2011, December 17, 2014 ), debate.Venue ( text | values: Manama , Bahrain, Doha , Qatar ), debate.Num_of_Audience ( real | values: 342, 134 ) ]
table debate_people, columns = [ debate_people.Debate_ID ( integer | primary key | values: 1, 3 ), debate_people.Affirmative ( integer | values: 1, 4 ), debate_people.Negative ( integer | values: 10, 7 ), debate_people.If_Affirmative_Win ( text | values: F, T ) ]
foreign keys:
debate_people.Negative = people.People_ID
debate_people.Affirmative = people.People_ID
debate_people.Debate_ID = debate.Debate_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many debates are there?
-- List the venues of debates in ascending order of the number of audience.
-- What are the date and venue of each debate?
-- List the dates of debates with number of audience bigger than 150
-- Show the names of people aged either 35 or 36.
------------------------------------------------------------------------------------------
database_id: network_2
database schema :
table Person, columns = [ Person.name ( text | primary key | values: Alice, Bob ), Person.age ( real | values: 25, 35 ), Person.city ( text | values: new york city, salt lake city ), Person.gender ( text | values: female, male ), Person.job ( text | values: student, engineer ) ]
table PersonFriend, columns = [ PersonFriend.name ( text | values: Alice, Zach ), PersonFriend.friend ( text | values: Bob, Dan ), PersonFriend.year ( real | values: 10, 12 ) ]
foreign keys:
PersonFriend.friend = Person.name
PersonFriend.name = Person.name

# Here are some example questions that CAN be answered by the schema below:
-- How many friends does Dan have?
-- How many friends does Dan have?
-- How many females does this network has?
-- How many females are in the network?
-- What is the average age for all person?
------------------------------------------------------------------------------------------
database_id: local_govt_in_alabama
database schema :
table Services, columns = [ Services.Service_ID ( integer | primary key | values: 2, 5 ), Services.Service_Type_Code ( text | values: Marriage, Death Proof ) ]
table Participants, columns = [ Participants.Participant_ID ( integer | primary key | values: 9, 26 ), Participants.Participant_Type_Code ( text | values: Organizer, Participant ), Participants.Participant_Details ( text | values: Karlee Batz, Vilma Schinner ) ]
table Events, columns = [ Events.Event_ID ( integer | primary key | values: 3, 8 ), Events.Service_ID ( integer | values: 5, 8 ), Events.Event_Details ( text | values: Success, Fail ) ]
table Participants_in_Events, columns = [ Participants_in_Events.Event_ID ( integer | primary key | values: 3, 8 ), Participants_in_Events.Participant_ID ( integer | values: 26, 66 ) ]
foreign keys:
Events.Service_ID = Services.Service_ID
Participants_in_Events.Event_ID = Events.Event_ID
Participants_in_Events.Participant_ID = Participants.Participant_ID

# Here are some example questions that CAN be answered by the schema below:
-- what are the event details of the services that have the type code 'Marriage'?
-- What are the ids and details of events that have more than one participants?
-- How many events have each participants attended? List the participant id, type and the number.
-- What are all the the participant ids, type code and details?
-- How many participants belong to the type 'Organizer'?
------------------------------------------------------------------------------------------
database_id: climbing
database schema :
table mountain, columns = [ mountain.Mountain_ID ( integer | primary key | values: 1, 2 ), mountain.Name ( text | values: Kibo (Uhuru Pk), Mount Kenya (Batian) ), mountain.Height ( real | values: 5895.0, 5199.0 ), mountain.Prominence ( real | values: 5885.0, 3825.0 ), mountain.Range ( text | values: Kilimanjaro, Mount Kenya ), mountain.Country ( text | values: Tanzania, Kenya ) ]
table climber, columns = [ climber.Climber_ID ( integer | primary key | values: 1, 2 ), climber.Name ( text | values: Klaus Enders, Siegfried Schauzu ), climber.Country ( text | values: West Germany, Switzerland ), climber.Time ( text | values: 1:13.05.6, 1:14.56.4 ), climber.Points ( real | values: 15.0, 12.0 ), climber.Mountain_ID ( integer | values: 1, 2 ) ]
foreign keys:
climber.Mountain_ID = mountain.Mountain_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many climbers are there?
-- Count the number of climbers.
-- List the names of climbers in descending order of points.
-- What are the names of the climbers, ordered by points descending?
-- List the names of climbers whose country is not Switzerland.
------------------------------------------------------------------------------------------
database_id: e_learning
database schema :
table Course_Authors_and_Tutors, columns = [ Course_Authors_and_Tutors.author_id ( integer | primary key | values: 1, 2 ), Course_Authors_and_Tutors.author_tutor_ATB ( text | values: 331, 975 ), Course_Authors_and_Tutors.login_name ( text | values: jmckenzie, heidenreich.ara ), Course_Authors_and_Tutors.password ( text | values: c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2 ), Course_Authors_and_Tutors.personal_name ( text | values: Cathrine, Retha ), Course_Authors_and_Tutors.middle_name ( text | values: Ruthie, Corene ), Course_Authors_and_Tutors.family_name ( text | values: Grant, Armstrong ), Course_Authors_and_Tutors.gender_mf ( text | values: 0, 1 ), Course_Authors_and_Tutors.address_line_1 ( text | values: 756 Monahan Mews
Spinkashire, NJ 64230-5098, 98623 Huels Manor
Jasttown, DE 31611 ) ]
table Students, columns = [ Students.student_id ( integer | primary key | values: 1, 2 ), Students.date_of_registration ( datetime | values: 2015-07-22 13:32:35, 2015-07-02 00:21:42 ), Students.date_of_latest_logon ( datetime | values: 2017-10-17 22:52:26, 2017-06-24 22:16:27 ), Students.login_name ( text | values: annamae.hoppe, wmiller ), Students.password ( text | values: db8765bb6f, 35faf8182a ), Students.personal_name ( text | values: Wilson, Karson ), Students.middle_name ( text | values: Aubrey, Luella ), Students.family_name ( text | values: Ward, Jaskolski ) ]
table Subjects, columns = [ Subjects.subject_id ( integer | primary key | values: 1, 2 ), Subjects.subject_name ( text | values: Computer Science, Arts ) ]
table Courses, columns = [ Courses.course_id ( integer | primary key | values: 1, 2 ), Courses.author_id ( integer | values: 8, 6 ), Courses.subject_id ( integer | values: 1, 2 ), Courses.course_name ( text | values: database, advanced database ), Courses.course_description ( text | values: database, advanced database ) ]
table Student_Course_Enrolment, columns = [ Student_Course_Enrolment.registration_id ( integer | primary key | values: 1, 2 ), Student_Course_Enrolment.student_id ( integer | values: 11, 15 ), Student_Course_Enrolment.course_id ( integer | values: 2, 4 ), Student_Course_Enrolment.date_of_enrolment ( datetime | values: 2017-10-09 07:09:02, 2017-11-13 12:49:33 ), Student_Course_Enrolment.date_of_completion ( datetime | values: 2018-02-26 07:48:52, 2018-03-04 01:24:56 ) ]
table Student_Tests_Taken, columns = [ Student_Tests_Taken.registration_id ( integer | values: 12, 10 ), Student_Tests_Taken.date_test_taken ( datetime | values: 2018-03-25 03:27:16, 2018-03-25 21:50:22 ), Student_Tests_Taken.test_result ( text | values: Fail, Pass ) ]
foreign keys:
Courses.subject_id = Subjects.subject_id
Courses.author_id = Course_Authors_and_Tutors.author_id
Student_Course_Enrolment.student_id = Students.student_id
Student_Course_Enrolment.course_id = Courses.course_id
Student_Tests_Taken.registration_id = Student_Course_Enrolment.registration_id

# Here are some example questions that CAN be answered by the schema below:
-- How many courses are there in total?
-- Find the total number of courses offered.
-- What are the descriptions of the courses with name "database"?
-- Return the description for the courses named "database".
-- What are the addresses of the course authors or tutors with personal name "Cathrine"
------------------------------------------------------------------------------------------
database_id: scientist_1
database schema :
table Scientists, columns = [ Scientists.SSN ( integer | primary key | values: 123234877, 152934485 ), Scientists.Name ( text | values: Michael Rogers, Anand Manikutty ) ]
table Projects, columns = [ Projects.Code ( text | primary key | values: AeH1, AeH2 ), Projects.Name ( text | values: Winds: Studying Bernoullis Principle, Aerodynamics and Bridge Design ), Projects.Hours ( real | values: 156, 189 ) ]
table AssignedTo, columns = [ AssignedTo.Scientist ( integer | primary key | values: 123234877, 152934485 ), AssignedTo.Project ( text | values: AeH1, AeH3 ) ]
foreign keys:
AssignedTo.Project = Projects.Code
AssignedTo.Scientist = Scientists.SSN

# Here are some example questions that CAN be answered by the schema below:
-- Find the total number of scientists.
-- How many scientists are there?
-- Find the total hours of all projects.
-- What is the total number of hours for all projects?
-- How many different scientists are assigned to any project?
------------------------------------------------------------------------------------------
database_id: ship_1
database schema :
table captain, columns = [ captain.Captain_ID ( integer | primary key | values: 1, 2 ), captain.Name ( text | values: Captain Sir Henry Langford, Captain Beves Conway ), captain.Ship_ID ( integer | values: 1, 2 ), captain.age ( text | values: 40, 54 ), captain.Class ( text | values: Third-rate ship of the line, Cutter ), captain.Rank ( text | values: Midshipman, Lieutenant ) ]
table Ship, columns = [ Ship.Ship_ID ( integer | primary key | values: 1, 2 ), Ship.Name ( text | values: HMS Manxman, HMS Gorgon ), Ship.Type ( text | values: Panamax ), Ship.Built_Year ( real | values: 1997.0, 1998.0 ), Ship.Class ( text | values: KR, GL ), Ship.Flag ( text | values: Panama, Malta ) ]
foreign keys:
captain.Ship_ID = Ship.Ship_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many different captain ranks are there?
-- Count the number of different ranks of captain.
-- How many captains are in each rank?
-- Count the number of captains that have each rank.
-- How many captains with younger than 50 are in each rank?
------------------------------------------------------------------------------------------
database_id: entertainment_awards
database schema :
table festival_detail, columns = [ festival_detail.Festival_ID ( integer | primary key | values: 1, 2 ), festival_detail.Festival_Name ( text | values: Panasonic Awards, Flower Awards ), festival_detail.Chair_Name ( text | values: Raymond Floyd, Charles Coody ), festival_detail.Location ( text | values: United States ), festival_detail.Year ( real | values: 2006, 2007 ), festival_detail.Num_of_Audience ( real | values: 152, 155 ) ]
table artwork, columns = [ artwork.Artwork_ID ( integer | primary key | values: 1, 2 ), artwork.Type ( text | values: Program Music/Variety Show, Presenter Music/Variety Show ), artwork.Name ( text | values: Indonesian Idol, I Know ) ]
table nomination, columns = [ nomination.Artwork_ID ( integer | primary key | values: 1, 2 ), nomination.Festival_ID ( integer | values: 2, 1 ), nomination.Result ( text | values: Nominated, Won ) ]
foreign keys:
nomination.Festival_ID = festival_detail.Festival_ID
nomination.Artwork_ID = artwork.Artwork_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many artworks are there?
-- List the name of artworks in ascending alphabetical order.
-- List the name of artworks whose type is not "Program Talent Show".
-- What are the names and locations of festivals?
-- What are the names of the chairs of festivals, sorted in ascending order of the year held?
------------------------------------------------------------------------------------------
database_id: allergy_1
database schema :
table Allergy_Type, columns = [ Allergy_Type.Allergy ( text | primary key | values: Anchovies, Bee Stings ), Allergy_Type.AllergyType ( text | values: food, environmental ) ]
table Has_Allergy, columns = [ Has_Allergy.StuID ( integer | values: 1001, 1002 ), Has_Allergy.Allergy ( text | values: Cat, Shellfish ) ]
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
foreign keys:
Has_Allergy.Allergy = Allergy_Type.Allergy
Has_Allergy.StuID = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- How many allergies are there?
-- How many allergy entries are there?
-- How many different allergy types exist?
-- How many distinct allergies are there?
-- Show all allergy types.
------------------------------------------------------------------------------------------
database_id: imdb
database schema :
table actor, columns = [ actor.aid ( integer | primary key | values: N/A ), actor.gender ( text | values: N/A ), actor.name ( text | values: N/A ), actor.nationality ( text | values: N/A ), actor.birth_city ( text | values: N/A ), actor.birth_year ( real | values: N/A ) ]
table copyright, columns = [ copyright.id ( integer | primary key | values: N/A ), copyright.msid ( real | values: N/A ), copyright.cid ( real | values: N/A ) ]
table cast, columns = [ cast.id ( integer | primary key | values: N/A ), cast.msid ( integer | values: N/A ), cast.aid ( integer | values: N/A ), cast.role ( real | values: N/A ) ]
table genre, columns = [ genre.gid ( integer | primary key | values: N/A ), genre.genre ( text | values: N/A ) ]
table classification, columns = [ classification.id ( integer | primary key | values: N/A ), classification.msid ( integer | values: N/A ), classification.gid ( integer | values: N/A ) ]
table company, columns = [ company.id ( integer | primary key | values: N/A ), company.name ( text | values: N/A ), company.country_code ( text | values: N/A ) ]
table director, columns = [ director.did ( integer | primary key | values: N/A ), director.gender ( text | values: N/A ), director.name ( text | values: N/A ), director.nationality ( text | values: N/A ), director.birth_city ( text | values: N/A ), director.birth_year ( real | values: N/A ) ]
table producer, columns = [ producer.pid ( integer | primary key | values: N/A ), producer.gender ( text | values: N/A ), producer.name ( text | values: N/A ), producer.nationality ( text | values: N/A ), producer.birth_city ( text | values: N/A ), producer.birth_year ( real | values: N/A ) ]
table directed_by, columns = [ directed_by.id ( integer | primary key | values: N/A ), directed_by.msid ( integer | values: N/A ), directed_by.did ( integer | values: N/A ) ]
table keyword, columns = [ keyword.id ( integer | primary key | values: N/A ), keyword.keyword ( text | values: N/A ) ]
table made_by, columns = [ made_by.id ( integer | primary key | values: N/A ), made_by.msid ( integer | values: N/A ), made_by.pid ( integer | values: N/A ) ]
table movie, columns = [ movie.mid ( integer | primary key | values: N/A ), movie.title ( text | values: N/A ), movie.release_year ( real | values: N/A ), movie.title_aka ( text | values: N/A ), movie.budget ( text | values: N/A ) ]
table tags, columns = [ tags.id ( integer | primary key | values: N/A ), tags.msid ( integer | values: N/A ), tags.kid ( real | values: N/A ) ]
table tv_series, columns = [ tv_series.sid ( integer | primary key | values: N/A ), tv_series.title ( text | values: N/A ), tv_series.release_year ( real | values: N/A ), tv_series.num_of_seasons ( real | values: N/A ), tv_series.num_of_episodes ( real | values: N/A ), tv_series.title_aka ( text | values: N/A ), tv_series.budget ( text | values: N/A ) ]
table writer, columns = [ writer.wid ( integer | primary key | values: N/A ), writer.gender ( text | values: N/A ), writer.name ( real | values: N/A ), writer.nationality ( real | values: N/A ), writer.num_of_episodes ( real | values: N/A ), writer.birth_city ( text | values: N/A ), writer.birth_year ( real | values: N/A ) ]
table written_by, columns = [ written_by.id ( real | values: N/A ), written_by.msid ( integer | values: N/A ), written_by.wid ( integer | values: N/A ) ]
foreign keys:
cast.msid = copyright.msid
cast.aid = actor.aid
classification.msid = copyright.msid
classification.gid = genre.gid
directed_by.did = director.did
directed_by.msid = copyright.msid
made_by.pid = producer.pid
made_by.msid = copyright.msid
tags.msid = copyright.msid
written_by.wid = writer.wid
written_by.msid = copyright.msid

# Here are some example questions that CAN be answered by the schema below:
-- What year is the movie " The Imitation Game " from ?
-- What year was the movie " The Imitation Game " produced
-- What year was " Benedict Cumberbatch " born ?
-- In what year was " Benedict Cumberbatch " born
-- What is the nationality of the actress " Christoph Waltz " ?
------------------------------------------------------------------------------------------
database_id: products_for_hire
database schema :
table Discount_Coupons, columns = [ Discount_Coupons.coupon_id ( integer | primary key | values: 1, 2 ), Discount_Coupons.date_issued ( datetime | values: 2017-09-06 01:33:27, 2018-02-20 09:40:56 ), Discount_Coupons.coupon_amount ( real | values: 500, 686.25 ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.coupon_id ( integer | values: 12, 14 ), Customers.good_or_bad_customer ( text | values: good, bad ), Customers.first_name ( text | values: Geovany, Jailyn ), Customers.last_name ( text | values: Homenick, Gerlach ), Customers.gender_mf ( text | values: 0, 1 ), Customers.date_became_customer ( datetime | values: 2017-10-20 12:13:17, 2015-04-06 21:18:37 ), Customers.date_last_hire ( datetime | values: 2018-02-27 18:55:26, 2018-01-30 04:47:13 ) ]
table Bookings, columns = [ Bookings.booking_id ( integer | primary key | values: 1, 2 ), Bookings.customer_id ( integer | values: 7, 15 ), Bookings.booking_status_code ( text | values: Provisional, Confirmed ), Bookings.returned_damaged_yn ( text | values: 1, 0 ), Bookings.booking_start_date ( datetime | values: 2016-12-07 23:39:17, 2017-06-16 11:42:31 ), Bookings.booking_end_date ( datetime | values: 2018-02-01 16:39:13, 2018-02-19 21:53:31 ), Bookings.count_hired ( text | values: 298, 331 ), Bookings.amount_payable ( real | values: 214.39, 386.92 ), Bookings.amount_of_discount ( real | values: 71.45, 83.82 ), Bookings.amount_outstanding ( real | values: 28.22, 57.62 ), Bookings.amount_of_refund ( real | values: 179.14, 183.68 ) ]
table Products_for_Hire, columns = [ Products_for_Hire.product_id ( integer | primary key | values: 1, 2 ), Products_for_Hire.product_type_code ( text | values: Cutlery, Din_Plates ), Products_for_Hire.daily_hire_cost ( real | values: 26.15, 15.62 ), Products_for_Hire.product_name ( text | values: Book collection C, Book collection B ), Products_for_Hire.product_description ( text | values: Anna Karenina, War and Peace ) ]
table Payments, columns = [ Payments.payment_id ( integer | primary key | values: 1, 2 ), Payments.booking_id ( integer | values: 6, 9 ), Payments.customer_id ( integer | values: 15, 12 ), Payments.payment_type_code ( text | values: Check, Cash ), Payments.amount_paid_in_full_yn ( text | values: 1, 0 ), Payments.payment_date ( datetime | values: 2018-03-09 16:28:00, 2018-03-03 13:39:44 ), Payments.amount_due ( real | values: 369.52, 278.6 ), Payments.amount_paid ( real | values: 206.27, 666.45 ) ]
table Products_Booked, columns = [ Products_Booked.booking_id ( integer | primary key | values: 1, 2 ), Products_Booked.product_id ( integer | values: 2, 4 ), Products_Booked.returned_yn ( text | values: 1 ), Products_Booked.returned_late_yn ( text | values: 1, 0 ), Products_Booked.booked_count ( real | values: 5, 3 ), Products_Booked.booked_amount ( real | values: 309.73, 102.76 ) ]
table View_Product_Availability, columns = [ View_Product_Availability.product_id ( integer | values: 1, 2 ), View_Product_Availability.booking_id ( integer | values: 5, 11 ), View_Product_Availability.status_date ( datetime | primary key | values: 2018-03-18 05:25:55, 2018-03-21 15:20:32 ), View_Product_Availability.available_yn ( text | values: 1, 0 ) ]
foreign keys:
Customers.coupon_id = Discount_Coupons.coupon_id
Bookings.customer_id = Customers.customer_id
Payments.customer_id = Customers.customer_id
Payments.booking_id = Bookings.booking_id
Products_Booked.product_id = Products_for_Hire.product_id
Products_Booked.booking_id = Bookings.booking_id
View_Product_Availability.product_id = Products_for_Hire.product_id
View_Product_Availability.booking_id = Bookings.booking_id

# Here are some example questions that CAN be answered by the schema below:
-- Are the customers holding coupons with amount 500 bad or good?
-- How many bookings did each customer make? List the customer id, first name, and the count.
-- What is the maximum total amount paid by a customer? List the customer id and amount.
-- What are the id and the amount of refund of the booking that incurred the most times of payments?
-- What is the id of the product that is booked for 3 times?
------------------------------------------------------------------------------------------
database_id: candidate_poll
database schema :
table candidate, columns = [ candidate.Candidate_ID ( integer | primary key | values: 1, 2 ), candidate.People_ID ( integer | values: 1, 3 ), candidate.Poll_Source ( text | values: WNBC/Marist Poll, FOX News/Opinion Dynamics Poll ), candidate.Date ( text | values: Feb 12–15, 2007, Feb 13–14, 2007 ), candidate.Support_rate ( real | values: 0.25, 0.17 ), candidate.Consider_rate ( real | values: 0.3, 0.42 ), candidate.Oppose_rate ( real | values: 0.43, 0.32 ), candidate.Unsure_rate ( real | values: 0.2, 0.9 ) ]
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Sex ( text | values: M, F ), people.Name ( text | values: Hubert Henno, Dominique Daquin ), people.Date_of_Birth ( text | values: 06.10.1976, 10.11.1972 ), people.Height ( real | values: 188.0, 197.0 ), people.Weight ( real | values: 83.0, 85.0 ) ]
foreign keys:
candidate.People_ID = people.People_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many candidates are there?
-- Count the number of candidates.
-- Which poll resource provided the most number of candidate information?
-- Return the poll resource associated with the most candidates.
-- what are the top 3 highest support rates?
------------------------------------------------------------------------------------------
database_id: chinook_1
database schema :
table Album, columns = [ Album.AlbumId ( integer | primary key | values: 1, 4 ), Album.Title ( text | values: For Those About To Rock We Salute You, Balls to the Wall ), Album.ArtistId ( integer | values: 1, 2 ) ]
table Artist, columns = [ Artist.ArtistId ( integer | primary key | values: 1, 2 ), Artist.Name ( text | values: AC/DC, Accept ) ]
table Customer, columns = [ Customer.CustomerId ( integer | primary key | values: 1, 3 ), Customer.FirstName ( text | values: Luís, Leonie ), Customer.LastName ( text | values: Gonçalves, Köhler ), Customer.Company ( text | values: Embraer - Empresa Brasileira de Aeronáutica S.A., JetBrains s.r.o. ), Customer.Address ( text | values: Av. Brigadeiro Faria Lima, 2170, Theodor-Heuss-Straße 34 ), Customer.City ( text | values: São José dos Campos, Stuttgart ), Customer.State ( text | values: SP, QC ), Customer.Country ( text | values: Brazil, Germany ), Customer.PostalCode ( text | values: 12227-000, 70174 ), Customer.Phone ( text | values: +55 (12) 3923-5555, +49 0711 2842222 ), Customer.Fax ( text | values: +55 (12) 3923-5566, +420 2 4172 5555 ), Customer.Email ( text | values: luisg@embraer.com.br, leonekohler@surfeu.de ), Customer.SupportRepId ( integer | values: 3, 4 ) ]
table Employee, columns = [ Employee.EmployeeId ( integer | primary key | values: 1, 2 ), Employee.LastName ( text | values: Adams, Edwards ), Employee.FirstName ( text | values: Andrew, Nancy ), Employee.Title ( text | values: General Manager, Sales Manager ), Employee.ReportsTo ( integer | values: 1, 2 ), Employee.BirthDate ( datetime | values: 1962-02-18 00:00:00, 1958-12-08 00:00:00 ), Employee.HireDate ( datetime | values: 2002-08-14 00:00:00, 2002-05-01 00:00:00 ), Employee.Address ( text | values: 11120 Jasper Ave NW, 825 8 Ave SW ), Employee.City ( text | values: Edmonton, Calgary ), Employee.State ( text | values: AB ), Employee.Country ( text | values: Canada ), Employee.PostalCode ( text | values: T5K 2N1, T2P 2T3 ), Employee.Phone ( text | values: +1 (780) 428-9482, +1 (403) 262-3443 ), Employee.Fax ( text | values: +1 (780) 428-3457, +1 (403) 262-3322 ), Employee.Email ( text | values: andrew@chinookcorp.com, nancy@chinookcorp.com ) ]
table Genre, columns = [ Genre.GenreId ( integer | primary key | values: 1, 2 ), Genre.Name ( text | values: Rock, Jazz ) ]
table Invoice, columns = [ Invoice.InvoiceId ( integer | primary key | values: 98, 121 ), Invoice.CustomerId ( integer | values: 1, 2 ), Invoice.InvoiceDate ( datetime | values: 2009-01-01 00:00:00, 2009-01-02 00:00:00 ), Invoice.BillingAddress ( text | values: Theodor-Heuss-Straße 34, Ullevålsveien 14 ), Invoice.BillingCity ( text | values: Stuttgart, Oslo ), Invoice.BillingState ( text | values: AB, MA ), Invoice.BillingCountry ( text | values: Germany, Norway ), Invoice.BillingPostalCode ( text | values: 70174, 0171 ), Invoice.Total ( real | values: 1.98, 3.96 ) ]
table InvoiceLine, columns = [ InvoiceLine.InvoiceLineId ( integer | primary key | values: 579, 1 ), InvoiceLine.InvoiceId ( integer | values: 1, 2 ), InvoiceLine.TrackId ( integer | values: 1, 2 ), InvoiceLine.UnitPrice ( real | values: 0.99, 1.99 ), InvoiceLine.Quantity ( real | values: 1 ) ]
table MediaType, columns = [ MediaType.MediaTypeId ( integer | primary key | values: 1, 2 ), MediaType.Name ( text | values: MPEG audio file, Protected AAC audio file ) ]
table Playlist, columns = [ Playlist.PlaylistId ( integer | primary key | values: 1, 2 ), Playlist.Name ( text | values: Music, Movies ) ]
table PlaylistTrack, columns = [ PlaylistTrack.PlaylistId ( integer | primary key | values: 1, 3 ), PlaylistTrack.TrackId ( integer | values: 1, 2 ) ]
table Track, columns = [ Track.TrackId ( integer | primary key | values: 1, 6 ), Track.Name ( text | values: For Those About To Rock (We Salute You), Balls to the Wall ), Track.AlbumId ( integer | values: 1, 2 ), Track.MediaTypeId ( integer | values: 1, 2 ), Track.GenreId ( integer | values: 1, 2 ), Track.Composer ( text | values: Angus Young, Malcolm Young, Brian Johnson, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman ), Track.Milliseconds ( real | values: 343719, 342562 ), Track.Bytes ( real | values: 11170334, 5510424 ), Track.UnitPrice ( real | values: 0.99, 1.99 ) ]
foreign keys:
Album.ArtistId = Artist.ArtistId
Customer.SupportRepId = Employee.EmployeeId
Employee.ReportsTo = Employee.EmployeeId
Invoice.CustomerId = Customer.CustomerId
InvoiceLine.TrackId = Track.TrackId
InvoiceLine.InvoiceId = Invoice.InvoiceId
PlaylistTrack.TrackId = Track.TrackId
PlaylistTrack.PlaylistId = Playlist.PlaylistId
Track.MediaTypeId = MediaType.MediaTypeId
Track.GenreId = Genre.GenreId
Track.AlbumId = Album.AlbumId

# Here are some example questions that CAN be answered by the schema below:
-- How many albums are there?
-- Find the number of albums.
-- List the names of all music genres.
-- What are the names of different music genres?
-- Find all the customer information in state NY.
------------------------------------------------------------------------------------------
database_id: flight_4
database schema :
table routes, columns = [ routes.rid ( integer | primary key | values: 37, 38 ), routes.dst_apid ( integer | values: 2990, 2962 ), routes.dst_ap ( text | values: KZ, MRV ), routes.src_apid ( integer | values: 2965, 2966 ), routes.src_ap ( text | values: AER, ASF ), routes.alid ( integer | values: 410, 1654 ), routes.airline ( text | values: 2B, 2G ), routes.codeshare ( text | values: Y ) ]
table airports, columns = [ airports.apid ( integer | primary key | values: 1, 2 ), airports.name ( text | values: Goroka Airport, Madang Airport ), airports.city ( text | values: Goroka, Madang ), airports.country ( text | values: Papua New Guinea, Greenland ), airports.x ( real | values: 145.391998291, 145.789001465 ), airports.y ( real | values: -6.081689834590001, -5.20707988739 ), airports.elevation ( real | values: 5282, 20 ), airports.iata ( text | values: GKA, MAG ), airports.icao ( text | values: AYGA, AYMD ) ]
table airlines, columns = [ airlines.alid ( integer | primary key | values: -1, 1 ), airlines.name ( text | values: Unknown, Private flight ), airlines.iata ( text | values: -,  ), airlines.icao ( text | values: N/A, GNL ), airlines.callsign ( text | values: , GENERAL ), airlines.country ( text | values: , United States ), airlines.active ( text | values: Y, N ) ]
foreign keys:
routes.alid = airlines.alid
routes.src_apid = airports.apid
routes.dst_apid = airports.apid

# Here are some example questions that CAN be answered by the schema below:
-- Find the name of the airport in the city of Goroka.
-- What are the names of the airports in the city of Goroka?
-- Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.
-- What is the name, city, country, and elevation for every airport in the city of New York?
-- How many airlines are there?
------------------------------------------------------------------------------------------
database_id: pets_1
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Has_Pet, columns = [ Has_Pet.StuID ( integer | values: 1001, 1002 ), Has_Pet.PetID ( integer | values: 2001, 2002 ) ]
table Pets, columns = [ Pets.PetID ( integer | primary key | values: 2001, 2002 ), Pets.PetType ( text | values: cat, dog ), Pets.pet_age ( real | values: 3, 2 ), Pets.weight ( real | values: 12.0, 13.4 ) ]
foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID

# Here are some example questions that CAN be answered by the schema below:
-- Find the number of pets whose weight is heavier than 10.
-- How many pets have a greater weight than 10?
-- Find the weight of the youngest dog.
-- How much does the youngest dog weigh?
-- Find the maximum weight for each type of pet. List the maximum weight and pet type.
------------------------------------------------------------------------------------------
database_id: dorm_1
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Dorm, columns = [ Dorm.dormid ( real | values: 100, 110 ), Dorm.dorm_name ( text | values: Smith Hall, Bud Jones Hall ), Dorm.student_capacity ( real | values: 85, 116 ), Dorm.gender ( text | values: X, M ) ]
table Dorm_amenity, columns = [ Dorm_amenity.amenid ( real | values: 900, 901 ), Dorm_amenity.amenity_name ( text | values: TV Lounge, Study Room ) ]
table Has_amenity, columns = [ Has_amenity.dormid ( integer | values: 109, 104 ), Has_amenity.amenid ( integer | values: 900, 901 ) ]
table Lives_in, columns = [ Lives_in.stuid ( integer | values: 1001, 1002 ), Lives_in.dormid ( integer | values: 109, 100 ), Lives_in.room_number ( real | values: 105, 112 ) ]
foreign keys:
Has_amenity.amenid = Dorm_amenity.amenid
Has_amenity.dormid = Dorm.dormid
Lives_in.dormid = Dorm.dormid
Lives_in.stuid = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- Find the name of dorms only for female (F gender).
-- What are the names of the all-female dorms?
-- Find the name of dorms that can accommodate more than 300 students.
-- What are the names of all the dorms that can accomdate more than 300 students?
-- How many female students (sex is F) whose age is below 25?
------------------------------------------------------------------------------------------
database_id: journal_committee
database schema :
table journal, columns = [ journal.Journal_ID ( integer | primary key | values: 1, 2 ), journal.Date ( text | values: September 9, 2001, September 23, 2001 ), journal.Theme ( text | values: Miami Dolphins, at Jacksonville Jaguars ), journal.Sales ( real | values: 798, 994 ) ]
table editor, columns = [ editor.Editor_ID ( integer | primary key | values: 1, 2 ), editor.Name ( text | values: Kamila Porczyk, Anna Powierza ), editor.Age ( real | values: 34.0, 35.0 ) ]
table journal_committee, columns = [ journal_committee.Editor_ID ( integer | primary key | values: 1, 3 ), journal_committee.Journal_ID ( integer | values: 13, 6 ), journal_committee.Work_Type ( text | values: Photo, Article ) ]
foreign keys:
journal_committee.Journal_ID = journal.Journal_ID
journal_committee.Editor_ID = editor.Editor_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many editors are there?
-- List the names of editors in ascending order of age.
-- What are the names and ages of editors?
-- List the names of editors who are older than 25.
-- Show the names of editors of age either 24 or 25.
------------------------------------------------------------------------------------------
database_id: flight_1
database schema :
table flight, columns = [ flight.flno ( integer | primary key | values: 2, 7 ), flight.origin ( text | values: Los Angeles, Chicago ), flight.destination ( text | values: Washington D.C., Chicago ), flight.distance ( real | values: 2308, 1749 ), flight.departure_date ( datetime | values: 04/12/2005 09:30, 04/12/2005 08:45 ), flight.arrival_date ( datetime | values: 04/12/2005 09:40, 04/12/2005 08:45 ), flight.price ( real | values: 235.98, 220.98 ), flight.aid ( integer | values: 1, 3 ) ]
table aircraft, columns = [ aircraft.aid ( integer | primary key | values: 1, 2 ), aircraft.name ( text | values: Boeing 747-400, Boeing 737-800 ), aircraft.distance ( real | values: 8430, 3383 ) ]
table employee, columns = [ employee.eid ( integer | primary key | values: 11564812, 15645489 ), employee.name ( text | values: James Smith, Mary Johnson ), employee.salary ( real | values: 120433, 178345 ) ]
table certificate, columns = [ certificate.eid ( integer | primary key | values: 11564812, 90873519 ), certificate.aid ( integer | values: 2, 10 ) ]
foreign keys:
flight.aid = aircraft.aid
certificate.aid = aircraft.aid
certificate.eid = employee.eid

# Here are some example questions that CAN be answered by the schema below:
-- How many aircrafts do we have?
-- How many aircrafts exist in the database?
-- Show name and distance for all aircrafts.
-- What are the names and distances for all airplanes?
-- Show ids for all aircrafts with more than 1000 distance.
------------------------------------------------------------------------------------------
database_id: medicine_enzyme_interaction
database schema :
table medicine, columns = [ medicine.id ( integer | primary key | values: 1, 2 ), medicine.name ( text | values: Amisulpride, Aripiprazole ), medicine.Trade_Name ( text | values: Solian, Abilify ), medicine.FDA_approved ( text | values: No, Yes ) ]
table enzyme, columns = [ enzyme.id ( integer | primary key | values: 1, 2 ), enzyme.name ( text | values: ALA synthase, ALA dehydratase ), enzyme.Location ( text | values: Mitochondrion, Cytosol ), enzyme.Product ( text | values: δ-Aminolevulinic acid, Porphobilinogen ), enzyme.Chromosome ( text | values: 3p21.1, 9q34 ), enzyme.OMIM ( real | values: 125290, 125270 ), enzyme.Porphyria ( text | values: none, ALA-Dehydratase deficiency ) ]
table medicine_enzyme_interaction, columns = [ medicine_enzyme_interaction.enzyme_id ( integer | primary key | values: 1, 2 ), medicine_enzyme_interaction.medicine_id ( integer | values: 1, 2 ), medicine_enzyme_interaction.interaction_type ( text | values: inhibitor, activitor ) ]
foreign keys:
medicine_enzyme_interaction.medicine_id = medicine.id
medicine_enzyme_interaction.enzyme_id = enzyme.id

# Here are some example questions that CAN be answered by the schema below:
-- How many kinds of enzymes are there?
-- What is the total count of enzymes?
-- List the name of enzymes in descending lexicographical order.
-- What are the names of enzymes in descending order?
-- List the names and the locations that the enzymes can make an effect.
------------------------------------------------------------------------------------------
database_id: local_govt_and_lot
database schema :
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 4, 5 ), Customers.customer_details ( text | values: Mr. Raul Prosacco, Esteban Senger ) ]
table Properties, columns = [ Properties.property_id ( integer | primary key | values: 24, 107 ), Properties.property_type_code ( text | values: apartment, house ), Properties.property_address ( text | values: 85456 Annie Lodge Suite 449, 2580 Yundt Plains ), Properties.other_details ( text | values: USA ) ]
table Residents, columns = [ Residents.resident_id ( integer | primary key | values: 6, 10 ), Residents.property_id ( integer | values: 954, 605 ), Residents.date_moved_in ( datetime | values: 2017-06-17 15:43:33, 2015-03-27 12:00:00 ), Residents.date_moved_out ( datetime | values: 2017-12-18 03:46:04, 2018-03-17 07:48:09 ), Residents.other_details ( text | values: Anderson Batz, Miss Naomie Osinski ) ]
table Organizations, columns = [ Organizations.organization_id ( integer | primary key | values: 7, 8 ), Organizations.parent_organization_id ( real | values: 7, 8 ), Organizations.organization_details ( text | values: Reinger, Hudson and Nolan Group, Denesik and Sons Party ) ]
table Services, columns = [ Services.service_id ( integer | primary key | values: 10, 11 ), Services.organization_id ( integer | values: 10, 7 ), Services.service_type_code ( text | values: Cleanning, Check ), Services.service_details ( text | values: Satisfied, Unsatisfied ) ]
table Residents_Services, columns = [ Residents_Services.resident_id ( integer | primary key | values: 6, 23 ), Residents_Services.service_id ( integer | values: 49, 41 ), Residents_Services.date_moved_in ( datetime | values: 2017-06-17 15:43:33, 2015-03-27 12:00:00 ), Residents_Services.property_id ( integer | values: 954, 879 ), Residents_Services.date_requested ( datetime | values: 2016-07-25 01:32:23, 2016-10-10 21:42:21 ), Residents_Services.date_provided ( datetime | values: 2018-02-26 00:27:11, 2017-08-21 06:23:06 ), Residents_Services.other_details ( text | values: Satisfied, Unsatisfied ) ]
table Things, columns = [ Things.thing_id ( integer | primary key | values: 1, 2 ), Things.organization_id ( integer | values: 8, 10 ), Things.Type_of_Thing_Code ( text | values: Electronics, Commen ), Things.service_type_code ( text | values: Check, Cleanning ), Things.service_details ( text | values: Unsatisfied, Satisfied ) ]
table Customer_Events, columns = [ Customer_Events.Customer_Event_ID ( integer | primary key | values: 70, 160 ), Customer_Events.customer_id ( integer | values: 19, 5 ), Customer_Events.date_moved_in ( datetime | values: 2015-03-27 12:00:00, 2016-09-27 12:00:00 ), Customer_Events.property_id ( integer | values: 605, 879 ), Customer_Events.resident_id ( integer | values: 10, 23 ), Customer_Events.thing_id ( integer | values: 1, 80 ) ]
table Customer_Event_Notes, columns = [ Customer_Event_Notes.Customer_Event_Note_ID ( integer | primary key | values: 18, 21 ), Customer_Event_Notes.Customer_Event_ID ( integer | values: 70, 428 ), Customer_Event_Notes.service_type_code ( text | values: Cleanning, Check ), Customer_Event_Notes.resident_id ( real | values: 58, 87 ), Customer_Event_Notes.property_id ( real | values: 107, 445 ), Customer_Event_Notes.date_moved_in ( datetime | values: 2016-08-04 01:06:05, 2016-12-11 01:05:14 ) ]
table Timed_Status_of_Things, columns = [ Timed_Status_of_Things.thing_id ( integer | primary key | values: 2, 10 ), Timed_Status_of_Things.Date_and_Date ( datetime | values: 2016-05-27 23:33:34, 2016-07-17 08:35:27 ), Timed_Status_of_Things.Status_of_Thing_Code ( text | values: Open, Close ) ]
table Timed_Locations_of_Things, columns = [ Timed_Locations_of_Things.thing_id ( integer | primary key | values: 2, 10 ), Timed_Locations_of_Things.Date_and_Time ( datetime | values: 2016-10-12 12:03:07, 2016-12-29 00:39:19 ), Timed_Locations_of_Things.Location_Code ( text | values: 064 Charles Mou, 288 Lang Ferry ) ]
foreign keys:
Residents.property_id = Properties.property_id
Services.organization_id = Organizations.organization_id
Residents_Services.resident_id = Residents.resident_id
Residents_Services.property_id = Residents.property_id
Residents_Services.date_moved_in = Residents.date_moved_in
Residents_Services.service_id = Services.service_id
Things.organization_id = Organizations.organization_id
Customer_Events.resident_id = Residents.resident_id
Customer_Events.property_id = Residents.property_id
Customer_Events.date_moved_in = Residents.date_moved_in
Customer_Events.customer_id = Customers.customer_id
Customer_Events.thing_id = Things.thing_id
Customer_Event_Notes.Customer_Event_ID = Customer_Events.Customer_Event_ID
Timed_Status_of_Things.thing_id = Things.thing_id
Timed_Locations_of_Things.thing_id = Things.thing_id

# Here are some example questions that CAN be answered by the schema below:
-- How many residents does each property have? List property id and resident count.
-- What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?
-- How many services has each resident requested? List the resident id, details, and the count in descending order of the count.
-- What is the maximum number that a certain service is provided? List the service id, details and number.
-- List the id and type of each thing, and the details of the organization that owns it.
------------------------------------------------------------------------------------------
database_id: station_weather
database schema :
table train, columns = [ train.id ( integer | primary key | values: 1, 2 ), train.train_number ( real | values: 16724, 16127 ), train.name ( text | values: Ananthapuri Express, Guruvayur Express ), train.origin ( text | values: Trivandrum, Chennai ), train.destination ( text | values: Chennai, Guruvayur ), train.time ( text | values: 17:15, 22:10 ), train.interval ( text | values: Daily ) ]
table station, columns = [ station.id ( integer | primary key | values: 1, 2 ), station.network_name ( text | values: Amersham, Bushey ), station.services ( text | values: Metropolitan line and Chiltern Railways, London Overground and London Midland ), station.local_authority ( text | values: Chiltern, Watford ) ]
table route, columns = [ route.train_id ( integer | primary key | values: 1, 2 ), route.station_id ( integer | values: 1, 2 ) ]
table weekly_weather, columns = [ weekly_weather.station_id ( integer | primary key | values: 1, 2 ), weekly_weather.day_of_week ( text | values: Friday, Monday ), weekly_weather.high_temperature ( real | values: 59, 66 ), weekly_weather.low_temperature ( real | values: 54, 55 ), weekly_weather.precipitation ( real | values: 90.0, 20.0 ), weekly_weather.wind_speed_mph ( real | values: 13, 12 ) ]
foreign keys:
route.station_id = station.id
route.train_id = train.id
weekly_weather.station_id = station.id

# Here are some example questions that CAN be answered by the schema below:
-- list the local authorities and services provided by all stations.
-- show all train numbers and names ordered by their time from early to late.
-- Give me the times and numbers of all trains that go to Chennai, ordered by time.
-- How many trains have 'Express' in their names?
-- Find the number and time of the train that goes from Chennai to Guruvayur.
------------------------------------------------------------------------------------------
database_id: shop_membership
database schema :
table member, columns = [ member.Member_ID ( integer | primary key | values: 1, 2 ), member.Card_Number ( text | values: LE99, LT98 ), member.Name ( text | values: Jeremy Jarmon, Myron Pryor ), member.Hometown ( text | values: Collierville, Tennessee, Louisville, Kentucky ), member.Level ( real | values: 6, 4 ) ]
table branch, columns = [ branch.Branch_ID ( integer | primary key | values: 1, 2 ), branch.Name ( text | values: Alexandre, Popert ), branch.Open_year ( text | values: 2001, 2009 ), branch.Address_road ( text | values: Valleys Place, Oaks Crescent ), branch.City ( text | values: London, Oxford ), branch.membership_amount ( text | values: 112, 11 ) ]
table membership_register_branch, columns = [ membership_register_branch.Member_ID ( integer | primary key | values: 1, 2 ), membership_register_branch.Branch_ID ( text | values: 1, 4 ), membership_register_branch.Register_Year ( text | values: 2016, 2017 ) ]
table purchase, columns = [ purchase.Member_ID ( integer | primary key | values: 1, 2 ), purchase.Branch_ID ( text | values: 3, 2 ), purchase.Year ( text | values: 2018, 2017 ), purchase.Total_pounds ( real | values: 2013.32, 321.13 ) ]
foreign keys:
membership_register_branch.Branch_ID = branch.Branch_ID
membership_register_branch.Member_ID = member.Member_ID
purchase.Branch_ID = branch.Branch_ID
purchase.Member_ID = member.Member_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many branches where have more than average number of memberships are there?
-- What is the number of branches that have more than the average number of memberships?
-- Show name, address road, and city for all branches sorted by open year.
-- What are the names, address roads, and cities of the branches ordered by opening year?
-- What are names for top three branches with most number of membership?
------------------------------------------------------------------------------------------
database_id: driving_school
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.line_1_number_building ( text | values: 3904 Stroman Passage, 053 Quigley Island ), Addresses.city ( text | values: Port Melyssa, Hagenesfurt ), Addresses.zip_postcode ( text | values: 14445, 22194 ), Addresses.state_province_county ( text | values: Georgia, Kentucky ), Addresses.country ( text | values: USA ) ]
table Staff, columns = [ Staff.staff_id ( integer | primary key | values: 1, 2 ), Staff.staff_address_id ( integer | values: 14, 3 ), Staff.nickname ( text | values: thompson.constantin, santos45 ), Staff.first_name ( text | values: Janessa, Camylle ), Staff.middle_name ( text | values: Amara, Icie ), Staff.last_name ( text | values: Sawayn, Weissnat ), Staff.date_of_birth ( datetime | values: 2010-12-08 16:55:14, 2015-08-01 13:22:43 ), Staff.date_joined_staff ( datetime | values: 2017-04-27 03:21:26, 2016-06-06 08:54:28 ), Staff.date_left_staff ( datetime | values: 2018-03-23 22:53:12, 2018-03-10 15:25:00 ) ]
table Vehicles, columns = [ Vehicles.vehicle_id ( integer | primary key | values: 1, 2 ), Vehicles.vehicle_details ( text | values: Van, Truck ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.customer_address_id ( integer | values: 13, 10 ), Customers.customer_status_code ( text | values: Bad Customer, Good Customer ), Customers.date_became_customer ( datetime | values: 2016-05-11 17:03:48, 2015-11-16 22:52:14 ), Customers.date_of_birth ( datetime | values: 1998-12-15 13:24:40, 1995-07-17 12:13:16 ), Customers.first_name ( text | values: Carole, Genevieve ), Customers.last_name ( text | values: Bernhard, Terry ), Customers.amount_outstanding ( real | values: 255.0, 7256.0 ), Customers.email_address ( text | values: everette.goyette@example.org, huel.jana@example.org ), Customers.phone_number ( text | values: 07278206718, +14(5)2351480248 ), Customers.cell_mobile_phone_number ( text | values: 861-638-9797, 578-518-4785x612 ) ]
table Customer_Payments, columns = [ Customer_Payments.customer_id ( integer | primary key | values: 1, 2 ), Customer_Payments.datetime_payment ( datetime | values: 2018-03-18 13:48:13, 2018-02-24 10:07:05 ), Customer_Payments.payment_method_code ( text | values: Direct Debit, Credit Card ), Customer_Payments.amount_payment ( real | values: 9570.93, 8180.26 ) ]
table Lessons, columns = [ Lessons.lesson_id ( integer | primary key | values: 1, 2 ), Lessons.customer_id ( integer | values: 6, 8 ), Lessons.lesson_status_code ( text | values: Cancelled, Completed ), Lessons.staff_id ( integer | values: 8, 14 ), Lessons.vehicle_id ( integer | values: 3, 2 ), Lessons.lesson_date ( datetime | values: 2018-02-28 10:55:36, 2018-03-07 16:12:36 ), Lessons.lesson_time ( text | values: 5, 6 ), Lessons.price ( real | values: 199.0, 167.0 ) ]
foreign keys:
Staff.staff_address_id = Addresses.address_id
Customers.customer_address_id = Addresses.address_id
Customer_Payments.customer_id = Customers.customer_id
Lessons.customer_id = Customers.customer_id
Lessons.staff_id = Staff.staff_id
Lessons.vehicle_id = Vehicles.vehicle_id

# Here are some example questions that CAN be answered by the schema below:
-- List all vehicle id
-- What are the ids of all vehicles?
-- How many vehicle in total?
-- How many vehicles exist?
-- Show the detail of vehicle with id 1.
------------------------------------------------------------------------------------------
database_id: concert_singer
database schema :
table stadium, columns = [ stadium.Stadium_ID ( integer | primary key | values: 1, 2 ), stadium.Location ( text | values: Raith Rovers, Ayr United ), stadium.Name ( text | values: Stark's Park, Somerset Park ), stadium.Capacity ( real | values: 10104, 11998 ), stadium.Highest ( real | values: 4812, 2363 ), stadium.Lowest ( real | values: 1294, 1057 ), stadium.Average ( real | values: 2106, 1477 ) ]
table singer, columns = [ singer.Singer_ID ( integer | primary key | values: 1, 2 ), singer.Name ( text | values: Joe Sharp, Timbaland ), singer.Country ( text | values: Netherlands, United States ), singer.Song_Name ( text | values: You, Dangerous ), singer.Song_release_year ( text | values: 1992, 2008 ), singer.Age ( real | values: 52, 32 ), singer.Is_male ( text | values: F, T ) ]
table concert, columns = [ concert.concert_ID ( integer | primary key | values: 1, 2 ), concert.concert_Name ( text | values: Auditions, Super bootcamp ), concert.Theme ( text | values: Free choice, Free choice 2 ), concert.Stadium_ID ( text | values: 1, 2 ), concert.Year ( text | values: 2014, 2015 ) ]
table singer_in_concert, columns = [ singer_in_concert.concert_ID ( integer | primary key | values: 1, 2 ), singer_in_concert.Singer_ID ( text | values: 2, 3 ) ]
foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many singers do we have?
-- What is the total number of singers?
-- Show name, country, age for all singers ordered by age from the oldest to the youngest.
-- What are the names, countries, and ages for every singer in descending order of age?
-- What is the average, minimum, and maximum age of all singers from France?
------------------------------------------------------------------------------------------
database_id: music_2
database schema :
table Songs, columns = [ Songs.SongId ( integer | primary key | values: N/A ), Songs.Title ( text | values: N/A ) ]
table Albums, columns = [ Albums.AId ( integer | primary key | values: N/A ), Albums.Title ( text | values: N/A ), Albums.Year ( real | values: N/A ), Albums.Label ( text | values: N/A ), Albums.Type ( text | values: N/A ) ]
table Band, columns = [ Band.Id ( integer | primary key | values: N/A ), Band.Firstname ( text | values: N/A ), Band.Lastname ( text | values: N/A ) ]
table Instruments, columns = [ Instruments.SongId ( integer | primary key | values: N/A ), Instruments.BandmateId ( integer | values: N/A ), Instruments.Instrument ( text | values: N/A ) ]
table Performance, columns = [ Performance.SongId ( integer | primary key | values: N/A ), Performance.Bandmate ( integer | values: N/A ), Performance.StagePosition ( text | values: N/A ) ]
table Tracklists, columns = [ Tracklists.AlbumId ( integer | primary key | values: N/A ), Tracklists.Position ( real | values: N/A ), Tracklists.SongId ( integer | values: N/A ) ]
table Vocals, columns = [ Vocals.SongId ( integer | primary key | values: N/A ), Vocals.Bandmate ( integer | values: N/A ), Vocals.Type ( text | values: N/A ) ]
foreign keys:
Instruments.BandmateId = Band.Id
Instruments.SongId = Songs.SongId
Performance.Bandmate = Band.Id
Performance.SongId = Songs.SongId
Tracklists.AlbumId = Albums.AId
Tracklists.SongId = Songs.SongId
Vocals.Bandmate = Band.Id
Vocals.SongId = Songs.SongId

# Here are some example questions that CAN be answered by the schema below:
-- How many bands are there?
-- Find the number of bands.
-- What are all the labels?
-- What are the different album labels listed?
-- Find all the albums in 2012.
------------------------------------------------------------------------------------------
database_id: sports_competition
database schema :
table club, columns = [ club.Club_ID ( integer | primary key | values: 1, 2 ), club.name ( text | values: AIB, BK Slide ), club.Region ( text | values: USA, UK ), club.Start_year ( text | values: 2009, 1998 ) ]
table club_rank, columns = [ club_rank.Rank ( integer | primary key | values: 1.0, 2.0 ), club_rank.Club_ID ( integer | values: 2, 3 ), club_rank.Gold ( real | values: 11.0, 8.0 ), club_rank.Silver ( real | values: 11.0, 7.0 ), club_rank.Bronze ( real | values: 9.0, 6.0 ), club_rank.Total ( real | values: 31.0, 21.0 ) ]
table player, columns = [ player.Player_ID ( integer | primary key | values: 1, 2 ), player.name ( text | values: Michael Platt, Dave Halley ), player.Position ( text | values: Full Back, Right Wing ), player.Club_ID ( integer | values: 1, 2 ), player.Apps ( real | values: 20.0, 23.0 ), player.Tries ( real | values: 5.0, 9.0 ), player.Goals ( text | values: 0, 50/60 ), player.Points ( real | values: 20.0, 36.0 ) ]
table competition, columns = [ competition.Competition_ID ( integer | primary key | values: 1, 2 ), competition.Year ( real | values: 2006.0, 2007.0 ), competition.Competition_type ( text | values: Friendly, Tournament ), competition.Country ( text | values: Italy, Spain ) ]
table competition_result, columns = [ competition_result.Competition_ID ( integer | primary key | values: 1, 2 ), competition_result.Club_ID_1 ( integer | values: 1, 3 ), competition_result.Club_ID_2 ( integer | values: 2, 4 ), competition_result.Score ( text | values: 11:10, 25:2 ) ]
foreign keys:
club_rank.Club_ID = club.Club_ID
player.Club_ID = club.Club_ID
competition_result.Competition_ID = competition.Competition_ID
competition_result.Club_ID_2 = club.Club_ID
competition_result.Club_ID_1 = club.Club_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many clubs are there?
-- What is the total number of clubs?
-- List the distinct region of clubs in ascending alphabetical order.
-- What are the different regions of clubs in ascending alphabetical order?
-- What is the average number of gold medals for clubs?
------------------------------------------------------------------------------------------
database_id: railway
database schema :
table railway, columns = [ railway.Railway_ID ( integer | primary key | values: 1, 2 ), railway.Railway ( text | values: SECR, MR ), railway.Builder ( text | values: SECR Ashford, MR Derby ), railway.Built ( text | values: 1901, 1902 Midland Railway 1000 was rebuilt in 1914. ), railway.Wheels ( text | values: 4-4-0, 4-4-2 ), railway.Location ( text | values: York, Bo'ness ), railway.ObjectNumber ( text | values: 1975-7006, 1975-7018 ) ]
table train, columns = [ train.Train_ID ( integer | primary key | values: 1, 2 ), train.Train_Num ( text | values: 51195, 12139 ), train.Name ( text | values: Wardha-Ballarshah Pass, Sewagram Exp ), train.From ( text | values: Wardha, Mumbai CST ), train.Arrival ( text | values: 08:54, 09:08 ), train.Railway_ID ( integer | values: 1, 2 ) ]
table manager, columns = [ manager.Manager_ID ( integer | primary key | values: 1, 2 ), manager.Name ( text | values: Ben Curtis, Todd Hamilton ), manager.Country ( text | values: United States, Scotland ), manager.Working_year_starts ( text | values: 2003, 2004 ), manager.Age ( real | values: 45, 55 ), manager.Level ( real | values: 5, 7 ) ]
table railway_manage, columns = [ railway_manage.Railway_ID ( integer | primary key | values: 2, 7 ), railway_manage.Manager_ID ( integer | values: 4, 3 ), railway_manage.From_Year ( text | values: 2010, 2011 ) ]
foreign keys:
train.Railway_ID = railway.Railway_ID
railway_manage.Railway_ID = railway.Railway_ID
railway_manage.Manager_ID = manager.Manager_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many railways are there?
-- List the builders of railways in ascending alphabetical order.
-- List the wheels and locations of the railways.
-- What is the maximum level of managers in countries that are not "Australia"?
-- What is the average age for all managers?
------------------------------------------------------------------------------------------
database_id: inn_1
database schema :
table Rooms, columns = [ Rooms.RoomId ( text | primary key | values: AOB, CAS ), Rooms.roomName ( text | values: Recluse and defiance, Interim but salutary ), Rooms.beds ( real | values: 1, 2 ), Rooms.bedType ( text | values: King, Queen ), Rooms.maxOccupancy ( real | values: 2, 4 ), Rooms.basePrice ( real | values: 150, 175 ), Rooms.decor ( text | values: modern, traditional ) ]
table Reservations, columns = [ Reservations.Code ( integer | primary key | values: 10105, 10183 ), Reservations.Room ( text | values: HBB, IBD ), Reservations.CheckIn ( text | values: 23-OCT-10, 19-SEP-10 ), Reservations.CheckOut ( text | values: 25-OCT-10, 20-SEP-10 ), Reservations.Rate ( real | values: 100.0, 150.0 ), Reservations.LastName ( text | values: SELBIG, GABLER ), Reservations.FirstName ( text | values: CONRAD, DOLLIE ), Reservations.Adults ( real | values: 1, 2 ), Reservations.Kids ( real | values: 0, 1 ) ]
foreign keys:
Reservations.Room = Rooms.RoomId

# Here are some example questions that CAN be answered by the schema below:
-- Find the names of all modern rooms with a base price below $160 and two beds.
-- What are the names of modern rooms that have a base price lower than $160 and two beds.
-- Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.
-- What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.
-- Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.
------------------------------------------------------------------------------------------
database_id: museum_visit
database schema :
table museum, columns = [ museum.Museum_ID ( integer | primary key | values: 1, 2 ), museum.Name ( text | values: Plaza Museum, Capital Plaza Museum ), museum.Num_of_Staff ( real | values: 62, 25 ), museum.Open_Year ( text | values: 2000, 2012 ) ]
table visitor, columns = [ visitor.ID ( integer | primary key | values: 1, 2 ), visitor.Name ( text | values: Gonzalo Higuaín , Guti Midfielder ), visitor.Level_of_membership ( real | values: 8, 5 ), visitor.Age ( real | values: 35, 28 ) ]
table visit, columns = [ visit.Museum_ID ( integer | primary key | values: 1, 2 ), visit.visitor_ID ( text | values: 5, 3 ), visit.Num_of_Ticket ( real | values: 20, 4 ), visit.Total_spent ( real | values: 320.14, 89.98 ) ]
foreign keys:
visit.visitor_ID = visitor.ID
visit.Museum_ID = museum.Museum_ID

# Here are some example questions that CAN be answered by the schema below:
-- Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.
-- What is the average age of the visitors whose membership level is not higher than 4?
-- Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.
-- Find the id and name of the museum that has the most staff members?
-- Find the average number of staff working for the museums that were open before 2009.
------------------------------------------------------------------------------------------
database_id: browser_web
database schema :
table Web_client_accelerator, columns = [ Web_client_accelerator.id ( integer | primary key | values: 1, 2 ), Web_client_accelerator.name ( text | values: CACHEbox, CProxy ), Web_client_accelerator.Operating_system ( text | values: Appliance (Linux), Windows ), Web_client_accelerator.Client ( text | values: End user, ISP, user ), Web_client_accelerator.Connection ( text | values: Broadband, Satellite, Wireless, Fiber, DSL, up to 756kbit/s ) ]
table browser, columns = [ browser.id ( integer | primary key | values: 1, 2 ), browser.name ( text | values: Internet Explorer, Firefox ), browser.market_share ( real | values: 28.96, 18.11 ) ]
table accelerator_compatible_browser, columns = [ accelerator_compatible_browser.accelerator_id ( integer | primary key | values: 1, 2 ), accelerator_compatible_browser.browser_id ( integer | values: 1, 2 ), accelerator_compatible_browser.compatible_since_year ( real | values: 1995, 1996 ) ]
foreign keys:
accelerator_compatible_browser.browser_id = browser.id
accelerator_compatible_browser.accelerator_id = Web_client_accelerator.id

# Here are some example questions that CAN be answered by the schema below:
-- How many main stream browsers whose market share is at least 5 exist?
-- List the name of browsers in descending order by market share.
-- List the ids, names and market shares of all browsers.
-- What is the maximum, minimum and average market share of the listed browsers?
-- What is the id and market share of the browser Safari?
------------------------------------------------------------------------------------------
database_id: baseball_1
database schema :
table all_star, columns = [ all_star.player_id ( text | values: gomezle01, ferreri01 ), all_star.year ( real | values: 1933, 1934 ), all_star.game_num ( real | values: 0, 2 ), all_star.game_id ( text | values: ALS193307060, NLS193407100 ), all_star.team_id ( text | values: NYA, BOS ), all_star.league_id ( text | values: AL, NL ), all_star.gp ( real | values: 1, 0 ), all_star.starting_pos ( real | values: 1, 2 ) ]
table appearances, columns = [ appearances.year ( real | values: 1871, 1872 ), appearances.team_id ( text | values: BS1, CH1 ), appearances.league_id ( text | values: , NL ), appearances.player_id ( text | values: barnero01, barrofr01 ), appearances.g_all ( real | values: 31, 18 ), appearances.gs ( real | values: , 89 ), appearances.g_batting ( real | values: 31, 18 ), appearances.g_defense ( real | values: 31, 18 ), appearances.g_p ( real | values: 0, 31 ), appearances.g_c ( real | values: 0, 7 ), appearances.g_1b ( real | values: 0, 30 ), appearances.g_2b ( real | values: 16, 1 ), appearances.g_3b ( real | values: 0, 1 ), appearances.g_ss ( real | values: 15, 0 ), appearances.g_lf ( real | values: 0, 13 ), appearances.g_cf ( real | values: 0, 1 ), appearances.g_rf ( real | values: 0, 4 ), appearances.g_of ( real | values: 0, 17 ), appearances.g_dh ( real | values: , 0 ), appearances.g_ph ( real | values: , 23 ), appearances.g_pr ( real | values: , 0 ) ]
table manager_award, columns = [ manager_award.player_id ( text | values: larusto01, lasorto01 ), manager_award.award_id ( text | values: BBWAA Manager of the year, TSN Manager of the Year ), manager_award.year ( real | values: 1983, 1984 ), manager_award.league_id ( text | values: AL, NL ), manager_award.tie ( text | values: , Y ), manager_award.notes ( real | values:  ) ]
table player_award, columns = [ player_award.player_id ( text | values: bondto01, hinespa01 ), player_award.award_id ( text | values: Pitching Triple Crown, Triple Crown ), player_award.year ( real | values: 1877, 1878 ), player_award.league_id ( text | values: NL, AA ), player_award.tie ( text | values: , Y ), player_award.notes ( text | values: , 1B ) ]
table manager_award_vote, columns = [ manager_award_vote.award_id ( text | values: Mgr of the year, Mgr of the Year ), manager_award_vote.year ( real | values: 1983, 1984 ), manager_award_vote.league_id ( text | values: AL, NL ), manager_award_vote.player_id ( text | values: altobjo01, coxbo01 ), manager_award_vote.points_won ( real | values: 7, 4 ), manager_award_vote.points_max ( real | values: 28, 24 ), manager_award_vote.votes_first ( real | values: 7, 4 ) ]
table player_award_vote, columns = [ player_award_vote.award_id ( text | values: Cy Young, MVP ), player_award_vote.year ( real | values: 1956, 1957 ), player_award_vote.league_id ( text | values: ML, AL ), player_award_vote.player_id ( text | values: fordwh01, maglisa01 ), player_award_vote.points_won ( real | values: 1, 4 ), player_award_vote.points_max ( real | values: 16, 18 ), player_award_vote.votes_first ( real | values: 1, 4 ) ]
table batting, columns = [ batting.player_id ( text | values: abercda01, addybo01 ), batting.year ( real | values: 1871, 1872 ), batting.stint ( real | values: 1, 2 ), batting.team_id ( text | values: TRO, RC1 ), batting.league_id ( text | values: , NL ), batting.g ( real | values: 1, 25 ), batting.ab ( real | values: 4, 118 ), batting.r ( real | values: 0, 30 ), batting.h ( real | values: 0, 32 ), batting.double ( real | values: 0, 6 ), batting.triple ( real | values: 0, 5 ), batting.hr ( real | values: 0, 2 ), batting.rbi ( real | values: 0, 13 ), batting.sb ( real | values: 0, 8 ), batting.cs ( real | values: 0, 1 ), batting.bb ( real | values: 0, 4 ), batting.so ( real | values: 0, 5 ), batting.ibb ( real | values: , 0 ), batting.hbp ( real | values: , 0 ), batting.sh ( real | values: , 0 ), batting.sf ( real | values: , 0 ), batting.g_idp ( real | values: , 0 ) ]
table batting_postseason, columns = [ batting_postseason.year ( real | values: 1884, 1885 ), batting_postseason.round ( text | values: WS, CS ), batting_postseason.player_id ( text | values: becanbu01, bradyst01 ), batting_postseason.team_id ( text | values: NY4, PRO ), batting_postseason.league_id ( text | values: AA, NL ), batting_postseason.g ( real | values: 1, 3 ), batting_postseason.ab ( real | values: 2, 10 ), batting_postseason.r ( real | values: 0, 1 ), batting_postseason.h ( real | values: 1, 0 ), batting_postseason.double ( real | values: 0, 1 ), batting_postseason.triple ( real | values: 0, 1 ), batting_postseason.hr ( real | values: 0, 1 ), batting_postseason.rbi ( real | values: 0, 1 ), batting_postseason.sb ( real | values: 0, 1 ), batting_postseason.cs ( real | values: , 0 ), batting_postseason.bb ( real | values: 0, 1 ), batting_postseason.so ( real | values: 0, 1 ), batting_postseason.ibb ( real | values: 0, 1 ), batting_postseason.hbp ( real | values: , 0 ), batting_postseason.sh ( real | values: , 0 ), batting_postseason.sf ( real | values: , 0 ), batting_postseason.g_idp ( real | values: , 1 ) ]
table player_college, columns = [ player_college.player_id ( text | values: aardsda01, abadan01 ), player_college.college_id ( text | values: pennst, rice ), player_college.year ( real | values: 2001, 2002 ) ]
table fielding, columns = [ fielding.player_id ( text | values: abercda01, addybo01 ), fielding.year ( real | values: 1871, 1872 ), fielding.stint ( real | values: 1, 2 ), fielding.team_id ( text | values: TRO, RC1 ), fielding.league_id ( text | values: , NL ), fielding.pos ( text | values: SS, 2B ), fielding.g ( real | values: 1, 22 ), fielding.gs ( real | values: , 102 ), fielding.inn_outs ( real | values: , 2773 ), fielding.po ( real | values: 1, 67 ), fielding.a ( real | values: 3, 72 ), fielding.e ( real | values: 2, 42 ), fielding.dp ( real | values: 0, 5 ), fielding.pb ( real | values: , 0 ), fielding.wp ( real | values: , 19 ), fielding.sb ( real | values: , 23 ), fielding.cs ( real | values: , 16 ), fielding.zr ( real | values: , 5 ) ]
table fielding_outfield, columns = [ fielding_outfield.player_id ( text | values: allisar01, ansonca01 ), fielding_outfield.year ( real | values: 1871, 1872 ), fielding_outfield.stint ( real | values: 1, 2 ), fielding_outfield.glf ( real | values: 0, 1 ), fielding_outfield.gcf ( real | values: 29, 0 ), fielding_outfield.grf ( real | values: 0, 1 ) ]
table fielding_postseason, columns = [ fielding_postseason.player_id ( text | values: colliji01, crigelo01 ), fielding_postseason.year ( real | values: 1903, 1905 ), fielding_postseason.team_id ( text | values: BOS, PIT ), fielding_postseason.league_id ( text | values: AL, NL ), fielding_postseason.round ( text | values: WS, ALCS ), fielding_postseason.pos ( text | values: 3B, C ), fielding_postseason.g ( real | values: 8, 4 ), fielding_postseason.gs ( real | values: 8, 4 ), fielding_postseason.inn_outs ( real | values: 213, 105 ), fielding_postseason.po ( real | values: 9, 54 ), fielding_postseason.a ( real | values: 18, 7 ), fielding_postseason.e ( real | values: 1, 3 ), fielding_postseason.dp ( real | values: 1, 2 ), fielding_postseason.tp ( real | values: 0, 1 ), fielding_postseason.pb ( real | values: , 0 ), fielding_postseason.sb ( real | values: , 9 ), fielding_postseason.cs ( real | values: , 3 ) ]
table hall_of_fame, columns = [ hall_of_fame.player_id ( text | values: cobbty01, ruthba01 ), hall_of_fame.yearid ( real | values: 1936, 1937 ), hall_of_fame.votedby ( text | values: BBWAA, Veterans ), hall_of_fame.ballots ( real | values: 226, 78 ), hall_of_fame.needed ( real | values: 170, 59 ), hall_of_fame.votes ( real | values: 222, 215 ), hall_of_fame.inducted ( text | values: Y, N ), hall_of_fame.category ( text | values: Player, Manager ), hall_of_fame.needed_note ( text | values: , Top 20 ) ]
table home_game, columns = [ home_game.year ( real | values: 1871, 1872 ), home_game.league_id ( text | values: , NL ), home_game.team_id ( text | values: BS1, CH1 ), home_game.park_id ( text | values: BOS01, NYC01 ), home_game.span_first ( text | values: 1871-05-16, 1871-05-27 ), home_game.span_last ( text | values: 1871-10-07, 1871-05-27 ), home_game.games ( real | values: 16, 1 ), home_game.openings ( real | values: 16, 1 ), home_game.attendance ( real | values: 32600, 3000 ) ]
table manager, columns = [ manager.player_id ( text | values: wrighha01, woodji01 ), manager.year ( real | values: 1871, 1872 ), manager.team_id ( text | values: BS1, CH1 ), manager.league_id ( text | values: , NL ), manager.inseason ( real | values: 1, 2 ), manager.g ( real | values: 31, 28 ), manager.w ( real | values: 20, 19 ), manager.l ( real | values: 10, 9 ), manager.rank ( real | values: 3, 2 ), manager.plyr_mgr ( text | values: Y, N ) ]
table manager_half, columns = [ manager_half.player_id ( text | values: hanlone01, vanhage01 ), manager_half.year ( real | values: 1892, 1981 ), manager_half.team_id ( text | values: BLN, BRO ), manager_half.league_id ( text | values: NL, AL ), manager_half.inseason ( real | values: 3, 1 ), manager_half.half ( real | values: 1, 2 ), manager_half.g ( real | values: 56, 77 ), manager_half.w ( real | values: 17, 26 ), manager_half.l ( real | values: 39, 46 ), manager_half.rank ( real | values: 12, 10 ) ]
table player, columns = [ player.player_id ( text | values: aardsda01, aaronha01 ), player.birth_year ( real | values: 1981, 1934 ), player.birth_month ( real | values: 12, 2 ), player.birth_day ( real | values: 27, 5 ), player.birth_country ( text | values: USA, D.R. ), player.birth_state ( text | values: CO, AL ), player.birth_city ( text | values: Denver, Mobile ), player.death_year ( real | values: , 1984 ), player.death_month ( real | values: , 8 ), player.death_day ( real | values: , 16 ), player.death_country ( text | values: , USA ), player.death_state ( text | values: , GA ), player.death_city ( text | values: , Atlanta ), player.name_first ( text | values: David, Hank ), player.name_last ( text | values: Aardsma, Aaron ), player.name_given ( text | values: David Allan, Henry Louis ), player.weight ( real | values: 220, 180 ), player.height ( real | values: 75, 72 ), player.bats ( text | values: R, L ), player.throws ( text | values: R, L ), player.debut ( text | values: 2004-04-06, 1954-04-13 ), player.final_game ( text | values: 2015-08-23, 1976-10-03 ), player.retro_id ( text | values: aardd001, aaroh101 ), player.bbref_id ( text | values: aardsda01, aaronha01 ) ]
table park, columns = [ park.park_id ( text | values: ALB01, ALT01 ), park.park_name ( text | values: Riverside Park, Columbia Park ), park.park_alias ( text | values: , Edison Field; Anaheim Stadium ), park.city ( text | values: Albany, Altoona ), park.state ( text | values: NY, PA ), park.country ( text | values: US, MX ) ]
table pitching, columns = [ pitching.player_id ( text | values: bechtge01, brainas01 ), pitching.year ( real | values: 1871, 1872 ), pitching.stint ( real | values: 1, 2 ), pitching.team_id ( text | values: PH1, WS3 ), pitching.league_id ( text | values: , NL ), pitching.w ( real | values: 1, 12 ), pitching.l ( real | values: 2, 15 ), pitching.g ( real | values: 3, 30 ), pitching.gs ( real | values: 3, 30 ), pitching.cg ( real | values: 2, 30 ), pitching.sho ( real | values: 0, 1 ), pitching.sv ( real | values: 0, 1 ), pitching.ipouts ( real | values: 78, 792 ), pitching.h ( real | values: 43, 361 ), pitching.er ( real | values: 23, 132 ), pitching.hr ( real | values: 0, 4 ), pitching.bb ( real | values: 11, 37 ), pitching.so ( real | values: 1, 13 ), pitching.baopp ( real | values: , 0.53 ), pitching.era ( real | values: 7.96, 4.5 ), pitching.ibb ( real | values: , 1 ), pitching.wp ( real | values: , 0 ), pitching.hbp ( real | values: , 0 ), pitching.bk ( real | values: 0, 2 ), pitching.bfp ( real | values: , 13 ), pitching.gf ( real | values: , 0 ), pitching.r ( real | values: 42, 292 ), pitching.sh ( real | values: , 1 ), pitching.sf ( real | values: , 4 ), pitching.g_idp ( real | values: , 6 ) ]
table pitching_postseason, columns = [ pitching_postseason.player_id ( text | values: becanbu01, keefeti01 ), pitching_postseason.year ( real | values: 1884, 1885 ), pitching_postseason.round ( text | values: WS, CS ), pitching_postseason.team_id ( text | values: NY4, PRO ), pitching_postseason.league_id ( text | values: AA, NL ), pitching_postseason.w ( real | values: 0, 3 ), pitching_postseason.l ( real | values: 1, 2 ), pitching_postseason.g ( real | values: 1, 2 ), pitching_postseason.gs ( real | values: 1, 2 ), pitching_postseason.cg ( real | values: 1, 2 ), pitching_postseason.sho ( real | values: 0, 1 ), pitching_postseason.sv ( real | values: 0, 1 ), pitching_postseason.ipouts ( real | values: 18, 45 ), pitching_postseason.h ( real | values: 9, 10 ), pitching_postseason.er ( real | values: 7, 6 ), pitching_postseason.hr ( real | values: 0, 1 ), pitching_postseason.bb ( real | values: 2, 3 ), pitching_postseason.so ( real | values: 1, 12 ), pitching_postseason.baopp ( text | values: , 0.23 ), pitching_postseason.era ( real | values: 10.5, 3.6 ), pitching_postseason.ibb ( real | values: , 0 ), pitching_postseason.wp ( real | values: , 0 ), pitching_postseason.hbp ( real | values: , 0 ), pitching_postseason.bk ( real | values: , 0 ), pitching_postseason.bfp ( real | values: , 134 ), pitching_postseason.gf ( real | values: 0, 1 ), pitching_postseason.r ( real | values: 12, 9 ), pitching_postseason.sh ( real | values: , 0 ), pitching_postseason.sf ( real | values: , 0 ), pitching_postseason.g_idp ( real | values: , 0 ) ]
table salary, columns = [ salary.year ( real | values: 1985, 1986 ), salary.team_id ( text | values: ATL, BAL ), salary.league_id ( text | values: NL, AL ), salary.player_id ( text | values: barkele01, bedrost01 ), salary.salary ( real | values: 870000, 550000 ) ]
table college, columns = [ college.college_id ( text | values: abilchrist, adelphi ), college.name_full ( text | values: Abilene Christian University, Adelphi University ), college.city ( text | values: Abilene, Garden City ), college.state ( text | values: TX, NY ), college.country ( text | values: USA ) ]
table postseason, columns = [ postseason.year ( real | values: 1884, 1885 ), postseason.round ( text | values: WS, CS ), postseason.team_id_winner ( text | values: PRO, CHC ), postseason.league_id_winner ( text | values: NL, AA ), postseason.team_id_loser ( text | values: NYP, STL ), postseason.league_id_loser ( text | values: AA, NL ), postseason.wins ( real | values: 3, 4 ), postseason.losses ( real | values: 0, 3 ), postseason.ties ( real | values: 0, 1 ) ]
table team, columns = [ team.year ( real | values: 1871, 1872 ), team.league_id ( text | values: , NL ), team.team_id ( text | values: BS1, CH1 ), team.franchise_id ( text | values: BNA, CNA ), team.div_id ( text | values: , W ), team.rank ( real | values: 3, 2 ), team.g ( real | values: 31, 28 ), team.ghome ( real | values: , 66 ), team.w ( real | values: 20, 19 ), team.l ( real | values: 10, 9 ), team.div_win ( text | values: , Y ), team.wc_win ( text | values: , N ), team.lg_win ( text | values: N, Y ), team.ws_win ( text | values: , N ), team.r ( real | values: 401, 302 ), team.ab ( real | values: 1372, 1196 ), team.h ( real | values: 426, 323 ), team.double ( real | values: 70, 52 ), team.triple ( real | values: 37, 21 ), team.hr ( real | values: 3, 10 ), team.bb ( real | values: 60, 26 ), team.so ( real | values: 19, 22 ), team.sb ( real | values: 73, 69 ), team.cs ( real | values: , 15 ), team.hbp ( real | values: , 47 ), team.sf ( real | values: , 43 ), team.ra ( real | values: 303, 241 ), team.er ( real | values: 109, 77 ), team.era ( real | values: 3.55, 2.76 ), team.cg ( real | values: 22, 25 ), team.sho ( real | values: 1, 0 ), team.sv ( real | values: 3, 1 ), team.ipouts ( real | values: 828, 753 ), team.ha ( real | values: 367, 308 ), team.hra ( real | values: 2, 6 ), team.bba ( real | values: 42, 28 ), team.soa ( real | values: 23, 22 ), team.e ( real | values: 225, 218 ), team.dp ( real | values: , 42 ), team.fp ( real | values: 0.83, 0.82 ), team.name ( text | values: Boston Red Stockings, Chicago White Stockings ), team.park ( text | values: South End Grounds I, Union Base-Ball Grounds ), team.attendance ( real | values: , 121412 ), team.bpf ( real | values: 103, 104 ), team.ppf ( real | values: 98, 102 ), team.team_id_br ( text | values: BOS, CHI ), team.team_id_lahman45 ( text | values: BS1, CH1 ), team.team_id_retro ( text | values: BS1, CH1 ) ]
table team_franchise, columns = [ team_franchise.franchise_id ( text | values: ALT, ANA ), team_franchise.franchise_name ( text | values: Altoona Mountain City, Los Angeles Angels of Anaheim ), team_franchise.active ( text | values: N, Y ), team_franchise.na_assoc ( text | values: , PNA ) ]
table team_half, columns = [ team_half.year ( real | values: 1981 ), team_half.league_id ( text | values: NL, AL ), team_half.team_id ( text | values: ATL, BAL ), team_half.half ( real | values: 1, 2 ), team_half.div_id ( text | values: W, E ), team_half.div_win ( text | values: N ), team_half.rank ( real | values: 4, 5 ), team_half.g ( real | values: 54, 52 ), team_half.w ( real | values: 25, 31 ), team_half.l ( real | values: 29, 27 ) ]
foreign keys:
all_star.player_id = player.player_id
appearances.player_id = player.player_id
appearances.team_id = team.team_id
manager_award.player_id = player.player_id
player_award.player_id = player.player_id
player_award_vote.player_id = player.player_id
batting.player_id = player.player_id
batting_postseason.team_id = team.team_id
batting_postseason.player_id = player.player_id
player_college.college_id = college.college_id
player_college.player_id = player.player_id
fielding.player_id = player.player_id
fielding_outfield.player_id = player.player_id
fielding_postseason.player_id = player.player_id
hall_of_fame.player_id = player.player_id
home_game.park_id = park.park_id
home_game.team_id = team.team_id
manager.team_id = team.team_id
manager_half.team_id = team.team_id

# Here are some example questions that CAN be answered by the schema below:
-- what is the full name and id of the college with the largest number of baseball players?
-- Find the full name and id of the college that has the most baseball players.
-- What is average salary of the players in the team named 'Boston Red Stockings' ?
-- Compute the average salary of the players in the team called 'Boston Red Stockings'.
-- What are first and last names of players participating in all star game in 1998?
------------------------------------------------------------------------------------------
database_id: architecture
database schema :
table architect, columns = [ architect.id ( text | primary key | values: 1, 2 ), architect.name ( text | values: Frank Lloyd Wright, Frank Gehry ), architect.nationality ( text | values: American, Canadian ), architect.gender ( text | values: male, female ) ]
table bridge, columns = [ bridge.architect_id ( integer | values: 1, 2 ), bridge.id ( integer | primary key | values: 1, 2 ), bridge.name ( text | values: Xian Ren Qiao (Fairy Bridge), Landscape Arch ), bridge.location ( text | values: Guangxi , China, Arches National Park , Utah , USA ), bridge.length_meters ( real | values: 121.0, 88.0 ), bridge.length_feet ( real | values: 400.0, 290.0 ) ]
table mill, columns = [ mill.architect_id ( integer | values: 1, 2 ), mill.id ( integer | primary key | values: 1, 2 ), mill.location ( text | values: Coswarem, Donceel ), mill.name ( text | values: Le Vieux Molen, Moulin Bertrand ), mill.type ( text | values: Grondzeiler, Bergmolen ), mill.built_year ( real | values: 1840, 1890 ), mill.notes ( text | values: Molenechos (Dutch) ) ]
foreign keys:
bridge.architect_id = architect.id
mill.architect_id = architect.id

# Here are some example questions that CAN be answered by the schema below:
-- How many architects are female?
-- List the name, nationality and id of all male architects ordered by their names lexicographically.
-- What is the maximum length in meters for the bridges and what are the architects' names?
-- What is the average length in feet of the bridges?
-- What are the names and year of construction for the mills of 'Grondzeiler' type?
------------------------------------------------------------------------------------------
database_id: csu_1
database schema :
table Campuses, columns = [ Campuses.Id ( integer | primary key | values: 1, 2 ), Campuses.Campus ( text | values: California State University-Bakersfield, California State University-Channel Islands ), Campuses.Location ( text | values: Bakersfield, Camarillo ), Campuses.County ( text | values: Kern, Ventura ), Campuses.Year ( real | values: 1965, 2002 ) ]
table csu_fees, columns = [ csu_fees.Campus ( integer | primary key | values: 1, 2 ), csu_fees.Year ( real | values: 1996, 2003 ), csu_fees.CampusFee ( real | values: 1951, 1868 ) ]
table degrees, columns = [ degrees.Year ( integer | primary key | values: 1990, 1991 ), degrees.Campus ( integer | values: 1, 3 ), degrees.Degrees ( real | values: 701, 681 ) ]
table discipline_enrollments, columns = [ discipline_enrollments.Campus ( integer | primary key | values: 1, 2 ), discipline_enrollments.Discipline ( real | values: 4, 5 ), discipline_enrollments.Year ( real | values: 2004 ), discipline_enrollments.Undergraduate ( real | values: 248, 811 ), discipline_enrollments.Graduate ( real | values: 0, 73 ) ]
table enrollments, columns = [ enrollments.Campus ( integer | primary key | values: 1, 2 ), enrollments.Year ( real | values: 1956, 1957 ), enrollments.TotalEnrollment_AY ( real | values: 384, 432 ), enrollments.FTE_AY ( real | values: 123, 151 ) ]
table faculty, columns = [ faculty.Campus ( integer | values: 1, 2 ), faculty.Year ( real | values: 2002, 2003 ), faculty.Faculty ( real | values: 357.1, 48.4 ) ]
foreign keys:
csu_fees.Campus = Campuses.Id
degrees.Campus = Campuses.Id
discipline_enrollments.Campus = Campuses.Id
enrollments.Campus = Campuses.Id
faculty.Campus = Campuses.Id

# Here are some example questions that CAN be answered by the schema below:
-- Report the name of all campuses in Los Angeles county.
-- What campuses are located in the county of Los Angeles?
-- What are the names of all campuses located at Chico?
-- What campuses are located in Chico?
-- Find all the campuses opened in 1958.
------------------------------------------------------------------------------------------
database_id: tracking_orders
database schema :
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.customer_name ( text | values: Savannah, George ), Customers.customer_details ( text | values: rerum, est ) ]
table Invoices, columns = [ Invoices.invoice_number ( integer | primary key | values: 1, 2 ), Invoices.invoice_date ( datetime | values: 1989-09-03 16:03:05, 1989-12-11 16:40:57 ), Invoices.invoice_details ( text | values: vitae, magnam ) ]
table Orders, columns = [ Orders.order_id ( integer | primary key | values: 1, 2 ), Orders.customer_id ( integer | values: 2, 11 ), Orders.order_status ( text | values: Shipped, Packing ), Orders.date_order_placed ( datetime | values: 2009-02-21 15:26:19, 1974-06-24 22:10:26 ), Orders.order_details ( text | values: N/A ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.product_name ( text | values: food, book ), Products.product_details ( text | values: N/A ) ]
table Order_Items, columns = [ Order_Items.order_item_id ( integer | primary key | values: 1, 2 ), Order_Items.product_id ( integer | values: 4, 15 ), Order_Items.order_id ( integer | values: 6, 15 ), Order_Items.order_item_status ( text | values: Finish, Payed ), Order_Items.order_item_details ( text | values: N/A ) ]
table Shipments, columns = [ Shipments.shipment_id ( integer | primary key | values: 1, 2 ), Shipments.order_id ( integer | values: 5, 7 ), Shipments.invoice_number ( integer | values: 13, 2 ), Shipments.shipment_tracking_number ( text | values: 3452, 0114 ), Shipments.shipment_date ( datetime | values: 1983-08-13 22:34:11, 1977-11-10 12:11:25 ), Shipments.other_shipment_details ( text | values: N/A ) ]
table Shipment_Items, columns = [ Shipment_Items.shipment_id ( integer | values: 11, 10 ), Shipment_Items.order_item_id ( integer | values: 12, 15 ) ]
foreign keys:
Orders.customer_id = Customers.customer_id
Order_Items.product_id = Products.product_id
Order_Items.order_id = Orders.order_id
Shipments.invoice_number = Invoices.invoice_number
Shipments.order_id = Orders.order_id
Shipment_Items.shipment_id = Shipments.shipment_id
Shipment_Items.order_item_id = Order_Items.order_item_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the id of the most recent order?
-- Find the id of the order made most recently.
-- what are the order id and customer id of the oldest order?
-- Find the order id and customer id associated with the oldest order.
-- Find the id of the order whose shipment tracking number is "3452".
------------------------------------------------------------------------------------------
database_id: insurance_policies
database schema :
table Customers, columns = [ Customers.Customer_ID ( integer | primary key | values: 1, 2 ), Customers.Customer_Details ( text | values: America Jaskolski, Ellsworth Paucek ) ]
table Customer_Policies, columns = [ Customer_Policies.Policy_ID ( integer | primary key | values: 119, 141 ), Customer_Policies.Customer_ID ( integer | values: 1, 2 ), Customer_Policies.Policy_Type_Code ( text | values: Car, Life ), Customer_Policies.Start_Date ( datetime | values: 2018-01-21, 2017-08-21 ), Customer_Policies.End_Date ( datetime | values: 2017-12-15, 2017-09-29 ) ]
table Claims, columns = [ Claims.Claim_ID ( integer | primary key | values: 143, 423 ), Claims.Policy_ID ( integer | values: 744, 552 ), Claims.Date_Claim_Made ( datetime | values: 2017-03-11, 2016-08-12 ), Claims.Date_Claim_Settled ( datetime | values: 2017-11-03, 2018-01-27 ), Claims.Amount_Claimed ( real | values: 43884, 79134 ), Claims.Amount_Settled ( real | values: 1085, 1724 ) ]
table Settlements, columns = [ Settlements.Settlement_ID ( integer | primary key | values: 357, 412 ), Settlements.Claim_ID ( integer | values: 486, 621 ), Settlements.Date_Claim_Made ( datetime | values: 2018-08-07, 2017-08-27 ), Settlements.Date_Claim_Settled ( datetime | values: 2018-01-16, 2018-02-04 ), Settlements.Amount_Claimed ( real | values: 38543, 57669 ), Settlements.Amount_Settled ( real | values: 1181, 1427 ), Settlements.Customer_Policy_ID ( real | values: 515, 617 ) ]
table Payments, columns = [ Payments.Payment_ID ( integer | primary key | values: 384, 435 ), Payments.Settlement_ID ( integer | values: 516, 476 ), Payments.Payment_Method_Code ( text | values: MasterCard, Discover Card ), Payments.Date_Payment_Made ( datetime | values: 2018-02-16, 2017-05-28 ), Payments.Amount_Payment ( real | values: 241730, 448613 ) ]
foreign keys:
Customer_Policies.Customer_ID = Customers.Customer_ID
Claims.Policy_ID = Customer_Policies.Policy_ID
Settlements.Claim_ID = Claims.Claim_ID
Payments.Settlement_ID = Settlements.Settlement_ID

# Here are some example questions that CAN be answered by the schema below:
-- Which claims caused more than 2 settlements or have the maximum claim value? List the date the claim was made and the claim id.
-- Find the claims that led to more than two settlements or have the maximum claim value. For each of them, return the date the claim was made and the id of the claim.
-- Which customer had at least 2 policies but did not file any claims? List the customer details and id.
-- Give me the the customer details and id for the customers who had two or more policies but did not file any claims.
-- List the method, date and amount of all the payments, in ascending order of date.
------------------------------------------------------------------------------------------
database_id: gas_company
database schema :
table company, columns = [ company.Company_ID ( integer | primary key | values: 1, 2 ), company.Rank ( real | values: 1, 3 ), company.Company ( text | values: ExxonMobil, General Electric ), company.Headquarters ( text | values: USA, Netherlands ), company.Main_Industry ( text | values: Oil and gas, Conglomerate ), company.Sales_billion ( real | values: 433.5, 147.3 ), company.Profits_billion ( real | values: 41.1, 14.2 ), company.Assets_billion ( real | values: 331.1, 717.2 ), company.Market_Value ( real | values: 407.4, 213.7 ) ]
table gas_station, columns = [ gas_station.Station_ID ( integer | primary key | values: 1, 2 ), gas_station.Open_Year ( real | values: 1998, 1999 ), gas_station.Location ( text | values: Herne Hill, Channel Hill ), gas_station.Manager_Name ( text | values: BrianWingrave, SimonMarloe ), gas_station.Vice_Manager_Name ( text | values: Russell Denman, Russell Brown ), gas_station.Representative_Name ( text | values: Clive Burr, Rob Jefferies  ) ]
table station_company, columns = [ station_company.Station_ID ( integer | primary key | values: 1, 4 ), station_company.Company_ID ( integer | values: 3, 1 ), station_company.Rank_of_the_Year ( real | values: 1, 2 ) ]
foreign keys:
station_company.Company_ID = company.Company_ID
station_company.Station_ID = gas_station.Station_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many gas companies are there?
-- What is the total number of companies?
-- List the company name and rank for all companies in the decreasing order of their sales.
-- What is the name and rank of every company ordered by descending number of sales?
-- Show the company name and the main industry for all companies whose headquarters are not from USA.
------------------------------------------------------------------------------------------
database_id: e_government
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.line_1_number_building ( text | values: 25518 Ortiz Centers, 033 Stracke Parkways ), Addresses.town_city ( text | values: West Stacy, Lake Meaghan ), Addresses.zip_postcode ( text | values: 193, 227 ), Addresses.state_province_county ( text | values: NorthCarolina, Colorado ), Addresses.country ( text | values: USA ) ]
table Services, columns = [ Services.service_id ( integer | primary key | values: 1, 2 ), Services.service_type_code ( text | values: Education, Welfare ), Services.service_name ( text | values: Education, Health ), Services.service_descriptio ( text | values: Education, Welfare ) ]
table Forms, columns = [ Forms.form_id ( integer | primary key | values: 1, 2 ), Forms.form_type_code ( text | values: Basic, Complex ), Forms.service_id ( integer | values: 13, 9 ), Forms.form_number ( text | values: 8069, 2675 ), Forms.form_name ( text | values: SSN Application, Marriage Certificate ), Forms.form_description ( text | values: Form for SSN Application, Marriage Certificate ) ]
table Individuals, columns = [ Individuals.individual_id ( integer | primary key | values: 1, 2 ), Individuals.individual_first_name ( text | values: Oscar, Geovanny ), Individuals.individual_middle_name ( text | values: Hosea, Antonia ), Individuals.inidividual_phone ( text | values: 1-925-696-5232, 075.012.6775x409 ), Individuals.individual_email ( text | values: amie.okuneva@example.org, jamey.effertz@example.net ), Individuals.individual_address ( text | values: 6956 Lia Plaza, 69578 Baylee Prairie ), Individuals.individual_last_name ( text | values: Maggio, Kerluke ) ]
table Organizations, columns = [ Organizations.organization_id ( integer | primary key | values: 1, 2 ), Organizations.date_formed ( datetime | values: 2016-08-24 23:52:48, 2016-10-01 12:42:01 ), Organizations.organization_name ( text | values: Labour Party, Plaid Cymru ), Organizations.uk_vat_number ( text | values: 2157, 7459 ) ]
table Parties, columns = [ Parties.party_id ( integer | primary key | values: 1, 2 ), Parties.payment_method_code ( text | values: Cheque, Credit Card ), Parties.party_phone ( text | values: 05374656172, 1-525-947-7867x51521 ), Parties.party_email ( text | values: enrico09@example.com, brakus.aliya@example.com ) ]
table Organization_Contact_Individuals, columns = [ Organization_Contact_Individuals.individual_id ( integer | primary key | values: 5, 6 ), Organization_Contact_Individuals.organization_id ( integer | values: 4, 3 ), Organization_Contact_Individuals.date_contact_from ( datetime | values: 2016-08-16 22:09:11, 2017-03-02 00:00:16 ), Organization_Contact_Individuals.date_contact_to ( datetime | values: 2018-03-25 10:27:18, 2018-03-06 05:39:43 ) ]
table Party_Addresses, columns = [ Party_Addresses.party_id ( integer | primary key | values: 3, 4 ), Party_Addresses.address_id ( integer | values: 2, 4 ), Party_Addresses.date_address_from ( datetime | values: 2016-04-08 22:40:02, 2016-05-20 23:22:06 ), Party_Addresses.address_type_code ( text | values: Residence, Billing ), Party_Addresses.date_address_to ( datetime | values: 2018-02-28 23:14:41, 2018-01-29 16:48:01 ) ]
table Party_Forms, columns = [ Party_Forms.party_id ( integer | primary key | values: 2, 5 ), Party_Forms.form_id ( integer | values: 4, 5 ), Party_Forms.date_completion_started ( datetime | values: 2017-12-17 11:29:47, 2017-12-16 15:25:48 ), Party_Forms.form_status_code ( text | values: Completed, Partially Completed ), Party_Forms.date_fully_completed ( datetime | values: 2018-02-11 16:46:10, 2018-02-18 16:09:04 ) ]
table Party_Services, columns = [ Party_Services.booking_id ( real | values: 1, 2 ), Party_Services.customer_id ( integer | values: 10, 14 ), Party_Services.service_id ( integer | values: 12, 11 ), Party_Services.service_datetime ( datetime | values: 2018-03-10 22:43:12, 2018-03-05 15:06:23 ), Party_Services.booking_made_date ( datetime | values: 2018-03-23 23:56:51, 2018-03-25 11:08:29 ) ]
foreign keys:
Forms.service_id = Services.service_id
Organization_Contact_Individuals.individual_id = Individuals.individual_id
Organization_Contact_Individuals.organization_id = Organizations.organization_id
Party_Addresses.party_id = Parties.party_id
Party_Addresses.address_id = Addresses.address_id
Party_Forms.form_id = Forms.form_id
Party_Forms.party_id = Parties.party_id
Party_Services.customer_id = Parties.party_id
Party_Services.service_id = Services.service_id

# Here are some example questions that CAN be answered by the schema below:
-- List every individual's first name, middle name and last name in alphabetical order by last name.
-- What are the first, middle, and last names of all individuals, ordered by last name?
-- List all the types of forms.
-- What are the different types of forms?
-- Find the name of the most popular party form.
------------------------------------------------------------------------------------------
database_id: school_bus
database schema :
table driver, columns = [ driver.Driver_ID ( integer | primary key | values: 1, 2 ), driver.Name ( text | values: Matthew Ritter, Dan Carter ), driver.Party ( text | values: Dem, Rep ), driver.Home_city ( text | values: Hartford, Bethel ), driver.Age ( real | values: 40, 30 ) ]
table school, columns = [ school.School_ID ( integer | primary key | values: 1, 2 ), school.Grade ( text | values: Kindergarten, 1st-3rd grade ), school.School ( text | values: Noelani Elementary School, St. Francis Assisi ), school.Location ( text | values: Honolulu, Hawaii, Jakarta, Indonesia ), school.Type ( text | values: Public, Private Catholic ) ]
table school_bus, columns = [ school_bus.School_ID ( integer | primary key | values: 1, 3 ), school_bus.Driver_ID ( integer | values: 10, 4 ), school_bus.Years_Working ( real | values: 10, 8 ), school_bus.If_full_time ( text | values: F, T ) ]
foreign keys:
school_bus.Driver_ID = driver.Driver_ID
school_bus.School_ID = school.School_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many drivers are there?
-- Show the name, home city, and age for all drivers.
-- Show the party and the number of drivers in each party.
-- Show the name of drivers in descending order of age.
-- Show all different home cities.
------------------------------------------------------------------------------------------
database_id: machine_repair
database schema :
table repair, columns = [ repair.repair_ID ( integer | primary key | values: 1, 2 ), repair.name ( text | values: Discoverer, Discoverer 1 ), repair.Launch_Date ( text | values: 21 Jan 2009, 28 Feb 2009 ), repair.Notes ( text | values: repair Failed. Failed to achieve orbit, First object in polar orbit ) ]
table machine, columns = [ machine.Machine_ID ( integer | primary key | values: 1, 2 ), machine.Making_Year ( real | values: 1991, 1992 ), machine.Class ( text | values: 125cc ), machine.Team ( text | values: Hero Sports TS- Honda, Marlboro Pileri - Honda ), machine.Machine_series ( text | values: RS125 ), machine.value_points ( real | values: 105.0, 57.0 ), machine.quality_rank ( real | values: 2, 1 ) ]
table technician, columns = [ technician.technician_id ( integer | primary key | values: 1.0, 2.0 ), technician.Name ( text | values: Joe Sewell, John Brown ), technician.Team ( text | values: NYY, CLE ), technician.Starting_Year ( real | values: 2012.0, 2013.0 ), technician.Age ( real | values: 37, 36 ) ]
table repair_assignment, columns = [ repair_assignment.technician_id ( integer | primary key | values: 1, 2 ), repair_assignment.repair_ID ( integer | values: 1, 2 ), repair_assignment.Machine_ID ( integer | values: 1, 2 ) ]
foreign keys:
repair_assignment.Machine_ID = machine.Machine_ID
repair_assignment.repair_ID = repair.repair_ID
repair_assignment.technician_id = technician.technician_id

# Here are some example questions that CAN be answered by the schema below:
-- How many technicians are there?
-- What is the number of technicians?
-- List the names of technicians in ascending order of age.
-- What are the names of the technicians by ascending order of age?
-- What are the team and starting year of technicians?
------------------------------------------------------------------------------------------
database_id: theme_gallery
database schema :
table artist, columns = [ artist.Artist_ID ( integer | primary key | values: 1, 2 ), artist.Name ( text | values: Vijay Singh, John Daly ), artist.Country ( text | values: Fiji, United States ), artist.Year_Join ( real | values: 1998, 1991 ), artist.Age ( real | values: 45, 46 ) ]
table exhibition, columns = [ exhibition.Exhibition_ID ( integer | primary key | values: 1, 2 ), exhibition.Year ( real | values: 2004, 2005 ), exhibition.Theme ( text | values: Santa Claus, Christmas stocking ), exhibition.Artist_ID ( integer | values: 1, 2 ), exhibition.Ticket_Price ( real | values: 19.95, 14.95 ) ]
table exhibition_record, columns = [ exhibition_record.Exhibition_ID ( integer | primary key | values: 1, 2 ), exhibition_record.Date ( text | values: December 2, December 5 ), exhibition_record.Attendance ( real | values: 965, 1098 ) ]
foreign keys:
exhibition.Artist_ID = artist.Artist_ID
exhibition_record.Exhibition_ID = exhibition.Exhibition_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many artists do we have?
-- Count the number of artists.
-- Show all artist name, age, and country ordered by the yeared they joined.
-- What are the names, ages, and countries of artists, sorted by the year they joined?
-- What are all distinct country for artists?
------------------------------------------------------------------------------------------
database_id: film_rank
database schema :
table film, columns = [ film.Film_ID ( integer | primary key | values: 1, 2 ), film.Title ( text | values: ET the Extra-Terrestrial, Tootsie ), film.Studio ( text | values: Universal, Columbia ), film.Director ( text | values: Steven Spielberg, Sydney Pollack ), film.Gross_in_dollar ( real | values: 435110554, 177200000 ) ]
table market, columns = [ market.Market_ID ( integer | primary key | values: 1, 2 ), market.Country ( text | values: Japan, China ), market.Number_cities ( real | values: 209, 540 ) ]
table film_market_estimation, columns = [ film_market_estimation.Estimation_ID ( integer | primary key | values: 1, 2 ), film_market_estimation.Low_Estimate ( real | values: 80000.0, 8000.0 ), film_market_estimation.High_Estimate ( real | values: 80400.0, 8000.0 ), film_market_estimation.Film_ID ( integer | values: 1, 2 ), film_market_estimation.Type ( text | values: Mass suicide murder, Mass suicide ), film_market_estimation.Market_ID ( integer | values: 1, 2 ), film_market_estimation.Year ( real | values: 1945, 1944 ) ]
foreign keys:
film_market_estimation.Market_ID = market.Market_ID
film_market_estimation.Film_ID = film.Film_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many film are there?
-- Count the number of films.
-- List the distinct director of all films.
-- What are the different film Directors?
-- What is the average ticket sales gross in dollars of films?
------------------------------------------------------------------------------------------
database_id: party_people
database schema :
table region, columns = [ region.Region_ID ( integer | primary key | values: 1, 2 ), region.Region_name ( text | values: United Kingdom, Japan ), region.Date ( text | values: 1 July 2002, 3 July 2002 ), region.Label ( text | values: Parlophone, Toshiba-EMI ), region.Format ( text | values: CD, 2× LP ), region.Catalogue ( text | values: 540 3622, 539 9821 ) ]
table party, columns = [ party.Party_ID ( integer | primary key | values: 1, 2 ), party.Minister ( text | values: Dr. Kwame Nkrumah (MP), Kojo Botsio (MP) ), party.Took_office ( text | values: 1957, 1958 ), party.Left_office ( text | values: 1958, 1959 ), party.Region_ID ( integer | values: 1, 2 ), party.Party_name ( text | values: Convention Peoples Party, Progress Party ) ]
table member, columns = [ member.Member_ID ( integer | primary key | values: 1, 2 ), member.Member_Name ( text | values: Hon Tony Abbott, Hon Dick Adams ), member.Party_ID ( text | values: 3, 2 ), member.In_office ( text | values: 1994–present, 1993–2013 ) ]
table party_events, columns = [ party_events.Event_ID ( integer | primary key | values: 1, 2 ), party_events.Event_Name ( text | values: Annaual Meeting, Conference ), party_events.Party_ID ( integer | values: 1, 2 ), party_events.Member_in_charge_ID ( integer | values: 4, 12 ) ]
foreign keys:
party.Region_ID = region.Region_ID
member.Party_ID = party.Party_ID
party_events.Member_in_charge_ID = member.Member_ID
party_events.Party_ID = party.Party_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many regions do we have?
-- Count the number of regions.
-- Show all distinct region names ordered by their labels.
-- What are the different region names, ordered by labels?
-- How many parties do we have?
------------------------------------------------------------------------------------------
database_id: hospital_1
database schema :
table Physician, columns = [ Physician.EmployeeID ( integer | primary key | values: 1, 2 ), Physician.Name ( text | values: John Dorian, Elliot Reid ), Physician.Position ( text | values: Staff Internist, Attending Physician ), Physician.SSN ( real | values: 111111111, 222222222 ) ]
table Department, columns = [ Department.DepartmentID ( integer | primary key | values: 1, 2 ), Department.Name ( text | values: General Medicine, Surgery ), Department.Head ( integer | values: 4, 7 ) ]
table Affiliated_With, columns = [ Affiliated_With.Physician ( integer | primary key | values: 1, 2 ), Affiliated_With.Department ( integer | values: 1, 2 ), Affiliated_With.PrimaryAffiliation ( boolean | values: 1, 0 ) ]
table Procedures, columns = [ Procedures.Code ( integer | primary key | values: 1, 2 ), Procedures.Name ( text | values: Reverse Rhinopodoplasty, Obtuse Pyloric Recombobulation ), Procedures.Cost ( real | values: 1500.0, 3750.0 ) ]
table Trained_In, columns = [ Trained_In.Physician ( integer | primary key | values: 3, 6 ), Trained_In.Treatment ( integer | values: 1, 2 ), Trained_In.CertificationDate ( datetime | values: 2008-01-01, 2007-01-01 ), Trained_In.CertificationExpires ( datetime | values: 2008-12-31, 2007-12-31 ) ]
table Patient, columns = [ Patient.SSN ( integer | primary key | values: 100000001, 100000002 ), Patient.Name ( text | values: John Smith, Grace Ritchie ), Patient.Address ( text | values: 42 Foobar Lane, 37 Snafu Drive ), Patient.Phone ( text | values: 555-0256, 555-0512 ), Patient.InsuranceID ( real | values: 68476213, 36546321 ), Patient.PCP ( integer | values: 1, 2 ) ]
table Nurse, columns = [ Nurse.EmployeeID ( integer | primary key | values: 101, 102 ), Nurse.Name ( text | values: Carla Espinosa, Laverne Roberts ), Nurse.Position ( text | values: Head Nurse, Nurse ), Nurse.Registered ( boolean | values: 1, 0 ), Nurse.SSN ( real | values: 111111110, 222222220 ) ]
table Appointment, columns = [ Appointment.AppointmentID ( integer | primary key | values: 13216584, 26548913 ), Appointment.Patient ( integer | values: 100000001, 100000002 ), Appointment.PrepNurse ( integer | values: 101, 102 ), Appointment.Physician ( integer | values: 1, 2 ), Appointment.Start ( datetime | values: 2008-04-24 10:00, 2008-04-25 10:00 ), Appointment.End ( datetime | values: 2008-04-24 11:00, 2008-04-25 11:00 ), Appointment.ExaminationRoom ( text | values: A, B ) ]
table Medication, columns = [ Medication.Code ( integer | primary key | values: 1, 2 ), Medication.Name ( text | values: Procrastin-X, Thesisin ), Medication.Brand ( text | values: X, Foo Labs ), Medication.Description ( text | values: N/A ) ]
table Prescribes, columns = [ Prescribes.Physician ( integer | primary key | values: 1, 9 ), Prescribes.Patient ( integer | values: 100000001, 100000004 ), Prescribes.Medication ( integer | values: 1, 2 ), Prescribes.Date ( datetime | values: 2008-04-24 10:47, 2008-04-27 10:53 ), Prescribes.Appointment ( integer | values: 13216584, 86213939 ), Prescribes.Dose ( text | values: 5, 10 ) ]
table Block, columns = [ Block.BlockFloor ( integer | primary key | values: 1, 2 ), Block.BlockCode ( real | values: 1, 2 ) ]
table Room, columns = [ Room.RoomNumber ( integer | primary key | values: 101, 102 ), Room.RoomType ( text | values: Single ), Room.BlockFloor ( integer | values: 1, 2 ), Room.BlockCode ( integer | values: 1, 2 ), Room.Unavailable ( boolean | values: 0, 1 ) ]
table On_Call, columns = [ On_Call.Nurse ( integer | primary key | values: 101, 102 ), On_Call.BlockFloor ( integer | values: 1 ), On_Call.BlockCode ( integer | values: 1, 2 ), On_Call.OnCallStart ( datetime | values: 2008-11-04 11:00, 2008-11-04 19:00 ), On_Call.OnCallEnd ( datetime | values: 2008-11-04 19:00, 2008-11-05 03:00 ) ]
table Stay, columns = [ Stay.StayID ( integer | primary key | values: 3215, 3216 ), Stay.Patient ( integer | values: 100000001, 100000003 ), Stay.Room ( integer | values: 111, 123 ), Stay.StayStart ( datetime | values: 2008-05-01, 2008-05-03 ), Stay.StayEnd ( datetime | values: 2008-05-04, 2008-05-14 ) ]
table Undergoes, columns = [ Undergoes.Patient ( integer | primary key | values: 100000001, 100000004 ), Undergoes.Procedures ( integer | values: 2, 6 ), Undergoes.Stay ( integer | values: 3215, 3217 ), Undergoes.DateUndergoes ( datetime | values: 2008-05-03, 2008-05-02 ), Undergoes.Physician ( integer | values: 3, 7 ), Undergoes.AssistingNurse ( integer | values: 101, 102 ) ]
foreign keys:
Department.Head = Physician.EmployeeID
Affiliated_With.Department = Department.DepartmentID
Affiliated_With.Physician = Physician.EmployeeID
Trained_In.Treatment = Procedures.Code
Trained_In.Physician = Physician.EmployeeID
Patient.PCP = Physician.EmployeeID
Appointment.Physician = Physician.EmployeeID
Appointment.PrepNurse = Nurse.EmployeeID
Appointment.Patient = Patient.SSN
Prescribes.Appointment = Appointment.AppointmentID
Prescribes.Medication = Medication.Code
Prescribes.Patient = Patient.SSN
Prescribes.Physician = Physician.EmployeeID
Room.BlockFloor = Block.BlockFloor
Room.BlockCode = Block.BlockCode
On_Call.BlockFloor = Block.BlockFloor
On_Call.BlockCode = Block.BlockCode
On_Call.Nurse = Nurse.EmployeeID
Stay.Room = Room.RoomNumber
Stay.Patient = Patient.SSN
Undergoes.AssistingNurse = Nurse.EmployeeID
Undergoes.Physician = Physician.EmployeeID
Undergoes.Stay = Stay.StayID
Undergoes.Procedures = Procedures.Code
Undergoes.Patient = Patient.SSN

# Here are some example questions that CAN be answered by the schema below:
-- Which department has the largest number of employees?
-- Find the department with the most employees.
-- What is the employee id of the head whose department has the least number of employees?
-- Tell me the employee id of the head of the department with the least employees.
-- what is the name and position of the head whose department has least number of employees?
------------------------------------------------------------------------------------------
database_id: customers_campaigns_ecommerce
database schema :
table Premises, columns = [ Premises.premise_id ( integer | primary key | values: 1, 2 ), Premises.premises_type ( text | values: Warehouse, Residence ), Premises.premise_details ( text | values: 036 Lueilwitz Harbor, 676 Kelly Spur ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.product_category ( text | values: Food, Electronics ), Products.product_name ( text | values: Coffee Bean, Keyboard ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.payment_method ( text | values: Credit Card, Direct Debit ), Customers.customer_name ( text | values: Wendell, Gage ), Customers.customer_phone ( text | values: (773)971-9411x759, (402)890-2603x6005 ), Customers.customer_email ( text | values: rodriguez.nathanael@example.net, stark.elna@example.net ), Customers.customer_address ( text | values: 618 Webster Stream Apt. 161, 0260 Walker Trace ), Customers.customer_login ( text | values: N/A ), Customers.customer_password ( text | values: b4459ad261, 7905d7f1b1 ) ]
table Mailshot_Campaigns, columns = [ Mailshot_Campaigns.mailshot_id ( integer | primary key | values: 1, 2 ), Mailshot_Campaigns.product_category ( text | values: food, clothes ), Mailshot_Campaigns.mailshot_name ( text | values: US, FED ), Mailshot_Campaigns.mailshot_start_date ( datetime | values: 2018-02-15 09:52:17, 2017-09-14 12:05:30 ), Mailshot_Campaigns.mailshot_end_date ( datetime | values: 2018-03-08 14:40:20, 2018-03-15 01:06:16 ) ]
table Customer_Addresses, columns = [ Customer_Addresses.customer_id ( integer | values: 15, 2 ), Customer_Addresses.premise_id ( integer | values: 1, 2 ), Customer_Addresses.date_address_from ( datetime | values: 1992-08-23 21:17:38, 2010-02-23 02:49:50 ), Customer_Addresses.address_type_code ( text | values: Billing, Shipping ), Customer_Addresses.date_address_to ( datetime | values: 2018-02-28 20:54:58, 2018-03-15 18:34:41 ) ]
table Customer_Orders, columns = [ Customer_Orders.order_id ( integer | primary key | values: 1, 2 ), Customer_Orders.customer_id ( integer | values: 2, 8 ), Customer_Orders.order_status_code ( text | values: Cancelled, Delivered ), Customer_Orders.shipping_method_code ( text | values: Unspecified, FedEx ), Customer_Orders.order_placed_datetime ( datetime | values: 2015-06-15 18:19:26, 2009-07-05 20:02:55 ), Customer_Orders.order_delivered_datetime ( datetime | values: 2018-03-20 12:00:00 ), Customer_Orders.order_shipping_charges ( text | values: 85.79, 98.4 ) ]
table Mailshot_Customers, columns = [ Mailshot_Customers.mailshot_id ( integer | values: 4, 10 ), Mailshot_Customers.customer_id ( integer | values: 3, 1 ), Mailshot_Customers.outcome_code ( text | values: Order, No Response ), Mailshot_Customers.mailshot_customer_date ( datetime | values: 2018-03-15 15:43:14, 2018-03-04 13:06:55 ) ]
table Order_Items, columns = [ Order_Items.item_id ( real | values: 1, 2 ), Order_Items.order_item_status_code ( text | values: Delivered, Paid ), Order_Items.order_id ( integer | values: 10, 6 ), Order_Items.product_id ( integer | values: 13, 7 ), Order_Items.item_status_code ( text | values: good ), Order_Items.item_delivered_datetime ( datetime | values: 2018-02-25 18:22:10, 2018-02-27 18:04:55 ), Order_Items.item_order_quantity ( text | values: 6, 7 ) ]
foreign keys:
Customer_Addresses.customer_id = Customers.customer_id
Customer_Addresses.premise_id = Premises.premise_id
Customer_Orders.customer_id = Customers.customer_id
Mailshot_Customers.mailshot_id = Mailshot_Campaigns.mailshot_id
Mailshot_Customers.customer_id = Customers.customer_id
Order_Items.order_id = Customer_Orders.order_id
Order_Items.product_id = Products.product_id

# Here are some example questions that CAN be answered by the schema below:
-- How many premises are there?
-- What are all the distinct premise types?
-- Find the types and details for all premises and order by the premise type.
-- Show each premise type and the number of premises in that type.
-- Show all distinct product categories along with the number of mailshots in each category.
------------------------------------------------------------------------------------------
database_id: gymnast
database schema :
table gymnast, columns = [ gymnast.Gymnast_ID ( integer | primary key | values: 1, 2 ), gymnast.Floor_Exercise_Points ( real | values: 9.725, 9.7 ), gymnast.Pommel_Horse_Points ( real | values: 9.737, 9.625 ), gymnast.Rings_Points ( real | values: 9.512, 9.625 ), gymnast.Vault_Points ( real | values: 9.575, 9.65 ), gymnast.Parallel_Bars_Points ( real | values: 9.762, 9.587 ), gymnast.Horizontal_Bar_Points ( real | values: 9.75, 9.737 ), gymnast.Total_Points ( real | values: 58.061, 57.924 ) ]
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Name ( text | values: Paul Hamm, Lorraine Súarez Carmona ), people.Age ( real | values: 24.0, 21.0 ), people.Height ( real | values: 1.71, 1.75 ), people.Hometown ( text | values: Santo Domingo, Bonao ) ]
foreign keys:
gymnast.Gymnast_ID = people.People_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many gymnasts are there?
-- Count the number of gymnasts.
-- List the total points of gymnasts in descending order.
-- What are the total points for all gymnasts, ordered by total points descending?
-- List the total points of gymnasts in descending order of floor exercise points.
------------------------------------------------------------------------------------------
database_id: restaurants
database schema :
table GEOGRAPHIC, columns = [ GEOGRAPHIC.CITY_NAME ( text | primary key | values: N/A ), GEOGRAPHIC.COUNTY ( text | values: N/A ), GEOGRAPHIC.REGION ( text | values: N/A ) ]
table RESTAURANT, columns = [ RESTAURANT.ID ( integer | primary key | values: N/A ), RESTAURANT.NAME ( text | values: N/A ), RESTAURANT.FOOD_TYPE ( text | values: N/A ), RESTAURANT.CITY_NAME ( text | values: N/A ), RESTAURANT.RATING ( real | values: N/A ) ]
table LOCATION, columns = [ LOCATION.RESTAURANT_ID ( integer | primary key | values: N/A ), LOCATION.HOUSE_NUMBER ( real | values: N/A ), LOCATION.STREET_NAME ( text | values: N/A ), LOCATION.CITY_NAME ( text | values: N/A ) ]
foreign keys:
RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME
LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME

# Here are some example questions that CAN be answered by the schema below:
-- how many buttercup kitchen are there in san francisco ?
-- how many chinese restaurants are there in the bay area ?
-- how many places for chinese food are there in the bay area ?
-- how many chinese places are there in the bay area ?
-- how many places for chinese are there in the bay area ?
------------------------------------------------------------------------------------------
database_id: mountain_photos
database schema :
table mountain, columns = [ mountain.id ( integer | primary key | values: 1, 2 ), mountain.name ( text | values: Abune Yosef / Guliba Amba, Ioll / Yoll ), mountain.Height ( real | values: 4260.0, 4220.0 ), mountain.Prominence ( real | values: 1909.0, 350.0 ), mountain.Range ( text | values: Lasta Massif, Kollo Massif ), mountain.Country ( text | values: Ethiopia, Morocco ) ]
table camera_lens, columns = [ camera_lens.id ( integer | primary key | values: 1, 2 ), camera_lens.brand ( text | values: Olympus, Panasonic ), camera_lens.name ( text | values: Olympus 15mm f/8.0 Body Cap, Olympus M.Zuiko Digital ED 45mm f/1.8 ), camera_lens.focal_length_mm ( real | values: 15.0, 45.0 ), camera_lens.max_aperture ( real | values: 8.0, 1.8 ) ]
table photos, columns = [ photos.id ( integer | primary key | values: 1, 2 ), photos.camera_lens_id ( integer | values: 1, 10 ), photos.mountain_id ( integer | values: 20, 2 ), photos.color ( text | values: RBG, Black/White ), photos.name ( text | values: monkey, rabbits ) ]
foreign keys:
photos.mountain_id = mountain.id
photos.camera_lens_id = camera_lens.id

# Here are some example questions that CAN be answered by the schema below:
-- How many camera lenses have a focal length longer than 15 mm?
-- Find the brand and name for each camera lens, and sort in descending order of maximum aperture.
-- List the id, color scheme, and name for all the photos.
-- What are the maximum and average height of the mountains?
-- What are the average prominence of the mountains in country 'Morocco'?
------------------------------------------------------------------------------------------
database_id: battle_death
database schema :
table battle, columns = [ battle.id ( integer | primary key | values: 1, 2 ), battle.name ( text | values: Battle of Adrianople, Battle of Serres ), battle.date ( text | values: 14 April 1205, June 1205 ), battle.bulgarian_commander ( text | values: Kaloyan, Unknown ), battle.latin_commander ( text | values: Baldwin I, Unknown ), battle.result ( text | values: Bulgarian victory, Latin victory ) ]
table ship, columns = [ ship.lost_in_battle ( integer | values: 8, 7 ), ship.id ( integer | primary key | values: 1, 2 ), ship.name ( text | values: Lettice, Bon Accord ), ship.tonnage ( text | values: t, 391 ), ship.ship_type ( text | values: Brig, 18-gun Brig ), ship.location ( text | values: English Channel, SW Approaches ), ship.disposition_of_ship ( text | values: Captured, Wrecked ) ]
table death, columns = [ death.caused_by_ship_id ( integer | values: 1, 2 ), death.id ( integer | primary key | values: 1, 2 ), death.note ( text | values: Dantewada, Chhattisgarh, Erraboru, Chhattisgarh ), death.killed ( real | values: 8, 3 ), death.injured ( real | values: 0, 9 ) ]
foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id

# Here are some example questions that CAN be answered by the schema below:
-- How many ships ended up being 'Captured'?
-- List the name and tonnage ordered by in descending alphaetical order for the names.
-- List the name, date and result of each battle.
-- What is maximum and minimum death toll caused each time?
-- What is the average number of injuries caused each time?
------------------------------------------------------------------------------------------
database_id: cre_Doc_Control_Systems
database schema :
table Ref_Document_Types, columns = [ Ref_Document_Types.document_type_code ( text | primary key | values: CD, Hard Drive ), Ref_Document_Types.document_type_description ( text | values: b, u ) ]
table Roles, columns = [ Roles.role_code ( text | primary key | values: ED, MG ), Roles.role_description ( text | values: Editor, Photo ) ]
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 0, 1 ), Addresses.address_details ( text | values: IT, MX ) ]
table Ref_Document_Status, columns = [ Ref_Document_Status.document_status_code ( text | primary key | values: done, overdue ), Ref_Document_Status.document_status_description ( text | values: currently working on, mailed ) ]
table Ref_Shipping_Agents, columns = [ Ref_Shipping_Agents.shipping_agent_code ( text | primary key | values: AL, FE ), Ref_Shipping_Agents.shipping_agent_name ( text | values: UPS, USPS ), Ref_Shipping_Agents.shipping_agent_description ( text | values: g, q ) ]
table Documents, columns = [ Documents.document_id ( integer | primary key | values: 1, 2 ), Documents.document_status_code ( text | values: working, done ), Documents.document_type_code ( text | values: CD, Paper ), Documents.shipping_agent_code ( text | values: UP, US ), Documents.receipt_date ( datetime | values: 2008-04-21 20:42:25, 1974-05-08 00:00:46 ), Documents.receipt_number ( text | values: 19, 34 ), Documents.other_details ( text | values: z, h ) ]
table Employees, columns = [ Employees.employee_id ( integer | primary key | values: 1, 2 ), Employees.role_code ( text | values: ED, PR ), Employees.employee_name ( text | values: Koby, Kenyon ), Employees.other_details ( text | values: h, f ) ]
table Document_Drafts, columns = [ Document_Drafts.document_id ( integer | primary key | values: 1, 2 ), Document_Drafts.draft_number ( real | values: 0, 2 ), Document_Drafts.draft_details ( text | values: e, k ) ]
table Draft_Copies, columns = [ Draft_Copies.document_id ( integer | primary key | values: 1, 2 ), Draft_Copies.draft_number ( integer | values: 8, 9 ), Draft_Copies.copy_number ( real | values: 5, 6 ) ]
table Circulation_History, columns = [ Circulation_History.document_id ( integer | primary key | values: 1, 2 ), Circulation_History.draft_number ( integer | values: 17, 2 ), Circulation_History.copy_number ( integer | values: 15, 5 ), Circulation_History.employee_id ( integer | values: 8, 1 ) ]
table Documents_Mailed, columns = [ Documents_Mailed.document_id ( integer | primary key | values: 2, 4 ), Documents_Mailed.mailed_to_address_id ( integer | values: 8, 3 ), Documents_Mailed.mailing_date ( datetime | values: 1977-04-01 17:03:50, 1992-11-07 15:03:41 ) ]
foreign keys:
Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code
Documents.document_status_code = Ref_Document_Status.document_status_code
Documents.document_type_code = Ref_Document_Types.document_type_code
Employees.role_code = Roles.role_code
Document_Drafts.document_id = Documents.document_id
Draft_Copies.document_id = Document_Drafts.document_id
Draft_Copies.draft_number = Document_Drafts.draft_number
Circulation_History.employee_id = Employees.employee_id
Circulation_History.document_id = Draft_Copies.document_id
Circulation_History.draft_number = Draft_Copies.draft_number
Circulation_History.copy_number = Draft_Copies.copy_number
Documents_Mailed.mailed_to_address_id = Addresses.address_id
Documents_Mailed.document_id = Documents.document_id

# Here are some example questions that CAN be answered by the schema below:
-- What document status codes do we have?
-- What is the description of document status code 'working'?
-- What document type codes do we have?
-- What is the description of document type 'Paper'?
-- What are the shipping agent names?
------------------------------------------------------------------------------------------
database_id: tracking_share_transactions
database schema :
table Investors, columns = [ Investors.investor_id ( integer | primary key | values: 1, 2 ), Investors.Investor_details ( text | values: z, d ) ]
table Lots, columns = [ Lots.lot_id ( integer | primary key | values: 1, 2 ), Lots.investor_id ( integer | values: 13, 16 ), Lots.lot_details ( text | values: r, z ) ]
table Ref_Transaction_Types, columns = [ Ref_Transaction_Types.transaction_type_code ( text | primary key | values: PUR, SALE ), Ref_Transaction_Types.transaction_type_description ( text | values: Sale, Purchase ) ]
table Transactions, columns = [ Transactions.transaction_id ( integer | primary key | values: 1, 2 ), Transactions.investor_id ( integer | values: 6, 18 ), Transactions.transaction_type_code ( text | values: SALE, PUR ), Transactions.date_of_transaction ( datetime | values: 1988-09-16 19:02:51, 1982-06-06 17:19:00 ), Transactions.amount_of_transaction ( real | values: 302507.6996, 27.257 ), Transactions.share_count ( text | values: 8718572, 9 ), Transactions.other_details ( text | values: N/A ) ]
table Sales, columns = [ Sales.sales_transaction_id ( integer | primary key | values: 1, 2 ), Sales.sales_details ( text | values: x, o ) ]
table Purchases, columns = [ Purchases.purchase_transaction_id ( integer | values: 1, 2 ), Purchases.purchase_details ( text | values: c, y ) ]
table Transactions_Lots, columns = [ Transactions_Lots.transaction_id ( integer | values: 3, 2 ), Transactions_Lots.lot_id ( integer | values: 11, 8 ) ]
foreign keys:
Lots.investor_id = Investors.investor_id
Transactions.transaction_type_code = Ref_Transaction_Types.transaction_type_code
Transactions.investor_id = Investors.investor_id
Sales.sales_transaction_id = Transactions.transaction_id
Purchases.purchase_transaction_id = Transactions.transaction_id
Transactions_Lots.transaction_id = Transactions.transaction_id
Transactions_Lots.lot_id = Lots.lot_id

# Here are some example questions that CAN be answered by the schema below:
-- Find the number of investors in total.
-- Show all investor details.
-- Show all distinct lot details.
-- Show the maximum amount of transaction.
-- Show all date and share count of transactions.
------------------------------------------------------------------------------------------
database_id: apartment_rentals
database schema :
table Apartment_Buildings, columns = [ Apartment_Buildings.building_id ( integer | primary key | values: 133, 153 ), Apartment_Buildings.building_short_name ( text | values: Normandie Court, Mercedes House ), Apartment_Buildings.building_full_name ( text | values: Normandie Court, Mercedes House ), Apartment_Buildings.building_description ( text | values: Studio, Flat ), Apartment_Buildings.building_address ( text | values: 7950 Casper Vista Apt. 176
Marquiseberg, CA 70496, 354 Otto Villages
Charliefort, VT 71664 ), Apartment_Buildings.building_manager ( text | values: Emma, Brenden ), Apartment_Buildings.building_phone ( text | values: (948)040-1064x387, 915-617-2408x832 ) ]
table Apartments, columns = [ Apartments.apt_id ( integer | primary key | values: 1, 2 ), Apartments.building_id ( integer | values: 808, 624 ), Apartments.apt_type_code ( text | values: Flat, Studio ), Apartments.apt_number ( text | values: Suite 645, Apt. 585 ), Apartments.bathroom_count ( real | values: 1, 2 ), Apartments.bedroom_count ( real | values: 3, 4 ), Apartments.room_count ( text | values: 7, 5 ) ]
table Apartment_Facilities, columns = [ Apartment_Facilities.apt_id ( integer | primary key | values: 1, 2 ), Apartment_Facilities.facility_code ( text | values: Boardband, Gym ) ]
table Guests, columns = [ Guests.guest_id ( integer | primary key | values: 1, 2 ), Guests.gender_code ( text | values: Male, Unknown ), Guests.guest_first_name ( text | values: Kip, Rebeca ), Guests.guest_last_name ( text | values: DuBuque, Runolfsdottir ), Guests.date_of_birth ( datetime | values: 1995-11-04 07:09:57, 1974-05-12 21:53:58 ) ]
table Apartment_Bookings, columns = [ Apartment_Bookings.apt_booking_id ( integer | primary key | values: 258, 279 ), Apartment_Bookings.apt_id ( integer | values: 10, 15 ), Apartment_Bookings.guest_id ( integer | values: 2, 15 ), Apartment_Bookings.booking_status_code ( text | values: Provisional, Confirmed ), Apartment_Bookings.booking_start_date ( datetime | values: 2016-09-26 17:13:49, 2016-04-01 06:28:08 ), Apartment_Bookings.booking_end_date ( datetime | values: 2017-10-07 11:38:48, 2017-10-25 11:08:42 ) ]
table View_Unit_Status, columns = [ View_Unit_Status.apt_id ( integer | values: 11, 15 ), View_Unit_Status.apt_booking_id ( integer | values: 920, 575 ), View_Unit_Status.status_date ( datetime | primary key | values: 1970-09-28 10:24:29, 1972-03-23 22:55:53 ), View_Unit_Status.available_yn ( text | values: 1, 0 ) ]
foreign keys:
Apartments.building_id = Apartment_Buildings.building_id
Apartment_Facilities.apt_id = Apartments.apt_id
Apartment_Bookings.guest_id = Guests.guest_id
Apartment_Bookings.apt_id = Apartments.apt_id
View_Unit_Status.apt_booking_id = Apartment_Bookings.apt_booking_id
View_Unit_Status.apt_id = Apartments.apt_id

# Here are some example questions that CAN be answered by the schema below:
-- How many apartment bookings are there in total?
-- Count the total number of apartment bookings.
-- Show the start dates and end dates of all the apartment bookings.
-- What are the start date and end date of each apartment booking?
-- Show all distinct building descriptions.
------------------------------------------------------------------------------------------
database_id: student_transcripts_tracking
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.line_1 ( text | values: 2294 Grant Square Apt. 235, 3999 Aufderhar Ways Suite 593 ), Addresses.line_2 ( text | values: Apt. 370, Apt. 388 ), Addresses.line_3 ( text | values: N/A ), Addresses.city ( text | values: Port Chelsea, Lake Laishafurt ), Addresses.zip_postcode ( text | values: 148, 943 ), Addresses.state_province_county ( text | values: Virginia, Kentucky ), Addresses.country ( text | values: Iceland, Burundi ), Addresses.other_address_details ( text | values: N/A ) ]
table Courses, columns = [ Courses.course_id ( integer | primary key | values: 1, 2 ), Courses.course_name ( text | values: ds, math ), Courses.course_description ( text | values: p, q ), Courses.other_details ( text | values: N/A ) ]
table Departments, columns = [ Departments.department_id ( integer | primary key | values: 1, 2 ), Departments.department_name ( text | values: computer science, history ), Departments.department_description ( text | values: error, nostrum ), Departments.other_details ( text | values: N/A ) ]
table Degree_Programs, columns = [ Degree_Programs.degree_program_id ( integer | primary key | values: 1, 2 ), Degree_Programs.department_id ( integer | values: 13, 2 ), Degree_Programs.degree_summary_name ( text | values: Master, Bachelor ), Degree_Programs.degree_summary_description ( text | values: architecto, cumque ), Degree_Programs.other_details ( text | values: N/A ) ]
table Sections, columns = [ Sections.section_id ( integer | primary key | values: 1, 2 ), Sections.course_id ( integer | values: 9, 2 ), Sections.section_name ( text | values: a, b ), Sections.section_description ( text | values: non, voluptatem ), Sections.other_details ( text | values: N/A ) ]
table Semesters, columns = [ Semesters.semester_id ( integer | primary key | values: 1, 2 ), Semesters.semester_name ( text | values: spring 2010, summer 2010 ), Semesters.semester_description ( text | values: x, g ), Semesters.other_details ( text | values: N/A ) ]
table Students, columns = [ Students.student_id ( integer | primary key | values: 1, 2 ), Students.current_address_id ( integer | values: 10, 12 ), Students.permanent_address_id ( integer | values: 15, 5 ), Students.first_name ( text | values: Timmothy, Hobart ), Students.middle_name ( text | values: Anna, Lorenz ), Students.last_name ( text | values: Ward, Balistreri ), Students.cell_mobile_number ( text | values: (096)889-8954x524, 1-009-710-5151 ), Students.email_address ( text | values: erwin.zboncak@example.com, swift.kolby@example.com ), Students.ssn ( text | values: 965, 304246 ), Students.date_first_registered ( datetime | values: 1971-02-05 07:28:23, 1976-10-26 02:33:06 ), Students.date_left ( datetime | values: 1971-05-17 19:28:49, 2013-10-05 17:41:28 ), Students.other_student_details ( text | values: quia, autem ) ]
table Student_Enrolment, columns = [ Student_Enrolment.student_enrolment_id ( integer | primary key | values: 1, 2 ), Student_Enrolment.degree_program_id ( integer | values: 12, 4 ), Student_Enrolment.semester_id ( integer | values: 13, 2 ), Student_Enrolment.student_id ( integer | values: 14, 9 ), Student_Enrolment.other_details ( text | values: N/A ) ]
table Student_Enrolment_Courses, columns = [ Student_Enrolment_Courses.student_course_id ( integer | primary key | values: 0, 1 ), Student_Enrolment_Courses.course_id ( integer | values: 6, 14 ), Student_Enrolment_Courses.student_enrolment_id ( integer | values: 2, 8 ) ]
table Transcripts, columns = [ Transcripts.transcript_id ( integer | primary key | values: 1, 2 ), Transcripts.transcript_date ( datetime | values: 1988-04-30 01:19:47, 1975-10-28 15:16:51 ), Transcripts.other_details ( text | values: N/A ) ]
table Transcript_Contents, columns = [ Transcript_Contents.student_course_id ( integer | values: 0, 96 ), Transcript_Contents.transcript_id ( integer | values: 2, 8 ) ]
foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id

# Here are some example questions that CAN be answered by the schema below:
-- what are all the addresses including line 1 and line 2?
-- What is the first and second line for all addresses?
-- How many courses in total are listed?
-- How many courses are there?
-- How is the math course described?
------------------------------------------------------------------------------------------
database_id: cre_Docs_and_Epenses
database schema :
table Ref_Document_Types, columns = [ Ref_Document_Types.Document_Type_Code ( text | primary key | values: BK, CV ), Ref_Document_Types.Document_Type_Name ( text | values: Book, CV ), Ref_Document_Types.Document_Type_Description ( text | values: excellent, very good ) ]
table Ref_Budget_Codes, columns = [ Ref_Budget_Codes.Budget_Type_Code ( text | primary key | values: GV, ORG ), Ref_Budget_Codes.Budget_Type_Description ( text | values: Government, Organisation ) ]
table Projects, columns = [ Projects.Project_ID ( integer | primary key | values: 30, 35 ), Projects.Project_Details ( text | values: Society Research project, Internet of Things project ) ]
table Documents, columns = [ Documents.Document_ID ( integer | primary key | values: 29, 42 ), Documents.Document_Type_Code ( text | values: CV, BK ), Documents.Project_ID ( integer | values: 30, 105 ), Documents.Document_Date ( datetime | values: 2004-08-28 06:59:19, 2012-12-27 19:09:18 ), Documents.Document_Name ( text | values: Review on UK files, Review on Canadian files ), Documents.Document_Description ( text | values: N/A ), Documents.Other_Details ( text | values: N/A ) ]
table Statements, columns = [ Statements.Statement_ID ( integer | primary key | values: 57, 192 ), Statements.Statement_Details ( text | values: Open Project, Private Project ) ]
table Documents_with_Expenses, columns = [ Documents_with_Expenses.Document_ID ( integer | primary key | values: 57, 192 ), Documents_with_Expenses.Budget_Type_Code ( text | values: GV, SF ), Documents_with_Expenses.Document_Details ( text | values: government, safety ) ]
table Accounts, columns = [ Accounts.Account_ID ( integer | primary key | values: 7, 61 ), Accounts.Statement_ID ( integer | values: 57, 192 ), Accounts.Account_Details ( text | values: 495.063, 930.14 ) ]
foreign keys:
Documents.Project_ID = Projects.Project_ID
Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code
Statements.Statement_ID = Documents.Document_ID
Documents_with_Expenses.Document_ID = Documents.Document_ID
Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code
Accounts.Statement_ID = Statements.Statement_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many accounts do we have?
-- Count the number of accounts.
-- Show all account ids and account details.
-- What are the ids and details of all accounts?
-- How many statements do we have?
------------------------------------------------------------------------------------------
database_id: ship_mission
database schema :
table mission, columns = [ mission.Mission_ID ( integer | primary key | values: 1, 2 ), mission.Ship_ID ( integer | values: 1, 2 ), mission.Code ( text | values: VMV-1, VMV-2 ), mission.Launched_Year ( real | values: 1930, 1916 ), mission.Location ( text | values: Germany, Helsinki , Finland ), mission.Speed_knots ( real | values: 25, 23 ), mission.Fate ( text | values: Decommissioned 1950, Lost (burned) 1931 ) ]
table ship, columns = [ ship.Ship_ID ( integer | primary key | values: 1, 2 ), ship.Name ( text | values: Corbridge, Farringford ), ship.Type ( text | values: Cargo ship, Battle ship ), ship.Nationality ( text | values: United Kingdom, United States ), ship.Tonnage ( real | values: 3687, 3146 ) ]
foreign keys:
mission.Ship_ID = ship.Ship_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many ships are there?
-- What is the number of ships?
-- List the name of ships in ascending order of tonnage.
-- what are the names of the ships ordered by ascending tonnage?
-- What are the type and nationality of ships?
------------------------------------------------------------------------------------------
database_id: company_office
database schema :
table buildings, columns = [ buildings.id ( integer | primary key | values: 1, 2 ), buildings.name ( text | values: Torre KOI, Torre Mitikah ), buildings.City ( text | values: Monterrey, Mexico City ), buildings.Height ( real | values: 220, 210 ), buildings.Stories ( real | values: 67, 60 ), buildings.Status ( text | values: under construction, proposed ) ]
table Companies, columns = [ Companies.id ( integer | primary key | values: 1, 2 ), Companies.name ( text | values: JPMorgan Chase, HSBC ), Companies.Headquarters ( text | values: USA, UK ), Companies.Industry ( text | values: Banking, Conglomerate ), Companies.Sales_billion ( real | values: 115.5, 103.3 ), Companies.Profits_billion ( real | values: 17.4, 13.3 ), Companies.Assets_billion ( real | values: 2117.6, 2467.9 ), Companies.Market_Value_billion ( text | values: 182.2, 186.5 ) ]
table Office_locations, columns = [ Office_locations.building_id ( integer | primary key | values: 1, 2 ), Office_locations.company_id ( integer | values: 1, 2 ), Office_locations.move_in_year ( real | values: 2021, 2022 ) ]
foreign keys:
Office_locations.company_id = Companies.id
Office_locations.building_id = buildings.id

# Here are some example questions that CAN be answered by the schema below:
-- How many companies are there?
-- Count the number of companies.
-- List the names of companies in descending order of market value.
-- Sort the company names in descending order of the company's market value.
-- What are the names of companies whose headquarters are not "USA"?
------------------------------------------------------------------------------------------
database_id: tracking_software_problems
database schema :
table Problem_Category_Codes, columns = [ Problem_Category_Codes.problem_category_code ( text | primary key | values: Datatabase, GUI ), Problem_Category_Codes.problem_category_description ( text | values: Database design or contents., User Interface. ) ]
table Problem_Log, columns = [ Problem_Log.problem_log_id ( integer | primary key | values: 1, 2 ), Problem_Log.assigned_to_staff_id ( integer | values: 11, 12 ), Problem_Log.problem_id ( integer | values: 11, 8 ), Problem_Log.problem_category_code ( text | values: Middleware, GUI ), Problem_Log.problem_status_code ( text | values: Solved, Reported ), Problem_Log.log_entry_date ( datetime | values: 2011-03-13 13:11:57, 1976-03-31 14:03:02 ), Problem_Log.log_entry_description ( text | values: t, a ), Problem_Log.log_entry_fix ( text | values: k, j ), Problem_Log.other_log_details ( text | values: p, s ) ]
table Problem_Status_Codes, columns = [ Problem_Status_Codes.problem_status_code ( text | primary key | values: Reported, Solved ), Problem_Status_Codes.problem_status_description ( text | values: Reported, Solved ) ]
table Product, columns = [ Product.product_id ( integer | primary key | values: 1, 2 ), Product.product_name ( text | values: rose, yellow ), Product.product_details ( text | values: k, q ) ]
table Staff, columns = [ Staff.staff_id ( integer | primary key | values: 1, 2 ), Staff.staff_first_name ( text | values: Lacey, Dameon ), Staff.staff_last_name ( text | values: Bosco, Frami ), Staff.other_staff_details ( text | values: m, x ) ]
table Problems, columns = [ Problems.problem_id ( integer | primary key | values: 1, 2 ), Problems.product_id ( integer | values: 4, 8 ), Problems.closure_authorised_by_staff_id ( integer | values: 4, 3 ), Problems.reported_by_staff_id ( integer | values: 2, 10 ), Problems.date_problem_reported ( datetime | values: 1978-06-26 19:10:17, 1988-11-07 16:09:31 ), Problems.date_problem_closed ( datetime | values: 2012-07-22 19:24:26, 1973-06-07 04:13:51 ), Problems.problem_description ( text | values: x, w ), Problems.other_problem_details ( text | values: p, i ) ]
foreign keys:
Problem_Log.problem_status_code = Problem_Status_Codes.problem_status_code
Problem_Log.problem_id = Problems.problem_id
Problem_Log.assigned_to_staff_id = Staff.staff_id
Problem_Log.problem_category_code = Problem_Category_Codes.problem_category_code
Problems.reported_by_staff_id = Staff.staff_id
Problems.product_id = Product.product_id
Problems.closure_authorised_by_staff_id = Staff.staff_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the id of the problem log that is created most recently?
-- Which problem log was created most recently? Give me the log id.
-- What is the oldest log id and its corresponding problem id?
-- Find the oldest log id and its corresponding problem id.
-- Find all the ids and dates of the logs for the problem whose id is 10.
------------------------------------------------------------------------------------------
database_id: products_gen_characteristics
database schema :
table Ref_Characteristic_Types, columns = [ Ref_Characteristic_Types.characteristic_type_code ( text | primary key | values: Grade, Purity ), Ref_Characteristic_Types.characteristic_type_description ( text | values: Grade, Purity ) ]
table Ref_Colors, columns = [ Ref_Colors.color_code ( text | primary key | values: 1, 2 ), Ref_Colors.color_description ( text | values: red, green ) ]
table Ref_Product_Categories, columns = [ Ref_Product_Categories.product_category_code ( text | primary key | values: Herbs, Seeds ), Ref_Product_Categories.product_category_description ( text | values: Herbs, Seeds ), Ref_Product_Categories.unit_of_measure ( text | values: Handful             , Weight - pound,kilo. ) ]
table Characteristics, columns = [ Characteristics.characteristic_id ( integer | primary key | values: 1, 2 ), Characteristics.characteristic_type_code ( text | values: Grade, Purity ), Characteristics.characteristic_data_type ( text | values: numquam, doloribus ), Characteristics.characteristic_name ( text | values: slow, fast ), Characteristics.other_characteristic_details ( text | values: N/A ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.color_code ( text | values: 4, 2 ), Products.product_category_code ( text | values: Spices, Herbs ), Products.product_name ( text | values: cumin, peper ), Products.typical_buying_price ( text | values: , 352447.2874677 ), Products.typical_selling_price ( text | values: 2878.3, 1892070.2803543 ), Products.product_description ( text | values: et, rerum ), Products.other_product_details ( text | values: N/A ) ]
table Product_Characteristics, columns = [ Product_Characteristics.product_id ( integer | values: 13, 11 ), Product_Characteristics.characteristic_id ( integer | values: 13, 2 ), Product_Characteristics.product_characteristic_value ( text | values: low, medium ) ]
foreign keys:
Characteristics.characteristic_type_code = Ref_Characteristic_Types.characteristic_type_code
Products.color_code = Ref_Colors.color_code
Products.product_category_code = Ref_Product_Categories.product_category_code
Product_Characteristics.product_id = Products.product_id
Product_Characteristics.characteristic_id = Characteristics.characteristic_id

# Here are some example questions that CAN be answered by the schema below:
-- How many products are there?
-- Count the number of products.
-- How many colors are there?
-- Count the number of colors.
-- How many characteristics are there?
------------------------------------------------------------------------------------------
database_id: coffee_shop
database schema :
table shop, columns = [ shop.Shop_ID ( integer | primary key | values: 1, 2 ), shop.Address ( text | values: 1200 Main Street, 1111 Main Street ), shop.Num_of_staff ( text | values: 13, 19 ), shop.Score ( real | values: 42.0, 38.0 ), shop.Open_Year ( text | values: 2010, 2008 ) ]
table member, columns = [ member.Member_ID ( integer | primary key | values: 1, 2 ), member.Name ( text | values: Ashby, Lazale, Breton, Robert ), member.Membership_card ( text | values: Black, White ), member.Age ( real | values: 29, 67 ), member.Time_of_purchase ( real | values: 18, 41 ), member.Level_of_membership ( real | values: 5, 4 ), member.Address ( text | values: Hartford, Waterbury ) ]
table happy_hour, columns = [ happy_hour.HH_ID ( integer | primary key | values: 1, 2 ), happy_hour.Shop_ID ( integer | values: 1, 10 ), happy_hour.Month ( text | values: May, April ), happy_hour.Num_of_shaff_in_charge ( real | values: 10, 12 ) ]
table happy_hour_member, columns = [ happy_hour_member.HH_ID ( integer | primary key | values: 1, 2 ), happy_hour_member.Member_ID ( integer | values: 3, 5 ), happy_hour_member.Total_amount ( real | values: 20.9, 20.92 ) ]
foreign keys:
happy_hour.Shop_ID = shop.Shop_ID
happy_hour_member.Member_ID = member.Member_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many members have the black membership card?
-- Find the number of members living in each address.
-- Give me the names of members whose address is in Harford or Waterbury.
-- Find the ids and names of members who are under age 30 or with black membership card.
-- Find the purchase time, age and address of each member, and show the results in the order of purchase time.
------------------------------------------------------------------------------------------
database_id: riding_club
database schema :
table player, columns = [ player.Player_ID ( integer | primary key | values: 1, 2 ), player.Sponsor_name ( text | values: Brandon—Souris, Charleswood—St. James—Assiniboia ), player.Player_name ( text | values: Jean Luc Bouché, Fiona Shiells ), player.Gender ( text | values: M, F ), player.Residence ( text | values: Brandon, Winnipeg ), player.Occupation ( text | values: Locomotive Engineer, Ministerial Assistant ), player.Votes ( real | values: 6055, 7190 ), player.Rank ( text | values: 2nd, 3rd ) ]
table club, columns = [ club.Club_ID ( integer | primary key | values: 1, 2 ), club.Club_name ( text | values: AIK, BK Häcken ), club.Region ( text | values: USA, UK ), club.Start_year ( real | values: 2009, 1998 ) ]
table coach, columns = [ coach.Coach_ID ( integer | primary key | values: 1, 2 ), coach.Coach_name ( text | values: Jameson Tomas, Joe Fabbri ), coach.Gender ( text | values: M, F ), coach.Club_ID ( integer | values: 1, 3 ), coach.Rank ( real | values: 1, 2 ) ]
table player_coach, columns = [ player_coach.Player_ID ( integer | primary key | values: 1, 2 ), player_coach.Coach_ID ( integer | values: 1, 2 ), player_coach.Starting_year ( real | values: 2010, 2011 ) ]
table match_result, columns = [ match_result.Rank ( integer | primary key | values: 1, 2 ), match_result.Club_ID ( integer | values: 1, 2 ), match_result.Gold ( real | values: 20, 13 ), match_result.Big_Silver ( real | values: 14, 11 ), match_result.Small_Silver ( real | values: 9, 16 ), match_result.Bronze ( real | values: 8, 9 ), match_result.Points ( real | values: 168, 139 ) ]
foreign keys:
coach.Club_ID = club.Club_ID
player_coach.Coach_ID = coach.Coach_ID
player_coach.Player_ID = player.Player_ID
match_result.Club_ID = club.Club_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many players are there?
-- List the names of players in ascending order of votes.
-- What are the gender and occupation of players?
-- List the name and residence for players whose occupation is not "Researcher".
-- Show the names of sponsors of players whose residence is either "Brandon" or "Birtle".
------------------------------------------------------------------------------------------
database_id: customers_card_transactions
database schema :
table Accounts, columns = [ Accounts.account_id ( integer | primary key | values: 1, 2 ), Accounts.customer_id ( real | values: 6, 14 ), Accounts.account_name ( text | values: 338, 562 ), Accounts.other_account_details ( text | values: Regular, VIP ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.customer_first_name ( text | values: Aniyah, Susie ), Customers.customer_last_name ( text | values: Feest, Wiza ), Customers.customer_address ( text | values: 55975 Theodore Estates
Lake Brody, VT 57078, 6478 Moen Isle Suite 910
Schimmelmouth, VT 96364-4898 ), Customers.customer_phone ( text | values: (673)872-5338, 679-845-8645x94312 ), Customers.customer_email ( text | values: fahey.dorian@example.com, idickinson@example.com ), Customers.other_customer_details ( text | values: N/A ) ]
table Customers_Cards, columns = [ Customers_Cards.card_id ( integer | primary key | values: 1, 2 ), Customers_Cards.customer_id ( real | values: 14, 9 ), Customers_Cards.card_type_code ( text | values: Credit, Debit ), Customers_Cards.card_number ( text | values: 4560596484842, 4859448397570735 ), Customers_Cards.date_valid_from ( datetime | values: 2011-04-17 09:05:28, 2012-05-22 02:05:41 ), Customers_Cards.date_valid_to ( datetime | values: 2018-03-07 17:06:19, 2018-02-25 15:43:32 ), Customers_Cards.other_card_details ( text | values: 5567915676420343, 4539333582760 ) ]
table Financial_Transactions, columns = [ Financial_Transactions.transaction_id ( real | values: 1, 2 ), Financial_Transactions.previous_transaction_id ( real | values: 925, 494 ), Financial_Transactions.account_id ( integer | values: 15, 3 ), Financial_Transactions.card_id ( integer | values: 1, 2 ), Financial_Transactions.transaction_type ( text | values: Payment, Refund ), Financial_Transactions.transaction_date ( datetime | values: 2018-03-24 06:41:41, 2018-03-24 12:08:55 ), Financial_Transactions.transaction_amount ( real | values: 1701.23, 1931.76 ), Financial_Transactions.transaction_comment ( text | values: N/A ), Financial_Transactions.other_transaction_details ( text | values: N/A ) ]
foreign keys:
Financial_Transactions.account_id = Accounts.account_id
Financial_Transactions.card_id = Customers_Cards.card_id

# Here are some example questions that CAN be answered by the schema below:
-- How many accounts do we have?
-- Count the number of accounts.
-- Show ids, customer ids, names for all accounts.
-- What are the account ids, customer ids, and account names for all the accounts?
-- Show other account details for account with name 338.
------------------------------------------------------------------------------------------
database_id: county_public_safety
database schema :
table county_public_safety, columns = [ county_public_safety.County_ID ( integer | primary key | values: 1, 2 ), county_public_safety.Name ( text | values: Abbotsford, Burnaby ), county_public_safety.Population ( real | values: 128165, 204320 ), county_public_safety.Police_officers ( real | values: 187, 253 ), county_public_safety.Residents_per_officer ( real | values: 685, 808 ), county_public_safety.Case_burden ( real | values: 81, 100 ), county_public_safety.Crime_rate ( real | values: 118.0, 123.0 ), county_public_safety.Police_force ( text | values: Abbotsford Police Department, RCMP ), county_public_safety.Location ( text | values: East, West ) ]
table city, columns = [ city.City_ID ( integer | primary key | values: 1, 2 ), city.County_ID ( integer | values: 1, 2 ), city.Name ( text | values: Adjuntas, Aguada ), city.White ( real | values: 93.1, 86.6 ), city.Black ( real | values: 3.1, 5.3 ), city.Amerindian ( real | values: 0.3, 0.6 ), city.Asian ( real | values: 0.0, 0.1 ), city.Multiracial ( real | values: 3.4, 7.7 ), city.Hispanic ( real | values: 99.6, 99.4 ) ]
foreign keys:
city.County_ID = county_public_safety.County_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many counties are there?
-- Count the number of countries.
-- List the names of counties in descending order of population.
-- What are the names of the counties of public safety, ordered by population descending?
-- List the distinct police forces of counties whose location is not on east side.
------------------------------------------------------------------------------------------
database_id: performance_attendance
database schema :
table member, columns = [ member.Member_ID ( text | primary key | values: 1, 10 ), member.Name ( text | values: Wilfredo Ruiz, Luis González ), member.Nationality ( text | values: Uruguay, Argentina ), member.Role ( text | values: Prime Violin, Violin ) ]
table performance, columns = [ performance.Performance_ID ( integer | primary key | values: 1.0, 2.0 ), performance.Date ( text | values: February 2, February 4 ), performance.Host ( text | values: Boston Bruins, New York Rangers ), performance.Location ( text | values: TD Garden, Madison Square Garden ), performance.Attendance ( real | values: 165, 1820 ) ]
table member_attendance, columns = [ member_attendance.Member_ID ( integer | primary key | values: 1, 2 ), member_attendance.Performance_ID ( integer | values: 4, 1 ), member_attendance.Num_of_Pieces ( real | values: 2, 3 ) ]
foreign keys:
member_attendance.Performance_ID = performance.Performance_ID
member_attendance.Member_ID = member.Member_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many performances are there?
-- List the hosts of performances in ascending order of attendance.
-- What are the dates and locations of performances?
-- Show the attendances of the performances at location "TD Garden" or "Bell Centre"
-- What is the average number of attendees for performances?
------------------------------------------------------------------------------------------
database_id: club_1
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Club, columns = [ Club.ClubID ( integer | primary key | values: 1, 2 ), Club.ClubName ( text | values: Bootup Baltimore, Hopkins Student Enterprises ), Club.ClubDesc ( text | values: Refurbish computers; teach kids and adults about computer basics., Venture capital fund for student business. ), Club.ClubLocation ( text | values: AKW, HHH ) ]
table Member_of_club, columns = [ Member_of_club.StuID ( integer | values: 1001, 1007 ), Member_of_club.ClubID ( integer | values: 1, 4 ), Member_of_club.Position ( text | values: President, Vice-President ) ]
foreign keys:
Member_of_club.ClubID = Club.ClubID
Member_of_club.StuID = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- How many clubs are there?
-- Count the total number of clubs.
-- What are the names of all clubs?
-- Give me the name of each club.
-- How many students are there?
------------------------------------------------------------------------------------------
database_id: singer
database schema :
table singer, columns = [ singer.Singer_ID ( integer | primary key | values: 1, 2 ), singer.Name ( text | values: Liliane Bettencourt, Christy Walton ), singer.Birth_Year ( real | values: 1944.0, 1948.0 ), singer.Net_Worth_Millions ( real | values: 30.0, 28.8 ), singer.Citizenship ( text | values: France, United States ) ]
table song, columns = [ song.Song_ID ( integer | primary key | values: 1, 2 ), song.Title ( text | values: Do They Know It's Christmas, F**k It (I Don't Want You Back) ), song.Singer_ID ( integer | values: 1, 2 ), song.Sales ( real | values: 1094000.0, 552407.0 ), song.Highest_Position ( real | values: 1.0, 3.0 ) ]
foreign keys:
song.Singer_ID = singer.Singer_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many singers are there?
-- What is the count of singers?
-- List the name of singers in ascending order of net worth.
-- What are the names of singers ordered by ascending net worth?
-- What are the birth year and citizenship of singers?
------------------------------------------------------------------------------------------
database_id: culture_company
database schema :
table book_club, columns = [ book_club.book_club_id ( integer | primary key | values: 1, 2 ), book_club.Year ( real | values: 1989, 1990 ), book_club.Author_or_Editor ( text | values: Michael Nava, Donald Ward ), book_club.Book_Title ( text | values: Goldenboy, Death Takes the Stage ), book_club.Publisher ( text | values: Alyson, St. Martin's Press ), book_club.Category ( text | values: Gay M/SF, Lesb. M/SF ), book_club.Result ( text | values: Won [A ], Nom ) ]
table movie, columns = [ movie.movie_id ( integer | primary key | values: 1, 2 ), movie.Title ( text | values: The Boondock Saints, The Big Kahuna ), movie.Year ( real | values: 1999, 2000 ), movie.Director ( text | values: Troy Duffy, John Swanbeck ), movie.Budget_million ( real | values: 6.0, 7.0 ), movie.Gross_worldwide ( real | values: 30471, 3728888 ) ]
table culture_company, columns = [ culture_company.Company_name ( text | primary key | values: Cathay Pacific Culture, Cathay Pacific Culture Services (HK) Limited ), culture_company.Type ( text | values: Corporate, Joint Venture ), culture_company.Incorporated_in ( text | values: China, Hong Kong ), culture_company.Group_Equity_Shareholding ( real | values: 18.77, 49.0 ), culture_company.book_club_id ( text | values: 1, 2 ), culture_company.movie_id ( text | values: 2, 3 ) ]
foreign keys:
culture_company.movie_id = movie.movie_id
culture_company.book_club_id = book_club.book_club_id

# Here are some example questions that CAN be answered by the schema below:
-- How many book clubs are there?
-- Count the number of book clubs.
-- show the titles, and authors or editors for all books made after the year 1989.
-- What are the titles and authors or editors that correspond to books made after 1989?
-- Show all distinct publishers for books.
------------------------------------------------------------------------------------------
database_id: cre_Doc_Template_Mgt
database schema :
table Ref_Template_Types, columns = [ Ref_Template_Types.Template_Type_Code ( text | primary key | values: AD, BK ), Ref_Template_Types.Template_Type_Description ( text | values: Presentation, CV ) ]
table Templates, columns = [ Templates.Template_ID ( integer | primary key | values: 0, 1 ), Templates.Version_Number ( real | values: 5, 9 ), Templates.Template_Type_Code ( text | values: PP, BK ), Templates.Date_Effective_From ( datetime | values: 2005-11-12 07:09:48, 2010-09-24 01:15:11 ), Templates.Date_Effective_To ( datetime | values: 2008-01-05 14:19:28, 1999-07-08 03:31:04 ), Templates.Template_Details ( text | values:  ) ]
table Documents, columns = [ Documents.Document_ID ( integer | primary key | values: 0, 1 ), Documents.Template_ID ( integer | values: 7, 25 ), Documents.Document_Name ( text | values: Introduction of OS, Understanding DB ), Documents.Document_Description ( text | values: n, y ), Documents.Other_Details ( text | values: N/A ) ]
table Paragraphs, columns = [ Paragraphs.Paragraph_ID ( integer | primary key | values: 7, 9 ), Paragraphs.Document_ID ( integer | values: 2394, 3 ), Paragraphs.Paragraph_Text ( text | values: Korea, Somalia ), Paragraphs.Other_Details ( text | values: N/A ) ]
foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many documents do we have?
-- Count the number of documents.
-- List document IDs, document names, and document descriptions for all documents.
-- What are the ids, names, and descriptions for all documents?
-- What is the document name and template id for document with description with the letter 'w' in it?
------------------------------------------------------------------------------------------
database_id: musical
database schema :
table musical, columns = [ musical.Musical_ID ( integer | primary key | values: 1, 2 ), musical.Name ( text | values: The Phantom of the Opera, Les Misérables ), musical.Year ( real | values: 1986 ), musical.Award ( text | values: Tony Award, Drama Desk Award ), musical.Category ( text | values: Best Book of a Musical, Best Performance by a Leading Actor in a Musical ), musical.Nominee ( text | values: Bob Fosse, Cleavant Derricks ), musical.Result ( text | values: Nominated, Won ) ]
table actor, columns = [ actor.Actor_ID ( integer | primary key | values: 1, 2 ), actor.Name ( text | values: Ray Meagher, Tom Oliver ), actor.Musical_ID ( integer | values: 1, 2 ), actor.Character ( text | values: Alf Stewart, Lou Carpenter ), actor.Duration ( text | values: 1988—, 1988, 1992— ), actor.age ( real | values: 26, 22 ) ]
foreign keys:
actor.Musical_ID = actor.Actor_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many actors are there?
-- Count the number of actors.
-- List the name of actors in ascending alphabetical order.
-- What are the names of actors, ordered alphabetically?
-- What are the characters and duration of actors?
------------------------------------------------------------------------------------------
database_id: world_1
database schema :
table city, columns = [ city.ID ( integer | primary key | values: 129, 1 ), city.Name ( text | values: Kabul, Qandahar ), city.CountryCode ( text | values: ABW, AFG ), city.District ( text | values: Kabol, Qandahar ), city.Population ( real | values: 1780000, 237500 ) ]
table sqlite_sequence, columns = [ sqlite_sequence.name ( text | values: city ), sqlite_sequence.seq ( text | values: 4079 ) ]
table country, columns = [ country.Code ( text | primary key | values: ABW, AFG ), country.Name ( text | values: Aruba, Afghanistan ), country.Continent ( text | values: North America, Asia ), country.Region ( text | values: Caribbean, Southern and Central Asia ), country.SurfaceArea ( real | values: 193.0, 652090.0 ), country.IndepYear ( real | values: 1919, 1975 ), country.Population ( real | values: 103000, 22720000 ), country.LifeExpectancy ( real | values: 78.4, 45.9 ), country.GNP ( real | values: 828.0, 5976.0 ), country.GNPOld ( real | values: 793.0, 7984.0 ), country.LocalName ( text | values: Aruba, Afganistan/Afqanestan ), country.GovernmentForm ( text | values: Nonmetropolitan Territory of The Netherlands, Islamic Emirate ), country.HeadOfState ( text | values: Beatrix, Mohammad Omar ), country.Capital ( real | values: 129, 1 ), country.Code2 ( text | values: AW, AF ) ]
table countrylanguage, columns = [ countrylanguage.CountryCode ( text | primary key | values: ABW, AFG ), countrylanguage.Language ( text | values: Dutch, English ), countrylanguage.IsOfficial ( text | values: T, F ), countrylanguage.Percentage ( real | values: 5.3, 9.5 ) ]
foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code

# Here are some example questions that CAN be answered by the schema below:
-- What are the names of all the countries that became independent after 1950?
-- Give the names of the nations that were founded after 1950.
-- How many countries have a republic as their form of government?
-- How many countries have governments that are republics?
-- What is the total surface area of the countries in the Caribbean region?
------------------------------------------------------------------------------------------
database_id: device
database schema :
table device, columns = [ device.Device_ID ( integer | primary key | values: 1, 2 ), device.Device ( text | values: BlackBerry Storm 9530, Apple ), device.Carrier ( text | values: MTS Mobility, Verizon Wireless ), device.Package_Version ( text | values: 5.0.0.808, 5.0.0.328 ), device.Applications ( text | values: 5.0.0.419, 5.0.0.328 ), device.Software_Platform ( text | values: Android, iOS ) ]
table shop, columns = [ shop.Shop_ID ( integer | primary key | values: 1, 2 ), shop.Shop_Name ( text | values: Dinas Device, Best Buy ), shop.Location ( text | values: Dinas, Cymmer ), shop.Open_Date ( text | values: 1 January, 15 July ), shop.Open_Year ( real | values: 2014, 2006 ) ]
table stock, columns = [ stock.Shop_ID ( integer | primary key | values: 1, 2 ), stock.Device_ID ( integer | values: 4, 6 ), stock.Quantity ( real | values: 100, 110 ) ]
foreign keys:
stock.Device_ID = device.Device_ID
stock.Shop_ID = shop.Shop_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many devices are there?
-- Count the number of devices.
-- List the carriers of devices in ascending alphabetical order.
-- What are the different carriers for devices, listed in alphabetical order?
-- What are the carriers of devices whose software platforms are not "Android"?
------------------------------------------------------------------------------------------
database_id: tracking_grants_for_research
database schema :
table Document_Types, columns = [ Document_Types.document_type_code ( text | primary key | values: APP, REG ), Document_Types.document_description ( text | values: Initial Application, Regular ) ]
table Documents, columns = [ Documents.document_id ( integer | primary key | values: 1, 2 ), Documents.document_type_code ( text | values: APP, REG ), Documents.grant_id ( integer | values: 5, 13 ), Documents.sent_date ( datetime | values: 1986-11-30 07:56:35, 2004-01-23 11:57:08 ), Documents.response_received_date ( datetime | values: 1977-12-01 02:18:53, 1979-12-08 10:38:07 ), Documents.other_details ( text | values:  ) ]
table Grants, columns = [ Grants.grant_id ( integer | primary key | values: 1, 2 ), Grants.organisation_id ( integer | values: 10, 3 ), Grants.grant_amount ( real | values: 4094.542, 281.2446 ), Grants.grant_start_date ( datetime | values: 2016-11-20 00:18:51, 1985-10-09 20:08:49 ), Grants.grant_end_date ( datetime | values: 2004-10-24 09:09:39, 1985-06-08 00:22:07 ), Grants.other_details ( text | values: et, occaecati ) ]
table Organisation_Types, columns = [ Organisation_Types.organisation_type ( text | primary key | values: RES, SPON ), Organisation_Types.organisation_type_description ( text | values: Research, Sponsor ) ]
table Organisations, columns = [ Organisations.organisation_id ( integer | primary key | values: 1, 2 ), Organisations.organisation_type ( text | values: RES, SPON ), Organisations.organisation_details ( text | values: et, eius ) ]
table Project_Outcomes, columns = [ Project_Outcomes.project_id ( integer | values: 4, 3 ), Project_Outcomes.outcome_code ( text | values: Paper, Patent ), Project_Outcomes.outcome_details ( text | values: N/A ) ]
table Project_Staff, columns = [ Project_Staff.staff_id ( integer | primary key | values: 0.0, 3.0 ), Project_Staff.project_id ( integer | values: 2, 5 ), Project_Staff.role_code ( text | values: leader, researcher ), Project_Staff.date_from ( datetime | values: 1981-10-04 22:44:50, 2003-04-19 15:06:20 ), Project_Staff.date_to ( datetime | values: 1985-05-30 22:26:30, 2010-12-08 11:55:36 ), Project_Staff.other_details ( text | values: N/A ) ]
table Projects, columns = [ Projects.project_id ( integer | primary key | values: 1, 2 ), Projects.organisation_id ( integer | values: 15, 11 ), Projects.project_details ( text | values: porro, et ) ]
table Research_Outcomes, columns = [ Research_Outcomes.outcome_code ( text | primary key | values: Paper, Patent ), Research_Outcomes.outcome_description ( text | values: Published Research Paper, Research Patent ) ]
table Research_Staff, columns = [ Research_Staff.staff_id ( integer | primary key | values: 1, 2 ), Research_Staff.employer_organisation_id ( integer | values: 1, 4 ), Research_Staff.staff_details ( text | values: quo, est ) ]
table Staff_Roles, columns = [ Staff_Roles.role_code ( text | primary key | values: leader, researcher ), Staff_Roles.role_description ( text | values: Project Leader, Project Researcher ) ]
table Tasks, columns = [ Tasks.task_id ( integer | primary key | values: 1, 2 ), Tasks.project_id ( integer | values: 1, 2 ), Tasks.task_details ( text | values: a, b ), Tasks.eg Agree Objectives ( text | values: N/A ) ]
foreign keys:
Documents.grant_id = Grants.grant_id
Documents.document_type_code = Document_Types.document_type_code
Grants.organisation_id = Organisations.organisation_id
Organisations.organisation_type = Organisation_Types.organisation_type
Project_Outcomes.outcome_code = Research_Outcomes.outcome_code
Project_Outcomes.project_id = Projects.project_id
Project_Staff.role_code = Staff_Roles.role_code
Project_Staff.project_id = Projects.project_id
Projects.organisation_id = Organisations.organisation_id
Research_Staff.employer_organisation_id = Organisations.organisation_id
Tasks.project_id = Projects.project_id

# Here are some example questions that CAN be answered by the schema below:
-- What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?
-- What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?
-- List the project details of the project both producing patent and paper as outcomes.
-- What are the details of the project that is producing both patents and papers as outcomes?
-- What is the total grant amount of the organisations described as research?
------------------------------------------------------------------------------------------
database_id: employee_hire_evaluation
database schema :
table employee, columns = [ employee.Employee_ID ( integer | primary key | values: 1, 2 ), employee.Name ( text | values: George Chuter, Lee Mears ), employee.Age ( real | values: 23, 29 ), employee.City ( text | values: Bristol, Bath ) ]
table shop, columns = [ shop.Shop_ID ( integer | primary key | values: 1, 2 ), shop.Name ( text | values: FC Haka, HJK ), shop.Location ( text | values: Valkeakoski, Helsinki ), shop.District ( text | values: Tehtaan kenttä, Finnair Stadium ), shop.Number_products ( real | values: 3516, 10770 ), shop.Manager_name ( text | values: Olli Huttunen, Antti Muurinen ) ]
table hiring, columns = [ hiring.Shop_ID ( integer | values: 1, 8 ), hiring.Employee_ID ( integer | primary key | values: 1, 2 ), hiring.Start_from ( text | values: 2009, 2003 ), hiring.Is_full_time ( text | values: T, F ) ]
table evaluation, columns = [ evaluation.Employee_ID ( text | primary key | values: 1, 10 ), evaluation.Year_awarded ( text | values: 2011, 2016 ), evaluation.Bonus ( real | values: 3000.0, 3200.0 ) ]
foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many employees are there?
-- Count the number of employees
-- Sort employee names by their age in ascending order.
-- List the names of employees and sort in ascending order of age.
-- What is the number of employees from each city?
------------------------------------------------------------------------------------------
database_id: movie_1
database schema :
table Movie, columns = [ Movie.mID ( integer | primary key | values: 101, 102 ), Movie.title ( text | values: Gone with the Wind, Star Wars ), Movie.year ( real | values: 1939, 1977 ), Movie.director ( text | values: Victor Fleming, George Lucas ) ]
table Reviewer, columns = [ Reviewer.rID ( integer | primary key | values: 201, 202 ), Reviewer.name ( text | values: Sarah Martinez, Daniel Lewis ) ]
table Rating, columns = [ Rating.rID ( integer | values: 201, 202 ), Rating.mID ( integer | values: 101, 106 ), Rating.stars ( real | values: 2, 4 ), Rating.ratingDate ( datetime | values: 2011-01-22, 2011-01-27 ) ]
foreign keys:
Rating.rID = Reviewer.rID
Rating.mID = Movie.mID

# Here are some example questions that CAN be answered by the schema below:
-- Find the titles of all movies directed by steven spielberg.
-- What are the names of all movies directed by Steven Spielberg?
-- What is the name of the movie produced after 2000 and directed by James Cameron?
-- What are the titles of all movies that James Cameron directed after 2000?
-- How many movies were made before 2000?
------------------------------------------------------------------------------------------
database_id: network_1
database schema :
table Highschooler, columns = [ Highschooler.ID ( integer | primary key | values: 1025, 1101 ), Highschooler.name ( text | values: Jordan, Gabriel ), Highschooler.grade ( real | values: 9, 10 ) ]
table Friend, columns = [ Friend.student_id ( integer | primary key | values: 1101, 1247 ), Friend.friend_id ( integer | values: 1381, 1689 ) ]
table Likes, columns = [ Likes.student_id ( integer | primary key | values: 1025, 1247 ), Likes.liked_id ( integer | values: 1709, 1689 ) ]
foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID

# Here are some example questions that CAN be answered by the schema below:
-- How many high schoolers are there?
-- Count the number of high schoolers.
-- Show the names and grades of each high schooler.
-- What are the names and grades for each high schooler?
-- Show all the grades of the high schoolers.
------------------------------------------------------------------------------------------
database_id: poker_player
database schema :
table poker_player, columns = [ poker_player.Poker_Player_ID ( integer | primary key | values: 1, 2 ), poker_player.People_ID ( integer | values: 1, 2 ), poker_player.Final_Table_Made ( real | values: 42.0, 10.0 ), poker_player.Best_Finish ( real | values: 1.0, 2.0 ), poker_player.Money_Rank ( real | values: 68.0, 141.0 ), poker_player.Earnings ( real | values: 476090.0, 189233.0 ) ]
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Nationality ( text | values: Russia, Bulgaria ), people.Name ( text | values: Aleksey Ostapenko, Teodor Salparov ), people.Birth_Date ( text | values: May 26, 1986, August 16, 1982 ), people.Height ( real | values: 207.0, 182.0 ) ]
foreign keys:
poker_player.People_ID = people.People_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many poker players are there?
-- Count the number of poker players.
-- List the earnings of poker players in descending order.
-- What are the earnings of poker players, ordered descending by value?
-- List the final tables made and the best finishes of poker players.
------------------------------------------------------------------------------------------
database_id: program_share
database schema :
table program, columns = [ program.Program_ID ( integer | primary key | values: 1, 2 ), program.Name ( text | values: Aniworld, Kaku ), program.Origin ( text | values: Hunan, Beijing ), program.Launch ( real | values: 2005.0, 2004.0 ), program.Owner ( text | values: Hunan Broadcasting System (HBS), Beijing Television (BTV) ) ]
table channel, columns = [ channel.Channel_ID ( integer | primary key | values: 1, 2 ), channel.Name ( text | values: CCTV-1, Hunan Satellite TV ), channel.Owner ( text | values: CCTV, HBS ), channel.Share_in_percent ( real | values: 4.9, 4.81 ), channel.Rating_in_percent ( real | values: 0.54, 0.53 ) ]
table broadcast, columns = [ broadcast.Channel_ID ( integer | primary key | values: 1, 2 ), broadcast.Program_ID ( integer | values: 1, 2 ), broadcast.Time_of_day ( text | values: Morning, Night ) ]
table broadcast_share, columns = [ broadcast_share.Channel_ID ( integer | primary key | values: 1, 2 ), broadcast_share.Program_ID ( integer | values: 1, 2 ), broadcast_share.Date ( text | values: 01,May, 02,May ), broadcast_share.Share_in_percent ( real | values: 3.1, 1.8 ) ]
foreign keys:
broadcast.Program_ID = program.Program_ID
broadcast.Channel_ID = channel.Channel_ID
broadcast_share.Program_ID = program.Program_ID
broadcast_share.Channel_ID = channel.Channel_ID

# Here are some example questions that CAN be answered by the schema below:
-- Find the names of channels that are not owned by CCTV.
-- Which channels are not owned by CCTV? Give me the channel names.
-- List all channel names ordered by their rating in percent from big to small.
-- Give me a list of all the channel names sorted by the channel rating in descending order.
-- What is the owner of the channel that has the highest rating ratio?
------------------------------------------------------------------------------------------
database_id: aircraft
database schema :
table pilot, columns = [ pilot.Pilot_Id ( integer | primary key | values: 1, 2 ), pilot.Name ( text | values: Prof. Zackery Collins, Katheryn Gorczany IV ), pilot.Age ( real | values: 23, 20 ) ]
table aircraft, columns = [ aircraft.Aircraft_ID ( integer | primary key | values: 1, 2 ), aircraft.Aircraft ( text | values: Robinson R-22, Bell 206B3 JetRanger ), aircraft.Description ( text | values: Light utility helicopter, Turboshaft utility helicopter ), aircraft.Max_Gross_Weight ( text | values: 1,370 lb (635 kg), 3,200 lb (1,451 kg) ), aircraft.Total_disk_area ( text | values: 497 ft² (46.2 m²), 872 ft² (81.1 m²) ), aircraft.Max_disk_Loading ( text | values: 2.6 lb/ft² (14 kg/m²), 3.7 lb/ft² (18 kg/m²) ) ]
table match, columns = [ match.Round ( integer | primary key | values: 1.0, 2.0 ), match.Location ( text | values: Mina' Zayid , Abu Dhabi, Swan River , Perth ), match.Country ( text | values: United Arab Emirates, Australia ), match.Date ( text | values: March 26–27, April 17–18 ), match.Fastest_Qualifying ( text | values: Hannes Arch, Paul Bonhomme ), match.Winning_Pilot ( text | values: 1, 4 ), match.Winning_Aircraft ( text | values: 1, 2 ) ]
table airport, columns = [ airport.Airport_ID ( integer | primary key | values: 1, 2 ), airport.Airport_Name ( text | values: London Heathrow, London Gatwick ), airport.Total_Passengers ( real | values: 67054745.0, 34205887.0 ), airport.%_Change_2007 ( text | values: 1.5%, 2.9% ), airport.International_Passengers ( real | values: 61344438.0, 30431051.0 ), airport.Domestic_Passengers ( real | values: 5562516.0, 3730963.0 ), airport.Transit_Passengers ( real | values: 147791.0, 43873.0 ), airport.Aircraft_Movements ( real | values: 478693.0, 263653.0 ), airport.Freight_Metric_Tonnes ( real | values: 1397054.0, 107702.0 ) ]
table airport_aircraft, columns = [ airport_aircraft.ID ( real | values: 1, 2 ), airport_aircraft.Airport_ID ( integer | primary key | values: 1, 2 ), airport_aircraft.Aircraft_ID ( integer | values: 2, 1 ) ]
foreign keys:
match.Winning_Pilot = pilot.Pilot_Id
match.Winning_Aircraft = aircraft.Aircraft_ID
airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID
airport_aircraft.Airport_ID = airport.Airport_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many aircrafts are there?
-- What is the number of aircraft?
-- List the description of all aircrafts.
-- What are the descriptions for the aircrafts?
-- What is the average number of international passengers of all airports?
------------------------------------------------------------------------------------------
database_id: restaurant_1
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Restaurant, columns = [ Restaurant.ResID ( integer | primary key | values: 1, 2 ), Restaurant.ResName ( text | values: Subway, Honeygrow ), Restaurant.Address ( text | values: 3233 St Paul St, Baltimore, MD 21218, 3212 St Paul St, Baltimore, MD 21218 ), Restaurant.Rating ( real | values: 3, 4 ) ]
table Type_Of_Restaurant, columns = [ Type_Of_Restaurant.ResID ( integer | values: 1, 2 ), Type_Of_Restaurant.ResTypeID ( integer | values: 1, 2 ) ]
table Restaurant_Type, columns = [ Restaurant_Type.ResTypeID ( integer | primary key | values: 1, 2 ), Restaurant_Type.ResTypeName ( text | values: Sandwich, Stir-fry ), Restaurant_Type.ResTypeDescription ( text | values: Simplest there is., Classic Chinese cooking. ) ]
table Visits_Restaurant, columns = [ Visits_Restaurant.StuID ( integer | values: 1001, 1032 ), Visits_Restaurant.ResID ( integer | values: 1, 2 ), Visits_Restaurant.Time ( datetime | values: 2017-10-09 18:15:00, 2017-10-08 13:00:30 ), Visits_Restaurant.Spent ( real | values: 6.53, 13.2 ) ]
foreign keys:
Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID
Type_Of_Restaurant.ResID = Restaurant.ResID
Visits_Restaurant.ResID = Restaurant.ResID
Visits_Restaurant.StuID = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- Show me all the restaurants.
-- What is the address of the restaurant Subway?
-- What is the rating of the restaurant Subway?
-- List all restaurant types.
-- What is the description of the restaurant type Sandwich?
------------------------------------------------------------------------------------------
database_id: customers_and_invoices
database schema :
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.customer_first_name ( text | values: Dee, Brennon ), Customers.customer_middle_initial ( text | values: A, H ), Customers.customer_last_name ( text | values: Larkin, Weimann ), Customers.gender ( text | values: 1, 0 ), Customers.email_address ( text | values: thora.torphy@example.org, roosevelt.collier@example.org ), Customers.login_name ( text | values: xhartmann, shayne.lesch ), Customers.login_password ( text | values: 77789d292604ea04406f, ce97a3e4539347daab96 ), Customers.phone_number ( text | values: 241.796.1219x37862, (943)219-4234x415 ), Customers.town_city ( text | values: North Nellie, South Isabell ), Customers.state_county_province ( text | values: WestVirginia, Oklahoma ), Customers.country ( text | values: USA ) ]
table Orders, columns = [ Orders.order_id ( integer | primary key | values: 1, 2 ), Orders.customer_id ( integer | values: 12, 8 ), Orders.date_order_placed ( datetime | values: 2012-06-27 20:49:56, 2012-08-25 07:51:54 ), Orders.order_details ( text | values: N/A ) ]
table Invoices, columns = [ Invoices.invoice_number ( integer | primary key | values: 1, 2 ), Invoices.order_id ( integer | values: 9, 3 ), Invoices.invoice_date ( datetime | values: 2018-03-01 16:40:48, 2018-03-20 00:21:41 ) ]
table Accounts, columns = [ Accounts.account_id ( integer | primary key | values: 1, 2 ), Accounts.customer_id ( integer | values: 8, 3 ), Accounts.date_account_opened ( datetime | values: 2016-07-30 22:22:24, 2017-05-29 16:45:17 ), Accounts.account_name ( text | values: 900, 520 ), Accounts.other_account_details ( text | values: Regular, VIP ) ]
table Product_Categories, columns = [ Product_Categories.production_type_code ( text | primary key | values: Books, DVDs ), Product_Categories.product_type_description ( text | values: Food, Dvd products ), Product_Categories.vat_rating ( real | values: 15.84, 11.4 ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.parent_product_id ( real | values: 4, 8 ), Products.production_type_code ( text | values: Food, Books ), Products.unit_price ( real | values: 617.95, 558.49 ), Products.product_name ( text | values: Coffee Bean, Learning French ), Products.product_color ( text | values: Red, Yellow ), Products.product_size ( text | values: Medium, Small ) ]
table Financial_Transactions, columns = [ Financial_Transactions.transaction_id ( real | values: 1, 2 ), Financial_Transactions.account_id ( integer | values: 13, 9 ), Financial_Transactions.invoice_number ( integer | values: 12, 1 ), Financial_Transactions.transaction_type ( text | values: Payment, Refund ), Financial_Transactions.transaction_date ( datetime | values: 2018-03-15 21:13:57, 2018-03-13 13:27:46 ), Financial_Transactions.transaction_amount ( real | values: 613.96, 368.46 ), Financial_Transactions.transaction_comment ( text | values: N/A ), Financial_Transactions.other_transaction_details ( text | values: N/A ) ]
table Order_Items, columns = [ Order_Items.order_item_id ( integer | primary key | values: 1, 2 ), Order_Items.order_id ( integer | values: 4, 15 ), Order_Items.product_id ( integer | values: 4, 10 ), Order_Items.product_quantity ( text | values: 6, 7 ), Order_Items.other_order_item_details ( text | values: N/A ) ]
table Invoice_Line_Items, columns = [ Invoice_Line_Items.order_item_id ( integer | values: 14, 3 ), Invoice_Line_Items.invoice_number ( integer | values: 9, 10 ), Invoice_Line_Items.product_id ( integer | values: 5, 15 ), Invoice_Line_Items.product_title ( text | values: prod_name ), Invoice_Line_Items.product_quantity ( text | values: 4, 1 ), Invoice_Line_Items.product_price ( real | values: 742.37, 814.87 ), Invoice_Line_Items.derived_product_cost ( real | values: 191.11, 176.29 ), Invoice_Line_Items.derived_vat_payable ( real | values: N/A ), Invoice_Line_Items.derived_total_cost ( real | values: 69.82, 59.56 ) ]
foreign keys:
Orders.customer_id = Customers.customer_id
Invoices.order_id = Orders.order_id
Accounts.customer_id = Customers.customer_id
Products.production_type_code = Product_Categories.production_type_code
Financial_Transactions.account_id = Accounts.account_id
Financial_Transactions.invoice_number = Invoices.invoice_number
Order_Items.order_id = Orders.order_id
Order_Items.product_id = Products.product_id
Invoice_Line_Items.product_id = Products.product_id
Invoice_Line_Items.invoice_number = Invoices.invoice_number
Invoice_Line_Items.order_item_id = Order_Items.order_item_id

# Here are some example questions that CAN be answered by the schema below:
-- Show the number of accounts.
-- How many accounts are there?
-- How many customers have opened an account?
-- Count the number of customers who have an account.
-- Show the id, the date of account opened, the account name, and other account detail for all accounts.
------------------------------------------------------------------------------------------
database_id: insurance_and_eClaims
database schema :
table Customers, columns = [ Customers.Customer_ID ( integer | primary key | values: 252, 263 ), Customers.Customer_Details ( text | values: America Jaskolski, Ellsworth Paucek ) ]
table Staff, columns = [ Staff.Staff_ID ( integer | primary key | values: 406, 427 ), Staff.Staff_Details ( text | values: Clifton, Cathryn ) ]
table Policies, columns = [ Policies.Policy_ID ( integer | primary key | values: 125, 151 ), Policies.Customer_ID ( integer | values: 808, 380 ), Policies.Policy_Type_Code ( text | values: Deputy, Jurisdiction ), Policies.Start_Date ( datetime | values: 2018-02-10 08:56:30, 2017-12-20 06:02:31 ), Policies.End_Date ( datetime | values: 2018-03-18 09:17:26, 2017-09-16 22:04:13 ) ]
table Claim_Headers, columns = [ Claim_Headers.Claim_Header_ID ( integer | primary key | values: 15, 24 ), Claim_Headers.Claim_Status_Code ( text | values: Settled, Disputed ), Claim_Headers.Claim_Type_Code ( text | values: Handphone Subsidy, Child Birth ), Claim_Headers.Policy_ID ( integer | values: 518, 287 ), Claim_Headers.Date_of_Claim ( datetime | values: 2016-05-31 06:07:11, 2016-12-30 21:43:21 ), Claim_Headers.Date_of_Settlement ( datetime | values: 2018-02-23 03:46:38, 2017-10-08 21:43:14 ), Claim_Headers.Amount_Claimed ( real | values: 349.15, 318.16 ), Claim_Headers.Amount_Piad ( real | values: 582.03, 309.2 ) ]
table Claims_Documents, columns = [ Claims_Documents.Claim_ID ( integer | primary key | values: 24, 27 ), Claims_Documents.Document_Type_Code ( text | values: Document, Medical ), Claims_Documents.Created_by_Staff_ID ( integer | values: 718, 986 ), Claims_Documents.Created_Date ( real | values: 8, 6 ) ]
table Claims_Processing_Stages, columns = [ Claims_Processing_Stages.Claim_Stage_ID ( integer | primary key | values: 1, 3 ), Claims_Processing_Stages.Next_Claim_Stage_ID ( real | values: 1 ), Claims_Processing_Stages.Claim_Status_Name ( text | values: Open, Close ), Claims_Processing_Stages.Claim_Status_Description ( text | values: Open a new claim, Close a claim ) ]
table Claims_Processing, columns = [ Claims_Processing.Claim_Processing_ID ( integer | primary key | values: 118, 145 ), Claims_Processing.Claim_ID ( integer | values: 28, 62 ), Claims_Processing.Claim_Outcome_Code ( text | values: In progress, Disputed ), Claims_Processing.Claim_Stage_ID ( real | values: 1, 3 ), Claims_Processing.Staff_ID ( integer | values: 771, 589 ) ]
foreign keys:
Policies.Customer_ID = Customers.Customer_ID
Claim_Headers.Policy_ID = Policies.Policy_ID
Claims_Documents.Created_by_Staff_ID = Staff.Staff_ID
Claims_Documents.Claim_ID = Claim_Headers.Claim_Header_ID
Claims_Processing.Staff_ID = Staff.Staff_ID
Claims_Processing.Claim_ID = Claim_Headers.Claim_Header_ID

# Here are some example questions that CAN be answered by the schema below:
-- List the names of all the customers in alphabetical order.
-- Sort the customer names in alphabetical order.
-- Find all the policy type codes associated with the customer "Dayana Robel"
-- What are the type codes of the policies used by the customer "Dayana Robel"?
-- Which type of policy is most frequently used? Give me the policy type code.
------------------------------------------------------------------------------------------
database_id: college_1
database schema :
table CLASS, columns = [ CLASS.CLASS_CODE ( text | primary key | values: 10012, 10013 ), CLASS.CRS_CODE ( text | values: ACCT-211, ACCT-212 ), CLASS.CLASS_SECTION ( text | values: 1, 2 ), CLASS.CLASS_TIME ( text | values: MWF 8:00-8:50 a.m., MWF 9:00-9:50 a.m. ), CLASS.CLASS_ROOM ( text | values: BUS311, BUS200 ), CLASS.PROF_NUM ( integer | values: 105, 342 ) ]
table COURSE, columns = [ COURSE.CRS_CODE ( text | primary key | values: ACCT-211, ACCT-212 ), COURSE.DEPT_CODE ( text | values: ACCT, CIS ), COURSE.CRS_DESCRIPTION ( text | values: Accounting I, Accounting II ), COURSE.CRS_CREDIT ( real | values: 3.0, 4.0 ) ]
table DEPARTMENT, columns = [ DEPARTMENT.DEPT_CODE ( text | primary key | values: ACCT, ART ), DEPARTMENT.DEPT_NAME ( text | values: Accounting, Fine Arts ), DEPARTMENT.SCHOOL_CODE ( text | values: BUS, A&SCI ), DEPARTMENT.EMP_NUM ( integer | values: 114, 435 ), DEPARTMENT.DEPT_ADDRESS ( text | values: KLR 211, Box 52, BBG 185, Box 128 ), DEPARTMENT.DEPT_EXTENSION ( text | values: 3119, 2278 ) ]
table EMPLOYEE, columns = [ EMPLOYEE.EMP_NUM ( integer | primary key | values: 100, 101 ), EMPLOYEE.EMP_LNAME ( text | values: Worley, Ramso ), EMPLOYEE.EMP_FNAME ( text | values: James, Henry ), EMPLOYEE.EMP_INITIAL ( text | values: F, B ), EMPLOYEE.EMP_JOBCODE ( text | values: CUST, TECH ), EMPLOYEE.EMP_HIREDATE ( datetime | values: 1978-2-23, 1994-11-15 ), EMPLOYEE.EMP_DOB ( datetime | values: 1950-6-12, 1961-11-2 ) ]
table ENROLL, columns = [ ENROLL.CLASS_CODE ( text | values: 10014, 10018 ), ENROLL.STU_NUM ( integer | values: 321452, 324257 ), ENROLL.ENROLL_GRADE ( text | values: C, B ) ]
table PROFESSOR, columns = [ PROFESSOR.EMP_NUM ( integer | values: 103, 104 ), PROFESSOR.DEPT_CODE ( text | values: HIST, ENG ), PROFESSOR.PROF_OFFICE ( text | values: DRE 156, DRE 102 ), PROFESSOR.PROF_EXTENSION ( text | values: 6783, 5561 ), PROFESSOR.PROF_HIGH_DEGREE ( text | values: Ph.D., MA ) ]
table STUDENT, columns = [ STUDENT.STU_NUM ( integer | primary key | values: 321452, 324257 ), STUDENT.STU_LNAME ( text | values: Bowser, Smithson ), STUDENT.STU_FNAME ( text | values: William, Anne ), STUDENT.STU_INIT ( text | values: C, K ), STUDENT.STU_DOB ( datetime | values: 1975-2-12, 1981-11-15 ), STUDENT.STU_HRS ( real | values: 42, 81 ), STUDENT.STU_CLASS ( text | values: So, Jr ), STUDENT.STU_GPA ( real | values: 2.84, 3.27 ), STUDENT.STU_TRANSFER ( real | values: 0, 1 ), STUDENT.DEPT_CODE ( text | values: BIOL, CIS ), STUDENT.STU_PHONE ( text | values: 2134, 2256 ), STUDENT.PROF_NUM ( real | values: 205, 222 ) ]
foreign keys:
CLASS.PROF_NUM = EMPLOYEE.EMP_NUM
CLASS.CRS_CODE = COURSE.CRS_CODE
COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE
DEPARTMENT.EMP_NUM = EMPLOYEE.EMP_NUM
ENROLL.STU_NUM = STUDENT.STU_NUM
ENROLL.CLASS_CODE = CLASS.CLASS_CODE
PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE
PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM
STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE

# Here are some example questions that CAN be answered by the schema below:
-- Find the number of professors in accounting department.
-- How many professors are in the accounting dept?
-- How many professors are teaching class with code ACCT-211?
-- How many professors teach a class with the code ACCT-211?
-- What is the first and last name of the professor in biology department?
------------------------------------------------------------------------------------------
database_id: local_govt_mdm
database schema :
table Customer_Master_Index, columns = [ Customer_Master_Index.master_customer_id ( integer | primary key | values: 1, 2 ), Customer_Master_Index.cmi_details ( text | values: Schmitt-Lang, Volkman, Mills and Ferry ) ]
table CMI_Cross_References, columns = [ CMI_Cross_References.cmi_cross_ref_id ( integer | primary key | values: 2, 4 ), CMI_Cross_References.master_customer_id ( integer | values: 4, 5 ), CMI_Cross_References.source_system_code ( text | values: Rent, Parking ) ]
table Council_Tax, columns = [ Council_Tax.council_tax_id ( integer | primary key | values: 1, 2 ), Council_Tax.cmi_cross_ref_id ( integer | values: 101, 103 ) ]
table Business_Rates, columns = [ Business_Rates.business_rates_id ( integer | primary key | values: 2, 5 ), Business_Rates.cmi_cross_ref_id ( integer | values: 99, 49 ) ]
table Benefits_Overpayments, columns = [ Benefits_Overpayments.council_tax_id ( integer | primary key | values: 3, 6 ), Benefits_Overpayments.cmi_cross_ref_id ( integer | values: 65, 41 ) ]
table Parking_Fines, columns = [ Parking_Fines.council_tax_id ( integer | primary key | values: 9, 10 ), Parking_Fines.cmi_cross_ref_id ( integer | values: 4, 81 ) ]
table Rent_Arrears, columns = [ Rent_Arrears.council_tax_id ( integer | primary key | values: 1, 2 ), Rent_Arrears.cmi_cross_ref_id ( integer | values: 100, 8 ) ]
table Electoral_Register, columns = [ Electoral_Register.electoral_register_id ( integer | primary key | values: 2, 3 ), Electoral_Register.cmi_cross_ref_id ( integer | values: 83, 65 ) ]
foreign keys:
CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id
Council_Tax.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id
Business_Rates.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id
Benefits_Overpayments.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id
Parking_Fines.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id
Rent_Arrears.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id
Electoral_Register.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id

# Here are some example questions that CAN be answered by the schema below:
-- what are the details of the cmi masters that have the cross reference code 'Tax'?
-- What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.
-- How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n
-- What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.
-- Wat is the tax source system code and master customer id of the taxes related to each parking fine id?
------------------------------------------------------------------------------------------
database_id: book_2
database schema :
table publication, columns = [ publication.Publication_ID ( integer | primary key | values: 1, 2 ), publication.Book_ID ( integer | values: 1, 3 ), publication.Publisher ( text | values: Pearson, Thomson Reuters ), publication.Publication_Date ( text | values: August 2008, March 2008 ), publication.Price ( real | values: 15000000.0, 6000000.0 ) ]
table book, columns = [ book.Book_ID ( integer | primary key | values: 1, 2 ), book.Title ( text | values: The Black Lamb, Bloody Mary ), book.Issues ( real | values: 6.0, 4.0 ), book.Writer ( text | values: Timothy Truman, Garth Ennis ) ]
foreign keys:
publication.Book_ID = book.Book_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many books are there?
-- List the writers of the books in ascending alphabetical order.
-- List the titles of the books in ascending order of issues.
-- What are the titles of the books whose writer is not "Elaine Lee"?
-- What are the title and issues of the books?
------------------------------------------------------------------------------------------
database_id: hr_1
database schema :
table regions, columns = [ regions.REGION_ID ( integer | primary key | values: 1, 2 ), regions.REGION_NAME ( text | values: Europe\r, Americas\r ) ]
table countries, columns = [ countries.COUNTRY_ID ( text | primary key | values: AR, AU ), countries.COUNTRY_NAME ( text | values: Argentina, Australia ), countries.REGION_ID ( integer | values: 2, 3 ) ]
table departments, columns = [ departments.DEPARTMENT_ID ( integer | primary key | values: 10, 20 ), departments.DEPARTMENT_NAME ( text | values: Administration, Marketing ), departments.MANAGER_ID ( real | values: 200, 201 ), departments.LOCATION_ID ( real | values: 1700, 1800 ) ]
table jobs, columns = [ jobs.JOB_ID ( text | primary key | values: AC_ACCOUNT, AC_MGR ), jobs.JOB_TITLE ( text | values: President, Administration Vice President ), jobs.MIN_SALARY ( real | values: 20000, 15000 ), jobs.MAX_SALARY ( real | values: 40000, 30000 ) ]
table employees, columns = [ employees.EMPLOYEE_ID ( integer | primary key | values: 100, 101 ), employees.FIRST_NAME ( text | values: Steven, Neena ), employees.LAST_NAME ( text | values: King, Kochhar ), employees.EMAIL ( text | values: SKING, NKOCHHAR ), employees.PHONE_NUMBER ( text | values: 515.123.4567, 515.123.4568 ), employees.HIRE_DATE ( datetime | values: 1987-06-17, 1987-06-18 ), employees.JOB_ID ( text | values: AD_PRES, AD_VP ), employees.SALARY ( real | values: 24000, 17000 ), employees.COMMISSION_PCT ( real | values: 0, 0.4 ), employees.MANAGER_ID ( real | values: 0, 100 ), employees.DEPARTMENT_ID ( integer | values: 90, 60 ) ]
table job_history, columns = [ job_history.EMPLOYEE_ID ( integer | primary key | values: 0, 101 ), job_history.START_DATE ( datetime | values: 0000-00-00, 1989-09-21 ), job_history.END_DATE ( datetime | values: 1998-07-24, 1993-10-27 ), job_history.JOB_ID ( text | values: IT_PROG, AC_ACCOUNT ), job_history.DEPARTMENT_ID ( integer | values: 60, 110 ) ]
table locations, columns = [ locations.LOCATION_ID ( integer | primary key | values: 1000, 1100 ), locations.STREET_ADDRESS ( text | values: 1297 Via Cola di Rie, 93091 Calle della Testa ), locations.POSTAL_CODE ( text | values: 989, 10934 ), locations.CITY ( text | values: Roma, Venice ), locations.STATE_PROVINCE ( text | values: , Tokyo Prefecture ), locations.COUNTRY_ID ( text | values: IT, JP ) ]
foreign keys:
countries.REGION_ID = regions.REGION_ID
employees.JOB_ID = jobs.JOB_ID
employees.DEPARTMENT_ID = departments.DEPARTMENT_ID
job_history.JOB_ID = jobs.JOB_ID
job_history.DEPARTMENT_ID = departments.DEPARTMENT_ID
job_history.EMPLOYEE_ID = employees.EMPLOYEE_ID
locations.COUNTRY_ID = countries.COUNTRY_ID

# Here are some example questions that CAN be answered by the schema below:
-- Display the first name and department name for each employee.
-- What are the first name and department name of all employees?
-- List the full name (first and last name), and salary for those employees who earn below 6000.
-- What are the full names and salaries for any employees earning less than 6000?
-- Display the first name, and department number for all employees whose last name is "McEwen".
------------------------------------------------------------------------------------------
database_id: soccer_1
database schema :
table Player_Attributes, columns = [ Player_Attributes.id ( integer | primary key | values: 1, 2 ), Player_Attributes.player_fifa_api_id ( integer | values: 218353, 189615 ), Player_Attributes.player_api_id ( integer | values: 505942, 155782 ), Player_Attributes.date ( text | values: 2016-02-18 00:00:00, 2015-11-19 00:00:00 ), Player_Attributes.overall_rating ( real | values: 67, 62 ), Player_Attributes.potential ( real | values: 71, 66 ), Player_Attributes.preferred_foot ( text | values: right, left ), Player_Attributes.attacking_work_rate ( text | values: medium, high ), Player_Attributes.defensive_work_rate ( text | values: medium, high ), Player_Attributes.crossing ( real | values: 49, 48 ), Player_Attributes.finishing ( real | values: 44, 43 ), Player_Attributes.heading_accuracy ( real | values: 71, 70 ), Player_Attributes.short_passing ( real | values: 61, 60 ), Player_Attributes.volleys ( real | values: 44, 43 ), Player_Attributes.dribbling ( real | values: 51, 50 ), Player_Attributes.curve ( real | values: 45, 44 ), Player_Attributes.free_kick_accuracy ( real | values: 39, 38 ), Player_Attributes.long_passing ( real | values: 64, 63 ), Player_Attributes.ball_control ( real | values: 49, 48 ), Player_Attributes.acceleration ( real | values: 60, 79 ), Player_Attributes.sprint_speed ( real | values: 64, 78 ), Player_Attributes.agility ( real | values: 59, 78 ), Player_Attributes.reactions ( real | values: 47, 46 ), Player_Attributes.balance ( real | values: 65, 90 ), Player_Attributes.shot_power ( real | values: 55, 54 ), Player_Attributes.jumping ( real | values: 58, 85 ), Player_Attributes.stamina ( real | values: 54, 79 ), Player_Attributes.strength ( real | values: 76, 56 ), Player_Attributes.long_shots ( real | values: 35, 34 ), Player_Attributes.aggression ( real | values: 71, 63 ), Player_Attributes.interceptions ( real | values: 70, 41 ), Player_Attributes.positioning ( real | values: 45, 44 ), Player_Attributes.vision ( real | values: 54, 53 ), Player_Attributes.penalties ( real | values: 48, 47 ), Player_Attributes.marking ( real | values: 65, 62 ), Player_Attributes.standing_tackle ( real | values: 69, 66 ), Player_Attributes.sliding_tackle ( real | values: 69, 66 ), Player_Attributes.gk_diving ( real | values: 6, 5 ), Player_Attributes.gk_handling ( real | values: 11, 10 ), Player_Attributes.gk_kicking ( real | values: 10, 9 ), Player_Attributes.gk_positioning ( real | values: 8, 7 ), Player_Attributes.gk_reflexes ( real | values: 8, 7 ) ]
table sqlite_sequence, columns = [ sqlite_sequence.name ( text | values: Team, Country ), sqlite_sequence.seq ( text | values: 103916, 51958 ) ]
table Player, columns = [ Player.id ( integer | primary key | values: 3879, 401 ), Player.player_api_id ( real | values: 2625, 2752 ), Player.player_name ( text | values: Aaron Appindangoye, Aaron Cresswell ), Player.player_fifa_api_id ( real | values: 2, 6 ), Player.birthday ( text | values: 1992-02-29 00:00:00, 1989-12-15 00:00:00 ), Player.height ( real | values: 182.88, 170.18 ), Player.weight ( real | values: 187, 146 ) ]
table League, columns = [ League.id ( integer | primary key | values: 1, 1729 ), League.country_id ( integer | values: 1, 1729 ), League.name ( text | values: Belgium Jupiler League, England Premier League ) ]
table Country, columns = [ Country.id ( integer | primary key | values: 1, 1729 ), Country.name ( text | values: Belgium, England ) ]
table Team, columns = [ Team.id ( integer | primary key | values: 31446, 1513 ), Team.team_api_id ( real | values: 1601, 1773 ), Team.team_fifa_api_id ( real | values: 673, 675 ), Team.team_long_name ( text | values: KRC Genk, Beerschot AC ), Team.team_short_name ( text | values: GEN, BAC ) ]
table Team_Attributes, columns = [ Team_Attributes.id ( integer | primary key | values: 1, 2 ), Team_Attributes.team_fifa_api_id ( integer | values: 434, 77 ), Team_Attributes.team_api_id ( integer | values: 9930, 8485 ), Team_Attributes.date ( text | values: 2010-02-22 00:00:00, 2014-09-19 00:00:00 ), Team_Attributes.buildUpPlaySpeed ( real | values: 60, 52 ), Team_Attributes.buildUpPlaySpeedClass ( text | values: Balanced, Fast ), Team_Attributes.buildUpPlayDribbling ( real | values: 48, 41 ), Team_Attributes.buildUpPlayDribblingClass ( text | values: Little, Normal ), Team_Attributes.buildUpPlayPassing ( real | values: 50, 56 ), Team_Attributes.buildUpPlayPassingClass ( text | values: Mixed, Long ), Team_Attributes.buildUpPlayPositioningClass ( text | values: Organised, Free Form ), Team_Attributes.chanceCreationPassing ( real | values: 60, 54 ), Team_Attributes.chanceCreationPassingClass ( text | values: Normal, Risky ), Team_Attributes.chanceCreationCrossing ( real | values: 65, 63 ), Team_Attributes.chanceCreationCrossingClass ( text | values: Normal, Lots ), Team_Attributes.chanceCreationShooting ( real | values: 55, 64 ), Team_Attributes.chanceCreationShootingClass ( text | values: Normal, Lots ), Team_Attributes.chanceCreationPositioningClass ( text | values: Organised, Free Form ), Team_Attributes.defencePressure ( real | values: 50, 47 ), Team_Attributes.defencePressureClass ( text | values: Medium, Deep ), Team_Attributes.defenceAggression ( real | values: 55, 44 ), Team_Attributes.defenceAggressionClass ( text | values: Press, Double ), Team_Attributes.defenceTeamWidth ( real | values: 45, 54 ), Team_Attributes.defenceTeamWidthClass ( text | values: Normal, Wide ), Team_Attributes.defenceDefenderLineClass ( text | values: Cover, Offside Trap ) ]
foreign keys:
Player_Attributes.player_api_id = Player.player_api_id
Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id
League.country_id = Country.id
Team_Attributes.team_api_id = Team.team_api_id
Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id

# Here are some example questions that CAN be answered by the schema below:
-- List all country and league names.
-- How many leagues are there in England?
-- What is the average weight of all players?
-- What is the maximum and minimum height of all players?
-- List all player names who have an overall rating higher than the average.
------------------------------------------------------------------------------------------
database_id: sakila_1
database schema :
table actor, columns = [ actor.actor_id ( integer | primary key | values: 1, 2 ), actor.first_name ( text | values: PENELOPE, NICK ), actor.last_name ( text | values: GUINESS, WAHLBERG ), actor.last_update ( datetime | values: 2006-02-15 04:34:33 ) ]
table address, columns = [ address.address_id ( integer | primary key | values: 1, 2 ), address.address ( text | values: 47 MySakila Drive, 28 MySQL Boulevard ), address.address2 ( text | values:  ), address.district ( text | values: Alberta, QLD ), address.city_id ( integer | values: 300, 576 ), address.postal_code ( text | values: , 35200 ), address.phone ( text | values: , 14033335568 ), address.last_update ( datetime | values: 2006-02-15 04:45:30 ) ]
table category, columns = [ category.category_id ( integer | primary key | values: 1, 2 ), category.name ( text | values: Action, Animation ), category.last_update ( datetime | values: 2006-02-15 04:46:27 ) ]
table city, columns = [ city.city_id ( integer | primary key | values: 1, 2 ), city.city ( text | values: A Corua (La Corua), Abha ), city.country_id ( integer | values: 87, 82 ), city.last_update ( datetime | values: 2006-02-15 04:45:25 ) ]
table country, columns = [ country.country_id ( integer | primary key | values: 1, 2 ), country.country ( text | values: Afghanistan, Algeria ), country.last_update ( datetime | values: 2006-02-15 04:44:00 ) ]
table customer, columns = [ customer.customer_id ( integer | primary key | values: 1, 2 ), customer.store_id ( integer | values: 1, 2 ), customer.first_name ( text | values: MARY, PATRICIA ), customer.last_name ( text | values: SMITH, JOHNSON ), customer.email ( text | values: MARY.SMITH@sakilacustomer.org, PATRICIA.JOHNSON@sakilacustomer.org ), customer.address_id ( integer | values: 5, 6 ), customer.active ( boolean | values: 1, 0 ), customer.create_date ( datetime | values: 2006-02-14 22:04:36, 2006-02-14 22:04:37 ), customer.last_update ( datetime | values: 2006-02-15 04:57:20 ) ]
table film, columns = [ film.film_id ( integer | primary key | values: 1, 2 ), film.title ( text | values: ACADEMY DINOSAUR, ACE GOLDFINGER ), film.description ( text | values: A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China ), film.release_year ( datetime | values: 2006 ), film.language_id ( integer | values: 1 ), film.original_language_id ( integer | values: N/A ), film.rental_duration ( real | values: 6, 3 ), film.rental_rate ( real | values: 0.99, 4.99 ), film.length ( real | values: 86, 48 ), film.replacement_cost ( real | values: 20.99, 12.99 ), film.rating ( text | values: PG, G ), film.special_features ( text | values: Deleted Scenes,Behind the Scenes, Trailers,Deleted Scenes ), film.last_update ( datetime | values: 2006-02-15 05:03:42 ) ]
table film_actor, columns = [ film_actor.actor_id ( integer | primary key | values: 1, 2 ), film_actor.film_id ( integer | values: 1, 23 ), film_actor.last_update ( datetime | values: 2006-02-15 05:05:03 ) ]
table film_category, columns = [ film_category.film_id ( integer | primary key | values: 1, 2 ), film_category.category_id ( integer | values: 6, 11 ), film_category.last_update ( datetime | values: 2006-02-15 05:07:09 ) ]
table film_text, columns = [ film_text.film_id ( integer | primary key | values: N/A ), film_text.title ( text | values: N/A ), film_text.description ( text | values: N/A ) ]
table inventory, columns = [ inventory.inventory_id ( integer | primary key | values: 1, 2 ), inventory.film_id ( integer | values: 1, 2 ), inventory.store_id ( integer | values: 1, 2 ), inventory.last_update ( datetime | values: 2006-02-15 05:09:17 ) ]
table language, columns = [ language.language_id ( integer | primary key | values: N/A ), language.name ( text | values: N/A ), language.last_update ( datetime | values: N/A ) ]
table payment, columns = [ payment.payment_id ( integer | primary key | values: 1, 2 ), payment.customer_id ( integer | values: 1, 2 ), payment.staff_id ( integer | values: 1, 2 ), payment.rental_id ( integer | values: 76, 573 ), payment.amount ( real | values: 2.99, 0.99 ), payment.payment_date ( datetime | values: 2005-05-25 11:30:37, 2005-05-28 10:35:23 ), payment.last_update ( datetime | values: 2006-02-15 22:12:30, 2006-02-15 22:12:31 ) ]
table rental, columns = [ rental.rental_id ( integer | primary key | values: 1, 2 ), rental.rental_date ( datetime | values: 2005-05-24 22:53:30, 2005-05-24 22:54:33 ), rental.inventory_id ( integer | values: 367, 1525 ), rental.customer_id ( integer | values: 130, 459 ), rental.return_date ( datetime | values: 2005-05-26 22:04:30, 2005-05-28 19:40:33 ), rental.staff_id ( integer | values: 1, 2 ), rental.last_update ( datetime | values: 2006-02-15 21:30:53, 2006-02-23 04:12:08 ) ]
table staff, columns = [ staff.staff_id ( integer | primary key | values: N/A ), staff.first_name ( text | values: N/A ), staff.last_name ( text | values: N/A ), staff.address_id ( integer | values: N/A ), staff.picture ( text | values: N/A ), staff.email ( text | values: N/A ), staff.store_id ( real | values: N/A ), staff.active ( boolean | values: N/A ), staff.username ( text | values: N/A ), staff.password ( text | values: N/A ), staff.last_update ( datetime | values: N/A ) ]
table store, columns = [ store.store_id ( integer | primary key | values: N/A ), store.manager_staff_id ( integer | values: N/A ), store.address_id ( integer | values: N/A ), store.last_update ( datetime | values: N/A ) ]
foreign keys:
address.city_id = city.city_id
city.country_id = country.country_id
customer.store_id = store.store_id
customer.address_id = address.address_id
film.original_language_id = language.language_id
film.language_id = language.language_id
film_actor.film_id = film.film_id
film_actor.actor_id = actor.actor_id
film_category.category_id = category.category_id
film_category.film_id = film.film_id
inventory.film_id = film.film_id
inventory.store_id = store.store_id
payment.staff_id = staff.staff_id
payment.customer_id = customer.customer_id
payment.rental_id = rental.rental_id
rental.customer_id = customer.customer_id
rental.inventory_id = inventory.inventory_id
rental.staff_id = staff.staff_id
staff.address_id = address.address_id
store.address_id = address.address_id
store.manager_staff_id = staff.staff_id

# Here are some example questions that CAN be answered by the schema below:
-- How many different last names do the actors and actresses have?
-- Count the number of different last names actors have.
-- What is the most popular first name of the actors?
-- Return the most common first name among all actors.
-- What is the most popular full name of the actors?
------------------------------------------------------------------------------------------
database_id: real_estate_properties
database schema :
table Ref_Feature_Types, columns = [ Ref_Feature_Types.feature_type_code ( text | primary key | values: Amenity, Security ), Ref_Feature_Types.feature_type_name ( text | values: Amenity, eg Pool., Securiyt, eg Burglar Alarm. ) ]
table Ref_Property_Types, columns = [ Ref_Property_Types.property_type_code ( text | primary key | values: Apartment, Field ), Ref_Property_Types.property_type_description ( text | values: House, Bungalow, etc., Apartment, Flat, Condo, etc. ) ]
table Other_Available_Features, columns = [ Other_Available_Features.feature_id ( integer | primary key | values: 2, 3 ), Other_Available_Features.feature_type_code ( text | values: Amenity, Security ), Other_Available_Features.feature_name ( text | values: AirCon, Pool ), Other_Available_Features.feature_description ( text | values: Air Conditioning., Swimming Pool. ) ]
table Properties, columns = [ Properties.property_id ( integer | primary key | values: 1, 2 ), Properties.property_type_code ( text | values: House, Other ), Properties.date_on_market ( datetime | values: 1991-06-21 23:52:10, 1990-05-25 23:01:51 ), Properties.date_sold ( datetime | values: 1979-05-13 16:58:06, 1990-11-14 19:16:38 ), Properties.property_name ( text | values: park, the cole ), Properties.property_address ( text | values: 4745 Emerson Stravenue Suite 829
South Garret, IN 16772-5682, 098 Tremaine Highway Suite 569
South Wilford, NJ 46587-3537 ), Properties.room_count ( real | values: 7, 1 ), Properties.vendor_requested_price ( real | values: 372652.2909, 661536468.4429 ), Properties.buyer_offered_price ( real | values: 1.68, 8.7122 ), Properties.agreed_selling_price ( real | values: 4201.8, 21769471.8328 ), Properties.apt_feature_1 ( text | values: aut, est ), Properties.apt_feature_2 ( text | values: suscipit, est ), Properties.apt_feature_3 ( text | values: N/A ), Properties.fld_feature_1 ( text | values: N/A ), Properties.fld_feature_2 ( text | values: N/A ), Properties.fld_feature_3 ( text | values: N/A ), Properties.hse_feature_1 ( text | values: N/A ), Properties.hse_feature_2 ( text | values: N/A ), Properties.hse_feature_3 ( text | values: N/A ), Properties.oth_feature_1 ( text | values: N/A ), Properties.oth_feature_2 ( text | values: N/A ), Properties.oth_feature_3 ( text | values: N/A ), Properties.shp_feature_1 ( text | values: N/A ), Properties.shp_feature_2 ( text | values: N/A ), Properties.shp_feature_3 ( text | values: N/A ), Properties.other_property_details ( text | values: N/A ) ]
table Other_Property_Features, columns = [ Other_Property_Features.property_id ( integer | values: 15, 12 ), Other_Property_Features.feature_id ( integer | values: 3, 4 ), Other_Property_Features.property_feature_description ( text | values: dolorem, earum ) ]
foreign keys:
Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code
Properties.property_type_code = Ref_Property_Types.property_type_code
Other_Property_Features.property_id = Properties.property_id
Other_Property_Features.feature_id = Other_Available_Features.feature_id

# Here are some example questions that CAN be answered by the schema below:
-- How many available features are there in total?
-- What is the feature type name of feature AirCon?
-- Show the property type descriptions of properties belonging to that code.
-- What are the names of properties that are either houses or apartments with more than 1 room?
------------------------------------------------------------------------------------------
database_id: college_3
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Faculty, columns = [ Faculty.FacID ( integer | primary key | values: 1082, 1121 ), Faculty.Lname ( text | values: Giuliano, Goodrich ), Faculty.Fname ( text | values: Mark, Michael ), Faculty.Rank ( text | values: Instructor, Professor ), Faculty.Sex ( text | values: M, F ), Faculty.Phone ( real | values: 2424, 3593 ), Faculty.Room ( text | values: 224, 219 ), Faculty.Building ( text | values: NEB, Barton ) ]
table Department, columns = [ Department.DNO ( integer | primary key | values: 10, 20 ), Department.Division ( text | values: AS, EN ), Department.DName ( text | values: History of Art, Biology ), Department.Room ( text | values: 268, 144 ), Department.Building ( text | values: Mergenthaler, Mudd ), Department.DPhone ( real | values: 7117, 7330 ) ]
table Member_of, columns = [ Member_of.FacID ( integer | values: 7792, 9210 ), Member_of.DNO ( integer | values: 600, 520 ), Member_of.Appt_Type ( text | values: Primary, Secondary ) ]
table Course, columns = [ Course.CID ( text | primary key | values: 050.102, 050.109 ), Course.CName ( text | values: COMPUTER LITERACY, INTRODUCTION TO COMPUTER SCIENCE ), Course.Credits ( real | values: 3, 1 ), Course.Instructor ( integer | values: 6112, 4230 ), Course.Days ( text | values: MTW, Th ), Course.Hours ( text | values: 3, 4 ), Course.DNO ( integer | values: 600, 550 ) ]
table Minor_in, columns = [ Minor_in.StuID ( integer | values: 1004, 1005 ), Minor_in.DNO ( integer | values: 520, 550 ) ]
table Enrolled_in, columns = [ Enrolled_in.StuID ( integer | values: 1001, 1002 ), Enrolled_in.CID ( text | values: 550.681, 600.303 ), Enrolled_in.Grade ( text | values: A-, B ) ]
table Gradeconversion, columns = [ Gradeconversion.lettergrade ( text | primary key | values: A, A+ ), Gradeconversion.gradepoint ( real | values: 4.0, 3.7 ) ]
foreign keys:
Member_of.DNO = Department.DNO
Member_of.FacID = Faculty.FacID
Course.DNO = Department.DNO
Course.Instructor = Faculty.FacID
Minor_in.DNO = Department.DNO
Minor_in.StuID = Student.StuID
Enrolled_in.Grade = Gradeconversion.lettergrade
Enrolled_in.CID = Course.CID
Enrolled_in.StuID = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- How many courses are there in total?
-- Count the number of courses.
-- How many courses have more than 2 credits?
-- Count the number of courses with more than 2 credits.
-- List all names of courses with 1 credit?
------------------------------------------------------------------------------------------
database_id: course_teach
database schema :
table course, columns = [ course.Course_ID ( integer | primary key | values: 1, 2 ), course.Staring_Date ( text | values: 5 May, 6 May ), course.Course ( text | values: Language Arts, Math ) ]
table teacher, columns = [ teacher.Teacher_ID ( integer | primary key | values: 1, 2 ), teacher.Name ( text | values: Joseph Huts, Gustaaf Deloor ), teacher.Age ( text | values: 32, 29 ), teacher.Hometown ( text | values: Blackrod Urban District, Bolton County Borough ) ]
table course_arrange, columns = [ course_arrange.Course_ID ( integer | primary key | values: 2, 3 ), course_arrange.Teacher_ID ( integer | values: 5, 3 ), course_arrange.Grade ( real | values: 1, 3 ) ]
foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many teachers are there?
-- What is the total count of teachers?
-- List the names of teachers in ascending order of age.
-- What are the names of the teachers ordered by ascending age?
-- What are the age and hometown of teachers?
------------------------------------------------------------------------------------------
database_id: roller_coaster
database schema :
table roller_coaster, columns = [ roller_coaster.Roller_Coaster_ID ( integer | primary key | values: 1, 2 ), roller_coaster.Name ( text | values: Boardwalk Bullet, Dauling Dragon ), roller_coaster.Park ( text | values: Kemah Boardwalk, Happy Valley ), roller_coaster.Country_ID ( integer | values: 1, 2 ), roller_coaster.Length ( real | values: 3236.0, 3914.0 ), roller_coaster.Height ( real | values: 96.0, 105.0 ), roller_coaster.Speed ( text | values: 51, 55 ), roller_coaster.Opened ( text | values: August 31, 2007, 2012 ), roller_coaster.Status ( text | values: Operating ) ]
table country, columns = [ country.Country_ID ( integer | primary key | values: 1, 2 ), country.Name ( text | values: Austria, Finland ), country.Population ( real | values: 8206524, 5261008 ), country.Area ( real | values: 83871, 338145 ), country.Languages ( text | values: German, Finnish Swedish ) ]
foreign keys:
roller_coaster.Country_ID = country.Country_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many roller coasters are there?
-- List the names of roller coasters by ascending order of length.
-- What are the lengths and heights of roller coasters?
-- List the names of countries whose language is not "German".
-- Show the statuses of roller coasters longer than 3300 or higher than 100.
------------------------------------------------------------------------------------------
database_id: customer_deliveries
database schema :
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.product_name ( text | values: dvds, cloth ), Products.product_price ( real | values: 1322.78, 6402.09 ), Products.product_description ( text | values: good condition, great condition ) ]
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.address_details ( text | values: 92283 Lora Forges Suite 322, 17135 Jaida Fork Suite 798 ), Addresses.city ( text | values: Mohrville, East Brody ), Addresses.zip_postcode ( text | values: 271, 940 ), Addresses.state_province_county ( text | values: Nebraska, Colorado ), Addresses.country ( text | values: USA ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.payment_method ( text | values: Visa, MasterCard ), Customers.customer_name ( text | values: Ron Emard, Gabe Schroeder ), Customers.customer_phone ( text | values: 1-382-503-5179x53639, 1-728-537-4293x0885 ), Customers.customer_email ( text | values: shaniya45@example.net, alexandra91@example.net ), Customers.date_became_customer ( datetime | values: 2011-04-25 22:20:35, 2011-10-17 16:08:25 ) ]
table Regular_Orders, columns = [ Regular_Orders.regular_order_id ( integer | primary key | values: 1, 2 ), Regular_Orders.distributer_id ( integer | values: 12, 15 ) ]
table Regular_Order_Products, columns = [ Regular_Order_Products.regular_order_id ( integer | values: 5, 2 ), Regular_Order_Products.product_id ( integer | values: 3, 1 ) ]
table Actual_Orders, columns = [ Actual_Orders.actual_order_id ( integer | primary key | values: 1, 2 ), Actual_Orders.order_status_code ( text | values: Success, Cancel ), Actual_Orders.regular_order_id ( integer | values: 8, 15 ), Actual_Orders.actual_order_date ( datetime | values: 2018-03-02 23:26:19, 2018-03-02 08:33:39 ) ]
table Actual_Order_Products, columns = [ Actual_Order_Products.actual_order_id ( integer | values: 2, 14 ), Actual_Order_Products.product_id ( integer | values: 1, 5 ) ]
table Customer_Addresses, columns = [ Customer_Addresses.customer_id ( integer | values: 5, 14 ), Customer_Addresses.address_id ( integer | values: 6, 5 ), Customer_Addresses.date_from ( datetime | values: 2016-09-06 19:23:46, 2016-12-21 03:49:54 ), Customer_Addresses.address_type ( text | values: House, Flat ), Customer_Addresses.date_to ( datetime | values: 2018-02-25 15:34:58, 2018-03-13 21:20:21 ) ]
table Delivery_Routes, columns = [ Delivery_Routes.route_id ( integer | primary key | values: 1, 2 ), Delivery_Routes.route_name ( text | values: Torphy Ltd, Heidenreich Group ), Delivery_Routes.other_route_details ( text | values: 16893 Wilderman Terrace
Port Lucasburgh, ND 55978-5550, 6534 Cheyenne Trace Suite 242
Koryburgh, PA 21391-9164 ) ]
table Delivery_Route_Locations, columns = [ Delivery_Route_Locations.location_code ( text | primary key | values: 04 Elm Rd, 15 Sixth Av ), Delivery_Route_Locations.route_id ( integer | values: 11, 7 ), Delivery_Route_Locations.location_address_id ( integer | values: 5, 13 ), Delivery_Route_Locations.location_name ( text | values: Labadie-Crooks, VonRueden, Schmeler and Fay ) ]
table Trucks, columns = [ Trucks.truck_id ( integer | primary key | values: 1, 2 ), Trucks.truck_licence_number ( text | values: 58110, 33822 ), Trucks.truck_details ( text | values: Frida, Randy ) ]
table Employees, columns = [ Employees.employee_id ( integer | primary key | values: 1, 2 ), Employees.employee_address_id ( integer | values: 4, 12 ), Employees.employee_name ( text | values: Kacie, Dejuan ), Employees.employee_phone ( text | values: 716-650-2081, 211.289.9042 ) ]
table Order_Deliveries, columns = [ Order_Deliveries.location_code ( text | values: 27 City Rd, 73 Nancy Av ), Order_Deliveries.actual_order_id ( integer | values: 11, 1 ), Order_Deliveries.delivery_status_code ( text | values: Ready, On Road ), Order_Deliveries.driver_employee_id ( integer | values: 6, 4 ), Order_Deliveries.truck_id ( integer | values: 11, 10 ), Order_Deliveries.delivery_date ( datetime | values: 2018-03-21 00:57:22, 2018-02-26 01:32:49 ) ]
foreign keys:
Regular_Orders.distributer_id = Customers.customer_id
Regular_Order_Products.regular_order_id = Regular_Orders.regular_order_id
Regular_Order_Products.product_id = Products.product_id
Actual_Orders.regular_order_id = Regular_Orders.regular_order_id
Actual_Order_Products.actual_order_id = Actual_Orders.actual_order_id
Actual_Order_Products.product_id = Products.product_id
Customer_Addresses.address_id = Addresses.address_id
Customer_Addresses.customer_id = Customers.customer_id
Delivery_Route_Locations.route_id = Delivery_Routes.route_id
Delivery_Route_Locations.location_address_id = Addresses.address_id
Employees.employee_address_id = Addresses.address_id
Order_Deliveries.driver_employee_id = Employees.employee_id
Order_Deliveries.location_code = Delivery_Route_Locations.location_code
Order_Deliveries.actual_order_id = Actual_Orders.actual_order_id
Order_Deliveries.truck_id = Trucks.truck_id

# Here are some example questions that CAN be answered by the schema below:
-- Find the ids of orders whose status is 'Success'.
-- Find the name and price of the product that has been ordered the greatest number of times.
-- Find the number of customers in total.
-- How many different payment methods are there?
-- Show the details of all trucks in the order of their license number.
------------------------------------------------------------------------------------------
database_id: game_injury
database schema :
table stadium, columns = [ stadium.id ( integer | primary key | values: 1, 2 ), stadium.name ( text | values: Cowboys Stadium, FedExField ), stadium.Home_Games ( real | values: 8 ), stadium.Average_Attendance ( real | values: 87047.0, 83172.0 ), stadium.Total_Attendance ( real | values: 696377.0, 665380.0 ), stadium.Capacity_Percentage ( real | values: 108.8, 90.7 ) ]
table game, columns = [ game.stadium_id ( integer | values: 1, 2 ), game.id ( integer | primary key | values: 1, 2 ), game.Season ( real | values: 2007, 2008 ), game.Date ( text | values: 18 May 2007, 22 September 2007 ), game.Home_team ( text | values: Quruvchi, Pakhtakor ), game.Away_team ( text | values: Pakhtakor, Quruvchi ), game.Score ( text | values: 1–1, 0–0 ), game.Competition ( text | values: League, Cup ) ]
table injury_accident, columns = [ injury_accident.game_id ( integer | values: 1, 2 ), injury_accident.id ( integer | primary key | values: 1, 2 ), injury_accident.Player ( text | values: Davide Santon, Maicon ), injury_accident.Injury ( text | values: Clean-up surgery on his right knee, Knee problem ), injury_accident.Number_of_matches ( text | values: 12, 2 ), injury_accident.Source ( text | values: inter.it ) ]
foreign keys:
game.stadium_id = stadium.id
injury_accident.game_id = game.id

# Here are some example questions that CAN be answered by the schema below:
-- How many games are held after season 2007?
-- List the dates of games by the home team name in descending order.
-- List the season, home team, away team of all the games.
-- What are the maximum, minimum and average home games each stadium held?
-- What is the average attendance of stadiums with capacity percentage higher than 100%?
------------------------------------------------------------------------------------------
database_id: school_finance
database schema :
table School, columns = [ School.School_id ( text | primary key | values: 1, 2 ), School.School_name ( text | values: Bremen, Culver Community ), School.Location ( text | values: Bremen, Culver ), School.Mascot ( text | values: Lions, Cavaliers ), School.Enrollment ( real | values: 495, 287 ), School.IHSAA_Class ( text | values: AA, A ), School.IHSAA_Football_Class ( text | values: AA, A ), School.County ( text | values: 50 Marshall, 71 St. Joseph ) ]
table budget, columns = [ budget.School_id ( integer | primary key | values: 1, 2 ), budget.Year ( real | values: 2003, 1999 ), budget.Budgeted ( real | values: 4979, 3666 ), budget.total_budget_percent_budgeted ( real | values: 2.0, 2.4 ), budget.Invested ( real | values: 2134, 5840 ), budget.total_budget_percent_invested ( real | values: 2.0, 2.2 ), budget.Budget_invested_percent ( text | values: 42.9, 159.3 ) ]
table endowment, columns = [ endowment.endowment_id ( integer | primary key | values: 1, 2 ), endowment.School_id ( integer | values: 1, 2 ), endowment.donator_name ( text | values: Monte Plata, San José de Ocoa ), endowment.amount ( real | values: 9.51, 9.83 ) ]
foreign keys:
budget.School_id = School.School_id
endowment.School_id = School.School_id

# Here are some example questions that CAN be answered by the schema below:
-- How many schools are there?
-- Count the number of schools.
-- Show all school names in alphabetical order.
-- List the name, location, mascot for all schools.
-- What are the total and average enrollment of all schools?
------------------------------------------------------------------------------------------
database_id: scholar
database schema :
table venue, columns = [ venue.venueId ( integer | primary key | values: N/A ), venue.venueName ( text | values: N/A ) ]
table author, columns = [ author.authorId ( integer | primary key | values: N/A ), author.authorName ( text | values: N/A ) ]
table dataset, columns = [ dataset.datasetId ( integer | primary key | values: N/A ), dataset.datasetName ( text | values: N/A ) ]
table journal, columns = [ journal.journalId ( integer | primary key | values: N/A ), journal.journalName ( text | values: N/A ) ]
table keyphrase, columns = [ keyphrase.keyphraseId ( integer | primary key | values: N/A ), keyphrase.keyphraseName ( text | values: N/A ) ]
table paper, columns = [ paper.paperId ( integer | primary key | values: N/A ), paper.title ( text | values: N/A ), paper.venueId ( integer | values: N/A ), paper.year ( real | values: N/A ), paper.numCiting ( real | values: N/A ), paper.numCitedBy ( real | values: N/A ), paper.journalId ( integer | values: N/A ) ]
table cite, columns = [ cite.citingPaperId ( integer | primary key | values: N/A ), cite.citedPaperId ( integer | values: N/A ) ]
table paperDataset, columns = [ paperDataset.paperId ( real | values: N/A ), paperDataset.datasetId ( integer | primary key | values: N/A ) ]
table paperKeyphrase, columns = [ paperKeyphrase.paperId ( integer | values: N/A ), paperKeyphrase.keyphraseId ( integer | primary key | values: N/A ) ]
table writes, columns = [ writes.paperId ( integer | primary key | values: N/A ), writes.authorId ( integer | values: N/A ) ]
foreign keys:
paper.venueId = venue.venueId
paper.journalId = journal.journalId
cite.citingPaperId = paper.paperId
cite.citedPaperId = paper.paperId
paperKeyphrase.keyphraseId = keyphrase.keyphraseId
paperKeyphrase.paperId = paper.paperId
writes.authorId = author.authorId
writes.paperId = paper.paperId

# Here are some example questions that CAN be answered by the schema below:
-- papers that are coauthored by Peter Mertens and Dina Barbian
-- papers written by Peter Mertens and Dina Barbian
-- what are the papers that have Peter Mertens and Dina Barbian as co-authors
-- What papers have Peter Mertens and Dina Barbian written ?
-- what paper did Peter Mertens and Dina Barbian write together ?
------------------------------------------------------------------------------------------
database_id: voter_1
database schema :
table AREA_CODE_STATE, columns = [ AREA_CODE_STATE.area_code ( integer | primary key | values: 201, 202 ), AREA_CODE_STATE.state ( text | values: NJ, DC ) ]
table CONTESTANTS, columns = [ CONTESTANTS.contestant_number ( integer | primary key | values: 1, 2 ), CONTESTANTS.contestant_name ( text | values: Edwina Burnam, Tabatha Gehling ) ]
table VOTES, columns = [ VOTES.vote_id ( integer | primary key | values: 5, 3 ), VOTES.phone_number ( real | values: 5112677315, 6209222712 ), VOTES.state ( text | values: NY, CA ), VOTES.contestant_number ( integer | values: 2, 3 ), VOTES.created ( datetime | values: 2018-03-09 19:03:21, 2018-03-09 19:03:36 ) ]
foreign keys:
VOTES.contestant_number = CONTESTANTS.contestant_number
VOTES.state = AREA_CODE_STATE.state

# Here are some example questions that CAN be answered by the schema below:
-- How many states are there?
-- List the contestant numbers and names, ordered by contestant name descending.
-- List the vote ids, phone numbers and states of all votes.
-- What are the maximum and minimum values of area codes?
-- What is last date created of votes from the state 'CA'?
------------------------------------------------------------------------------------------
database_id: match_season
database schema :
table country, columns = [ country.Country_id ( integer | primary key | values: 1, 2 ), country.Country_name ( text | values: Indonesia, Iran ), country.Capital ( text | values: Jakarta, Tehran ), country.Official_native_language ( text | values: Bahasa Indonesia, Persian ( Arabic script ) ) ]
table team, columns = [ team.Team_id ( integer | primary key | values: 1, 2 ), team.Name ( text | values: Columbus Crew, Evalyn Feil ) ]
table match_season, columns = [ match_season.Season ( integer | primary key | values: 1996.0, 1997.0 ), match_season.Player ( text | values: Steve Ralston Category:Articles with hCards, Mike Duhaney Category:Articles with hCards ), match_season.Position ( text | values: Midfielder, Defender ), match_season.Country ( integer | values: 6, 4 ), match_season.Team ( integer | values: 1, 2 ), match_season.Draft_Pick_Number ( real | values: 18, 87 ), match_season.Draft_Class ( text | values: 1996 MLS College Draft, 1996 MLS Inaugural Player Draft ), match_season.College ( text | values: Florida International, UNLV ) ]
table player, columns = [ player.Player_ID ( integer | primary key | values: 1, 2 ), player.Player ( text | values: Cho Soong-Jae (630), Chung Hong (717) ), player.Years_Played ( text | values: 1 (2011), 8 (2003–2005, 2007–2011) ), player.Total_WL ( text | values: 2–0, 0–0 ), player.Singles_WL ( text | values: 1–0, 0–0 ), player.Doubles_WL ( text | values: 1–0, 0–0 ), player.Team ( integer | values: 1, 2 ) ]
foreign keys:
match_season.Team = team.Team_id
match_season.Country = country.Country_id
player.Team = team.Team_id

# Here are some example questions that CAN be answered by the schema below:
-- How many countries are there in total?
-- Count the number of countries.
-- Show the country name and capital of all countries.
-- What are the names and capitals of each country?
-- Show all official native languages that contain the word "English".
------------------------------------------------------------------------------------------
database_id: small_bank_1
database schema :
table ACCOUNTS, columns = [ ACCOUNTS.custid ( integer | primary key | values: 1, 2 ), ACCOUNTS.name ( text | values: Brown, Wang ) ]
table SAVINGS, columns = [ SAVINGS.custid ( integer | primary key | values: 1, 2 ), SAVINGS.balance ( real | values: 200000.0, 999999999.0 ) ]
table CHECKING, columns = [ CHECKING.custid ( integer | primary key | values: 1, 2 ), CHECKING.balance ( real | values: 10000.0, 2000.0 ) ]
foreign keys:
SAVINGS.custid = ACCOUNTS.custid
CHECKING.custid = ACCOUNTS.custid

# Here are some example questions that CAN be answered by the schema below:
-- Find the total savings balance of all accounts except the account with name ‘Brown’.
-- What is the total balance of savings accounts not belonging to someone with the name Brown?
-- How many accounts are there in total?
-- Count the number of accounts.
-- What is the total checking balance in all accounts?
------------------------------------------------------------------------------------------
database_id: wta_1
database schema :
table players, columns = [ players.player_id ( integer | primary key | values: 200001, 200002 ), players.first_name ( text | values: Martina, Mirjana ), players.last_name ( text | values: Hingis, Lucic ), players.hand ( text | values: R, L ), players.birth_date ( datetime | values: 19800930, 19820309 ), players.country_code ( text | values: SUI, CRO ) ]
table matches, columns = [ matches.best_of ( real | values: 3 ), matches.draw_size ( real | values: 4, 32 ), matches.loser_age ( real | values: 24.626967830300003, 23.6221765914 ), matches.loser_entry ( text | values:  ), matches.loser_hand ( text | values: R, L ), matches.loser_ht ( real | values: 170, 183 ), matches.loser_id ( integer | values: 201474, 201520 ), matches.loser_ioc ( text | values: POL, CZE ), matches.loser_name ( text | values: Agnieszka Radwanska, Petra Kvitova ), matches.loser_rank ( real | values: 4, 6 ), matches.loser_rank_points ( real | values: 5890, 4370 ), matches.loser_seed ( real | values: 3, 5 ), matches.match_num ( real | values: 297, 296 ), matches.minutes ( real | values: 82, 72 ), matches.round ( text | values: RR, SF ), matches.score ( text | values: 6-2 6-4, 6-2 6-3 ), matches.surface ( text | values: Hard, Clay ), matches.tourney_date ( datetime | values: 20131021, 20160104 ), matches.tourney_id ( text | values: 2013-W-WT-TUR-01A-2013, 2016-1049 ), matches.tourney_level ( text | values: W, I ), matches.tourney_name ( text | values: WTA Championships, Auckland ), matches.winner_age ( real | values: 32.0684462697, 23.6221765914 ), matches.winner_entry ( text | values:  ), matches.winner_hand ( text | values: R, L ), matches.winner_ht ( real | values: 175, 183 ), matches.winner_id ( integer | values: 200033, 201520 ), matches.winner_ioc ( text | values: USA, CZE ), matches.winner_name ( text | values: Serena Williams, Petra Kvitova ), matches.winner_rank ( real | values: 1, 6 ), matches.winner_rank_points ( real | values: 12040, 4370 ), matches.winner_seed ( real | values: 1, 5 ), matches.year ( real | values: 2013, 2016 ) ]
table rankings, columns = [ rankings.ranking_date ( datetime | values: 20000101, 20000103 ), rankings.ranking ( real | values: 3, 4 ), rankings.player_id ( integer | values: 200748, 200033 ), rankings.ranking_points ( real | values: 4378, 3021 ), rankings.tours ( real | values: 13, 15 ) ]
foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id

# Here are some example questions that CAN be answered by the schema below:
-- Find the total number of players.
-- How many players are there?
-- Find the total number of matches.
-- Count the number of matches.
-- List the first name and birth date of all players from the country with code USA.
------------------------------------------------------------------------------------------
database_id: yelp
database schema :
table business, columns = [ business.bid ( integer | primary key | values: N/A ), business.business_id ( text | values: N/A ), business.name ( text | values: N/A ), business.full_address ( text | values: N/A ), business.city ( text | values: N/A ), business.latitude ( text | values: N/A ), business.longitude ( text | values: N/A ), business.review_count ( real | values: N/A ), business.is_open ( real | values: N/A ), business.rating ( real | values: N/A ), business.state ( text | values: N/A ) ]
table category, columns = [ category.id ( integer | primary key | values: N/A ), category.business_id ( text | values: N/A ), category.category_name ( text | values: N/A ) ]
table user, columns = [ user.uid ( integer | primary key | values: N/A ), user.user_id ( text | values: N/A ), user.name ( text | values: N/A ) ]
table checkin, columns = [ checkin.cid ( integer | primary key | values: N/A ), checkin.business_id ( text | values: N/A ), checkin.count ( real | values: N/A ), checkin.day ( text | values: N/A ) ]
table neighbourhood, columns = [ neighbourhood.id ( integer | primary key | values: N/A ), neighbourhood.business_id ( text | values: N/A ), neighbourhood.neighbourhood_name ( text | values: N/A ) ]
table review, columns = [ review.rid ( integer | primary key | values: N/A ), review.business_id ( text | values: N/A ), review.user_id ( text | values: N/A ), review.rating ( real | values: N/A ), review.text ( text | values: N/A ), review.year ( real | values: N/A ), review.month ( text | values: N/A ) ]
table tip, columns = [ tip.tip_id ( integer | primary key | values: N/A ), tip.business_id ( text | values: N/A ), tip.text ( text | values: N/A ), tip.user_id ( text | values: N/A ), tip.likes ( real | values: N/A ), tip.year ( real | values: N/A ), tip.month ( text | values: N/A ) ]
foreign keys:
category.business_id = business.business_id
checkin.business_id = business.business_id
neighbourhood.business_id = business.business_id
review.user_id = user.user_id
review.business_id = business.business_id
tip.user_id = user.user_id
tip.business_id = business.business_id

# Here are some example questions that CAN be answered by the schema below:
-- List all the businesses with more than 4.5 stars
-- List all businesses with rating 3.5
-- List all user ids with name Michelle
-- Find all states in which there is a Whataburger
-- Find all cities in which there is a restaurant called " MGM Grand Buffet "
------------------------------------------------------------------------------------------
database_id: student_1
database schema :
table list, columns = [ list.LastName ( text | primary key | values: AMY, AREHART ), list.FirstName ( text | values:  PATRINA,  VERTIE ), list.Grade ( real | values: 2, 6 ), list.Classroom ( real | values: 101, 112 ) ]
table teachers, columns = [ teachers.LastName ( text | primary key | values: COVIN, KAWA ), teachers.FirstName ( text | values:  JEROME,  GORDON ), teachers.Classroom ( real | values: 101, 102 ) ]

# Here are some example questions that CAN be answered by the schema below:
-- Find the number of students in total.
-- How many students are there?
-- Find the last names of students studying in room 111.
-- What are the last names of students in room 111?
-- Find the first names of students studying in room 108.
------------------------------------------------------------------------------------------
database_id: manufacturer
database schema :
table manufacturer, columns = [ manufacturer.Manufacturer_ID ( integer | primary key | values: 1, 2 ), manufacturer.Open_Year ( real | values: 1980.0, 1990.0 ), manufacturer.Name ( text | values: Chevrolet House, IKEA ), manufacturer.Num_of_Factories ( real | values: 36, 21 ), manufacturer.Num_of_Shops ( real | values: 8, 19 ) ]
table furniture, columns = [ furniture.Furniture_ID ( integer | primary key | values: 1, 2 ), furniture.Name ( text | values: Billiard table, Chabudai ), furniture.Num_of_Component ( real | values: 14, 4 ), furniture.Market_Rate ( real | values: 52.5, 40.0 ) ]
table furniture_manufacte, columns = [ furniture_manufacte.Manufacturer_ID ( integer | primary key | values: 1, 4 ), furniture_manufacte.Furniture_ID ( integer | values: 3, 2 ), furniture_manufacte.Price_in_Dollar ( real | values: 239.0, 450.0 ) ]
foreign keys:
furniture_manufacte.Furniture_ID = furniture.Furniture_ID
furniture_manufacte.Manufacturer_ID = manufacturer.Manufacturer_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many furniture components are there in total?
-- Return the name and id of the furniture with the highest market rate.
-- find the total market rate of the furnitures that have the top 2 market shares.
-- Find the component amounts and names of all furnitures that have more than 10 components.
-- Find the name and component amount of the least popular furniture.
------------------------------------------------------------------------------------------
database_id: store_1
database schema :
table artists, columns = [ artists.id ( integer | primary key | values: 1, 2 ), artists.name ( text | values: AC/DC, Accept ) ]
table sqlite_sequence, columns = [ sqlite_sequence.name ( text | values: genres, media_types ), sqlite_sequence.seq ( text | values: 25, 5 ) ]
table albums, columns = [ albums.id ( integer | primary key | values: 1, 4 ), albums.title ( text | values: For Those About To Rock We Salute You, Balls to the Wall ), albums.artist_id ( integer | values: 1, 2 ) ]
table employees, columns = [ employees.id ( integer | primary key | values: 1, 2 ), employees.last_name ( text | values: Adams, Edwards ), employees.first_name ( text | values: Andrew, Nancy ), employees.title ( text | values: General Manager, Sales Manager ), employees.reports_to ( integer | values: 1, 2 ), employees.birth_date ( datetime | values: 1962-02-18 00:00:00, 1958-12-08 00:00:00 ), employees.hire_date ( datetime | values: 2002-08-14 00:00:00, 2002-05-01 00:00:00 ), employees.address ( text | values: 11120 Jasper Ave NW, 825 8 Ave SW ), employees.city ( text | values: Edmonton, Calgary ), employees.state ( text | values: AB ), employees.country ( text | values: Canada ), employees.postal_code ( text | values: T5K 2N1, T2P 2T3 ), employees.phone ( text | values: +1 (780) 428-9482, +1 (403) 262-3443 ), employees.fax ( text | values: +1 (780) 428-3457, +1 (403) 262-3322 ), employees.email ( text | values: andrew@chinookcorp.com, nancy@chinookcorp.com ) ]
table customers, columns = [ customers.id ( integer | primary key | values: 1, 3 ), customers.first_name ( text | values: Luís, Leonie ), customers.last_name ( text | values: Gonçalves, Köhler ), customers.company ( text | values: Embraer - Empresa Brasileira de Aeronáutica S.A., JetBrains s.r.o. ), customers.address ( text | values: Av. Brigadeiro Faria Lima, 2170, Theodor-Heuss-Straße 34 ), customers.city ( text | values: São José dos Campos, Stuttgart ), customers.state ( text | values: SP, QC ), customers.country ( text | values: Brazil, Germany ), customers.postal_code ( text | values: 12227-000, 70174 ), customers.phone ( text | values: +55 (12) 3923-5555, +49 0711 2842222 ), customers.fax ( text | values: +55 (12) 3923-5566, +420 2 4172 5555 ), customers.email ( text | values: luisg@embraer.com.br, leonekohler@surfeu.de ), customers.support_rep_id ( integer | values: 3, 4 ) ]
table genres, columns = [ genres.id ( integer | primary key | values: 1, 2 ), genres.name ( text | values: Rock, Jazz ) ]
table invoices, columns = [ invoices.id ( integer | primary key | values: 98, 121 ), invoices.customer_id ( integer | values: 1, 2 ), invoices.invoice_date ( datetime | values: 2007-01-01 00:00:00, 2007-01-02 00:00:00 ), invoices.billing_address ( text | values: Theodor-Heuss-Straße 34, Ullevålsveien 14 ), invoices.billing_city ( text | values: Stuttgart, Oslo ), invoices.billing_state ( text | values: AB, MA ), invoices.billing_country ( text | values: Germany, Norway ), invoices.billing_postal_code ( text | values: 70174, 0171 ), invoices.total ( real | values: 1.98, 3.96 ) ]
table media_types, columns = [ media_types.id ( integer | primary key | values: 1, 2 ), media_types.name ( text | values: MPEG audio file, Protected AAC audio file ) ]
table tracks, columns = [ tracks.id ( integer | primary key | values: 1, 6 ), tracks.name ( text | values: For Those About To Rock (We Salute You), Balls to the Wall ), tracks.album_id ( integer | values: 1, 2 ), tracks.media_type_id ( integer | values: 1, 2 ), tracks.genre_id ( integer | values: 1, 2 ), tracks.composer ( text | values: Angus Young, Malcolm Young, Brian Johnson, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman ), tracks.milliseconds ( real | values: 343719, 342562 ), tracks.bytes ( real | values: 11170334, 5510424 ), tracks.unit_price ( real | values: 0.99, 1.99 ) ]
table invoice_lines, columns = [ invoice_lines.id ( integer | primary key | values: 579, 1 ), invoice_lines.invoice_id ( integer | values: 1, 2 ), invoice_lines.track_id ( integer | values: 1, 2 ), invoice_lines.unit_price ( real | values: 0.99, 1.99 ), invoice_lines.quantity ( real | values: 1 ) ]
table playlists, columns = [ playlists.id ( integer | primary key | values: 1, 2 ), playlists.name ( text | values: Music, Movies ) ]
table playlist_tracks, columns = [ playlist_tracks.playlist_id ( integer | primary key | values: 1, 3 ), playlist_tracks.track_id ( integer | values: 1, 2 ) ]
foreign keys:
albums.artist_id = artists.id
employees.reports_to = employees.id
customers.support_rep_id = employees.id
invoices.customer_id = customers.id
tracks.media_type_id = media_types.id
tracks.genre_id = genres.id
tracks.album_id = albums.id
invoice_lines.track_id = tracks.id
invoice_lines.invoice_id = invoices.id
playlist_tracks.track_id = tracks.id
playlist_tracks.playlist_id = playlists.id

# Here are some example questions that CAN be answered by the schema below:
-- A list of the top 5 countries by number of invoices. List country name and number of invoices.
-- What are the top 5 countries by number of invoices and how many do they have?
-- A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.
-- What are the names of the top 8 countries by total invoice size and what are those sizes?
-- A list of the top 10 countries by average invoice size. List country name and average invoice size.
------------------------------------------------------------------------------------------
database_id: train_station
database schema :
table station, columns = [ station.Station_ID ( integer | primary key | values: 1, 2 ), station.Name ( text | values: London Waterloo, London Victoria ), station.Annual_entry_exit ( real | values: 94.046, 76.231 ), station.Annual_interchanges ( real | values: 9.489, 9.157 ), station.Total_Passengers ( real | values: 103.534, 85.38 ), station.Location ( text | values: London, Birmingham ), station.Main_Services ( text | values: South Western Main Line West of England Main Line, Brighton Main Line Chatham Main Line ), station.Number_of_Platforms ( real | values: 19, 12 ) ]
table train, columns = [ train.Train_ID ( integer | primary key | values: 1, 2 ), train.Name ( text | values: Ananthapuri Express, Guruvayur Express ), train.Time ( text | values: 17:15, 22:10 ), train.Service ( text | values: Daily ) ]
table train_station, columns = [ train_station.Train_ID ( integer | primary key | values: 1, 2 ), train_station.Station_ID ( integer | values: 1, 2 ) ]
foreign keys:
train_station.Station_ID = station.Station_ID
train_station.Train_ID = train.Train_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many train stations are there?
-- Show the name, location, and number of platforms for all stations.
-- What are all locations of train stations?
-- Show the names and total passengers for all train stations not in London.
-- Show the names and main services for train stations that have the top three total number of passengers.
------------------------------------------------------------------------------------------
database_id: document_management
database schema :
table Roles, columns = [ Roles.role_code ( text | primary key | values: DBA, PROJ-MGR ), Roles.role_description ( text | values: Database Administrator, Project Manager ) ]
table Users, columns = [ Users.user_id ( integer | primary key | values: 1, 2 ), Users.role_code ( text | values: PROJ-MGR, DBA ), Users.user_name ( text | values: dickens.elta, tremblay.raheem ), Users.user_login ( text | values: 0, 1 ), Users.password ( text | values: e72b5a2d50b39a8760764a5f7a9d68ca2f076877, 9bc25a040d5647ced5ec32e1a455e90fafc10bcb ) ]
table Document_Structures, columns = [ Document_Structures.document_structure_code ( text | primary key | values: 1, 5 ), Document_Structures.parent_document_structure_code ( text | values: 1, 6 ), Document_Structures.document_structure_description ( text | values: Header, Main section ) ]
table Functional_Areas, columns = [ Functional_Areas.functional_area_code ( text | primary key | values: 1, 8 ), Functional_Areas.parent_functional_area_code ( text | values: 8 ), Functional_Areas.functional_area_description ( text | values: Signature, Acknowledgement ) ]
table Images, columns = [ Images.image_id ( integer | primary key | values: 1, 2 ), Images.image_alt_text ( text | values: Lea, Arden ), Images.image_name ( text | values: top1, top2 ), Images.image_url ( text | values: http://www.rempelnader.com/1.jpg, http://connellykertzmann.org/1.jpg ) ]
table Documents, columns = [ Documents.document_code ( text | primary key | values: 217, 349 ), Documents.document_structure_code ( text | values: 8, 1 ), Documents.document_type_code ( text | values: Book, Paper ), Documents.access_count ( real | values: 1864, 8208 ), Documents.document_name ( text | values: Learning English, Research about Art history ) ]
table Document_Functional_Areas, columns = [ Document_Functional_Areas.document_code ( text | values: 675, 930 ), Document_Functional_Areas.functional_area_code ( text | values: 9, 1 ) ]
table Document_Sections, columns = [ Document_Sections.section_id ( integer | primary key | values: 12, 15 ), Document_Sections.document_code ( text | values: 714, 217 ), Document_Sections.section_sequence ( real | values: 6072, 4510 ), Document_Sections.section_code ( text | values: 70, 14 ), Document_Sections.section_title ( text | values: after, before ) ]
table Document_Sections_Images, columns = [ Document_Sections_Images.section_id ( integer | primary key | values: 12, 15 ), Document_Sections_Images.image_id ( integer | values: 6, 2 ) ]
foreign keys:
Users.role_code = Roles.role_code
Documents.document_structure_code = Document_Structures.document_structure_code
Document_Functional_Areas.functional_area_code = Functional_Areas.functional_area_code
Document_Functional_Areas.document_code = Documents.document_code
Document_Sections.document_code = Documents.document_code
Document_Sections_Images.image_id = Images.image_id
Document_Sections_Images.section_id = Document_Sections.section_id

# Here are some example questions that CAN be answered by the schema below:
-- Find the name and access counts of all documents, in alphabetic order of the document name.
-- What are the names of all the documents, as well as the access counts of each, ordered alphabetically?
-- Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?
-- What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?
-- Find the types of documents with more than 4 documents.
------------------------------------------------------------------------------------------
database_id: formula_1
database schema :
table circuits, columns = [ circuits.circuitId ( integer | primary key | values: 1, 2 ), circuits.circuitRef ( text | values: albert_park, sepang ), circuits.name ( text | values: Albert Park Grand Prix Circuit, Sepang International Circuit ), circuits.location ( text | values: Melbourne, Kuala Lumpur ), circuits.country ( text | values: Australia, Malaysia ), circuits.lat ( real | values: -37.8497, 2.76083 ), circuits.lng ( real | values: 144.968, 101.738 ), circuits.alt ( real | values: 10,  ), circuits.url ( text | values: http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit, http://en.wikipedia.org/wiki/Sepang_International_Circuit ) ]
table races, columns = [ races.raceId ( integer | primary key | values: 1, 2 ), races.year ( real | values: 2009, 2008 ), races.round ( real | values: 1, 2 ), races.circuitId ( integer | values: 1, 2 ), races.name ( text | values: Australian Grand Prix, Malaysian Grand Prix ), races.date ( text | values: 2009-03-29, 2009-04-05 ), races.time ( text | values: 06:00:00, 09:00:00 ), races.url ( text | values: http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix ) ]
table drivers, columns = [ drivers.driverId ( integer | primary key | values: 1, 2 ), drivers.driverRef ( text | values: hamilton, heidfeld ), drivers.number ( real | values: 44,  ), drivers.code ( text | values: HAM, HEI ), drivers.forename ( text | values: Lewis, Nick ), drivers.surname ( text | values: Hamilton, Heidfeld ), drivers.dob ( text | values: 07/01/1985, 10/05/1977 ), drivers.nationality ( text | values: British, German ), drivers.url ( text | values: http://en.wikipedia.org/wiki/Lewis_Hamilton, http://en.wikipedia.org/wiki/Nick_Heidfeld ) ]
table status, columns = [ status.statusId ( integer | primary key | values: 1, 2 ), status.status ( text | values: Finished, Disqualified ) ]
table seasons, columns = [ seasons.year ( integer | primary key | values: 1950, 1951 ), seasons.url ( text | values: http://en.wikipedia.org/wiki/1950_Formula_One_season, http://en.wikipedia.org/wiki/1951_Formula_One_season ) ]
table constructors, columns = [ constructors.constructorId ( integer | primary key | values: 1, 2 ), constructors.constructorRef ( text | values: mclaren, bmw_sauber ), constructors.name ( text | values: McLaren, BMW Sauber ), constructors.nationality ( text | values: British, German ), constructors.url ( text | values: http://en.wikipedia.org/wiki/McLaren, http://en.wikipedia.org/wiki/BMW_Sauber ) ]
table constructorStandings, columns = [ constructorStandings.constructorStandingsId ( integer | primary key | values: 1, 2 ), constructorStandings.raceId ( integer | values: 18, 19 ), constructorStandings.constructorId ( integer | values: 1, 2 ), constructorStandings.points ( real | values: 14.0, 8.0 ), constructorStandings.position ( real | values: 1, 3 ), constructorStandings.positionText ( text | values: 1, 3 ), constructorStandings.wins ( real | values: 1, 0 ) ]
table results, columns = [ results.resultId ( integer | primary key | values: 1, 2 ), results.raceId ( integer | values: 18, 19 ), results.driverId ( integer | values: 1, 2 ), results.constructorId ( integer | values: 1, 2 ), results.number ( real | values: 22, 3 ), results.grid ( real | values: 1, 5 ), results.position ( real | values: 1, 2 ), results.positionText ( text | values: 1, 2 ), results.positionOrder ( real | values: 1, 2 ), results.points ( real | values: 10.0, 8.0 ), results.laps ( real | values: 58, 57 ), results.time ( text | values: 34:50.6, 5.478 ), results.milliseconds ( real | values: 5690616, 5696094 ), results.fastestLap ( real | values: 39, 41 ), results.rank ( real | values: 2, 3 ), results.fastestLapTime ( text | values: 01:27.5, 01:27.7 ), results.fastestLapSpeed ( text | values: 218.3, 217.586 ), results.statusId ( real | values: 1, 11 ) ]
table driverStandings, columns = [ driverStandings.driverStandingsId ( integer | primary key | values: 1, 2 ), driverStandings.raceId ( integer | values: 18, 19 ), driverStandings.driverId ( integer | values: 1, 2 ), driverStandings.points ( real | values: 10.0, 8.0 ), driverStandings.position ( real | values: 1, 2 ), driverStandings.positionText ( text | values: 1, 2 ), driverStandings.wins ( real | values: 1, 0 ) ]
table constructorResults, columns = [ constructorResults.constructorResultsId ( integer | primary key | values: 1, 2 ), constructorResults.raceId ( integer | values: 18, 19 ), constructorResults.constructorId ( integer | values: 1, 2 ), constructorResults.points ( real | values: 14.0, 8.0 ), constructorResults.status ( real | values: NULL, D ) ]
table qualifying, columns = [ qualifying.qualifyId ( integer | primary key | values: 1, 2 ), qualifying.raceId ( integer | values: 18, 19 ), qualifying.driverId ( integer | values: 1, 9 ), qualifying.constructorId ( integer | values: 1, 2 ), qualifying.number ( real | values: 22, 4 ), qualifying.position ( real | values: 1, 2 ), qualifying.q1 ( text | values: 1:26.572, 1:26.103 ), qualifying.q2 ( text | values: 1:25.187, 1:25.315 ), qualifying.q3 ( text | values: 1:26.714, 1:26.869 ) ]
table pitStops, columns = [ pitStops.raceId ( integer | primary key | values: N/A ), pitStops.driverId ( integer | values: N/A ), pitStops.stop ( real | values: N/A ), pitStops.lap ( real | values: N/A ), pitStops.time ( text | values: N/A ), pitStops.duration ( text | values: N/A ), pitStops.milliseconds ( real | values: N/A ) ]
table lapTimes, columns = [ lapTimes.raceId ( integer | primary key | values: N/A ), lapTimes.driverId ( integer | values: N/A ), lapTimes.lap ( real | values: N/A ), lapTimes.position ( real | values: N/A ), lapTimes.time ( text | values: N/A ), lapTimes.milliseconds ( real | values: N/A ) ]
foreign keys:
races.circuitId = circuits.circuitId
constructorStandings.raceId = races.raceId
constructorStandings.constructorId = constructors.constructorId
results.driverId = drivers.driverId
results.raceId = races.raceId
results.constructorId = constructors.constructorId
driverStandings.driverId = drivers.driverId
driverStandings.raceId = races.raceId
constructorResults.raceId = races.raceId
constructorResults.constructorId = constructors.constructorId
qualifying.driverId = drivers.driverId
qualifying.raceId = races.raceId
qualifying.constructorId = constructors.constructorId
pitStops.driverId = drivers.driverId
pitStops.raceId = races.raceId
lapTimes.driverId = drivers.driverId
lapTimes.raceId = races.raceId

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the race held most recently?
-- What is the name of the race that occurred most recently?
-- What is the name and date of the most recent race?
-- What is the name and date of the race that occurred most recently?
-- Find the names of all races held in 2017.
------------------------------------------------------------------------------------------
database_id: game_1
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Video_Games, columns = [ Video_Games.GameID ( integer | primary key | values: 1, 2 ), Video_Games.GName ( text | values: RNG Stone, The Vanishing of Eric Calder ), Video_Games.GType ( text | values: Collectible card game, Walking Simulator ) ]
table Plays_Games, columns = [ Plays_Games.StuID ( integer | values: 1001, 1007 ), Plays_Games.GameID ( integer | values: 1, 2 ), Plays_Games.Hours_Played ( real | values: 35, 15 ) ]
table SportsInfo, columns = [ SportsInfo.StuID ( integer | values: 1001, 1002 ), SportsInfo.SportName ( text | values: Athletics, Football ), SportsInfo.HoursPerWeek ( real | values: 2, 7 ), SportsInfo.GamesPlayed ( real | values: 5, 20 ), SportsInfo.OnScholarship ( text | values: N, Y ) ]
foreign keys:
Plays_Games.StuID = Student.StuID
Plays_Games.GameID = Video_Games.GameID
SportsInfo.StuID = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- How many video games exist?
-- How many video games do you have?
-- How many video game types exist?
-- What is the count of different game types?
-- Show all video game types.
------------------------------------------------------------------------------------------
database_id: loan_1
database schema :
table bank, columns = [ bank.branch_ID ( integer | primary key | values: 1, 2 ), bank.bname ( text | values: morningside, downtown ), bank.no_of_customers ( real | values: 203, 123 ), bank.city ( text | values: New York City, Salt Lake City ), bank.state ( text | values: New York, Utah ) ]
table customer, columns = [ customer.cust_ID ( text | primary key | values: 1, 2 ), customer.cust_name ( text | values: Mary, Jack ), customer.acc_type ( text | values: saving, checking ), customer.acc_bal ( real | values: 2000, 1000 ), customer.no_of_loans ( real | values: 2, 1 ), customer.credit_score ( real | values: 30, 20 ), customer.branch_ID ( integer | values: 2, 1 ), customer.state ( text | values: Utah, Texas ) ]
table loan, columns = [ loan.loan_ID ( text | primary key | values: 1, 2 ), loan.loan_type ( text | values: Mortgages, Auto ), loan.cust_ID ( text | values: 1, 3 ), loan.branch_ID ( text | values: 1, 2 ), loan.amount ( real | values: 2050, 3000 ) ]
foreign keys:
customer.branch_ID = bank.branch_ID
loan.branch_ID = bank.branch_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many bank branches are there?
-- Count the number of bank branches.
-- How many customers are there?
-- What is the total number of customers across banks?
-- Find the number of customers in the banks at New York City.
------------------------------------------------------------------------------------------
database_id: bike_1
database schema :
table station, columns = [ station.id ( integer | primary key | values: 2, 3 ), station.name ( text | values: San Jose Diridon Caltrain Station, San Jose Civic Center ), station.lat ( real | values: 37.329732, 37.330698 ), station.long ( real | values: -121.90178200000001, -121.888979 ), station.dock_count ( real | values: 27, 15 ), station.city ( text | values: San Jose, Redwood City ), station.installation_date ( text | values: 8/6/2013, 8/5/2013 ) ]
table status, columns = [ status.station_id ( integer | values: 3, 4 ), status.bikes_available ( real | values: 12, 6 ), status.docks_available ( real | values: 3, 5 ), status.time ( text | values: 2015-06-02 12:46:02, 2015-06-02 12:47:02 ) ]
table trip, columns = [ trip.id ( integer | primary key | values: 900504, 900505 ), trip.duration ( real | values: 384, 588 ), trip.start_date ( text | values: 8/21/2015 17:03, 8/21/2015 17:04 ), trip.start_station_name ( text | values: Howard at 2nd, South Van Ness at Market ), trip.start_station_id ( real | values: 63, 66 ), trip.end_date ( text | values: 8/21/2015 17:10, 8/21/2015 17:13 ), trip.end_station_name ( text | values: San Francisco Caltrain 2 (330 Townsend), Harry Bridges Plaza (Ferry Building) ), trip.end_station_id ( real | values: 69, 50 ), trip.bike_id ( real | values: 454, 574 ), trip.subscription_type ( text | values: Subscriber, Customer ), trip.zip_code ( real | values: 94041, 95119 ) ]
table weather, columns = [ weather.date ( text | values: 8/29/2013, 8/30/2013 ), weather.max_temperature_f ( real | values: 74, 78 ), weather.mean_temperature_f ( real | values: 68, 69 ), weather.min_temperature_f ( real | values: 61, 60 ), weather.max_dew_point_f ( real | values: 61, 57 ), weather.mean_dew_point_f ( real | values: 58, 56 ), weather.min_dew_point_f ( real | values: 56, 54 ), weather.max_humidity ( real | values: 93, 90 ), weather.mean_humidity ( real | values: 75, 70 ), weather.min_humidity ( real | values: 57, 50 ), weather.max_sea_level_pressure_inches ( real | values: 30.07, 30.05 ), weather.mean_sea_level_pressure_inches ( real | values: 30.02, 30 ), weather.min_sea_level_pressure_inches ( real | values: 29.97, 29.93 ), weather.max_visibility_miles ( real | values: 10, 9 ), weather.mean_visibility_miles ( real | values: 10, 9 ), weather.min_visibility_miles ( real | values: 10, 7 ), weather.max_wind_Speed_mph ( real | values: 23, 29 ), weather.mean_wind_speed_mph ( real | values: 11, 13 ), weather.max_gust_speed_mph ( real | values: 28, 35 ), weather.precipitation_inches ( real | values: 0, 0.23 ), weather.cloud_cover ( real | values: 4, 2 ), weather.events ( text | values: , Fog ), weather.wind_dir_degrees ( real | values: 286, 291 ), weather.zip_code ( real | values: 94107, 94063 ) ]
foreign keys:
status.station_id = station.id

# Here are some example questions that CAN be answered by the schema below:
-- Give me the dates when the max temperature was higher than 85.
-- What are the dates with a maximum temperature higher than 85?
-- What are the names of stations that have latitude lower than 37.5?
-- What are the names of all stations with a latitude smaller than 37.5?
-- For each city, return the highest latitude among its stations.
------------------------------------------------------------------------------------------
database_id: entrepreneur
database schema :
table entrepreneur, columns = [ entrepreneur.Entrepreneur_ID ( integer | primary key | values: 1, 2 ), entrepreneur.People_ID ( integer | values: 1, 2 ), entrepreneur.Company ( text | values: Umbrolly, Grails Ltd ), entrepreneur.Money_Requested ( real | values: 150000.0, 120000.0 ), entrepreneur.Investor ( text | values: Duncan Bannatyne, Doug Richard ) ]
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Name ( text | values: Francesco Postiglione, Leonardo Binchi ), people.Height ( real | values: 1.9, 1.86 ), people.Weight ( real | values: 80.0, 57.0 ), people.Date_of_Birth ( text | values: 1972-04-29, 1975-08-27 ) ]
foreign keys:
entrepreneur.People_ID = people.People_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many entrepreneurs are there?
-- Count the number of entrepreneurs.
-- List the companies of entrepreneurs in descending order of money requested.
-- What are the companies of entrepreneurs, ordered descending by amount of money requested?
-- List the companies and the investors of entrepreneurs.
------------------------------------------------------------------------------------------
database_id: orchestra
database schema :
table conductor, columns = [ conductor.Conductor_ID ( integer | primary key | values: 1, 2 ), conductor.Name ( text | values: Antal Doráti, Igor Stravinsky ), conductor.Age ( real | values: 40, 41 ), conductor.Nationality ( text | values: USA, UK ), conductor.Year_of_Work ( real | values: 10, 11 ) ]
table orchestra, columns = [ orchestra.Orchestra_ID ( integer | primary key | values: 1, 2 ), orchestra.Orchestra ( text | values: London Symphony Orchestra, Columbia Symphony Orchestra ), orchestra.Conductor_ID ( integer | values: 1, 2 ), orchestra.Record_Company ( text | values: Mercury Records, Columbia Masterworks ), orchestra.Year_of_Founded ( real | values: 2003.0, 2009.0 ), orchestra.Major_Record_Format ( text | values: CD, CD / LP ) ]
table performance, columns = [ performance.Performance_ID ( integer | primary key | values: 1, 2 ), performance.Orchestra_ID ( integer | values: 1, 2 ), performance.Type ( text | values: Auditions 1, Auditions 2 ), performance.Date ( text | values: 9 June, 10 June ), performance.Official_ratings_(millions) ( real | values: 5.2, 6.73 ), performance.Weekly_rank ( text | values: 12, 8 ), performance.Share ( text | values: 22.7%, 28.0% ) ]
table show, columns = [ show.Show_ID ( real | values: 1, 2 ), show.Performance_ID ( integer | values: 1, 2 ), show.If_first_show ( text | values: Glebe Park, Fir Park ), show.Result ( text | values: T, F ), show.Attendance ( real | values: 1026.0, 695.0 ) ]
foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many conductors are there?
-- Count the number of conductors.
-- List the names of conductors in ascending order of age.
-- What are the names of conductors, ordered by age?
-- What are the names of conductors whose nationalities are not "USA"?
------------------------------------------------------------------------------------------
database_id: cre_Drama_Workshop_Groups
database schema :
table Ref_Payment_Methods, columns = [ Ref_Payment_Methods.payment_method_code ( text | primary key | values: American E, MasterCard ), Ref_Payment_Methods.payment_method_description ( text | values: credit, debit ) ]
table Ref_Service_Types, columns = [ Ref_Service_Types.Service_Type_Code ( text | primary key | values: 1, 2 ), Ref_Service_Types.Parent_Service_Type_Code ( text | values: 1 ), Ref_Service_Types.Service_Type_Description ( text | values: provide photo service, provide dinning service ) ]
table Addresses, columns = [ Addresses.Address_ID ( text | primary key | values: 110, 124 ), Addresses.Line_1 ( text | values: 4753 Dach Highway, 391 Vandervort Fall Apt. 446 ), Addresses.Line_2 ( text | values: Suite 846, Apt. 107 ), Addresses.City_Town ( text | values: Feliciaberg, West Sherwoodstad ), Addresses.State_County ( text | values: Florida, Indiana ), Addresses.Other_Details ( text | values: N/A ) ]
table Products, columns = [ Products.Product_ID ( text | primary key | values: 11, 154 ), Products.Product_Name ( text | values: photo, film ), Products.Product_Price ( real | values: 4448536, 2302 ), Products.Product_Description ( text | values: N/A ), Products.Other_Product_Service_Details ( text | values: N/A ) ]
table Marketing_Regions, columns = [ Marketing_Regions.Marketing_Region_Code ( text | primary key | values: CA, CN ), Marketing_Regions.Marketing_Region_Name ( text | values: Canada, China ), Marketing_Regions.Marketing_Region_Descriptrion ( text | values: Our target market, Our largest market ), Marketing_Regions.Other_Details ( text | values: N/A ) ]
table Clients, columns = [ Clients.Client_ID ( integer | primary key | values: 423, 426 ), Clients.Address_ID ( integer | values: 201, 383 ), Clients.Customer_Email_Address ( text | values: branson94@example.net, alba04@example.com ), Clients.Customer_Name ( text | values: Clifford, Bettye ), Clients.Customer_Phone ( text | values: (042)912-3404x5135, (604)849-0214 ), Clients.Other_Details ( text | values: VIP, Super VIP ) ]
table Drama_Workshop_Groups, columns = [ Drama_Workshop_Groups.Workshop_Group_ID ( integer | primary key | values: 136, 140 ), Drama_Workshop_Groups.Address_ID ( integer | values: 383, 180 ), Drama_Workshop_Groups.Currency_Code ( text | values: EU, USD ), Drama_Workshop_Groups.Marketing_Region_Code ( text | values: FR, DE ), Drama_Workshop_Groups.Store_Name ( text | values: Amely Cafe, Veda Film ), Drama_Workshop_Groups.Store_Phone ( text | values: 122-084-8029, 793-966-9311x5303 ), Drama_Workshop_Groups.Store_Email_Address ( text | values: amely.ruecker@example.com, breitenberg.veda@example.com ), Drama_Workshop_Groups.Other_Details ( text | values: Good, Bad ) ]
table Performers, columns = [ Performers.Performer_ID ( integer | primary key | values: 153, 211 ), Performers.Address_ID ( integer | values: 124, 39 ), Performers.Customer_Name ( text | values: Shawna, Ashley ), Performers.Customer_Phone ( text | values: 664.495.1939, 893-536-8857 ), Performers.Customer_Email_Address ( text | values: krogahn@example.com, preston45@example.net ), Performers.Other_Details ( text | values: Did not pay, Pay good tips ) ]
table Customers, columns = [ Customers.Customer_ID ( text | primary key | values: 240, 267 ), Customers.Address_ID ( integer | values: 286, 98 ), Customers.Customer_Name ( text | values: Harold, Federico ), Customers.Customer_Phone ( text | values: 624-096-7791, 914-915-7483 ), Customers.Customer_Email_Address ( text | values: jerde.harmon@example.com, johnson27@example.com ), Customers.Other_Details ( text | values: VIP ) ]
table Stores, columns = [ Stores.Store_ID ( text | primary key | values: 150, 229 ), Stores.Address_ID ( integer | values: 286, 266 ), Stores.Marketing_Region_Code ( text | values: IN, CA ), Stores.Store_Name ( text | values: FJA Filming, Rob Dinning ), Stores.Store_Phone ( text | values: +65(1)3590790358, 1-327-185-9368 ), Stores.Store_Email_Address ( text | values: fjacobson@example.com, rborer@example.org ), Stores.Other_Details ( text | values: 5 stars, 4 stars ) ]
table Bookings, columns = [ Bookings.Booking_ID ( integer | primary key | values: 1, 2 ), Bookings.Customer_ID ( integer | values: 938, 868 ), Bookings.Workshop_Group_ID ( text | values: 140, 838 ), Bookings.Status_Code ( text | values: good, stop ), Bookings.Store_ID ( real | values: 8, 7 ), Bookings.Order_Date ( datetime | values: 2016-12-12 10:43:01, 1976-08-20 00:33:08 ), Bookings.Planned_Delivery_Date ( datetime | values: 2013-03-10 18:47:05, 2009-07-09 09:18:38 ), Bookings.Actual_Delivery_Date ( datetime | values: 1997-11-21 10:07:40, 1976-01-08 07:19:23 ), Bookings.Other_Order_Details ( text | values: N/A ) ]
table Performers_in_Bookings, columns = [ Performers_in_Bookings.Order_ID ( integer | primary key | values: 1, 2 ), Performers_in_Bookings.Performer_ID ( integer | values: 153, 341 ) ]
table Customer_Orders, columns = [ Customer_Orders.Order_ID ( integer | primary key | values: 1, 2 ), Customer_Orders.Customer_ID ( integer | values: 516, 418 ), Customer_Orders.Store_ID ( integer | values: 231, 229 ), Customer_Orders.Order_Date ( datetime | values: 1994-08-03 12:34:58, 2014-07-10 10:56:01 ), Customer_Orders.Planned_Delivery_Date ( datetime | values: 1977-03-11 03:58:19, 1996-08-26 19:19:59 ), Customer_Orders.Actual_Delivery_Date ( datetime | values: 1992-07-21 22:11:11, 1998-08-22 17:57:32 ), Customer_Orders.Other_Order_Details ( text | values: N/A ) ]
table Order_Items, columns = [ Order_Items.Order_Item_ID ( integer | primary key | values: 1, 2 ), Order_Items.Order_ID ( integer | values: 3, 15 ), Order_Items.Product_ID ( integer | values: 233, 300 ), Order_Items.Order_Quantity ( text | values: 1, 2 ), Order_Items.Other_Item_Details ( text | values: N/A ) ]
table Invoices, columns = [ Invoices.Invoice_ID ( integer | primary key | values: 128, 162 ), Invoices.Order_ID ( integer | values: 14, 13 ), Invoices.payment_method_code ( text | values: MasterCard, Visa ), Invoices.Product_ID ( real | values: 4, 9 ), Invoices.Order_Quantity ( text | values: 2, 1 ), Invoices.Other_Item_Details ( text | values: N/A ), Invoices.Order_Item_ID ( real | values: 1, 9 ) ]
table Services, columns = [ Services.Service_ID ( integer | primary key | values: 191, 219 ), Services.Service_Type_Code ( text | values: 1, 2 ), Services.Workshop_Group_ID ( integer | values: 415, 838 ), Services.Product_Description ( text | values: N/A ), Services.Product_Name ( text | values: film, dinning ), Services.Product_Price ( real | values: 58932775.8822, 2704.4719 ), Services.Other_Product_Service_Details ( text | values: N/A ) ]
table Bookings_Services, columns = [ Bookings_Services.Order_ID ( integer | primary key | values: 1, 4 ), Bookings_Services.Product_ID ( integer | values: 396, 779 ) ]
table Invoice_Items, columns = [ Invoice_Items.Invoice_Item_ID ( integer | primary key | values: 1, 2 ), Invoice_Items.Invoice_ID ( integer | values: 128, 162 ), Invoice_Items.Order_ID ( integer | values: 1, 4 ), Invoice_Items.Order_Item_ID ( integer | values: 5, 6 ), Invoice_Items.Product_ID ( integer | values: 396, 191 ), Invoice_Items.Order_Quantity ( real | values: 2, 6 ), Invoice_Items.Other_Item_Details ( text | values: Good quality ) ]
foreign keys:
Clients.Address_ID = Addresses.Address_ID
Drama_Workshop_Groups.Address_ID = Addresses.Address_ID
Performers.Address_ID = Addresses.Address_ID
Customers.Address_ID = Addresses.Address_ID
Stores.Marketing_Region_Code = Marketing_Regions.Marketing_Region_Code
Stores.Address_ID = Addresses.Address_ID
Bookings.Workshop_Group_ID = Drama_Workshop_Groups.Workshop_Group_ID
Bookings.Customer_ID = Clients.Client_ID
Performers_in_Bookings.Order_ID = Bookings.Booking_ID
Performers_in_Bookings.Performer_ID = Performers.Performer_ID
Customer_Orders.Store_ID = Stores.Store_ID
Customer_Orders.Customer_ID = Customers.Customer_ID
Order_Items.Product_ID = Products.Product_ID
Order_Items.Order_ID = Customer_Orders.Order_ID
Invoices.payment_method_code = Ref_Payment_Methods.payment_method_code
Invoices.Order_ID = Bookings.Booking_ID
Invoices.Order_ID = Customer_Orders.Order_ID
Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code
Services.Workshop_Group_ID = Drama_Workshop_Groups.Workshop_Group_ID
Bookings_Services.Product_ID = Services.Service_ID
Bookings_Services.Order_ID = Bookings.Booking_ID
Invoice_Items.Order_ID = Bookings_Services.Order_ID
Invoice_Items.Product_ID = Bookings_Services.Product_ID
Invoice_Items.Invoice_ID = Invoices.Invoice_ID
Invoice_Items.Order_Item_ID = Order_Items.Order_Item_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many bookings do we have?
-- Count the total number of bookings made.
-- List the order dates of all the bookings.
-- What is the order date of each booking?
-- Show all the planned delivery dates and actual delivery dates of bookings.
------------------------------------------------------------------------------------------
database_id: car_1
database schema :
table continents, columns = [ continents.ContId ( integer | primary key | values: 1, 2 ), continents.Continent ( text | values: america, europe ) ]
table countries, columns = [ countries.CountryId ( integer | primary key | values: 1, 2 ), countries.CountryName ( text | values: usa, germany ), countries.Continent ( integer | values: 1, 2 ) ]
table car_makers, columns = [ car_makers.Id ( integer | primary key | values: 1, 2 ), car_makers.Maker ( text | values: amc, volkswagen ), car_makers.FullName ( text | values: American Motor Company, Volkswagen ), car_makers.Country ( text | values: 1, 2 ) ]
table model_list, columns = [ model_list.ModelId ( integer | primary key | values: 1, 2 ), model_list.Maker ( integer | values: 1, 2 ), model_list.Model ( text | values: amc, audi ) ]
table car_names, columns = [ car_names.MakeId ( integer | primary key | values: 1, 2 ), car_names.Model ( text | values: chevrolet, buick ), car_names.Make ( text | values: chevrolet chevelle malibu, buick skylark 320 ) ]
table cars_data, columns = [ cars_data.Id ( integer | primary key | values: 1, 2 ), cars_data.MPG ( text | values: 18, 15 ), cars_data.Cylinders ( real | values: 8, 4 ), cars_data.Edispl ( real | values: 307.0, 350.0 ), cars_data.Horsepower ( text | values: 130, 165 ), cars_data.Weight ( real | values: 3504, 3693 ), cars_data.Accelerate ( real | values: 12.0, 11.5 ), cars_data.Year ( real | values: 1970, 1971 ) ]
foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId

# Here are some example questions that CAN be answered by the schema below:
-- How many continents are there?
-- What is the number of continents?
-- How many countries does each continent have? List the continent id, continent name and the number of countries.
-- For each continent, list its id, name, and how many countries it has?
-- How many countries are listed?
------------------------------------------------------------------------------------------
database_id: geo
database schema :
table state, columns = [ state.state_name ( text | primary key | values: N/A ), state.population ( real | values: N/A ), state.area ( real | values: N/A ), state.country_name ( text | values: N/A ), state.capital ( text | values: N/A ), state.density ( real | values: N/A ) ]
table city, columns = [ city.city_name ( text | primary key | values: N/A ), city.population ( real | values: N/A ), city.country_name ( text | values: N/A ), city.state_name ( text | values: N/A ) ]
table border_info, columns = [ border_info.state_name ( text | values: N/A ), border_info.border ( text | primary key | values: N/A ) ]
table highlow, columns = [ highlow.state_name ( text | primary key | values: N/A ), highlow.highest_elevation ( text | values: N/A ), highlow.lowest_point ( text | values: N/A ), highlow.highest_point ( text | values: N/A ), highlow.lowest_elevation ( text | values: N/A ) ]
table lake, columns = [ lake.lake_name ( text | values: N/A ), lake.area ( real | values: N/A ), lake.country_name ( text | values: N/A ), lake.state_name ( text | values: N/A ) ]
table mountain, columns = [ mountain.mountain_name ( text | primary key | values: N/A ), mountain.mountain_altitude ( real | values: N/A ), mountain.country_name ( text | values: N/A ), mountain.state_name ( text | values: N/A ) ]
table river, columns = [ river.river_name ( text | primary key | values: N/A ), river.length ( real | values: N/A ), river.country_name ( text | values: N/A ), river.traverse ( text | values: N/A ) ]
foreign keys:
city.state_name = state.state_name
border_info.border = state.state_name
border_info.state_name = state.state_name
highlow.state_name = state.state_name
mountain.state_name = state.state_name
river.traverse = state.state_name

# Here are some example questions that CAN be answered by the schema below:
-- what is the biggest city in wyoming
-- what wyoming city has the largest population
-- what is the largest city in wyoming
-- where is the most populated area of wyoming
-- which city in wyoming has the largest population
------------------------------------------------------------------------------------------
database_id: behavior_monitoring
database schema :
table Ref_Address_Types, columns = [ Ref_Address_Types.address_type_code ( text | primary key | values: BILL, HOME ), Ref_Address_Types.address_type_description ( text | values: Billing, Home or Residence ) ]
table Ref_Detention_Type, columns = [ Ref_Detention_Type.detention_type_code ( text | primary key | values: AFTER, BREAK  ), Ref_Detention_Type.detention_type_description ( text | values: During Break time, After School ) ]
table Ref_Incident_Type, columns = [ Ref_Incident_Type.incident_type_code ( text | primary key | values: DISTURB, NOISE ), Ref_Incident_Type.incident_type_description ( text | values: Noise, Violence ) ]
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.line_1 ( text | values: 020 Orie Canyon, 1333 Boyle Lane ), Addresses.line_2 ( text | values: N/A ), Addresses.line_3 ( text | values: N/A ), Addresses.city ( text | values: North Loyceville, West Sean ), Addresses.zip_postcode ( text | values: 197, 937 ), Addresses.state_province_county ( text | values: Hawaii, Illinois ), Addresses.country ( text | values: USA ), Addresses.other_address_details ( text | values: N/A ) ]
table Students, columns = [ Students.student_id ( integer | primary key | values: 1, 2 ), Students.address_id ( integer | values: 19, 9 ), Students.first_name ( text | values: Emma, Louvenia ), Students.middle_name ( text | values: Frederic, Fatima ), Students.last_name ( text | values: Rohan, Hansen ), Students.cell_mobile_number ( text | values: 235.899.9744, 1-247-673-8446 ), Students.email_address ( text | values: derrick.jenkins@example.com, rohan.clarabelle@example.org ), Students.date_first_rental ( datetime | values: 2017-12-05 15:20:04, 2017-08-08 22:30:36 ), Students.date_left_university ( datetime | values: 2018-03-03 03:33:05, 2018-02-24 11:12:11 ), Students.other_student_details ( text | values: first honor ) ]
table Teachers, columns = [ Teachers.teacher_id ( integer | primary key | values: 1, 2 ), Teachers.address_id ( integer | values: 15, 7 ), Teachers.first_name ( text | values: Lyla, Sid ), Teachers.middle_name ( text | values: Wilson, Tremayne ), Teachers.last_name ( text | values: Medhurst, Brakus ), Teachers.gender ( text | values: 1, 0 ), Teachers.cell_mobile_number ( text | values: 792.333.7714, 202.626.1698x9242 ), Teachers.email_address ( text | values: ohammes@example.com, deborah37@example.com ), Teachers.other_details ( text | values: Dean ) ]
table Assessment_Notes, columns = [ Assessment_Notes.notes_id ( real | values: 1, 2 ), Assessment_Notes.student_id ( integer | values: 7, 11 ), Assessment_Notes.teacher_id ( integer | values: 3, 10 ), Assessment_Notes.date_of_notes ( datetime | values: 1978-04-15 04:49:18, 2005-06-30 02:48:35 ), Assessment_Notes.text_of_notes ( text | values: N/A ), Assessment_Notes.other_details ( text | values: N/A ) ]
table Behavior_Incident, columns = [ Behavior_Incident.incident_id ( integer | primary key | values: 1, 2 ), Behavior_Incident.incident_type_code ( text | values: NOISE, DISTURB ), Behavior_Incident.student_id ( integer | values: 6, 13 ), Behavior_Incident.date_incident_start ( datetime | values: 2017-07-09 10:04:13, 2018-01-31 10:51:13 ), Behavior_Incident.date_incident_end ( datetime | values: 2018-03-08 14:08:54, 2018-03-18 18:40:05 ), Behavior_Incident.incident_summary ( text | values: N/A ), Behavior_Incident.recommendations ( text | values: Transfer schools ), Behavior_Incident.other_details ( text | values: N/A ) ]
table Detention, columns = [ Detention.detention_id ( integer | primary key | values: 1, 2 ), Detention.detention_type_code ( text | values: AFTER, BREAK  ), Detention.teacher_id ( integer | values: 7, 14 ), Detention.datetime_detention_start ( datetime | values: 2017-09-05 00:38:25, 2018-01-10 08:09:02 ), Detention.datetime_detention_end ( datetime | values: 2018-03-08 02:08:32, 2018-03-07 04:24:48 ), Detention.detention_summary ( text | values: N/A ), Detention.other_details ( text | values: N/A ) ]
table Student_Addresses, columns = [ Student_Addresses.student_id ( integer | values: 6, 3 ), Student_Addresses.address_id ( integer | values: 12, 18 ), Student_Addresses.date_address_from ( datetime | values: 2017-10-16 13:56:34, 2017-06-19 12:39:39 ), Student_Addresses.date_address_to ( datetime | values: 2018-03-15 10:37:19, 2018-03-02 00:19:57 ), Student_Addresses.monthly_rental ( real | values: 826.4319, 1113.0996 ), Student_Addresses.other_details ( text | values: house, apartment ) ]
table Students_in_Detention, columns = [ Students_in_Detention.student_id ( integer | values: 3, 8 ), Students_in_Detention.detention_id ( integer | values: 15, 13 ), Students_in_Detention.incident_id ( integer | values: 1, 3 ) ]
foreign keys:
Students.address_id = Addresses.address_id
Teachers.address_id = Addresses.address_id
Assessment_Notes.teacher_id = Teachers.teacher_id
Assessment_Notes.student_id = Students.student_id
Behavior_Incident.student_id = Students.student_id
Behavior_Incident.incident_type_code = Ref_Incident_Type.incident_type_code
Detention.teacher_id = Teachers.teacher_id
Detention.detention_type_code = Ref_Detention_Type.detention_type_code
Student_Addresses.student_id = Students.student_id
Student_Addresses.address_id = Addresses.address_id
Students_in_Detention.student_id = Students.student_id
Students_in_Detention.detention_id = Detention.detention_id
Students_in_Detention.incident_id = Behavior_Incident.incident_id

# Here are some example questions that CAN be answered by the schema below:
-- How many assessment notes are there in total?
-- What are the dates of the assessment notes?
-- How many addresses have zip code 197?
-- How many distinct incident type codes are there?
-- Return all distinct detention type codes.
------------------------------------------------------------------------------------------
database_id: cre_Doc_Tracking_DB
database schema :
table Ref_Document_Types, columns = [ Ref_Document_Types.Document_Type_Code ( text | primary key | values: BK, CV ), Ref_Document_Types.Document_Type_Name ( text | values: CV, Book ), Ref_Document_Types.Document_Type_Description ( text | values:  ) ]
table Ref_Calendar, columns = [ Ref_Calendar.Calendar_Date ( datetime | primary key | values: 1972-03-31 09:47:22, 1976-06-15 03:40:06 ), Ref_Calendar.Day_Number ( real | values: 5, 7 ) ]
table Ref_Locations, columns = [ Ref_Locations.Location_Code ( text | primary key | values: b, c ), Ref_Locations.Location_Name ( text | values: Brazil, Canada ), Ref_Locations.Location_Description ( text | values:  ) ]
table Roles, columns = [ Roles.Role_Code ( text | primary key | values: ED, HR ), Roles.Role_Name ( text | values: Manager, Editor ), Roles.Role_Description ( text | values: Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti., Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos. ) ]
table All_Documents, columns = [ All_Documents.Document_ID ( integer | primary key | values: 7, 11 ), All_Documents.Date_Stored ( datetime | values: 1976-06-15 03:40:06, 1986-10-14 17:53:39 ), All_Documents.Document_Type_Code ( text | values: CV, BK ), All_Documents.Document_Name ( text | values: Robin CV, Marry CV ), All_Documents.Document_Description ( text | values: N/A ), All_Documents.Other_Details ( text | values: N/A ) ]
table Employees, columns = [ Employees.Employee_ID ( integer | primary key | values: 25, 30 ), Employees.Role_Code ( text | values: HR, MG ), Employees.Employee_Name ( text | values: Leo, Ebba ), Employees.Gender_MFU ( text | values: , 1 ), Employees.Date_of_Birth ( datetime | values: 1973-02-15 17:16:00, 1979-09-20 12:50:15 ), Employees.Other_Details ( text | values: N/A ) ]
table Document_Locations, columns = [ Document_Locations.Document_ID ( integer | primary key | values: 7, 11 ), Document_Locations.Location_Code ( text | values: e, x ), Document_Locations.Date_in_Location_From ( datetime | values: 2017-01-06 23:17:22, 1972-03-31 09:47:22 ), Document_Locations.Date_in_Locaton_To ( datetime | values: 2008-06-08 12:45:38, 2012-07-03 09:48:46 ) ]
table Documents_to_be_Destroyed, columns = [ Documents_to_be_Destroyed.Document_ID ( integer | primary key | values: 7, 11 ), Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID ( integer | values: 156, 55 ), Documents_to_be_Destroyed.Destroyed_by_Employee_ID ( integer | values: 138, 173 ), Documents_to_be_Destroyed.Planned_Destruction_Date ( datetime | values: 1988-02-01 14:41:52, 2010-11-26 19:22:50 ), Documents_to_be_Destroyed.Actual_Destruction_Date ( datetime | values: 2017-01-06 23:17:22, 1986-10-14 17:53:39 ), Documents_to_be_Destroyed.Other_Details ( text | values: N/A ) ]
foreign keys:
All_Documents.Date_Stored = Ref_Calendar.Calendar_Date
All_Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code
Employees.Role_Code = Roles.Role_Code
Document_Locations.Document_ID = All_Documents.Document_ID
Document_Locations.Date_in_Locaton_To = Ref_Calendar.Calendar_Date
Document_Locations.Date_in_Location_From = Ref_Calendar.Calendar_Date
Document_Locations.Location_Code = Ref_Locations.Location_Code
Documents_to_be_Destroyed.Document_ID = All_Documents.Document_ID
Documents_to_be_Destroyed.Actual_Destruction_Date = Ref_Calendar.Calendar_Date
Documents_to_be_Destroyed.Planned_Destruction_Date = Ref_Calendar.Calendar_Date
Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID = Employees.Employee_ID
Documents_to_be_Destroyed.Destroyed_by_Employee_ID = Employees.Employee_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many calendar items do we have?
-- Count the number of all the calendar items.
-- Show all calendar dates and day Numbers.
-- What are all the calendar dates and day Numbers?
-- Show the number of document types.
------------------------------------------------------------------------------------------
database_id: university_basketball
database schema :
table basketball_match, columns = [ basketball_match.Team_ID ( integer | primary key | values: 1, 2 ), basketball_match.School_ID ( integer | values: 1, 2 ), basketball_match.Team_Name ( text | values: North Carolina, Duke ), basketball_match.ACC_Regular_Season ( text | values: 14–2, 13–3 ), basketball_match.ACC_Percent ( text | values: .875, .813 ), basketball_match.ACC_Home ( text | values: 6–2, 7–1 ), basketball_match.ACC_Road ( text | values: 8–0, 6–2 ), basketball_match.All_Games ( text | values: 35–2, 28–6 ), basketball_match.All_Games_Percent ( real | values: 0.946, 0.824 ), basketball_match.All_Home ( text | values: 14–2, 15–1 ), basketball_match.All_Road ( text | values: 13–0, 8–2 ), basketball_match.All_Neutral ( text | values: 9–1, 5–3 ) ]
table university, columns = [ university.School_ID ( integer | primary key | values: 1, 2 ), university.School ( text | values: University of Delaware, Lebanon Valley College ), university.Location ( text | values: Newark, DE, Annville, PA ), university.Founded ( real | values: 1743.0, 1866.0 ), university.Affiliation ( text | values: Public, Private/Methodist ), university.Enrollment ( real | values: 19067.0, 2100.0 ), university.Nickname ( text | values: Fightin' Blue Hens, Flying Dutchmen ), university.Primary_conference ( text | values: Colonial Athletic Association ( D-I ), MAC Commonwealth Conference ( D-III ) ) ]
foreign keys:
basketball_match.School_ID = university.School_ID

# Here are some example questions that CAN be answered by the schema below:
-- List all schools and their nicknames in the order of founded year.
-- What are the different schools and their nicknames, ordered by their founding years?
-- List all public schools and their locations.
-- What are the public schools and what are their locations?
-- When was the school with the largest enrollment founded?
------------------------------------------------------------------------------------------
database_id: soccer_2
database schema :
table College, columns = [ College.cName ( text | primary key | values: ASU, FSU ), College.state ( text | values: LA, AZ ), College.enr ( real | values: 18000, 12000 ) ]
table Player, columns = [ Player.pID ( integer | primary key | values: 10001, 20002 ), Player.pName ( text | values: Andrew, Blake ), Player.yCard ( text | values: no, yes ), Player.HS ( real | values: 1200, 1600 ) ]
table Tryout, columns = [ Tryout.pID ( integer | primary key | values: 10001, 20002 ), Tryout.cName ( text | values: ASU, LSU ), Tryout.pPos ( text | values: goalie, striker ), Tryout.decision ( text | values: no, yes ) ]
foreign keys:
Tryout.cName = College.cName
Tryout.pID = Player.pID

# Here are some example questions that CAN be answered by the schema below:
-- What is the total enrollment number of all colleges?
-- How many students are enrolled in college?
-- What is the average enrollment number?
-- How many students, on average, does each college have enrolled?
-- How many colleges in total?
------------------------------------------------------------------------------------------
database_id: activity_1
database schema :
table Activity, columns = [ Activity.actid ( integer | primary key | values: 770, 771 ), Activity.activity_name ( text | values: Mountain Climbing, Canoeing ) ]
table Participates_in, columns = [ Participates_in.stuid ( integer | values: 1001, 1002 ), Participates_in.actid ( integer | values: 770, 771 ) ]
table Faculty_Participates_in, columns = [ Faculty_Participates_in.FacID ( integer | values: 1082, 1121 ), Faculty_Participates_in.actid ( integer | values: 784, 785 ) ]
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Faculty, columns = [ Faculty.FacID ( integer | primary key | values: 1082, 1121 ), Faculty.Lname ( text | values: Giuliano, Goodrich ), Faculty.Fname ( text | values: Mark, Michael ), Faculty.Rank ( text | values: Instructor, Professor ), Faculty.Sex ( text | values: M, F ), Faculty.Phone ( real | values: 2424, 3593 ), Faculty.Room ( text | values: 224, 219 ), Faculty.Building ( text | values: NEB, Barton ) ]
foreign keys:
Participates_in.actid = Activity.actid
Participates_in.stuid = Student.StuID
Faculty_Participates_in.actid = Activity.actid
Faculty_Participates_in.FacID = Faculty.FacID

# Here are some example questions that CAN be answered by the schema below:
-- How many faculty do we have?
-- What is the total number of faculty members?
-- What ranks do we have for faculty?
-- Find the list of distinct ranks for faculty.
-- Show all the distinct buildings that have faculty rooms.
------------------------------------------------------------------------------------------
database_id: cre_Theme_park
database schema :
table Ref_Hotel_Star_Ratings, columns = [ Ref_Hotel_Star_Ratings.star_rating_code ( text | primary key | values: 1, 2 ), Ref_Hotel_Star_Ratings.star_rating_description ( text | values: star ) ]
table Locations, columns = [ Locations.Location_ID ( integer | primary key | values: 333, 368 ), Locations.Location_Name ( text | values: Astro Orbiter, African Animals ), Locations.Address ( text | values: 660 Shea Crescent, 254 Ottilie Junction ), Locations.Other_Details ( text | values: N/A ) ]
table Ref_Attraction_Types, columns = [ Ref_Attraction_Types.Attraction_Type_Code ( text | primary key | values: 2, 3 ), Ref_Attraction_Types.Attraction_Type_Description ( text | values: park, garden ) ]
table Visitors, columns = [ Visitors.Tourist_ID ( integer | primary key | values: 164, 189 ), Visitors.Tourist_Details ( text | values: Toney, Graciela ) ]
table Features, columns = [ Features.Feature_ID ( integer | primary key | values: 523, 528 ), Features.Feature_Details ( text | values: cafe, park ) ]
table Hotels, columns = [ Hotels.hotel_id ( integer | primary key | values: 123, 144 ), Hotels.star_rating_code ( text | values: 5, 4 ), Hotels.pets_allowed_yn ( text | values: 1,  ), Hotels.price_range ( real | values: 2914989.571,  ), Hotels.other_hotel_details ( text | values: N/A ) ]
table Tourist_Attractions, columns = [ Tourist_Attractions.Tourist_Attraction_ID ( integer | primary key | values: 2113, 2701 ), Tourist_Attractions.Attraction_Type_Code ( text | values: 2, 6 ), Tourist_Attractions.Location_ID ( integer | values: 579, 417 ), Tourist_Attractions.How_to_Get_There ( text | values: bus, walk ), Tourist_Attractions.Name ( text | values: art museum, UK gallery ), Tourist_Attractions.Description ( text | values: N/A ), Tourist_Attractions.Opening_Hours ( text | values: N/A ), Tourist_Attractions.Other_Details ( text | values: N/A ) ]
table Street_Markets, columns = [ Street_Markets.Market_ID ( integer | primary key | values: 6852, 7067 ), Street_Markets.Market_Details ( text | values: Broadway, Fish Farm Market ) ]
table Shops, columns = [ Shops.Shop_ID ( integer | primary key | values: 8429, 8449 ), Shops.Shop_Details ( text | values: soup, coffee ) ]
table Museums, columns = [ Museums.Museum_ID ( integer | primary key | values: 2113, 2701 ), Museums.Museum_Details ( text | values: Yale Center for British Art, The Metropolitan Museum of Art ) ]
table Royal_Family, columns = [ Royal_Family.Royal_Family_ID ( integer | primary key | values: 9561, 9919 ), Royal_Family.Royal_Family_Details ( text | values: N/A ) ]
table Theme_Parks, columns = [ Theme_Parks.Theme_Park_ID ( integer | primary key | values: 5265, 6476 ), Theme_Parks.Theme_Park_Details ( text | values: Disney, Sea World ) ]
table Visits, columns = [ Visits.Visit_ID ( integer | primary key | values: 183, 268 ), Visits.Tourist_Attraction_ID ( integer | values: 6653, 5076 ), Visits.Tourist_ID ( integer | values: 377, 204 ), Visits.Visit_Date ( datetime | values: 2004-08-21 03:06:14, 2013-08-06 05:35:51 ), Visits.Visit_Details ( text | values:  ) ]
table Photos, columns = [ Photos.Photo_ID ( integer | primary key | values: 211, 280 ), Photos.Tourist_Attraction_ID ( integer | values: 8449, 7067 ), Photos.Name ( text | values: game1, game2 ), Photos.Description ( text | values: N/A ), Photos.Filename ( text | values: 702, 762 ), Photos.Other_Details ( text | values: N/A ) ]
table Staff, columns = [ Staff.Staff_ID ( integer | primary key | values: 170, 219 ), Staff.Tourist_Attraction_ID ( integer | values: 6476, 7067 ), Staff.Name ( text | values: Whitney, Kaela ), Staff.Other_Details ( text | values: N/A ) ]
table Tourist_Attraction_Features, columns = [ Tourist_Attraction_Features.Tourist_Attraction_ID ( integer | primary key | values: 5076, 5265 ), Tourist_Attraction_Features.Feature_ID ( integer | values: 528, 681 ) ]
foreign keys:
Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code
Tourist_Attractions.Attraction_Type_Code = Ref_Attraction_Types.Attraction_Type_Code
Tourist_Attractions.Location_ID = Locations.Location_ID
Street_Markets.Market_ID = Tourist_Attractions.Tourist_Attraction_ID
Shops.Shop_ID = Tourist_Attractions.Tourist_Attraction_ID
Museums.Museum_ID = Tourist_Attractions.Tourist_Attraction_ID
Royal_Family.Royal_Family_ID = Tourist_Attractions.Tourist_Attraction_ID
Theme_Parks.Theme_Park_ID = Tourist_Attractions.Tourist_Attraction_ID
Visits.Tourist_ID = Visitors.Tourist_ID
Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID
Photos.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID
Staff.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID
Tourist_Attraction_Features.Feature_ID = Features.Feature_ID
Tourist_Attraction_Features.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many available hotels are there in total?
-- Find the total number of available hotels.
-- What are the price ranges of hotels?
-- Tell me the price ranges for all the hotels.
-- Show all distinct location names.
------------------------------------------------------------------------------------------
database_id: twitter_1
database schema :
table follows, columns = [ follows.f1 ( integer | primary key | values: 1, 2 ), follows.f2 ( integer | values: 2, 3 ) ]
table tweets, columns = [ tweets.id ( integer | primary key | values: 1, 2 ), tweets.uid ( integer | values: 1, 3 ), tweets.text ( text | values: Hello I'm Tony Stark., Today I have went shopping at Laffayette. ), tweets.createdate ( datetime | values: 2018-03-09 20:00:14, 2018-03-09 20:01:02 ) ]
table user_profiles, columns = [ user_profiles.uid ( integer | primary key | values: 1, 2 ), user_profiles.name ( text | values: Iron Man, Mary ), user_profiles.email ( text | values: ts@richest.com, Mary@yale.edu ), user_profiles.partitionid ( real | values: 1, 2 ), user_profiles.followers ( real | values: 6662425, 890 ) ]
foreign keys:
follows.f2 = user_profiles.uid
follows.f1 = user_profiles.uid
tweets.uid = user_profiles.uid

# Here are some example questions that CAN be answered by the schema below:
-- Find the emails of the user named "Mary".
-- What is the partition id of the user named "Iron Man".
-- How many users are there?
-- How many followers does each user have?
-- Find the number of followers for each user.
------------------------------------------------------------------------------------------
database_id: election_representative
database schema :
table election, columns = [ election.Election_ID ( integer | primary key | values: 1, 2 ), election.Representative_ID ( integer | values: 1, 2 ), election.Date ( text | values: July 1942, October 1942 ), election.Votes ( real | values: 9423.0, 11059.0 ), election.Vote_Percent ( real | values: 16.2, 18.5 ), election.Seats ( real | values: 6.0, 10.0 ), election.Place ( real | values: 3.0, 1.0 ) ]
table representative, columns = [ representative.Representative_ID ( integer | primary key | values: 1, 2 ), representative.Name ( text | values: Dan Quayle, John Quayle ), representative.State ( text | values: Indiana, New York ), representative.Party ( text | values: Republican, Democratic ), representative.Lifespan ( text | values: 1947–, 1868–1930 ) ]
foreign keys:
election.Representative_ID = representative.Representative_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many elections are there?
-- List the votes of elections in descending order.
-- List the dates and vote percents of elections.
-- What are the minimum and maximum vote percents of elections?
-- What are the names and parties of representatives?
------------------------------------------------------------------------------------------
database_id: voter_2
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Voting_record, columns = [ Voting_record.StuID ( integer | values: 1001, 1002 ), Voting_record.Registration_Date ( text | values: 08/30/2015, 08/30/2014 ), Voting_record.Election_Cycle ( text | values: Spring, Fall ), Voting_record.President_Vote ( integer | values: 1004, 1014 ), Voting_record.Vice_President_Vote ( integer | values: 1007, 1017 ), Voting_record.Secretary_Vote ( integer | values: 1010, 1020 ), Voting_record.Treasurer_Vote ( integer | values: 1035, 1025 ), Voting_record.Class_President_Vote ( integer | values: 1001, 1021 ), Voting_record.Class_Senator_Vote ( integer | values: 1028, 1018 ) ]
foreign keys:
Voting_record.Class_Senator_Vote = Student.StuID
Voting_record.Class_President_Vote = Student.StuID
Voting_record.Treasurer_Vote = Student.StuID
Voting_record.Secretary_Vote = Student.StuID
Voting_record.Vice_President_Vote = Student.StuID
Voting_record.President_Vote = Student.StuID
Voting_record.StuID = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- Find the number of students in total.
-- How many students are there in total?
-- Find the number of voting records in total.
-- How many voting records do we have?
-- Find the distinct number of president votes.
------------------------------------------------------------------------------------------
database_id: wedding
database schema :
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Name ( text | values: Mike Weir, Juli Hanson ), people.Country ( text | values: Canada, Sweden ), people.Is_Male ( text | values: T, F ), people.Age ( real | values: 34, 32 ) ]
table church, columns = [ church.Church_ID ( integer | primary key | values: 1, 2 ), church.Name ( text | values: Pure Church of Christ, Independent Church ), church.Organized_by ( text | values: Wycam Clark, – Hoton ), church.Open_Date ( real | values: 1831, 1832 ), church.Continuation_of ( text | values: Church of Christ, Church of the Latter Day Saints ) ]
table wedding, columns = [ wedding.Church_ID ( integer | primary key | values: 1, 3 ), wedding.Male_ID ( integer | values: 1, 3 ), wedding.Female_ID ( integer | values: 2, 4 ), wedding.Year ( real | values: 2014, 2015 ) ]
foreign keys:
wedding.Female_ID = people.People_ID
wedding.Male_ID = people.People_ID
wedding.Church_ID = church.Church_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many churches opened before 1850 are there?
-- Show the name, open date, and organizer for all churches.
-- List all church names in descending order of opening date.
-- Show the opening year in whcih at least two churches opened.
-- Show the organizer and name for churches that opened between 1830 and 1840.
------------------------------------------------------------------------------------------
database_id: news_report
database schema :
table event, columns = [ event.Event_ID ( integer | primary key | values: 1, 2 ), event.Date ( text | values: 13 October 2008, 11 October 2007 ), event.Venue ( text | values: Marathon, Victoria ), event.Name ( text | values: Olympia Games Openning, Government Hearing ), event.Event_Attendance ( real | values: 6650, 369 ) ]
table journalist, columns = [ journalist.journalist_ID ( integer | primary key | values: 1, 2 ), journalist.Name ( text | values: Herbert Swindells, Fred Keenor ), journalist.Nationality ( text | values: England, Wales ), journalist.Age ( text | values: 37, 27 ), journalist.Years_working ( real | values: 10, 5 ) ]
table news_report, columns = [ news_report.journalist_ID ( integer | primary key | values: 1, 4 ), news_report.Event_ID ( integer | values: 3, 1 ), news_report.Work_Type ( text | values: Screening, Music ) ]
foreign keys:
news_report.Event_ID = event.Event_ID
news_report.journalist_ID = journalist.journalist_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many journalists are there?
-- List the names of journalists in ascending order of years working.
-- What are the nationalities and ages of journalists?
-- Show the names of journalists from "England" or "Wales".
-- What is the average number of years spent working as a journalist?
------------------------------------------------------------------------------------------
database_id: wine_1
database schema :
table grapes, columns = [ grapes.ID ( integer | primary key | values: 1, 2 ), grapes.Grape ( text | values: Barbera, Cabernet Franc ), grapes.Color ( text | values: Red, White ) ]
table appellations, columns = [ appellations.No ( integer | primary key | values: 1, 2 ), appellations.Appelation ( text | values: Alexander Valley, Amador County ), appellations.County ( text | values: Sonoma, Amador ), appellations.State ( text | values: California ), appellations.Area ( text | values: North Coast, Sierra Foothills ), appellations.isAVA ( text | values: Yes, No ) ]
table wine, columns = [ wine.No ( real | values: 1, 2 ), wine.Grape ( text | values: Zinfandel, Sauvignon Blanc ), wine.Winery ( text | values: Robert Biale, Chiarello Family ), wine.Appelation ( text | values: St. Helena, Napa Valley ), wine.State ( text | values: California ), wine.Name ( text | values: Old Kraft Vineyard, Giana ), wine.Year ( real | values: 2008, 2007 ), wine.Price ( real | values: 44, 35 ), wine.Score ( real | values: 93, 91 ), wine.Cases ( real | values: 275, 480 ), wine.Drink ( text | values: now, 2012 ) ]
foreign keys:
wine.Appelation = appellations.Appelation
wine.Grape = grapes.Grape

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the highest rated wine?
-- Give the name of the wine with the highest score.
-- Which winery is the wine that has the highest score from?
-- What is the winery at which the wine with the highest score was made?
-- Find the names of all wines produced in 2008.
------------------------------------------------------------------------------------------
database_id: customers_and_addresses
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.address_content ( text | values: 9443 Boyle Route Suite 857, 1969 Jabari Port Suite 393 ), Addresses.city ( text | values: Lucasville, New Sabryna ), Addresses.zip_postcode ( text | values: 416, 721 ), Addresses.state_province_county ( text | values: Colorado, SouthCarolina ), Addresses.country ( text | values: USA ), Addresses.other_address_details ( text | values: N/A ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.product_details ( text | values: Americano, Dove Chocolate ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.payment_method ( text | values: Cash, Cheque ), Customers.customer_name ( text | values: Dr. Julia Wuckert MD, Tillman Ernser ), Customers.date_became_customer ( datetime | values: 2018-03-01 23:20:10, 2018-02-28 11:37:44 ), Customers.other_customer_details ( text | values: VIP ) ]
table Customer_Addresses, columns = [ Customer_Addresses.customer_id ( integer | values: 2, 13 ), Customer_Addresses.address_id ( integer | values: 11, 14 ), Customer_Addresses.date_address_from ( datetime | values: 1985-03-29 20:31:43, 2010-08-25 04:24:35 ), Customer_Addresses.address_type ( text | values: Billing, Residential ), Customer_Addresses.date_address_to ( datetime | values: 1993-02-17 17:55:18, 1972-02-17 22:23:38 ) ]
table Customer_Contact_Channels, columns = [ Customer_Contact_Channels.customer_id ( integer | values: 9, 2 ), Customer_Contact_Channels.channel_code ( text | values: Email, Cell ), Customer_Contact_Channels.active_from_date ( datetime | values: 2017-12-07 18:18:15, 2017-04-07 04:51:41 ), Customer_Contact_Channels.active_to_date ( datetime | values: 2018-03-23 13:37:14, 2018-03-23 01:30:52 ), Customer_Contact_Channels.contact_number ( text | values: 940.035.6435x0225, 189.449.8326x7607 ) ]
table Customer_Orders, columns = [ Customer_Orders.order_id ( integer | primary key | values: 1, 2 ), Customer_Orders.customer_id ( integer | values: 15, 3 ), Customer_Orders.order_status ( text | values: Cancelled, Delivered ), Customer_Orders.order_date ( datetime | values: 2018-03-21 11:20:46, 2018-03-05 06:35:33 ), Customer_Orders.order_details ( text | values: Second time ) ]
table Order_Items, columns = [ Order_Items.order_id ( integer | values: 14, 5 ), Order_Items.product_id ( integer | values: 2, 3 ), Order_Items.order_quantity ( text | values: 5, 9 ) ]
foreign keys:
Customer_Addresses.customer_id = Customers.customer_id
Customer_Addresses.address_id = Addresses.address_id
Customer_Contact_Channels.customer_id = Customers.customer_id
Customer_Orders.customer_id = Customers.customer_id
Order_Items.order_id = Customer_Orders.order_id
Order_Items.product_id = Products.product_id

# Here are some example questions that CAN be answered by the schema below:
-- Find the name of all customers.
-- What are the names of all the customers?
-- How many customers are there?
-- Return the total number of distinct customers.
-- What is the average amount of items ordered in each order?
------------------------------------------------------------------------------------------
database_id: protein_institute
database schema :
table building, columns = [ building.building_id ( text | primary key | values: 0, 1 ), building.Name ( text | values: Citizens Bank Building, Tampa City Hall ), building.Street_address ( text | values: 701 North Franklin Street, 315 John F. Kennedy Boulevard ), building.Years_as_tallest ( text | values: 1913–1915, 1915–1926 ), building.Height_feet ( real | values: 145, 160 ), building.Floors ( real | values: 12, 10 ) ]
table Institution, columns = [ Institution.Institution_id ( text | primary key | values: 0, 1 ), Institution.Institution ( text | values: Ave Maria University, Dakota State University ), Institution.Location ( text | values: Ave Maria, Florida, Madison, South Dakota ), Institution.Founded ( real | values: 1998.0, 1881.0 ), Institution.Type ( text | values: Private, Public ), Institution.Enrollment ( real | values: 1200, 3102 ), Institution.Team ( text | values: Gyrenes, Trojans ), Institution.Primary_Conference ( text | values: The Sun, none ), Institution.building_id ( text | values: 1, 3 ) ]
table protein, columns = [ protein.common_name ( text | primary key | values: Tropical Clawed Frog, body louse ), protein.protein_name ( text | values: uncharacterized protein C20orf117-like, uncharacterized protein LOC578090 ), protein.divergence_from_human_lineage ( real | values: 371.2, 742.9 ), protein.accession_number ( text | values: XP_002942331.1, XP_783370.2 ), protein.sequence_length ( real | values: 1584.0, 1587.0 ), protein.sequence_identity_to_human_protein ( text | values: 39%, 47% ), protein.Institution_id ( text | values: 1, 3 ) ]
foreign keys:
Institution.building_id = building.building_id
protein.Institution_id = Institution.Institution_id

# Here are some example questions that CAN be answered by the schema below:
-- How many buildings are there?
-- Show the name, street address, and number of floors for all buildings ordered by the number of floors.
-- What is the name of the tallest building?
-- What are the average, maximum, and minimum number of floors for all buildings?
-- Show the number of buildings with a height above the average or a number of floors above the average.
------------------------------------------------------------------------------------------
database_id: school_player
database schema :
table school, columns = [ school.School_ID ( integer | primary key | values: 1, 2 ), school.School ( text | values: St Aloysius' College, Barker College ), school.Location ( text | values: Milsons Point, Hornsby ), school.Enrollment ( real | values: 1200.0, 2300.0 ), school.Founded ( real | values: 1879.0, 1890.0 ), school.Denomination ( text | values: Catholic, Anglican ), school.Boys_or_Girls ( text | values: Boys, Boys only to Yr 9 Co-ed Year 10 to 12 ), school.Day_or_Boarding ( text | values: Day, Day & Boarding ), school.Year_Entered_Competition ( real | values: 1929.0, 1944.0 ), school.School_Colors ( text | values: Royal Blue and Gold, Red & Blue ) ]
table school_details, columns = [ school_details.School_ID ( integer | primary key | values: 1, 2 ), school_details.Nickname ( text | values: Tigers, Auks ), school_details.Colors ( text | values: Blue and Yellow, Dark Green and White ), school_details.League ( text | values: DSHA ), school_details.Class ( text | values: Flight A, Flight B ), school_details.Division ( text | values: Division 1, Division 3 ) ]
table school_performance, columns = [ school_performance.School_Id ( integer | primary key | values: 1, 2 ), school_performance.School_Year ( text | values: 1987-88, 1988-89 ), school_performance.Class_A ( text | values: Yantis, Happy ), school_performance.Class_AA ( text | values: Blanco, Bishop ) ]
table player, columns = [ player.Player_ID ( integer | primary key | values: 1, 2 ), player.Player ( text | values: Timothy Beckham, Pedro Álvarez ), player.Team ( text | values: Tampa Bay Devil Rays, Pittsburgh Pirates ), player.Age ( real | values: 15, 14 ), player.Position ( text | values: Shortstop, Third baseman ), player.School_ID ( integer | values: 1, 2 ) ]
foreign keys:
school_details.School_ID = school.School_ID
school_performance.School_Id = school.School_ID
player.School_ID = school.School_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many schools are there?
-- Count the number of schools.
-- List the locations of schools in ascending order of enrollment.
-- What is the list of school locations sorted in ascending order of school enrollment?
-- List the locations of schools in descending order of founded year.
------------------------------------------------------------------------------------------
database_id: phone_1
database schema :
table chip_model, columns = [ chip_model.Model_name ( text | primary key | values: X3 Advanced, X3 Basic ), chip_model.Launch_year ( real | values: 2002.0, 2003.0 ), chip_model.RAM_MiB ( real | values: 32.0, 64.0 ), chip_model.ROM_MiB ( real | values: 32.0, 48.0 ), chip_model.Slots ( text | values: 1CFII,1SD, 1SD ), chip_model.WiFi ( text | values: No, 802.11b ), chip_model.Bluetooth ( text | values: No, 1.1 ) ]
table screen_mode, columns = [ screen_mode.Graphics_mode ( integer | primary key | values: 0.0, 1.0 ), screen_mode.Char_cells ( text | values: 80 × 32, 40 × 32 ), screen_mode.Pixels ( text | values: 640 × 256, 320 × 256 ), screen_mode.Hardware_colours ( real | values: 2.0, 4.0 ), screen_mode.used_kb ( real | values: 20.0, 16.0 ), screen_mode.map ( text | values: 3000–7FFF, 4000–7FFF ), screen_mode.Type ( text | values: Graphics, Text ) ]
table phone, columns = [ phone.Company_name ( text | values: Sony Mobile Communications, LG Electronics ), phone.Hardware_Model_name ( text | primary key | values: GT-I9100, GT-I9300 ), phone.Accreditation_type ( text | values: Full, Provisional ), phone.Accreditation_level ( text | values: joyn Hot Fixes, joyn ), phone.Date ( text | values: Approved (awarded 15.11.12), Approved (awarded 19.11.12) ), phone.chip_model ( text | values: X5, X51v ), phone.screen_mode ( text | values: 1, 3 ) ]
foreign keys:
phone.chip_model = chip_model.Model_name
phone.screen_mode = screen_mode.Graphics_mode

# Here are some example questions that CAN be answered by the schema below:
-- the names of models that launched between 2002 and 2004.
-- Which model has the least amount of RAM? List the model name and the amount of RAM.
-- What are the chip model and screen mode of the phone with hardware model name "LG-P760"?
-- How many phone hardware models are produced by the company named "Nokia Corporation"?
-- What is maximum and minimum RAM size of phone produced by company named "Nokia Corporation"?
------------------------------------------------------------------------------------------
database_id: tvshow
database schema :
table TV_Channel, columns = [ TV_Channel.id ( text | primary key | values: 700, 701 ), TV_Channel.series_name ( text | values: Sky Radio, Sky Music ), TV_Channel.Country ( text | values: Italy, United Kingdom ), TV_Channel.Language ( text | values: Italian, English ), TV_Channel.Content ( text | values: music ), TV_Channel.Pixel_aspect_ratio_PAR ( text | values: 4:3, 4:3 / 16:9 ), TV_Channel.Hight_definition_TV ( text | values: no, yes ), TV_Channel.Pay_per_view_PPV ( text | values: no ), TV_Channel.Package_Option ( text | values: Sky Famiglia, no ( FTV ) ) ]
table TV_series, columns = [ TV_series.id ( integer | primary key | values: 1.0, 2.0 ), TV_series.Episode ( text | values: A Love of a Lifetime, Friendly Skies ), TV_series.Air_Date ( text | values: September 24, 2007, October 1, 2007 ), TV_series.Rating ( text | values: 5.8, 5.3 ), TV_series.Share ( real | values: 9.0, 7.0 ), TV_series.18_49_Rating_Share ( text | values: 3.5/9, 3.2/8 ), TV_series.Viewers_m ( text | values: 9.16, 8.23 ), TV_series.Weekly_Rank ( real | values: 43.0, 50.0 ), TV_series.Channel ( text | values: 700, 701 ) ]
table Cartoon, columns = [ Cartoon.id ( integer | primary key | values: 1.0, 2.0 ), Cartoon.Title ( text | values: The Rise of the Blue Beetle!, Terror on Dinosaur Island! ), Cartoon.Directed_by ( text | values: Ben Jones, Brandon Vietti ), Cartoon.Written_by ( text | values: Michael Jelenic, Steven Melching ), Cartoon.Original_air_date ( text | values: November14,2008, November21,2008 ), Cartoon.Production_code ( real | values: 101.0, 102.0 ), Cartoon.Channel ( text | values: 700, 701 ) ]
foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id

# Here are some example questions that CAN be answered by the schema below:
-- List the title of all cartoons in alphabetical order.
-- What are the titles of the cartoons sorted alphabetically?
-- List all cartoon directed by "Ben Jones".
-- What are the names of all cartoons directed by Ben Jones?
-- How many cartoons were written by "Joseph Kuhr"?
------------------------------------------------------------------------------------------
database_id: wrestler
database schema :
table wrestler, columns = [ wrestler.Wrestler_ID ( integer | primary key | values: 1, 2 ), wrestler.Name ( text | values: Rey Misterio Sr., Fishman ), wrestler.Reign ( text | values: 1, 2 ), wrestler.Days_held ( text | values: 344, 113 ), wrestler.Location ( text | values: Tijuana , Mexico, Tokyo , Japan ), wrestler.Event ( text | values: Live event, Wrestling World 1997 ) ]
table Elimination, columns = [ Elimination.Elimination_ID ( text | primary key | values: 1, 2 ), Elimination.Wrestler_ID ( text | values: 1, 2 ), Elimination.Team ( text | values: Team Orton, Team Batista ), Elimination.Eliminated_By ( text | values: Punk, Benjamin ), Elimination.Elimination_Move ( text | values: Go To Sleep, Paydirt ), Elimination.Time ( text | values: 00:11, 07:38 ) ]
foreign keys:
Elimination.Wrestler_ID = wrestler.Wrestler_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many wrestlers are there?
-- Count the number of wrestlers.
-- List the names of wrestlers in descending order of days held.
-- What are the names of the wrestlers, ordered descending by days held?
-- What is the name of the wrestler with the fewest days held?
------------------------------------------------------------------------------------------
database_id: customer_complaints
database schema :
table Staff, columns = [ Staff.staff_id ( integer | primary key | values: 114, 115 ), Staff.gender ( text | values: 0, 1 ), Staff.first_name ( text | values: Ward, Lucie ), Staff.last_name ( text | values: Boehm, Lowe ), Staff.email_address ( text | values: marcelle.ritchie@example.com, ohintz@example.org ), Staff.phone_number ( text | values: (379)551-0838x146, 142-311-6503x206 ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 113, 114 ), Customers.customer_type_code ( text | values: Good Credit Rating, Defaults on payments ), Customers.address_line_1 ( text | values: 144 Legros Landing, 039 Jedidiah Estate Suite 537 ), Customers.address_line_2 ( text | values: Apt. 551, Apt. 245 ), Customers.town_city ( text | values: Maryamport, Sauerberg ), Customers.state ( text | values: Kansas, Hawaii ), Customers.email_address ( text | values: hsteuber@example.org, cayla.satterfield@example.net ), Customers.phone_number ( text | values: 06963347450, 470-803-0244 ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 117, 118 ), Products.parent_product_id ( real | values: 4, 3 ), Products.product_category_code ( text | values: Food, Book ), Products.date_product_first_available ( datetime | values: 1988-09-29 17:54:50, 1974-06-25 12:26:47 ), Products.date_product_discontinued ( datetime | values: 1987-12-20 13:46:16, 1991-08-20 05:22:31 ), Products.product_name ( text | values: Chocolate, The Great Gatsby ), Products.product_description ( text | values: Handmade chocolate, American novel ), Products.product_price ( real | values: 2.88, 35 ) ]
table Complaints, columns = [ Complaints.complaint_id ( real | values: 1, 2 ), Complaints.product_id ( integer | values: 117, 118 ), Complaints.customer_id ( integer | values: 120, 113 ), Complaints.complaint_outcome_code ( text | values: OK ), Complaints.complaint_status_code ( text | values: Closed, New ), Complaints.complaint_type_code ( text | values: Product Failure, Product Unusable ), Complaints.date_complaint_raised ( datetime | values: 2002-07-18 10:59:35, 1973-02-10 22:55:56 ), Complaints.date_complaint_closed ( datetime | values: 1976-04-19 11:03:06, 2013-09-14 02:59:10 ), Complaints.staff_id ( integer | values: 114, 120 ) ]
foreign keys:
Complaints.customer_id = Customers.customer_id
Complaints.product_id = Products.product_id
Complaints.staff_id = Staff.staff_id

# Here are some example questions that CAN be answered by the schema below:
-- How many customers are there?
-- Count the number of customers.
-- Find the emails and phone numbers of all the customers, ordered by email address and phone number.
-- What are the emails and phone numbers of all customers, sorted by email address and phone number?
-- Which city has the least number of customers whose type code is "Good Credit Rating"?
------------------------------------------------------------------------------------------
database_id: department_management
database schema :
table department, columns = [ department.Department_ID ( integer | primary key | values: 1, 2 ), department.Name ( text | values: State, Treasury ), department.Creation ( text | values: 1789, 1947 ), department.Ranking ( real | values: 1, 2 ), department.Budget_in_Billions ( real | values: 9.96, 11.1 ), department.Num_Employees ( real | values: 30266.0, 115897.0 ) ]
table head, columns = [ head.head_ID ( integer | primary key | values: 1, 2 ), head.name ( text | values: Tiger Woods, Sergio García ), head.born_state ( text | values: Alabama, California ), head.age ( real | values: 67.0, 68.0 ) ]
table management, columns = [ management.department_ID ( integer | primary key | values: 2, 7 ), management.head_ID ( integer | values: 5, 6 ), management.temporary_acting ( text | values: Yes, No ) ]
foreign keys:
management.head_ID = head.head_ID
management.department_ID = department.Department_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many heads of the departments are older than 56 ?
-- List the name, born state and age of the heads of departments ordered by age.
-- List the creation year, name and budget of each department.
-- What are the maximum and minimum budget of the departments?
-- What is the average number of employees of the departments whose rank is between 10 and 15?
------------------------------------------------------------------------------------------
database_id: customers_and_products_contacts
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.line_1_number_building ( text | values: 4315 Kerluke Canyon Apt. 800, 319 Kozey Highway Suite 973 ), Addresses.city ( text | values: Hertafurt, Edgardoberg ), Addresses.zip_postcode ( text | values: 740, 282 ), Addresses.state_province_county ( text | values: Nevada, Colorado ), Addresses.country ( text | values: USA ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.product_type_code ( text | values: Hardware, Clothes ), Products.product_name ( text | values: Apple, jcrew ), Products.product_price ( real | values: 54753982.574522, 30590929.528306 ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.payment_method_code ( text | values: Credit Card, Direct Debit ), Customers.customer_number ( text | values: 456, 553 ), Customers.customer_name ( text | values: Kayley, Sterling ), Customers.customer_address ( text | values: 636 Chanelle Isle Apt. 846, 12174 Boyer Crossroad ), Customers.customer_phone ( text | values: +87(9)5279161988, 896.685.8228x2786 ), Customers.customer_email ( text | values: antonette73@example.com, stroman.chadd@example.net ) ]
table Contacts, columns = [ Contacts.contact_id ( integer | primary key | values: 1, 2 ), Contacts.customer_id ( real | values: 4, 6 ), Contacts.gender ( text | values: male, female ), Contacts.first_name ( text | values: Cierra, Jennifer ), Contacts.last_name ( text | values: Collins, Doyle ), Contacts.contact_phone ( text | values: +73(2)0854391820, 482-949-1364x17500 ) ]
table Customer_Address_History, columns = [ Customer_Address_History.customer_id ( integer | values: 12, 3 ), Customer_Address_History.address_id ( integer | values: 7, 2 ), Customer_Address_History.date_from ( datetime | values: 2015-07-23 14:37:18, 2016-11-06 14:33:12 ), Customer_Address_History.date_to ( datetime | values: 2018-03-07 12:04:20, 2018-03-14 21:36:28 ) ]
table Customer_Orders, columns = [ Customer_Orders.order_id ( integer | primary key | values: 1, 2 ), Customer_Orders.customer_id ( integer | values: 2, 6 ), Customer_Orders.order_date ( datetime | values: 2009-07-19 13:40:49, 1976-05-28 15:02:44 ), Customer_Orders.order_status_code ( text | values: Completed, Part ) ]
table Order_Items, columns = [ Order_Items.order_item_id ( real | values: 1, 2 ), Order_Items.order_id ( integer | values: 9, 8 ), Order_Items.product_id ( integer | values: 15, 12 ), Order_Items.order_quantity ( text | values: 3, 7 ) ]
foreign keys:
Customer_Address_History.address_id = Addresses.address_id
Customer_Address_History.customer_id = Customers.customer_id
Customer_Orders.customer_id = Customers.customer_id
Order_Items.order_id = Customer_Orders.order_id
Order_Items.product_id = Products.product_id

# Here are some example questions that CAN be answered by the schema below:
-- How many addresses are there in country USA?
-- Show all distinct cities in the address record.
-- Show each state and the number of addresses in each state.
-- Show names and phones of customers who do not have address information.
-- Show the name of the customer who has the most orders.
------------------------------------------------------------------------------------------
database_id: company_1
database schema :
table works_on, columns = [ works_on.Essn ( integer | primary key | values: 123456789, 333445555 ), works_on.Pno ( real | values: 1, 2 ), works_on.Hours ( real | values: 32.5, 7.5 ) ]
table employee, columns = [ employee.Fname ( text | values: Jonh, Franklin ), employee.Minit ( text | values: B, T ), employee.Lname ( text | values: Smith, Wong ), employee.Ssn ( integer | primary key | values: 123456789, 333445555 ), employee.Bdate ( text | values: 1965-01-09, 1955-12-08 ), employee.Address ( text | values: 731 Fondren, Houston, TX, 638 Voss, Houston, TX ), employee.Sex ( text | values: M, F ), employee.Salary ( real | values: 30000, 40000 ), employee.Super_ssn ( real | values: 333445555, 888665555 ), employee.Dno ( real | values: 5, 1 ) ]
table department, columns = [ department.Dname ( text | values: Headquarters, Administration ), department.Dnumber ( integer | primary key | values: 1, 4 ), department.Mgr_ssn ( real | values: 888665555, 987654321 ), department.Mgr_start_date ( text | values: 1981-06-19, 1995-01-01 ) ]
table project, columns = [ project.Pname ( text | values: ProductX, ProductY ), project.Pnumber ( integer | primary key | values: 1, 2 ), project.Plocation ( text | values: Bellaire, Sugarland ), project.Dnum ( real | values: 5, 4 ) ]
table dependent, columns = [ dependent.Essn ( integer | primary key | values: 123456789, 333445555 ), dependent.Dependent_name ( text | values: Alice, Elizabeth ), dependent.Sex ( text | values: F, M ), dependent.Bdate ( text | values: 1986-04-05, 1983-10-25 ), dependent.Relationship ( text | values: Daughter, Son ) ]
table dept_locations, columns = [ dept_locations.Dnumber ( integer | primary key | values: 1, 4 ), dept_locations.Dlocation ( text | values: Houston, Stafford ) ]

# Here are some example questions that CAN be answered by the schema below:
-- List all department names ordered by their starting date.
-- find all dependent names who have a spouse relation with some employee.
-- how many female dependents are there?
-- Find the names of departments that are located in Houston.
-- Return the first names and last names of employees who earn more than 30000 in salary.
------------------------------------------------------------------------------------------
database_id: workshop_paper
database schema :
table workshop, columns = [ workshop.Workshop_ID ( integer | primary key | values: 1, 2 ), workshop.Date ( text | values: August 18, 2007, August 21, 2007 ), workshop.Venue ( text | values: London UK, New Jersey USA ), workshop.Name ( text | values: ABC 2007, Conference 2007 ) ]
table submission, columns = [ submission.Submission_ID ( integer | primary key | values: 1, 2 ), submission.Scores ( real | values: 72.0, 79.0 ), submission.Author ( text | values: Steve Niehaus, Sammy Green ), submission.College ( text | values: Notre Dame, Florida ) ]
table Acceptance, columns = [ Acceptance.Submission_ID ( integer | primary key | values: 1, 2 ), Acceptance.Workshop_ID ( integer | values: 1, 3 ), Acceptance.Result ( text | values: Accepted, Rejected ) ]
foreign keys:
Acceptance.Workshop_ID = workshop.Workshop_ID
Acceptance.Submission_ID = submission.Submission_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many submissions are there?
-- Count the number of submissions.
-- List the authors of submissions in ascending order of scores.
-- Find the author for each submission and list them in ascending order of submission score.
-- What are the authors of submissions and their colleges?
------------------------------------------------------------------------------------------
database_id: epinions_1
database schema :
table item, columns = [ item.i_id ( integer | primary key | values: 0, 1 ), item.title ( text | values: pear, orange ) ]
table review, columns = [ review.a_id ( integer | primary key | values: 1, 2 ), review.u_id ( integer | values: 1, 2 ), review.i_id ( integer | values: 1, 3 ), review.rating ( real | values: 10, 5 ), review.rank ( real | values: 1, 2 ) ]
table useracct, columns = [ useracct.u_id ( integer | primary key | values: 1, 2 ), useracct.name ( text | values: Helen, Mark ) ]
table trust, columns = [ trust.source_u_id ( integer | values: 1, 2 ), trust.target_u_id ( integer | values: 2, 3 ), trust.trust ( real | values: 10, 6 ) ]
foreign keys:
review.i_id = item.i_id
review.u_id = useracct.u_id
trust.target_u_id = useracct.u_id
trust.source_u_id = useracct.u_id

# Here are some example questions that CAN be answered by the schema below:
-- Find the id of the item whose title is "orange".
-- List all information in the item table.
-- Find the number of reviews.
-- How many users are there?
-- Find the average and maximum rating of all reviews.
------------------------------------------------------------------------------------------
database_id: party_host
database schema :
table party, columns = [ party.Party_ID ( integer | primary key | values: 1, 2 ), party.Party_Theme ( text | values: Spring, Club Q-BASE ), party.Location ( text | values: Hemkade 48 Zaandam, Various locations ), party.First_year ( text | values: 2000, 2002 ), party.Last_year ( text | values: 2001, 2002 ), party.Number_of_hosts ( real | values: 5, 23 ) ]
table host, columns = [ host.Host_ID ( integer | primary key | values: 1, 2 ), host.Name ( text | values: Austin Daye, Lloyd Daniels ), host.Nationality ( text | values: United States, Hungary ), host.Age ( text | values: 43, 37 ) ]
table party_host, columns = [ party_host.Party_ID ( integer | primary key | values: 1, 2 ), party_host.Host_ID ( integer | values: 1, 5 ), party_host.Is_Main_in_Charge ( text | values: T, F ) ]
foreign keys:
party_host.Party_ID = party.Party_ID
party_host.Host_ID = host.Host_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many parties are there?
-- Count the number of parties.
-- List the themes of parties in ascending order of number of hosts.
-- What are the themes of parties ordered by the number of hosts in ascending manner?
-- What are the themes and locations of parties?
------------------------------------------------------------------------------------------
database_id: product_catalog
database schema :
table Attribute_Definitions, columns = [ Attribute_Definitions.attribute_id ( integer | primary key | values: 1, 2 ), Attribute_Definitions.attribute_name ( text | values: Green, Black ), Attribute_Definitions.attribute_data_type ( text | values: Bool ) ]
table Catalogs, columns = [ Catalogs.catalog_id ( integer | primary key | values: 1, 2 ), Catalogs.catalog_name ( text | values: Chocolate, Coffee Bean ), Catalogs.catalog_publisher ( text | values: Koepp-Rutherford handmade chocolate store, Murray Coffee shop ), Catalogs.date_of_publication ( datetime | values: 2013-03-15 05:09:17, 2012-04-13 06:37:09 ), Catalogs.date_of_latest_revision ( datetime | values: 2017-09-26 12:10:36, 2017-10-26 01:16:51 ) ]
table Catalog_Structure, columns = [ Catalog_Structure.catalog_level_number ( integer | primary key | values: 1, 8 ), Catalog_Structure.catalog_id ( integer | values: 1, 2 ), Catalog_Structure.catalog_level_name ( text | values: Category, Sub-Category ) ]
table Catalog_Contents, columns = [ Catalog_Contents.catalog_entry_id ( integer | primary key | values: 1, 2 ), Catalog_Contents.catalog_level_number ( integer | values: 1, 8 ), Catalog_Contents.parent_entry_id ( real | values: 5, 6 ), Catalog_Contents.previous_entry_id ( real | values: 9, 6 ), Catalog_Contents.next_entry_id ( real | values: 7, 8 ), Catalog_Contents.catalog_entry_name ( text | values: Cola, Root beer ), Catalog_Contents.product_stock_number ( text | values: 89 cp, 37 hq ), Catalog_Contents.price_in_dollars ( real | values: 200.78, 687.59 ), Catalog_Contents.price_in_euros ( real | values: 159.84, 590.11 ), Catalog_Contents.price_in_pounds ( real | values: 172.17, 471.78 ), Catalog_Contents.capacity ( text | values: 1, 8 ), Catalog_Contents.length ( text | values: 3, 6 ), Catalog_Contents.height ( text | values: 9, 5 ), Catalog_Contents.width ( text | values: 5, 6 ) ]
table Catalog_Contents_Additional_Attributes, columns = [ Catalog_Contents_Additional_Attributes.catalog_entry_id ( integer | values: 5, 15 ), Catalog_Contents_Additional_Attributes.catalog_level_number ( integer | values: 8, 9 ), Catalog_Contents_Additional_Attributes.attribute_id ( real | values: 4, 3 ), Catalog_Contents_Additional_Attributes.attribute_value ( text | values: 1, 0 ) ]
foreign keys:
Catalog_Structure.catalog_id = Catalogs.catalog_id
Catalog_Contents.catalog_level_number = Catalog_Structure.catalog_level_number
Catalog_Contents_Additional_Attributes.catalog_level_number = Catalog_Structure.catalog_level_number
Catalog_Contents_Additional_Attributes.catalog_entry_id = Catalog_Contents.catalog_entry_id

# Here are some example questions that CAN be answered by the schema below:
-- Find the names of all the catalog entries.
-- What are all the catalog entry names?
-- Find the list of attribute data types possessed by more than 3 attribute definitions.
-- What are the attribute data types with more than 3 attribute definitions?
-- What is the attribute data type of the attribute with name "Green"?
---

# --- Example ---
# Task: Examine all the database schemas provided above and return a ranked list of the 10 most relevant database_ids for answering the following question.
# Q: How many French singers are there?
#
# The 10 most relevant database_ids are:
1. singer
2. orchestra
3. musical
4. concert_singer
5. sports_competition
6. tvshow
7. museum_visit
8. department_store
9. poker_player
10. party_host
# --- End of Example ---


# --- Your Task ---
# Task: Examine all the database schemas provided above and return a ranked list of the 10 most relevant database_ids for answering the following question.
# Q: How many visitors below age 30 are there?
#
# The 10 most relevant database_ids are:
