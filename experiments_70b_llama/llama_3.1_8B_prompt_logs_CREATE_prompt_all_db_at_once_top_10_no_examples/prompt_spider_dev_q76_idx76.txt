
You are given multiple databases. Each database has a schema consisting of tables, columns, and relationships (foreign keys).
---
database_id: perpetrator
database schema :
CREATE TABLE perpetrator (
  Perpetrator_ID INTEGER PRIMARY KEY,
  People_ID INTEGER,
  Date TEXT,
  Year REAL,
  Location TEXT,
  Country TEXT,
  Killed REAL,
  Injured REAL,
  FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);

CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  "Home Town" TEXT
);

------------------------------------------------------------------------------------------
database_id: college_2
database schema :
CREATE TABLE classroom (
  building TEXT PRIMARY KEY,
  room_number TEXT,
  capacity REAL
);

CREATE TABLE department (
  dept_name TEXT PRIMARY KEY,
  building TEXT,
  budget REAL
);

CREATE TABLE course (
  course_id TEXT PRIMARY KEY,
  title TEXT,
  dept_name TEXT,
  credits REAL,
  FOREIGN KEY (dept_name) REFERENCES department(dept_name)
);

CREATE TABLE instructor (
  ID TEXT PRIMARY KEY,
  name TEXT,
  dept_name TEXT,
  salary REAL,
  FOREIGN KEY (dept_name) REFERENCES department(dept_name)
);

CREATE TABLE section (
  course_id TEXT PRIMARY KEY,
  sec_id TEXT,
  semester TEXT,
  year REAL,
  building TEXT,
  room_number TEXT,
  time_slot_id TEXT,
  FOREIGN KEY (building) REFERENCES classroom(building),
  FOREIGN KEY (room_number) REFERENCES classroom(room_number),
  FOREIGN KEY (course_id) REFERENCES course(course_id)
);

CREATE TABLE teaches (
  ID TEXT PRIMARY KEY,
  course_id TEXT,
  sec_id TEXT,
  semester TEXT,
  year INTEGER,
  FOREIGN KEY (ID) REFERENCES instructor(ID),
  FOREIGN KEY (course_id) REFERENCES section(course_id),
  FOREIGN KEY (sec_id) REFERENCES section(sec_id),
  FOREIGN KEY (semester) REFERENCES section(semester),
  FOREIGN KEY (year) REFERENCES section(year)
);

CREATE TABLE student (
  ID TEXT PRIMARY KEY,
  name TEXT,
  dept_name TEXT,
  tot_cred REAL,
  FOREIGN KEY (dept_name) REFERENCES department(dept_name)
);

CREATE TABLE takes (
  ID TEXT PRIMARY KEY,
  course_id TEXT,
  sec_id TEXT,
  semester TEXT,
  year INTEGER,
  grade TEXT,
  FOREIGN KEY (ID) REFERENCES student(ID),
  FOREIGN KEY (course_id) REFERENCES section(course_id),
  FOREIGN KEY (sec_id) REFERENCES section(sec_id),
  FOREIGN KEY (semester) REFERENCES section(semester),
  FOREIGN KEY (year) REFERENCES section(year)
);

CREATE TABLE advisor (
  s_ID TEXT PRIMARY KEY,
  i_ID TEXT,
  FOREIGN KEY (s_ID) REFERENCES student(ID),
  FOREIGN KEY (i_ID) REFERENCES instructor(ID)
);

CREATE TABLE time_slot (
  time_slot_id TEXT PRIMARY KEY,
  day TEXT,
  start_hr REAL,
  start_min REAL,
  end_hr REAL,
  end_min REAL
);

CREATE TABLE prereq (
  course_id TEXT PRIMARY KEY,
  prereq_id TEXT,
  FOREIGN KEY (prereq_id) REFERENCES course(course_id),
  FOREIGN KEY (course_id) REFERENCES course(course_id)
);

------------------------------------------------------------------------------------------
database_id: flight_company
database schema :
CREATE TABLE airport (
  id INTEGER PRIMARY KEY,
  City TEXT,
  Country TEXT,
  IATA TEXT,
  ICAO TEXT,
  name TEXT
);

CREATE TABLE operate_company (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Type TEXT,
  Principal_activities TEXT,
  Incorporated_in TEXT,
  Group_Equity_Shareholding REAL
);

CREATE TABLE flight (
  id INTEGER PRIMARY KEY,
  Vehicle_Flight_number TEXT,
  Date TEXT,
  Pilot TEXT,
  Velocity REAL,
  Altitude REAL,
  airport_id INTEGER,
  company_id INTEGER,
  FOREIGN KEY (company_id) REFERENCES operate_company(id),
  FOREIGN KEY (airport_id) REFERENCES airport(id)
);

------------------------------------------------------------------------------------------
database_id: icfp_1
database schema :
CREATE TABLE Inst (
  instID INTEGER PRIMARY KEY,
  name TEXT,
  country TEXT
);

CREATE TABLE Authors (
  authID INTEGER PRIMARY KEY,
  lname TEXT,
  fname TEXT
);

CREATE TABLE Papers (
  paperID INTEGER PRIMARY KEY,
  title TEXT
);

CREATE TABLE Authorship (
  authID INTEGER PRIMARY KEY,
  instID INTEGER,
  paperID INTEGER,
  authOrder REAL,
  FOREIGN KEY (paperID) REFERENCES Papers(paperID),
  FOREIGN KEY (instID) REFERENCES Inst(instID),
  FOREIGN KEY (authID) REFERENCES Authors(authID)
);

------------------------------------------------------------------------------------------
database_id: body_builder
database schema :
CREATE TABLE body_builder (
  Body_Builder_ID INTEGER PRIMARY KEY,
  People_ID INTEGER,
  Snatch REAL,
  Clean_Jerk REAL,
  Total REAL,
  FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);

CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Birth_Date TEXT,
  Birth_Place TEXT
);

------------------------------------------------------------------------------------------
database_id: storm_record
database schema :
CREATE TABLE storm (
  Storm_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Dates_active TEXT,
  Max_speed REAL,
  Damage_millions_USD REAL,
  Number_Deaths REAL
);

CREATE TABLE region (
  Region_id INTEGER PRIMARY KEY,
  Region_code TEXT,
  Region_name TEXT
);

CREATE TABLE affected_region (
  Region_id INTEGER PRIMARY KEY,
  Storm_ID INTEGER,
  Number_city_affected REAL,
  FOREIGN KEY (Storm_ID) REFERENCES storm(Storm_ID),
  FOREIGN KEY (Region_id) REFERENCES region(Region_id)
);

------------------------------------------------------------------------------------------
database_id: pilot_record
database schema :
CREATE TABLE aircraft (
  Aircraft_ID INTEGER PRIMARY KEY,
  Order_Year REAL,
  Manufacturer TEXT,
  Model TEXT,
  Fleet_Series TEXT,
  Powertrain TEXT,
  Fuel_Propulsion TEXT
);

CREATE TABLE pilot (
  Pilot_ID INTEGER PRIMARY KEY,
  Pilot_name TEXT,
  Rank REAL,
  Age REAL,
  Nationality TEXT,
  Position TEXT,
  Join_Year REAL,
  Team TEXT
);

CREATE TABLE pilot_record (
  Record_ID REAL,
  Pilot_ID INTEGER PRIMARY KEY,
  Aircraft_ID INTEGER,
  Date TEXT,
  FOREIGN KEY (Aircraft_ID) REFERENCES aircraft(Aircraft_ID),
  FOREIGN KEY (Pilot_ID) REFERENCES pilot(Pilot_ID)
);

------------------------------------------------------------------------------------------
database_id: race_track
database schema :
CREATE TABLE race (
  Race_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT,
  FOREIGN KEY (Track_ID) REFERENCES track(Track_ID)
);

CREATE TABLE track (
  Track_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

------------------------------------------------------------------------------------------
database_id: academic
database schema :
CREATE TABLE author (
  aid INTEGER PRIMARY KEY,
  homepage TEXT,
  name TEXT,
  oid REAL
);

CREATE TABLE conference (
  cid INTEGER PRIMARY KEY,
  homepage TEXT,
  name TEXT
);

CREATE TABLE domain (
  did INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE domain_author (
  aid INTEGER,
  did INTEGER PRIMARY KEY,
  FOREIGN KEY (did) REFERENCES domain(did),
  FOREIGN KEY (aid) REFERENCES author(aid)
);

CREATE TABLE domain_conference (
  cid INTEGER,
  did INTEGER PRIMARY KEY,
  FOREIGN KEY (did) REFERENCES domain(did),
  FOREIGN KEY (cid) REFERENCES conference(cid)
);

CREATE TABLE journal (
  homepage TEXT,
  jid INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE domain_journal (
  did INTEGER PRIMARY KEY,
  jid INTEGER,
  FOREIGN KEY (did) REFERENCES domain(did),
  FOREIGN KEY (jid) REFERENCES journal(jid)
);

CREATE TABLE keyword (
  keyword TEXT,
  kid INTEGER PRIMARY KEY
);

CREATE TABLE domain_keyword (
  did INTEGER PRIMARY KEY,
  kid INTEGER,
  FOREIGN KEY (did) REFERENCES domain(did),
  FOREIGN KEY (kid) REFERENCES keyword(kid)
);

CREATE TABLE publication (
  abstract TEXT,
  cid TEXT,
  citation_num REAL,
  jid INTEGER,
  pid INTEGER PRIMARY KEY,
  reference_num REAL,
  title TEXT,
  year REAL,
  FOREIGN KEY (cid) REFERENCES conference(cid),
  FOREIGN KEY (jid) REFERENCES journal(jid)
);

CREATE TABLE domain_publication (
  did INTEGER PRIMARY KEY,
  pid INTEGER,
  FOREIGN KEY (did) REFERENCES domain(did),
  FOREIGN KEY (pid) REFERENCES publication(pid)
);

CREATE TABLE organization (
  continent TEXT,
  homepage TEXT,
  name TEXT,
  oid INTEGER PRIMARY KEY
);

CREATE TABLE publication_keyword (
  pid INTEGER,
  kid INTEGER PRIMARY KEY,
  FOREIGN KEY (kid) REFERENCES keyword(kid),
  FOREIGN KEY (pid) REFERENCES publication(pid)
);

CREATE TABLE writes (
  aid INTEGER PRIMARY KEY,
  pid INTEGER,
  FOREIGN KEY (aid) REFERENCES author(aid),
  FOREIGN KEY (pid) REFERENCES publication(pid)
);

CREATE TABLE cite (
  cited INTEGER,
  citing INTEGER,
  FOREIGN KEY (citing) REFERENCES publication(pid),
  FOREIGN KEY (cited) REFERENCES publication(pid)
);

------------------------------------------------------------------------------------------
database_id: department_store
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  address_details TEXT
);

CREATE TABLE Staff (
  staff_id INTEGER PRIMARY KEY,
  staff_gender TEXT,
  staff_name TEXT
);

CREATE TABLE Suppliers (
  supplier_id INTEGER PRIMARY KEY,
  supplier_name TEXT,
  supplier_phone TEXT
);

CREATE TABLE Department_Store_Chain (
  dept_store_chain_id INTEGER PRIMARY KEY,
  dept_store_chain_name TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  payment_method_code TEXT,
  customer_code TEXT,
  customer_name TEXT,
  customer_address TEXT,
  customer_phone TEXT,
  customer_email TEXT
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  product_type_code TEXT,
  product_name TEXT,
  product_price REAL
);

CREATE TABLE Supplier_Addresses (
  supplier_id INTEGER PRIMARY KEY,
  address_id INTEGER,
  date_from DATETIME,
  date_to DATETIME,
  FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id),
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Customer_Addresses (
  customer_id INTEGER PRIMARY KEY,
  address_id INTEGER,
  date_from DATETIME,
  date_to DATETIME,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Customer_Orders (
  order_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  order_status_code TEXT,
  order_date DATETIME,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Department_Stores (
  dept_store_id INTEGER PRIMARY KEY,
  dept_store_chain_id INTEGER,
  store_name TEXT,
  store_address TEXT,
  store_phone TEXT,
  store_email TEXT,
  FOREIGN KEY (dept_store_chain_id) REFERENCES Department_Store_Chain(dept_store_chain_id)
);

CREATE TABLE Departments (
  department_id INTEGER PRIMARY KEY,
  dept_store_id INTEGER,
  department_name TEXT,
  FOREIGN KEY (dept_store_id) REFERENCES Department_Stores(dept_store_id)
);

CREATE TABLE Order_Items (
  order_item_id INTEGER PRIMARY KEY,
  order_id INTEGER,
  product_id INTEGER,
  FOREIGN KEY (product_id) REFERENCES Products(product_id),
  FOREIGN KEY (order_id) REFERENCES Customer_Orders(order_id)
);

CREATE TABLE Product_Suppliers (
  product_id INTEGER PRIMARY KEY,
  supplier_id INTEGER,
  date_supplied_from DATETIME,
  date_supplied_to DATETIME,
  total_amount_purchased TEXT,
  total_value_purchased REAL,
  FOREIGN KEY (product_id) REFERENCES Products(product_id),
  FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)
);

CREATE TABLE Staff_Department_Assignments (
  staff_id INTEGER PRIMARY KEY,
  department_id INTEGER,
  date_assigned_from DATETIME,
  job_title_code TEXT,
  date_assigned_to DATETIME,
  FOREIGN KEY (staff_id) REFERENCES Staff(staff_id),
  FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);

------------------------------------------------------------------------------------------
database_id: music_4
database schema :
CREATE TABLE artist (
  Artist_ID INTEGER PRIMARY KEY,
  Artist TEXT,
  Age REAL,
  Famous_Title TEXT,
  Famous_Release_date TEXT
);

CREATE TABLE volume (
  Volume_ID INTEGER PRIMARY KEY,
  Volume_Issue TEXT,
  Issue_Date TEXT,
  Weeks_on_Top REAL,
  Song TEXT,
  Artist_ID INTEGER,
  FOREIGN KEY (Artist_ID) REFERENCES artist(Artist_ID)
);

CREATE TABLE music_festival (
  ID INTEGER PRIMARY KEY,
  Music_Festival TEXT,
  Date_of_ceremony TEXT,
  Category TEXT,
  Volume INTEGER,
  Result TEXT,
  FOREIGN KEY (Volume) REFERENCES volume(Volume_ID)
);

------------------------------------------------------------------------------------------
database_id: insurance_fnol
database schema :
CREATE TABLE Customers (
  Customer_ID INTEGER PRIMARY KEY,
  Customer_name TEXT
);

CREATE TABLE Services (
  Service_ID INTEGER PRIMARY KEY,
  Service_name TEXT
);

CREATE TABLE Available_Policies (
  Policy_ID INTEGER PRIMARY KEY,
  policy_type_code TEXT,
  Customer_Phone TEXT
);

CREATE TABLE Customers_Policies (
  Customer_ID INTEGER PRIMARY KEY,
  Policy_ID INTEGER,
  Date_Opened DATETIME,
  Date_Closed DATETIME,
  FOREIGN KEY (Policy_ID) REFERENCES Available_Policies(Policy_ID),
  FOREIGN KEY (Customer_ID) REFERENCES Customers(Customer_ID)
);

CREATE TABLE First_Notification_of_Loss (
  FNOL_ID INTEGER PRIMARY KEY,
  Customer_ID INTEGER,
  Policy_ID INTEGER,
  Service_ID INTEGER,
  FOREIGN KEY (Customer_ID) REFERENCES Customers_Policies(Customer_ID),
  FOREIGN KEY (Policy_ID) REFERENCES Customers_Policies(Policy_ID),
  FOREIGN KEY (Service_ID) REFERENCES Services(Service_ID)
);

CREATE TABLE Claims (
  Claim_ID INTEGER PRIMARY KEY,
  FNOL_ID INTEGER,
  Effective_Date DATETIME,
  FOREIGN KEY (FNOL_ID) REFERENCES First_Notification_of_Loss(FNOL_ID)
);

CREATE TABLE Settlements (
  Settlement_ID INTEGER PRIMARY KEY,
  Claim_ID INTEGER,
  Effective_Date DATETIME,
  Settlement_Amount REAL,
  FOREIGN KEY (Claim_ID) REFERENCES Claims(Claim_ID)
);

------------------------------------------------------------------------------------------
database_id: cinema
database schema :
CREATE TABLE film (
  Film_ID INTEGER PRIMARY KEY,
  Rank_in_series REAL,
  Number_in_season REAL,
  Title TEXT,
  Directed_by TEXT,
  Original_air_date TEXT,
  Production_code TEXT
);

CREATE TABLE cinema (
  Cinema_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Openning_year REAL,
  Capacity REAL,
  Location TEXT
);

CREATE TABLE schedule (
  Cinema_ID INTEGER PRIMARY KEY,
  Film_ID INTEGER,
  Date TEXT,
  Show_times_per_day REAL,
  Price REAL,
  FOREIGN KEY (Cinema_ID) REFERENCES cinema(Cinema_ID),
  FOREIGN KEY (Film_ID) REFERENCES film(Film_ID)
);

------------------------------------------------------------------------------------------
database_id: decoration_competition
database schema :
CREATE TABLE college (
  College_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Leader_Name TEXT,
  College_Location TEXT
);

CREATE TABLE member (
  Member_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  College_ID INTEGER,
  FOREIGN KEY (College_ID) REFERENCES college(College_ID)
);

CREATE TABLE round (
  Round_ID REAL,
  Member_ID INTEGER PRIMARY KEY,
  Decoration_Theme TEXT,
  Rank_in_Round REAL,
  FOREIGN KEY (Member_ID) REFERENCES member(Member_ID)
);

------------------------------------------------------------------------------------------
database_id: phone_market
database schema :
CREATE TABLE phone (
  Name TEXT,
  Phone_ID INTEGER PRIMARY KEY,
  Memory_in_G REAL,
  Carrier TEXT,
  Price REAL
);

CREATE TABLE market (
  Market_ID INTEGER PRIMARY KEY,
  District TEXT,
  Num_of_employees REAL,
  Num_of_shops REAL,
  Ranking REAL
);

CREATE TABLE phone_market (
  Market_ID INTEGER PRIMARY KEY,
  Phone_ID TEXT,
  Num_of_stock REAL,
  FOREIGN KEY (Phone_ID) REFERENCES phone(Phone_ID),
  FOREIGN KEY (Market_ID) REFERENCES market(Market_ID)
);

------------------------------------------------------------------------------------------
database_id: store_product
database schema :
CREATE TABLE product (
  product_id INTEGER PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

CREATE TABLE store (
  Store_ID INTEGER PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking REAL
);

CREATE TABLE district (
  District_ID INTEGER PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE store_product (
  Store_ID INTEGER PRIMARY KEY,
  Product_ID REAL,
  FOREIGN KEY (Store_ID) REFERENCES store(Store_ID)
);

CREATE TABLE store_district (
  Store_ID INTEGER PRIMARY KEY,
  District_ID INTEGER,
  FOREIGN KEY (District_ID) REFERENCES district(District_ID),
  FOREIGN KEY (Store_ID) REFERENCES store(Store_ID)
);

------------------------------------------------------------------------------------------
database_id: assets_maintenance
database schema :
CREATE TABLE Third_Party_Companies (
  company_id INTEGER PRIMARY KEY,
  company_type TEXT,
  company_name TEXT,
  company_address TEXT,
  other_company_details TEXT
);

CREATE TABLE Maintenance_Contracts (
  maintenance_contract_id INTEGER PRIMARY KEY,
  maintenance_contract_company_id INTEGER,
  contract_start_date DATETIME,
  contract_end_date DATETIME,
  other_contract_details TEXT,
  FOREIGN KEY (maintenance_contract_company_id) REFERENCES Third_Party_Companies(company_id)
);

CREATE TABLE Parts (
  part_id INTEGER PRIMARY KEY,
  part_name TEXT,
  chargeable_yn TEXT,
  chargeable_amount TEXT,
  other_part_details TEXT
);

CREATE TABLE Skills (
  skill_id INTEGER PRIMARY KEY,
  skill_code TEXT,
  skill_description TEXT
);

CREATE TABLE Staff (
  staff_id INTEGER PRIMARY KEY,
  staff_name TEXT,
  gender TEXT,
  other_staff_details TEXT
);

CREATE TABLE Assets (
  asset_id INTEGER PRIMARY KEY,
  maintenance_contract_id INTEGER,
  supplier_company_id INTEGER,
  asset_details TEXT,
  asset_make TEXT,
  asset_model TEXT,
  asset_acquired_date DATETIME,
  asset_disposed_date DATETIME,
  other_asset_details TEXT,
  FOREIGN KEY (supplier_company_id) REFERENCES Third_Party_Companies(company_id),
  FOREIGN KEY (maintenance_contract_id) REFERENCES Maintenance_Contracts(maintenance_contract_id)
);

CREATE TABLE Asset_Parts (
  asset_id INTEGER,
  part_id INTEGER,
  FOREIGN KEY (asset_id) REFERENCES Assets(asset_id),
  FOREIGN KEY (part_id) REFERENCES Parts(part_id)
);

CREATE TABLE Maintenance_Engineers (
  engineer_id INTEGER PRIMARY KEY,
  company_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  other_details TEXT,
  FOREIGN KEY (company_id) REFERENCES Third_Party_Companies(company_id)
);

CREATE TABLE Engineer_Skills (
  engineer_id INTEGER,
  skill_id INTEGER,
  FOREIGN KEY (skill_id) REFERENCES Skills(skill_id),
  FOREIGN KEY (engineer_id) REFERENCES Maintenance_Engineers(engineer_id)
);

CREATE TABLE Fault_Log (
  fault_log_entry_id INTEGER PRIMARY KEY,
  asset_id INTEGER,
  recorded_by_staff_id INTEGER,
  fault_log_entry_datetime DATETIME,
  fault_description TEXT,
  other_fault_details TEXT,
  FOREIGN KEY (recorded_by_staff_id) REFERENCES Staff(staff_id),
  FOREIGN KEY (asset_id) REFERENCES Assets(asset_id)
);

CREATE TABLE Engineer_Visits (
  engineer_visit_id INTEGER PRIMARY KEY,
  contact_staff_id INTEGER,
  engineer_id INTEGER,
  fault_log_entry_id INTEGER,
  fault_status TEXT,
  visit_start_datetime DATETIME,
  visit_end_datetime DATETIME,
  other_visit_details TEXT,
  FOREIGN KEY (contact_staff_id) REFERENCES Staff(staff_id),
  FOREIGN KEY (engineer_id) REFERENCES Maintenance_Engineers(engineer_id),
  FOREIGN KEY (fault_log_entry_id) REFERENCES Fault_Log(fault_log_entry_id)
);

CREATE TABLE Part_Faults (
  part_fault_id INTEGER PRIMARY KEY,
  part_id INTEGER,
  fault_short_name TEXT,
  fault_description TEXT,
  other_fault_details TEXT,
  FOREIGN KEY (part_id) REFERENCES Parts(part_id)
);

CREATE TABLE Fault_Log_Parts (
  fault_log_entry_id INTEGER,
  part_fault_id INTEGER,
  fault_status TEXT,
  FOREIGN KEY (fault_log_entry_id) REFERENCES Fault_Log(fault_log_entry_id),
  FOREIGN KEY (part_fault_id) REFERENCES Part_Faults(part_fault_id)
);

CREATE TABLE Skills_Required_To_Fix (
  part_fault_id INTEGER,
  skill_id INTEGER,
  FOREIGN KEY (skill_id) REFERENCES Skills(skill_id),
  FOREIGN KEY (part_fault_id) REFERENCES Part_Faults(part_fault_id)
);

------------------------------------------------------------------------------------------
database_id: student_assessment
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  line_1 TEXT,
  line_2 TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT
);

CREATE TABLE People (
  person_id INTEGER PRIMARY KEY,
  first_name TEXT,
  middle_name TEXT,
  last_name TEXT,
  cell_mobile_number TEXT,
  email_address TEXT,
  login_name TEXT,
  password TEXT
);

CREATE TABLE Students (
  student_id INTEGER PRIMARY KEY,
  student_details TEXT,
  FOREIGN KEY (student_id) REFERENCES People(person_id)
);

CREATE TABLE Courses (
  course_id TEXT PRIMARY KEY,
  course_name TEXT,
  course_description TEXT,
  other_details TEXT
);

CREATE TABLE People_Addresses (
  person_address_id INTEGER PRIMARY KEY,
  person_id INTEGER,
  address_id INTEGER,
  date_from DATETIME,
  date_to DATETIME,
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id),
  FOREIGN KEY (person_id) REFERENCES People(person_id)
);

CREATE TABLE Student_Course_Registrations (
  student_id INTEGER PRIMARY KEY,
  course_id INTEGER,
  registration_date DATETIME,
  FOREIGN KEY (course_id) REFERENCES Courses(course_id),
  FOREIGN KEY (student_id) REFERENCES Students(student_id)
);

CREATE TABLE Student_Course_Attendance (
  student_id INTEGER PRIMARY KEY,
  course_id INTEGER,
  date_of_attendance DATETIME,
  FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id),
  FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)
);

CREATE TABLE Candidates (
  candidate_id INTEGER PRIMARY KEY,
  candidate_details TEXT,
  FOREIGN KEY (candidate_id) REFERENCES People(person_id)
);

CREATE TABLE Candidate_Assessments (
  candidate_id INTEGER PRIMARY KEY,
  qualification TEXT,
  assessment_date DATETIME,
  asessment_outcome_code TEXT,
  FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id)
);

------------------------------------------------------------------------------------------
database_id: dog_kennels
database schema :
CREATE TABLE Breeds (
  breed_code TEXT PRIMARY KEY,
  breed_name TEXT
);

CREATE TABLE Charges (
  charge_id INTEGER PRIMARY KEY,
  charge_type TEXT,
  charge_amount REAL
);

CREATE TABLE Sizes (
  size_code TEXT PRIMARY KEY,
  size_description TEXT
);

CREATE TABLE Treatment_Types (
  treatment_type_code TEXT PRIMARY KEY,
  treatment_type_description TEXT
);

CREATE TABLE Owners (
  owner_id INTEGER PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  street TEXT,
  city TEXT,
  state TEXT,
  zip_code TEXT,
  email_address TEXT,
  home_phone TEXT,
  cell_number TEXT
);

CREATE TABLE Dogs (
  dog_id INTEGER PRIMARY KEY,
  owner_id INTEGER,
  abandoned_yn TEXT,
  breed_code TEXT,
  size_code TEXT,
  name TEXT,
  age TEXT,
  date_of_birth DATETIME,
  gender TEXT,
  weight TEXT,
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME,
  FOREIGN KEY (owner_id) REFERENCES Owners(owner_id),
  FOREIGN KEY (owner_id) REFERENCES Owners(owner_id),
  FOREIGN KEY (size_code) REFERENCES Sizes(size_code),
  FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)
);

CREATE TABLE Professionals (
  professional_id INTEGER PRIMARY KEY,
  role_code TEXT,
  first_name TEXT,
  street TEXT,
  city TEXT,
  state TEXT,
  zip_code TEXT,
  last_name TEXT,
  email_address TEXT,
  home_phone TEXT,
  cell_number TEXT
);

CREATE TABLE Treatments (
  treatment_id INTEGER PRIMARY KEY,
  dog_id INTEGER,
  professional_id INTEGER,
  treatment_type_code TEXT,
  date_of_treatment DATETIME,
  cost_of_treatment REAL,
  FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id),
  FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id),
  FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code)
);

------------------------------------------------------------------------------------------
database_id: music_1
database schema :
CREATE TABLE genre (
  g_name TEXT PRIMARY KEY,
  rating TEXT,
  most_popular_in TEXT
);

CREATE TABLE artist (
  artist_name TEXT PRIMARY KEY,
  country TEXT,
  gender TEXT,
  preferred_genre TEXT,
  FOREIGN KEY (preferred_genre) REFERENCES genre(g_name)
);

CREATE TABLE files (
  f_id INTEGER PRIMARY KEY,
  artist_name TEXT,
  file_size TEXT,
  duration TEXT,
  formats TEXT,
  FOREIGN KEY (artist_name) REFERENCES artist(artist_name)
);

CREATE TABLE song (
  song_name TEXT PRIMARY KEY,
  artist_name TEXT,
  country TEXT,
  f_id INTEGER,
  genre_is TEXT,
  rating REAL,
  languages TEXT,
  releasedate DATETIME,
  resolution REAL,
  FOREIGN KEY (genre_is) REFERENCES genre(g_name),
  FOREIGN KEY (f_id) REFERENCES files(f_id),
  FOREIGN KEY (artist_name) REFERENCES artist(artist_name)
);

------------------------------------------------------------------------------------------
database_id: company_employee
database schema :
CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Age REAL,
  Name TEXT,
  Nationality TEXT,
  Graduation_College TEXT
);

CREATE TABLE company (
  Company_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_in_Billion REAL,
  Profits_in_Billion REAL,
  Assets_in_Billion REAL,
  Market_Value_in_Billion REAL
);

CREATE TABLE employment (
  Company_ID INTEGER PRIMARY KEY,
  People_ID INTEGER,
  Year_working REAL,
  FOREIGN KEY (People_ID) REFERENCES people(People_ID),
  FOREIGN KEY (Company_ID) REFERENCES company(Company_ID)
);

------------------------------------------------------------------------------------------
database_id: farm
database schema :
CREATE TABLE city (
  City_ID INTEGER PRIMARY KEY,
  Official_Name TEXT,
  Status TEXT,
  Area_km_2 REAL,
  Population REAL,
  Census_Ranking TEXT
);

CREATE TABLE farm (
  Farm_ID INTEGER PRIMARY KEY,
  Year REAL,
  Total_Horses REAL,
  Working_Horses REAL,
  Total_Cattle REAL,
  Oxen REAL,
  Bulls REAL,
  Cows REAL,
  Pigs REAL,
  Sheep_and_Goats REAL
);

CREATE TABLE farm_competition (
  Competition_ID INTEGER PRIMARY KEY,
  Year REAL,
  Theme TEXT,
  Host_city_ID INTEGER,
  Hosts TEXT,
  FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)
);

CREATE TABLE competition_record (
  Competition_ID INTEGER PRIMARY KEY,
  Farm_ID INTEGER,
  Rank REAL,
  FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID),
  FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID)
);

------------------------------------------------------------------------------------------
database_id: solvency_ii
database schema :
CREATE TABLE Addresses (
  Address_ID INTEGER PRIMARY KEY,
  address_details TEXT
);

CREATE TABLE Locations (
  Location_ID INTEGER PRIMARY KEY,
  Other_Details TEXT
);

CREATE TABLE Products (
  Product_ID INTEGER PRIMARY KEY,
  Product_Type_Code TEXT,
  Product_Name TEXT,
  Product_Price REAL
);

CREATE TABLE Parties (
  Party_ID INTEGER PRIMARY KEY,
  Party_Details TEXT
);

CREATE TABLE Assets (
  Asset_ID INTEGER PRIMARY KEY,
  Other_Details TEXT
);

CREATE TABLE Channels (
  Channel_ID INTEGER PRIMARY KEY,
  Other_Details TEXT
);

CREATE TABLE Finances (
  Finance_ID INTEGER PRIMARY KEY,
  Other_Details TEXT
);

CREATE TABLE Events (
  Event_ID INTEGER PRIMARY KEY,
  Address_ID INTEGER,
  Channel_ID REAL,
  Event_Type_Code TEXT,
  Finance_ID INTEGER,
  Location_ID INTEGER,
  FOREIGN KEY (Finance_ID) REFERENCES Finances(Finance_ID),
  FOREIGN KEY (Address_ID) REFERENCES Addresses(Address_ID),
  FOREIGN KEY (Location_ID) REFERENCES Locations(Location_ID)
);

CREATE TABLE Products_in_Events (
  Product_in_Event_ID INTEGER PRIMARY KEY,
  Event_ID INTEGER,
  Product_ID INTEGER,
  FOREIGN KEY (Product_ID) REFERENCES Products(Product_ID),
  FOREIGN KEY (Event_ID) REFERENCES Events(Event_ID)
);

CREATE TABLE Parties_in_Events (
  Party_ID INTEGER PRIMARY KEY,
  Event_ID INTEGER,
  Role_Code TEXT,
  FOREIGN KEY (Event_ID) REFERENCES Events(Event_ID),
  FOREIGN KEY (Party_ID) REFERENCES Parties(Party_ID)
);

CREATE TABLE Agreements (
  Document_ID INTEGER PRIMARY KEY,
  Event_ID INTEGER,
  FOREIGN KEY (Event_ID) REFERENCES Events(Event_ID)
);

CREATE TABLE Assets_in_Events (
  Asset_ID INTEGER PRIMARY KEY,
  Event_ID INTEGER,
  FOREIGN KEY (Event_ID) REFERENCES Events(Event_ID),
  FOREIGN KEY (Event_ID) REFERENCES Events(Event_ID)
);

------------------------------------------------------------------------------------------
database_id: city_record
database schema :
CREATE TABLE city (
  City_ID INTEGER PRIMARY KEY,
  City TEXT,
  Hanzi TEXT,
  Hanyu_Pinyin TEXT,
  Regional_Population REAL,
  GDP REAL
);

CREATE TABLE match (
  Match_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Score TEXT,
  Result TEXT,
  Competition TEXT
);

CREATE TABLE temperature (
  City_ID INTEGER PRIMARY KEY,
  Jan REAL,
  Feb REAL,
  Mar REAL,
  Apr REAL,
  Jun REAL,
  Jul REAL,
  Aug REAL,
  Sep REAL,
  Oct REAL,
  Nov REAL,
  Dec REAL,
  FOREIGN KEY (City_ID) REFERENCES city(City_ID)
);

CREATE TABLE hosting_city (
  Year INTEGER PRIMARY KEY,
  Match_ID INTEGER,
  Host_City TEXT,
  FOREIGN KEY (Match_ID) REFERENCES match(Match_ID),
  FOREIGN KEY (Host_City) REFERENCES city(City_ID)
);

------------------------------------------------------------------------------------------
database_id: swimming
database schema :
CREATE TABLE swimmer (
  ID INTEGER PRIMARY KEY,
  name TEXT,
  Nationality TEXT,
  meter_100 REAL,
  meter_200 TEXT,
  meter_300 TEXT,
  meter_400 TEXT,
  meter_500 TEXT,
  meter_600 TEXT,
  meter_700 TEXT,
  Time TEXT
);

CREATE TABLE stadium (
  ID INTEGER PRIMARY KEY,
  name TEXT,
  Capacity REAL,
  City TEXT,
  Country TEXT,
  Opening_year REAL
);

CREATE TABLE event (
  ID INTEGER PRIMARY KEY,
  Name TEXT,
  Stadium_ID INTEGER,
  Year TEXT,
  FOREIGN KEY (Stadium_ID) REFERENCES stadium(ID)
);

CREATE TABLE record (
  ID REAL,
  Result TEXT,
  Swimmer_ID INTEGER PRIMARY KEY,
  Event_ID INTEGER,
  FOREIGN KEY (Swimmer_ID) REFERENCES swimmer(ID),
  FOREIGN KEY (Event_ID) REFERENCES event(ID)
);

------------------------------------------------------------------------------------------
database_id: flight_2
database schema :
CREATE TABLE airlines (
  uid INTEGER PRIMARY KEY,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE airports (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE flights (
  Airline INTEGER PRIMARY KEY,
  FlightNo REAL,
  SourceAirport TEXT,
  DestAirport TEXT,
  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode),
  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode)
);

------------------------------------------------------------------------------------------
database_id: election
database schema :
CREATE TABLE county (
  County_Id INTEGER PRIMARY KEY,
  County_name TEXT,
  Population REAL,
  Zip_code TEXT
);

CREATE TABLE party (
  Party_ID INTEGER PRIMARY KEY,
  Year REAL,
  Party TEXT,
  Governor TEXT,
  Lieutenant_Governor TEXT,
  Comptroller TEXT,
  Attorney_General TEXT,
  US_Senate TEXT
);

CREATE TABLE election (
  Election_ID INTEGER PRIMARY KEY,
  Counties_Represented TEXT,
  District INTEGER,
  Delegate TEXT,
  Party INTEGER,
  First_Elected REAL,
  Committee TEXT,
  FOREIGN KEY (District) REFERENCES county(County_Id),
  FOREIGN KEY (Party) REFERENCES party(Party_ID)
);

------------------------------------------------------------------------------------------
database_id: manufactory_1
database schema :
CREATE TABLE Manufacturers (
  Code INTEGER PRIMARY KEY,
  Name TEXT,
  Headquarter TEXT,
  Founder TEXT,
  Revenue REAL
);

CREATE TABLE Products (
  Code INTEGER PRIMARY KEY,
  Name TEXT,
  Price REAL,
  Manufacturer INTEGER,
  FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code)
);

------------------------------------------------------------------------------------------
database_id: debate
database schema :
CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  District TEXT,
  Name TEXT,
  Party TEXT,
  Age REAL
);

CREATE TABLE debate (
  Debate_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Num_of_Audience REAL
);

CREATE TABLE debate_people (
  Debate_ID INTEGER PRIMARY KEY,
  Affirmative INTEGER,
  Negative INTEGER,
  If_Affirmative_Win TEXT,
  FOREIGN KEY (Negative) REFERENCES people(People_ID),
  FOREIGN KEY (Affirmative) REFERENCES people(People_ID),
  FOREIGN KEY (Debate_ID) REFERENCES debate(Debate_ID)
);

------------------------------------------------------------------------------------------
database_id: network_2
database schema :
CREATE TABLE Person (
  name TEXT PRIMARY KEY,
  age REAL,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE PersonFriend (
  name TEXT,
  friend TEXT,
  year REAL,
  FOREIGN KEY (friend) REFERENCES Person(name),
  FOREIGN KEY (name) REFERENCES Person(name)
);

------------------------------------------------------------------------------------------
database_id: local_govt_in_alabama
database schema :
CREATE TABLE Services (
  Service_ID INTEGER PRIMARY KEY,
  Service_Type_Code TEXT
);

CREATE TABLE Participants (
  Participant_ID INTEGER PRIMARY KEY,
  Participant_Type_Code TEXT,
  Participant_Details TEXT
);

CREATE TABLE Events (
  Event_ID INTEGER PRIMARY KEY,
  Service_ID INTEGER,
  Event_Details TEXT,
  FOREIGN KEY (Service_ID) REFERENCES Services(Service_ID)
);

CREATE TABLE Participants_in_Events (
  Event_ID INTEGER PRIMARY KEY,
  Participant_ID INTEGER,
  FOREIGN KEY (Event_ID) REFERENCES Events(Event_ID),
  FOREIGN KEY (Participant_ID) REFERENCES Participants(Participant_ID)
);

------------------------------------------------------------------------------------------
database_id: climbing
database schema :
CREATE TABLE mountain (
  Mountain_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Prominence REAL,
  Range TEXT,
  Country TEXT
);

CREATE TABLE climber (
  Climber_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Time TEXT,
  Points REAL,
  Mountain_ID INTEGER,
  FOREIGN KEY (Mountain_ID) REFERENCES mountain(Mountain_ID)
);

------------------------------------------------------------------------------------------
database_id: e_learning
database schema :
CREATE TABLE Course_Authors_and_Tutors (
  author_id INTEGER PRIMARY KEY,
  author_tutor_ATB TEXT,
  login_name TEXT,
  password TEXT,
  personal_name TEXT,
  middle_name TEXT,
  family_name TEXT,
  gender_mf TEXT,
  address_line_1 TEXT
);

CREATE TABLE Students (
  student_id INTEGER PRIMARY KEY,
  date_of_registration DATETIME,
  date_of_latest_logon DATETIME,
  login_name TEXT,
  password TEXT,
  personal_name TEXT,
  middle_name TEXT,
  family_name TEXT
);

CREATE TABLE Subjects (
  subject_id INTEGER PRIMARY KEY,
  subject_name TEXT
);

CREATE TABLE Courses (
  course_id INTEGER PRIMARY KEY,
  author_id INTEGER,
  subject_id INTEGER,
  course_name TEXT,
  course_description TEXT,
  FOREIGN KEY (subject_id) REFERENCES Subjects(subject_id),
  FOREIGN KEY (author_id) REFERENCES Course_Authors_and_Tutors(author_id)
);

CREATE TABLE Student_Course_Enrolment (
  registration_id INTEGER PRIMARY KEY,
  student_id INTEGER,
  course_id INTEGER,
  date_of_enrolment DATETIME,
  date_of_completion DATETIME,
  FOREIGN KEY (student_id) REFERENCES Students(student_id),
  FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

CREATE TABLE Student_Tests_Taken (
  registration_id INTEGER,
  date_test_taken DATETIME,
  test_result TEXT,
  FOREIGN KEY (registration_id) REFERENCES Student_Course_Enrolment(registration_id)
);

------------------------------------------------------------------------------------------
database_id: scientist_1
database schema :
CREATE TABLE Scientists (
  SSN INTEGER PRIMARY KEY,
  Name TEXT
);

CREATE TABLE Projects (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Hours REAL
);

CREATE TABLE AssignedTo (
  Scientist INTEGER PRIMARY KEY,
  Project TEXT,
  FOREIGN KEY (Project) REFERENCES Projects(Code),
  FOREIGN KEY (Scientist) REFERENCES Scientists(SSN)
);

------------------------------------------------------------------------------------------
database_id: ship_1
database schema :
CREATE TABLE captain (
  Captain_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Ship_ID INTEGER,
  age TEXT,
  Class TEXT,
  Rank TEXT,
  FOREIGN KEY (Ship_ID) REFERENCES Ship(Ship_ID)
);

CREATE TABLE Ship (
  Ship_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

------------------------------------------------------------------------------------------
database_id: entertainment_awards
database schema :
CREATE TABLE festival_detail (
  Festival_ID INTEGER PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year REAL,
  Num_of_Audience REAL
);

CREATE TABLE artwork (
  Artwork_ID INTEGER PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

CREATE TABLE nomination (
  Artwork_ID INTEGER PRIMARY KEY,
  Festival_ID INTEGER,
  Result TEXT,
  FOREIGN KEY (Festival_ID) REFERENCES festival_detail(Festival_ID),
  FOREIGN KEY (Artwork_ID) REFERENCES artwork(Artwork_ID)
);

------------------------------------------------------------------------------------------
database_id: allergy_1
database schema :
CREATE TABLE Allergy_Type (
  Allergy TEXT PRIMARY KEY,
  AllergyType TEXT
);

CREATE TABLE Has_Allergy (
  StuID INTEGER,
  Allergy TEXT,
  FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy),
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

------------------------------------------------------------------------------------------
database_id: imdb
database schema :
CREATE TABLE actor (
  aid INTEGER PRIMARY KEY,
  gender TEXT,
  name TEXT,
  nationality TEXT,
  birth_city TEXT,
  birth_year REAL
);

CREATE TABLE copyright (
  id INTEGER PRIMARY KEY,
  msid REAL,
  cid REAL
);

CREATE TABLE cast (
  id INTEGER PRIMARY KEY,
  msid INTEGER,
  aid INTEGER,
  role REAL,
  FOREIGN KEY (msid) REFERENCES copyright(msid),
  FOREIGN KEY (aid) REFERENCES actor(aid)
);

CREATE TABLE genre (
  gid INTEGER PRIMARY KEY,
  genre TEXT
);

CREATE TABLE classification (
  id INTEGER PRIMARY KEY,
  msid INTEGER,
  gid INTEGER,
  FOREIGN KEY (msid) REFERENCES copyright(msid),
  FOREIGN KEY (gid) REFERENCES genre(gid)
);

CREATE TABLE company (
  id INTEGER PRIMARY KEY,
  name TEXT,
  country_code TEXT
);

CREATE TABLE director (
  did INTEGER PRIMARY KEY,
  gender TEXT,
  name TEXT,
  nationality TEXT,
  birth_city TEXT,
  birth_year REAL
);

CREATE TABLE producer (
  pid INTEGER PRIMARY KEY,
  gender TEXT,
  name TEXT,
  nationality TEXT,
  birth_city TEXT,
  birth_year REAL
);

CREATE TABLE directed_by (
  id INTEGER PRIMARY KEY,
  msid INTEGER,
  did INTEGER,
  FOREIGN KEY (did) REFERENCES director(did),
  FOREIGN KEY (msid) REFERENCES copyright(msid)
);

CREATE TABLE keyword (
  id INTEGER PRIMARY KEY,
  keyword TEXT
);

CREATE TABLE made_by (
  id INTEGER PRIMARY KEY,
  msid INTEGER,
  pid INTEGER,
  FOREIGN KEY (pid) REFERENCES producer(pid),
  FOREIGN KEY (msid) REFERENCES copyright(msid)
);

CREATE TABLE movie (
  mid INTEGER PRIMARY KEY,
  title TEXT,
  release_year REAL,
  title_aka TEXT,
  budget TEXT
);

CREATE TABLE tags (
  id INTEGER PRIMARY KEY,
  msid INTEGER,
  kid REAL,
  FOREIGN KEY (msid) REFERENCES copyright(msid)
);

CREATE TABLE tv_series (
  sid INTEGER PRIMARY KEY,
  title TEXT,
  release_year REAL,
  num_of_seasons REAL,
  num_of_episodes REAL,
  title_aka TEXT,
  budget TEXT
);

CREATE TABLE writer (
  wid INTEGER PRIMARY KEY,
  gender TEXT,
  name REAL,
  nationality REAL,
  num_of_episodes REAL,
  birth_city TEXT,
  birth_year REAL
);

CREATE TABLE written_by (
  id REAL,
  msid INTEGER,
  wid INTEGER,
  FOREIGN KEY (wid) REFERENCES writer(wid),
  FOREIGN KEY (msid) REFERENCES copyright(msid)
);

------------------------------------------------------------------------------------------
database_id: products_for_hire
database schema :
CREATE TABLE Discount_Coupons (
  coupon_id INTEGER PRIMARY KEY,
  date_issued DATETIME,
  coupon_amount REAL
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  coupon_id INTEGER,
  good_or_bad_customer TEXT,
  first_name TEXT,
  last_name TEXT,
  gender_mf TEXT,
  date_became_customer DATETIME,
  date_last_hire DATETIME,
  FOREIGN KEY (coupon_id) REFERENCES Discount_Coupons(coupon_id)
);

CREATE TABLE Bookings (
  booking_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  booking_status_code TEXT,
  returned_damaged_yn TEXT,
  booking_start_date DATETIME,
  booking_end_date DATETIME,
  count_hired TEXT,
  amount_payable REAL,
  amount_of_discount REAL,
  amount_outstanding REAL,
  amount_of_refund REAL,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Products_for_Hire (
  product_id INTEGER PRIMARY KEY,
  product_type_code TEXT,
  daily_hire_cost REAL,
  product_name TEXT,
  product_description TEXT
);

CREATE TABLE Payments (
  payment_id INTEGER PRIMARY KEY,
  booking_id INTEGER,
  customer_id INTEGER,
  payment_type_code TEXT,
  amount_paid_in_full_yn TEXT,
  payment_date DATETIME,
  amount_due REAL,
  amount_paid REAL,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id)
);

CREATE TABLE Products_Booked (
  booking_id INTEGER PRIMARY KEY,
  product_id INTEGER,
  returned_yn TEXT,
  returned_late_yn TEXT,
  booked_count REAL,
  booked_amount REAL,
  FOREIGN KEY (product_id) REFERENCES Products_for_Hire(product_id),
  FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id)
);

CREATE TABLE View_Product_Availability (
  product_id INTEGER,
  booking_id INTEGER,
  status_date DATETIME PRIMARY KEY,
  available_yn TEXT,
  FOREIGN KEY (product_id) REFERENCES Products_for_Hire(product_id),
  FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id)
);

------------------------------------------------------------------------------------------
database_id: candidate_poll
database schema :
CREATE TABLE candidate (
  Candidate_ID INTEGER PRIMARY KEY,
  People_ID INTEGER,
  Poll_Source TEXT,
  Date TEXT,
  Support_rate REAL,
  Consider_rate REAL,
  Oppose_rate REAL,
  Unsure_rate REAL,
  FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);

CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Sex TEXT,
  Name TEXT,
  Date_of_Birth TEXT,
  Height REAL,
  Weight REAL
);

------------------------------------------------------------------------------------------
database_id: chinook_1
database schema :
CREATE TABLE Album (
  AlbumId INTEGER PRIMARY KEY,
  Title TEXT,
  ArtistId INTEGER,
  FOREIGN KEY (ArtistId) REFERENCES Artist(ArtistId)
);

CREATE TABLE Artist (
  ArtistId INTEGER PRIMARY KEY,
  Name TEXT
);

CREATE TABLE Customer (
  CustomerId INTEGER PRIMARY KEY,
  FirstName TEXT,
  LastName TEXT,
  Company TEXT,
  Address TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  PostalCode TEXT,
  Phone TEXT,
  Fax TEXT,
  Email TEXT,
  SupportRepId INTEGER,
  FOREIGN KEY (SupportRepId) REFERENCES Employee(EmployeeId)
);

CREATE TABLE Employee (
  EmployeeId INTEGER PRIMARY KEY,
  LastName TEXT,
  FirstName TEXT,
  Title TEXT,
  ReportsTo INTEGER,
  BirthDate DATETIME,
  HireDate DATETIME,
  Address TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  PostalCode TEXT,
  Phone TEXT,
  Fax TEXT,
  Email TEXT,
  FOREIGN KEY (ReportsTo) REFERENCES Employee(EmployeeId)
);

CREATE TABLE Genre (
  GenreId INTEGER PRIMARY KEY,
  Name TEXT
);

CREATE TABLE Invoice (
  InvoiceId INTEGER PRIMARY KEY,
  CustomerId INTEGER,
  InvoiceDate DATETIME,
  BillingAddress TEXT,
  BillingCity TEXT,
  BillingState TEXT,
  BillingCountry TEXT,
  BillingPostalCode TEXT,
  Total REAL,
  FOREIGN KEY (CustomerId) REFERENCES Customer(CustomerId)
);

CREATE TABLE InvoiceLine (
  InvoiceLineId INTEGER PRIMARY KEY,
  InvoiceId INTEGER,
  TrackId INTEGER,
  UnitPrice REAL,
  Quantity REAL,
  FOREIGN KEY (TrackId) REFERENCES Track(TrackId),
  FOREIGN KEY (InvoiceId) REFERENCES Invoice(InvoiceId)
);

CREATE TABLE MediaType (
  MediaTypeId INTEGER PRIMARY KEY,
  Name TEXT
);

CREATE TABLE Playlist (
  PlaylistId INTEGER PRIMARY KEY,
  Name TEXT
);

CREATE TABLE PlaylistTrack (
  PlaylistId INTEGER PRIMARY KEY,
  TrackId INTEGER,
  FOREIGN KEY (TrackId) REFERENCES Track(TrackId),
  FOREIGN KEY (PlaylistId) REFERENCES Playlist(PlaylistId)
);

CREATE TABLE Track (
  TrackId INTEGER PRIMARY KEY,
  Name TEXT,
  AlbumId INTEGER,
  MediaTypeId INTEGER,
  GenreId INTEGER,
  Composer TEXT,
  Milliseconds REAL,
  Bytes REAL,
  UnitPrice REAL,
  FOREIGN KEY (MediaTypeId) REFERENCES MediaType(MediaTypeId),
  FOREIGN KEY (GenreId) REFERENCES Genre(GenreId),
  FOREIGN KEY (AlbumId) REFERENCES Album(AlbumId)
);

------------------------------------------------------------------------------------------
database_id: flight_4
database schema :
CREATE TABLE routes (
  rid INTEGER PRIMARY KEY,
  dst_apid INTEGER,
  dst_ap TEXT,
  src_apid INTEGER,
  src_ap TEXT,
  alid INTEGER,
  airline TEXT,
  codeshare TEXT,
  FOREIGN KEY (alid) REFERENCES airlines(alid),
  FOREIGN KEY (src_apid) REFERENCES airports(apid),
  FOREIGN KEY (dst_apid) REFERENCES airports(apid)
);

CREATE TABLE airports (
  apid INTEGER PRIMARY KEY,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation REAL,
  iata TEXT,
  icao TEXT
);

CREATE TABLE airlines (
  alid INTEGER PRIMARY KEY,
  name TEXT,
  iata TEXT,
  icao TEXT,
  callsign TEXT,
  country TEXT,
  active TEXT
);

------------------------------------------------------------------------------------------
database_id: pets_1
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Has_Pet (
  StuID INTEGER,
  PetID INTEGER,
  FOREIGN KEY (StuID) REFERENCES Student(StuID),
  FOREIGN KEY (PetID) REFERENCES Pets(PetID)
);

CREATE TABLE Pets (
  PetID INTEGER PRIMARY KEY,
  PetType TEXT,
  pet_age REAL,
  weight REAL
);

------------------------------------------------------------------------------------------
database_id: dorm_1
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Dorm (
  dormid REAL,
  dorm_name TEXT,
  student_capacity REAL,
  gender TEXT
);

CREATE TABLE Dorm_amenity (
  amenid REAL,
  amenity_name TEXT
);

CREATE TABLE Has_amenity (
  dormid INTEGER,
  amenid INTEGER,
  FOREIGN KEY (amenid) REFERENCES Dorm_amenity(amenid),
  FOREIGN KEY (dormid) REFERENCES Dorm(dormid)
);

CREATE TABLE Lives_in (
  stuid INTEGER,
  dormid INTEGER,
  room_number REAL,
  FOREIGN KEY (dormid) REFERENCES Dorm(dormid),
  FOREIGN KEY (stuid) REFERENCES Student(StuID)
);

------------------------------------------------------------------------------------------
database_id: journal_committee
database schema :
CREATE TABLE journal (
  Journal_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Theme TEXT,
  Sales REAL
);

CREATE TABLE editor (
  Editor_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Age REAL
);

CREATE TABLE journal_committee (
  Editor_ID INTEGER PRIMARY KEY,
  Journal_ID INTEGER,
  Work_Type TEXT,
  FOREIGN KEY (Journal_ID) REFERENCES journal(Journal_ID),
  FOREIGN KEY (Editor_ID) REFERENCES editor(Editor_ID)
);

------------------------------------------------------------------------------------------
database_id: flight_1
database schema :
CREATE TABLE flight (
  flno INTEGER PRIMARY KEY,
  origin TEXT,
  destination TEXT,
  distance REAL,
  departure_date DATETIME,
  arrival_date DATETIME,
  price REAL,
  aid INTEGER,
  FOREIGN KEY (aid) REFERENCES aircraft(aid)
);

CREATE TABLE aircraft (
  aid INTEGER PRIMARY KEY,
  name TEXT,
  distance REAL
);

CREATE TABLE employee (
  eid INTEGER PRIMARY KEY,
  name TEXT,
  salary REAL
);

CREATE TABLE certificate (
  eid INTEGER PRIMARY KEY,
  aid INTEGER,
  FOREIGN KEY (aid) REFERENCES aircraft(aid),
  FOREIGN KEY (eid) REFERENCES employee(eid)
);

------------------------------------------------------------------------------------------
database_id: medicine_enzyme_interaction
database schema :
CREATE TABLE medicine (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE enzyme (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM REAL,
  Porphyria TEXT
);

CREATE TABLE medicine_enzyme_interaction (
  enzyme_id INTEGER PRIMARY KEY,
  medicine_id INTEGER,
  interaction_type TEXT,
  FOREIGN KEY (medicine_id) REFERENCES medicine(id),
  FOREIGN KEY (enzyme_id) REFERENCES enzyme(id)
);

------------------------------------------------------------------------------------------
database_id: local_govt_and_lot
database schema :
CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  customer_details TEXT
);

CREATE TABLE Properties (
  property_id INTEGER PRIMARY KEY,
  property_type_code TEXT,
  property_address TEXT,
  other_details TEXT
);

CREATE TABLE Residents (
  resident_id INTEGER PRIMARY KEY,
  property_id INTEGER,
  date_moved_in DATETIME,
  date_moved_out DATETIME,
  other_details TEXT,
  FOREIGN KEY (property_id) REFERENCES Properties(property_id)
);

CREATE TABLE Organizations (
  organization_id INTEGER PRIMARY KEY,
  parent_organization_id REAL,
  organization_details TEXT
);

CREATE TABLE Services (
  service_id INTEGER PRIMARY KEY,
  organization_id INTEGER,
  service_type_code TEXT,
  service_details TEXT,
  FOREIGN KEY (organization_id) REFERENCES Organizations(organization_id)
);

CREATE TABLE Residents_Services (
  resident_id INTEGER PRIMARY KEY,
  service_id INTEGER,
  date_moved_in DATETIME,
  property_id INTEGER,
  date_requested DATETIME,
  date_provided DATETIME,
  other_details TEXT,
  FOREIGN KEY (resident_id) REFERENCES Residents(resident_id),
  FOREIGN KEY (property_id) REFERENCES Residents(property_id),
  FOREIGN KEY (date_moved_in) REFERENCES Residents(date_moved_in),
  FOREIGN KEY (service_id) REFERENCES Services(service_id)
);

CREATE TABLE Things (
  thing_id INTEGER PRIMARY KEY,
  organization_id INTEGER,
  Type_of_Thing_Code TEXT,
  service_type_code TEXT,
  service_details TEXT,
  FOREIGN KEY (organization_id) REFERENCES Organizations(organization_id)
);

CREATE TABLE Customer_Events (
  Customer_Event_ID INTEGER PRIMARY KEY,
  customer_id INTEGER,
  date_moved_in DATETIME,
  property_id INTEGER,
  resident_id INTEGER,
  thing_id INTEGER,
  FOREIGN KEY (resident_id) REFERENCES Residents(resident_id),
  FOREIGN KEY (property_id) REFERENCES Residents(property_id),
  FOREIGN KEY (date_moved_in) REFERENCES Residents(date_moved_in),
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (thing_id) REFERENCES Things(thing_id)
);

CREATE TABLE Customer_Event_Notes (
  Customer_Event_Note_ID INTEGER PRIMARY KEY,
  Customer_Event_ID INTEGER,
  service_type_code TEXT,
  resident_id REAL,
  property_id REAL,
  date_moved_in DATETIME,
  FOREIGN KEY (Customer_Event_ID) REFERENCES Customer_Events(Customer_Event_ID)
);

CREATE TABLE Timed_Status_of_Things (
  thing_id INTEGER PRIMARY KEY,
  Date_and_Date DATETIME,
  Status_of_Thing_Code TEXT,
  FOREIGN KEY (thing_id) REFERENCES Things(thing_id)
);

CREATE TABLE Timed_Locations_of_Things (
  thing_id INTEGER PRIMARY KEY,
  Date_and_Time DATETIME,
  Location_Code TEXT,
  FOREIGN KEY (thing_id) REFERENCES Things(thing_id)
);

------------------------------------------------------------------------------------------
database_id: station_weather
database schema :
CREATE TABLE train (
  id INTEGER PRIMARY KEY,
  train_number REAL,
  name TEXT,
  origin TEXT,
  destination TEXT,
  time TEXT,
  interval TEXT
);

CREATE TABLE station (
  id INTEGER PRIMARY KEY,
  network_name TEXT,
  services TEXT,
  local_authority TEXT
);

CREATE TABLE route (
  train_id INTEGER PRIMARY KEY,
  station_id INTEGER,
  FOREIGN KEY (station_id) REFERENCES station(id),
  FOREIGN KEY (train_id) REFERENCES train(id)
);

CREATE TABLE weekly_weather (
  station_id INTEGER PRIMARY KEY,
  day_of_week TEXT,
  high_temperature REAL,
  low_temperature REAL,
  precipitation REAL,
  wind_speed_mph REAL,
  FOREIGN KEY (station_id) REFERENCES station(id)
);

------------------------------------------------------------------------------------------
database_id: shop_membership
database schema :
CREATE TABLE member (
  Member_ID INTEGER PRIMARY KEY,
  Card_Number TEXT,
  Name TEXT,
  Hometown TEXT,
  Level REAL
);

CREATE TABLE branch (
  Branch_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Open_year TEXT,
  Address_road TEXT,
  City TEXT,
  membership_amount TEXT
);

CREATE TABLE membership_register_branch (
  Member_ID INTEGER PRIMARY KEY,
  Branch_ID TEXT,
  Register_Year TEXT,
  FOREIGN KEY (Branch_ID) REFERENCES branch(Branch_ID),
  FOREIGN KEY (Member_ID) REFERENCES member(Member_ID)
);

CREATE TABLE purchase (
  Member_ID INTEGER PRIMARY KEY,
  Branch_ID TEXT,
  Year TEXT,
  Total_pounds REAL,
  FOREIGN KEY (Branch_ID) REFERENCES branch(Branch_ID),
  FOREIGN KEY (Member_ID) REFERENCES member(Member_ID)
);

------------------------------------------------------------------------------------------
database_id: driving_school
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  line_1_number_building TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT
);

CREATE TABLE Staff (
  staff_id INTEGER PRIMARY KEY,
  staff_address_id INTEGER,
  nickname TEXT,
  first_name TEXT,
  middle_name TEXT,
  last_name TEXT,
  date_of_birth DATETIME,
  date_joined_staff DATETIME,
  date_left_staff DATETIME,
  FOREIGN KEY (staff_address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Vehicles (
  vehicle_id INTEGER PRIMARY KEY,
  vehicle_details TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  customer_address_id INTEGER,
  customer_status_code TEXT,
  date_became_customer DATETIME,
  date_of_birth DATETIME,
  first_name TEXT,
  last_name TEXT,
  amount_outstanding REAL,
  email_address TEXT,
  phone_number TEXT,
  cell_mobile_phone_number TEXT,
  FOREIGN KEY (customer_address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Customer_Payments (
  customer_id INTEGER PRIMARY KEY,
  datetime_payment DATETIME,
  payment_method_code TEXT,
  amount_payment REAL,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Lessons (
  lesson_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  lesson_status_code TEXT,
  staff_id INTEGER,
  vehicle_id INTEGER,
  lesson_date DATETIME,
  lesson_time TEXT,
  price REAL,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (staff_id) REFERENCES Staff(staff_id),
  FOREIGN KEY (vehicle_id) REFERENCES Vehicles(vehicle_id)
);

------------------------------------------------------------------------------------------
database_id: concert_singer
database schema :
CREATE TABLE stadium (
  Stadium_ID INTEGER PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity REAL,
  Highest REAL,
  Lowest REAL,
  Average REAL
);

CREATE TABLE singer (
  Singer_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age REAL,
  Is_male TEXT
);

CREATE TABLE concert (
  concert_ID INTEGER PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT,
  Year TEXT,
  FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)
);

CREATE TABLE singer_in_concert (
  concert_ID INTEGER PRIMARY KEY,
  Singer_ID TEXT,
  FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID),
  FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID)
);

------------------------------------------------------------------------------------------
database_id: music_2
database schema :
CREATE TABLE Songs (
  SongId INTEGER PRIMARY KEY,
  Title TEXT
);

CREATE TABLE Albums (
  AId INTEGER PRIMARY KEY,
  Title TEXT,
  Year REAL,
  Label TEXT,
  Type TEXT
);

CREATE TABLE Band (
  Id INTEGER PRIMARY KEY,
  Firstname TEXT,
  Lastname TEXT
);

CREATE TABLE Instruments (
  SongId INTEGER PRIMARY KEY,
  BandmateId INTEGER,
  Instrument TEXT,
  FOREIGN KEY (BandmateId) REFERENCES Band(Id),
  FOREIGN KEY (SongId) REFERENCES Songs(SongId)
);

CREATE TABLE Performance (
  SongId INTEGER PRIMARY KEY,
  Bandmate INTEGER,
  StagePosition TEXT,
  FOREIGN KEY (Bandmate) REFERENCES Band(Id),
  FOREIGN KEY (SongId) REFERENCES Songs(SongId)
);

CREATE TABLE Tracklists (
  AlbumId INTEGER PRIMARY KEY,
  Position REAL,
  SongId INTEGER,
  FOREIGN KEY (AlbumId) REFERENCES Albums(AId),
  FOREIGN KEY (SongId) REFERENCES Songs(SongId)
);

CREATE TABLE Vocals (
  SongId INTEGER PRIMARY KEY,
  Bandmate INTEGER,
  Type TEXT,
  FOREIGN KEY (Bandmate) REFERENCES Band(Id),
  FOREIGN KEY (SongId) REFERENCES Songs(SongId)
);

------------------------------------------------------------------------------------------
database_id: sports_competition
database schema :
CREATE TABLE club (
  Club_ID INTEGER PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

CREATE TABLE club_rank (
  Rank INTEGER PRIMARY KEY,
  Club_ID INTEGER,
  Gold REAL,
  Silver REAL,
  Bronze REAL,
  Total REAL,
  FOREIGN KEY (Club_ID) REFERENCES club(Club_ID)
);

CREATE TABLE player (
  Player_ID INTEGER PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INTEGER,
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL,
  FOREIGN KEY (Club_ID) REFERENCES club(Club_ID)
);

CREATE TABLE competition (
  Competition_ID INTEGER PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

CREATE TABLE competition_result (
  Competition_ID INTEGER PRIMARY KEY,
  Club_ID_1 INTEGER,
  Club_ID_2 INTEGER,
  Score TEXT,
  FOREIGN KEY (Competition_ID) REFERENCES competition(Competition_ID),
  FOREIGN KEY (Club_ID_2) REFERENCES club(Club_ID),
  FOREIGN KEY (Club_ID_1) REFERENCES club(Club_ID)
);

------------------------------------------------------------------------------------------
database_id: railway
database schema :
CREATE TABLE railway (
  Railway_ID INTEGER PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

CREATE TABLE train (
  Train_ID INTEGER PRIMARY KEY,
  Train_Num TEXT,
  Name TEXT,
  "From" TEXT,
  Arrival TEXT,
  Railway_ID INTEGER,
  FOREIGN KEY (Railway_ID) REFERENCES railway(Railway_ID)
);

CREATE TABLE manager (
  Manager_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age REAL,
  Level REAL
);

CREATE TABLE railway_manage (
  Railway_ID INTEGER PRIMARY KEY,
  Manager_ID INTEGER,
  From_Year TEXT,
  FOREIGN KEY (Railway_ID) REFERENCES railway(Railway_ID),
  FOREIGN KEY (Manager_ID) REFERENCES manager(Manager_ID)
);

------------------------------------------------------------------------------------------
database_id: inn_1
database schema :
CREATE TABLE Rooms (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds REAL,
  bedType TEXT,
  maxOccupancy REAL,
  basePrice REAL,
  decor TEXT
);

CREATE TABLE Reservations (
  Code INTEGER PRIMARY KEY,
  Room TEXT,
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults REAL,
  Kids REAL,
  FOREIGN KEY (Room) REFERENCES Rooms(RoomId)
);

------------------------------------------------------------------------------------------
database_id: museum_visit
database schema :
CREATE TABLE museum (
  Museum_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Num_of_Staff REAL,
  Open_Year TEXT
);

CREATE TABLE visitor (
  ID INTEGER PRIMARY KEY,
  Name TEXT,
  Level_of_membership REAL,
  Age REAL
);

CREATE TABLE visit (
  Museum_ID INTEGER PRIMARY KEY,
  visitor_ID TEXT,
  Num_of_Ticket REAL,
  Total_spent REAL,
  FOREIGN KEY (visitor_ID) REFERENCES visitor(ID),
  FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID)
);

------------------------------------------------------------------------------------------
database_id: browser_web
database schema :
CREATE TABLE Web_client_accelerator (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE browser (
  id INTEGER PRIMARY KEY,
  name TEXT,
  market_share REAL
);

CREATE TABLE accelerator_compatible_browser (
  accelerator_id INTEGER PRIMARY KEY,
  browser_id INTEGER,
  compatible_since_year REAL,
  FOREIGN KEY (browser_id) REFERENCES browser(id),
  FOREIGN KEY (accelerator_id) REFERENCES Web_client_accelerator(id)
);

------------------------------------------------------------------------------------------
database_id: baseball_1
database schema :
CREATE TABLE all_star (
  player_id TEXT,
  year REAL,
  game_num REAL,
  game_id TEXT,
  team_id TEXT,
  league_id TEXT,
  gp REAL,
  starting_pos REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE appearances (
  year REAL,
  team_id TEXT,
  league_id TEXT,
  player_id TEXT,
  g_all REAL,
  gs REAL,
  g_batting REAL,
  g_defense REAL,
  g_p REAL,
  g_c REAL,
  g_1b REAL,
  g_2b REAL,
  g_3b REAL,
  g_ss REAL,
  g_lf REAL,
  g_cf REAL,
  g_rf REAL,
  g_of REAL,
  g_dh REAL,
  g_ph REAL,
  g_pr REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id),
  FOREIGN KEY (team_id) REFERENCES team(team_id)
);

CREATE TABLE manager_award (
  player_id TEXT,
  award_id TEXT,
  year REAL,
  league_id TEXT,
  tie TEXT,
  notes REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE player_award (
  player_id TEXT,
  award_id TEXT,
  year REAL,
  league_id TEXT,
  tie TEXT,
  notes TEXT,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE manager_award_vote (
  award_id TEXT,
  year REAL,
  league_id TEXT,
  player_id TEXT,
  points_won REAL,
  points_max REAL,
  votes_first REAL
);

CREATE TABLE player_award_vote (
  award_id TEXT,
  year REAL,
  league_id TEXT,
  player_id TEXT,
  points_won REAL,
  points_max REAL,
  votes_first REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE batting (
  player_id TEXT,
  year REAL,
  stint REAL,
  team_id TEXT,
  league_id TEXT,
  g REAL,
  ab REAL,
  r REAL,
  h REAL,
  double REAL,
  triple REAL,
  hr REAL,
  rbi REAL,
  sb REAL,
  cs REAL,
  bb REAL,
  so REAL,
  ibb REAL,
  hbp REAL,
  sh REAL,
  sf REAL,
  g_idp REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE batting_postseason (
  year REAL,
  round TEXT,
  player_id TEXT,
  team_id TEXT,
  league_id TEXT,
  g REAL,
  ab REAL,
  r REAL,
  h REAL,
  double REAL,
  triple REAL,
  hr REAL,
  rbi REAL,
  sb REAL,
  cs REAL,
  bb REAL,
  so REAL,
  ibb REAL,
  hbp REAL,
  sh REAL,
  sf REAL,
  g_idp REAL,
  FOREIGN KEY (team_id) REFERENCES team(team_id),
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE player_college (
  player_id TEXT,
  college_id TEXT,
  year REAL,
  FOREIGN KEY (college_id) REFERENCES college(college_id),
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE fielding (
  player_id TEXT,
  year REAL,
  stint REAL,
  team_id TEXT,
  league_id TEXT,
  pos TEXT,
  g REAL,
  gs REAL,
  inn_outs REAL,
  po REAL,
  a REAL,
  e REAL,
  dp REAL,
  pb REAL,
  wp REAL,
  sb REAL,
  cs REAL,
  zr REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE fielding_outfield (
  player_id TEXT,
  year REAL,
  stint REAL,
  glf REAL,
  gcf REAL,
  grf REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE fielding_postseason (
  player_id TEXT,
  year REAL,
  team_id TEXT,
  league_id TEXT,
  round TEXT,
  pos TEXT,
  g REAL,
  gs REAL,
  inn_outs REAL,
  po REAL,
  a REAL,
  e REAL,
  dp REAL,
  tp REAL,
  pb REAL,
  sb REAL,
  cs REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE hall_of_fame (
  player_id TEXT,
  yearid REAL,
  votedby TEXT,
  ballots REAL,
  needed REAL,
  votes REAL,
  inducted TEXT,
  category TEXT,
  needed_note TEXT,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE home_game (
  year REAL,
  league_id TEXT,
  team_id TEXT,
  park_id TEXT,
  span_first TEXT,
  span_last TEXT,
  games REAL,
  openings REAL,
  attendance REAL,
  FOREIGN KEY (park_id) REFERENCES park(park_id),
  FOREIGN KEY (team_id) REFERENCES team(team_id)
);

CREATE TABLE manager (
  player_id TEXT,
  year REAL,
  team_id TEXT,
  league_id TEXT,
  inseason REAL,
  g REAL,
  w REAL,
  l REAL,
  rank REAL,
  plyr_mgr TEXT,
  FOREIGN KEY (team_id) REFERENCES team(team_id)
);

CREATE TABLE manager_half (
  player_id TEXT,
  year REAL,
  team_id TEXT,
  league_id TEXT,
  inseason REAL,
  half REAL,
  g REAL,
  w REAL,
  l REAL,
  rank REAL,
  FOREIGN KEY (team_id) REFERENCES team(team_id)
);

CREATE TABLE player (
  player_id TEXT,
  birth_year REAL,
  birth_month REAL,
  birth_day REAL,
  birth_country TEXT,
  birth_state TEXT,
  birth_city TEXT,
  death_year REAL,
  death_month REAL,
  death_day REAL,
  death_country TEXT,
  death_state TEXT,
  death_city TEXT,
  name_first TEXT,
  name_last TEXT,
  name_given TEXT,
  weight REAL,
  height REAL,
  bats TEXT,
  throws TEXT,
  debut TEXT,
  final_game TEXT,
  retro_id TEXT,
  bbref_id TEXT
);

CREATE TABLE park (
  park_id TEXT,
  park_name TEXT,
  park_alias TEXT,
  city TEXT,
  state TEXT,
  country TEXT
);

CREATE TABLE pitching (
  player_id TEXT,
  year REAL,
  stint REAL,
  team_id TEXT,
  league_id TEXT,
  w REAL,
  l REAL,
  g REAL,
  gs REAL,
  cg REAL,
  sho REAL,
  sv REAL,
  ipouts REAL,
  h REAL,
  er REAL,
  hr REAL,
  bb REAL,
  so REAL,
  baopp REAL,
  era REAL,
  ibb REAL,
  wp REAL,
  hbp REAL,
  bk REAL,
  bfp REAL,
  gf REAL,
  r REAL,
  sh REAL,
  sf REAL,
  g_idp REAL
);

CREATE TABLE pitching_postseason (
  player_id TEXT,
  year REAL,
  round TEXT,
  team_id TEXT,
  league_id TEXT,
  w REAL,
  l REAL,
  g REAL,
  gs REAL,
  cg REAL,
  sho REAL,
  sv REAL,
  ipouts REAL,
  h REAL,
  er REAL,
  hr REAL,
  bb REAL,
  so REAL,
  baopp TEXT,
  era REAL,
  ibb REAL,
  wp REAL,
  hbp REAL,
  bk REAL,
  bfp REAL,
  gf REAL,
  r REAL,
  sh REAL,
  sf REAL,
  g_idp REAL
);

CREATE TABLE salary (
  year REAL,
  team_id TEXT,
  league_id TEXT,
  player_id TEXT,
  salary REAL
);

CREATE TABLE college (
  college_id TEXT,
  name_full TEXT,
  city TEXT,
  state TEXT,
  country TEXT
);

CREATE TABLE postseason (
  year REAL,
  round TEXT,
  team_id_winner TEXT,
  league_id_winner TEXT,
  team_id_loser TEXT,
  league_id_loser TEXT,
  wins REAL,
  losses REAL,
  ties REAL
);

CREATE TABLE team (
  year REAL,
  league_id TEXT,
  team_id TEXT,
  franchise_id TEXT,
  div_id TEXT,
  rank REAL,
  g REAL,
  ghome REAL,
  w REAL,
  l REAL,
  div_win TEXT,
  wc_win TEXT,
  lg_win TEXT,
  ws_win TEXT,
  r REAL,
  ab REAL,
  h REAL,
  double REAL,
  triple REAL,
  hr REAL,
  bb REAL,
  so REAL,
  sb REAL,
  cs REAL,
  hbp REAL,
  sf REAL,
  ra REAL,
  er REAL,
  era REAL,
  cg REAL,
  sho REAL,
  sv REAL,
  ipouts REAL,
  ha REAL,
  hra REAL,
  bba REAL,
  soa REAL,
  e REAL,
  dp REAL,
  fp REAL,
  name TEXT,
  park TEXT,
  attendance REAL,
  bpf REAL,
  ppf REAL,
  team_id_br TEXT,
  team_id_lahman45 TEXT,
  team_id_retro TEXT
);

CREATE TABLE team_franchise (
  franchise_id TEXT,
  franchise_name TEXT,
  active TEXT,
  na_assoc TEXT
);

CREATE TABLE team_half (
  year REAL,
  league_id TEXT,
  team_id TEXT,
  half REAL,
  div_id TEXT,
  div_win TEXT,
  rank REAL,
  g REAL,
  w REAL,
  l REAL
);

------------------------------------------------------------------------------------------
database_id: architecture
database schema :
CREATE TABLE architect (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

CREATE TABLE bridge (
  architect_id INTEGER,
  id INTEGER PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL,
  FOREIGN KEY (architect_id) REFERENCES architect(id)
);

CREATE TABLE mill (
  architect_id INTEGER,
  id INTEGER PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year REAL,
  notes TEXT,
  FOREIGN KEY (architect_id) REFERENCES architect(id)
);

------------------------------------------------------------------------------------------
database_id: csu_1
database schema :
CREATE TABLE Campuses (
  Id INTEGER PRIMARY KEY,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year REAL
);

CREATE TABLE csu_fees (
  Campus INTEGER PRIMARY KEY,
  Year REAL,
  CampusFee REAL,
  FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);

CREATE TABLE degrees (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER,
  Degrees REAL,
  FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);

CREATE TABLE discipline_enrollments (
  Campus INTEGER PRIMARY KEY,
  Discipline REAL,
  Year REAL,
  Undergraduate REAL,
  Graduate REAL,
  FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);

CREATE TABLE enrollments (
  Campus INTEGER PRIMARY KEY,
  Year REAL,
  TotalEnrollment_AY REAL,
  FTE_AY REAL,
  FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);

CREATE TABLE faculty (
  Campus INTEGER,
  Year REAL,
  Faculty REAL,
  FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);

------------------------------------------------------------------------------------------
database_id: tracking_orders
database schema :
CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  customer_name TEXT,
  customer_details TEXT
);

CREATE TABLE Invoices (
  invoice_number INTEGER PRIMARY KEY,
  invoice_date DATETIME,
  invoice_details TEXT
);

CREATE TABLE Orders (
  order_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  order_status TEXT,
  date_order_placed DATETIME,
  order_details TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  product_name TEXT,
  product_details TEXT
);

CREATE TABLE Order_Items (
  order_item_id INTEGER PRIMARY KEY,
  product_id INTEGER,
  order_id INTEGER,
  order_item_status TEXT,
  order_item_details TEXT,
  FOREIGN KEY (product_id) REFERENCES Products(product_id),
  FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

CREATE TABLE Shipments (
  shipment_id INTEGER PRIMARY KEY,
  order_id INTEGER,
  invoice_number INTEGER,
  shipment_tracking_number TEXT,
  shipment_date DATETIME,
  other_shipment_details TEXT,
  FOREIGN KEY (invoice_number) REFERENCES Invoices(invoice_number),
  FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

CREATE TABLE Shipment_Items (
  shipment_id INTEGER,
  order_item_id INTEGER,
  FOREIGN KEY (shipment_id) REFERENCES Shipments(shipment_id),
  FOREIGN KEY (order_item_id) REFERENCES Order_Items(order_item_id)
);

------------------------------------------------------------------------------------------
database_id: insurance_policies
database schema :
CREATE TABLE Customers (
  Customer_ID INTEGER PRIMARY KEY,
  Customer_Details TEXT
);

CREATE TABLE Customer_Policies (
  Policy_ID INTEGER PRIMARY KEY,
  Customer_ID INTEGER,
  Policy_Type_Code TEXT,
  Start_Date DATETIME,
  End_Date DATETIME,
  FOREIGN KEY (Customer_ID) REFERENCES Customers(Customer_ID)
);

CREATE TABLE Claims (
  Claim_ID INTEGER PRIMARY KEY,
  Policy_ID INTEGER,
  Date_Claim_Made DATETIME,
  Date_Claim_Settled DATETIME,
  Amount_Claimed REAL,
  Amount_Settled REAL,
  FOREIGN KEY (Policy_ID) REFERENCES Customer_Policies(Policy_ID)
);

CREATE TABLE Settlements (
  Settlement_ID INTEGER PRIMARY KEY,
  Claim_ID INTEGER,
  Date_Claim_Made DATETIME,
  Date_Claim_Settled DATETIME,
  Amount_Claimed REAL,
  Amount_Settled REAL,
  Customer_Policy_ID REAL,
  FOREIGN KEY (Claim_ID) REFERENCES Claims(Claim_ID)
);

CREATE TABLE Payments (
  Payment_ID INTEGER PRIMARY KEY,
  Settlement_ID INTEGER,
  Payment_Method_Code TEXT,
  Date_Payment_Made DATETIME,
  Amount_Payment REAL,
  FOREIGN KEY (Settlement_ID) REFERENCES Settlements(Settlement_ID)
);

------------------------------------------------------------------------------------------
database_id: gas_company
database schema :
CREATE TABLE company (
  Company_ID INTEGER PRIMARY KEY,
  Rank REAL,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

CREATE TABLE gas_station (
  Station_ID INTEGER PRIMARY KEY,
  Open_Year REAL,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

CREATE TABLE station_company (
  Station_ID INTEGER PRIMARY KEY,
  Company_ID INTEGER,
  Rank_of_the_Year REAL,
  FOREIGN KEY (Company_ID) REFERENCES company(Company_ID),
  FOREIGN KEY (Station_ID) REFERENCES gas_station(Station_ID)
);

------------------------------------------------------------------------------------------
database_id: e_government
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  line_1_number_building TEXT,
  town_city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT
);

CREATE TABLE Services (
  service_id INTEGER PRIMARY KEY,
  service_type_code TEXT,
  service_name TEXT,
  service_descriptio TEXT
);

CREATE TABLE Forms (
  form_id INTEGER PRIMARY KEY,
  form_type_code TEXT,
  service_id INTEGER,
  form_number TEXT,
  form_name TEXT,
  form_description TEXT,
  FOREIGN KEY (service_id) REFERENCES Services(service_id)
);

CREATE TABLE Individuals (
  individual_id INTEGER PRIMARY KEY,
  individual_first_name TEXT,
  individual_middle_name TEXT,
  inidividual_phone TEXT,
  individual_email TEXT,
  individual_address TEXT,
  individual_last_name TEXT
);

CREATE TABLE Organizations (
  organization_id INTEGER PRIMARY KEY,
  date_formed DATETIME,
  organization_name TEXT,
  uk_vat_number TEXT
);

CREATE TABLE Parties (
  party_id INTEGER PRIMARY KEY,
  payment_method_code TEXT,
  party_phone TEXT,
  party_email TEXT
);

CREATE TABLE Organization_Contact_Individuals (
  individual_id INTEGER PRIMARY KEY,
  organization_id INTEGER,
  date_contact_from DATETIME,
  date_contact_to DATETIME,
  FOREIGN KEY (individual_id) REFERENCES Individuals(individual_id),
  FOREIGN KEY (organization_id) REFERENCES Organizations(organization_id)
);

CREATE TABLE Party_Addresses (
  party_id INTEGER PRIMARY KEY,
  address_id INTEGER,
  date_address_from DATETIME,
  address_type_code TEXT,
  date_address_to DATETIME,
  FOREIGN KEY (party_id) REFERENCES Parties(party_id),
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Party_Forms (
  party_id INTEGER PRIMARY KEY,
  form_id INTEGER,
  date_completion_started DATETIME,
  form_status_code TEXT,
  date_fully_completed DATETIME,
  FOREIGN KEY (form_id) REFERENCES Forms(form_id),
  FOREIGN KEY (party_id) REFERENCES Parties(party_id)
);

CREATE TABLE Party_Services (
  booking_id REAL,
  customer_id INTEGER,
  service_id INTEGER,
  service_datetime DATETIME,
  booking_made_date DATETIME,
  FOREIGN KEY (customer_id) REFERENCES Parties(party_id),
  FOREIGN KEY (service_id) REFERENCES Services(service_id)
);

------------------------------------------------------------------------------------------
database_id: school_bus
database schema :
CREATE TABLE driver (
  Driver_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Party TEXT,
  Home_city TEXT,
  Age REAL
);

CREATE TABLE school (
  School_ID INTEGER PRIMARY KEY,
  Grade TEXT,
  School TEXT,
  Location TEXT,
  Type TEXT
);

CREATE TABLE school_bus (
  School_ID INTEGER PRIMARY KEY,
  Driver_ID INTEGER,
  Years_Working REAL,
  If_full_time TEXT,
  FOREIGN KEY (Driver_ID) REFERENCES driver(Driver_ID),
  FOREIGN KEY (School_ID) REFERENCES school(School_ID)
);

------------------------------------------------------------------------------------------
database_id: machine_repair
database schema :
CREATE TABLE repair (
  repair_ID INTEGER PRIMARY KEY,
  name TEXT,
  Launch_Date TEXT,
  Notes TEXT
);

CREATE TABLE machine (
  Machine_ID INTEGER PRIMARY KEY,
  Making_Year REAL,
  Class TEXT,
  Team TEXT,
  Machine_series TEXT,
  value_points REAL,
  quality_rank REAL
);

CREATE TABLE technician (
  technician_id INTEGER PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age REAL
);

CREATE TABLE repair_assignment (
  technician_id INTEGER PRIMARY KEY,
  repair_ID INTEGER,
  Machine_ID INTEGER,
  FOREIGN KEY (Machine_ID) REFERENCES machine(Machine_ID),
  FOREIGN KEY (repair_ID) REFERENCES repair(repair_ID),
  FOREIGN KEY (technician_id) REFERENCES technician(technician_id)
);

------------------------------------------------------------------------------------------
database_id: theme_gallery
database schema :
CREATE TABLE artist (
  Artist_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Year_Join REAL,
  Age REAL
);

CREATE TABLE exhibition (
  Exhibition_ID INTEGER PRIMARY KEY,
  Year REAL,
  Theme TEXT,
  Artist_ID INTEGER,
  Ticket_Price REAL,
  FOREIGN KEY (Artist_ID) REFERENCES artist(Artist_ID)
);

CREATE TABLE exhibition_record (
  Exhibition_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Attendance REAL,
  FOREIGN KEY (Exhibition_ID) REFERENCES exhibition(Exhibition_ID)
);

------------------------------------------------------------------------------------------
database_id: film_rank
database schema :
CREATE TABLE film (
  Film_ID INTEGER PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar REAL
);

CREATE TABLE market (
  Market_ID INTEGER PRIMARY KEY,
  Country TEXT,
  Number_cities REAL
);

CREATE TABLE film_market_estimation (
  Estimation_ID INTEGER PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INTEGER,
  Type TEXT,
  Market_ID INTEGER,
  Year REAL,
  FOREIGN KEY (Market_ID) REFERENCES market(Market_ID),
  FOREIGN KEY (Film_ID) REFERENCES film(Film_ID)
);

------------------------------------------------------------------------------------------
database_id: party_people
database schema :
CREATE TABLE region (
  Region_ID INTEGER PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

CREATE TABLE party (
  Party_ID INTEGER PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INTEGER,
  Party_name TEXT,
  FOREIGN KEY (Region_ID) REFERENCES region(Region_ID)
);

CREATE TABLE member (
  Member_ID INTEGER PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT,
  In_office TEXT,
  FOREIGN KEY (Party_ID) REFERENCES party(Party_ID)
);

CREATE TABLE party_events (
  Event_ID INTEGER PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INTEGER,
  Member_in_charge_ID INTEGER,
  FOREIGN KEY (Member_in_charge_ID) REFERENCES member(Member_ID),
  FOREIGN KEY (Party_ID) REFERENCES party(Party_ID)
);

------------------------------------------------------------------------------------------
database_id: hospital_1
database schema :
CREATE TABLE Physician (
  EmployeeID INTEGER PRIMARY KEY,
  Name TEXT,
  Position TEXT,
  SSN REAL
);

CREATE TABLE Department (
  DepartmentID INTEGER PRIMARY KEY,
  Name TEXT,
  Head INTEGER,
  FOREIGN KEY (Head) REFERENCES Physician(EmployeeID)
);

CREATE TABLE Affiliated_With (
  Physician INTEGER PRIMARY KEY,
  Department INTEGER,
  PrimaryAffiliation BOOLEAN,
  FOREIGN KEY (Department) REFERENCES Department(DepartmentID),
  FOREIGN KEY (Physician) REFERENCES Physician(EmployeeID)
);

CREATE TABLE Procedures (
  Code INTEGER PRIMARY KEY,
  Name TEXT,
  Cost REAL
);

CREATE TABLE Trained_In (
  Physician INTEGER PRIMARY KEY,
  Treatment INTEGER,
  CertificationDate DATETIME,
  CertificationExpires DATETIME,
  FOREIGN KEY (Treatment) REFERENCES Procedures(Code),
  FOREIGN KEY (Physician) REFERENCES Physician(EmployeeID)
);

CREATE TABLE Patient (
  SSN INTEGER PRIMARY KEY,
  Name TEXT,
  Address TEXT,
  Phone TEXT,
  InsuranceID REAL,
  PCP INTEGER,
  FOREIGN KEY (PCP) REFERENCES Physician(EmployeeID)
);

CREATE TABLE Nurse (
  EmployeeID INTEGER PRIMARY KEY,
  Name TEXT,
  Position TEXT,
  Registered BOOLEAN,
  SSN REAL
);

CREATE TABLE Appointment (
  AppointmentID INTEGER PRIMARY KEY,
  Patient INTEGER,
  PrepNurse INTEGER,
  Physician INTEGER,
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT,
  FOREIGN KEY (Physician) REFERENCES Physician(EmployeeID),
  FOREIGN KEY (PrepNurse) REFERENCES Nurse(EmployeeID),
  FOREIGN KEY (Patient) REFERENCES Patient(SSN)
);

CREATE TABLE Medication (
  Code INTEGER PRIMARY KEY,
  Name TEXT,
  Brand TEXT,
  Description TEXT
);

CREATE TABLE Prescribes (
  Physician INTEGER PRIMARY KEY,
  Patient INTEGER,
  Medication INTEGER,
  Date DATETIME,
  Appointment INTEGER,
  Dose TEXT,
  FOREIGN KEY (Appointment) REFERENCES Appointment(AppointmentID),
  FOREIGN KEY (Medication) REFERENCES Medication(Code),
  FOREIGN KEY (Patient) REFERENCES Patient(SSN),
  FOREIGN KEY (Physician) REFERENCES Physician(EmployeeID)
);

CREATE TABLE Block (
  BlockFloor INTEGER PRIMARY KEY,
  BlockCode REAL
);

CREATE TABLE Room (
  RoomNumber INTEGER PRIMARY KEY,
  RoomType TEXT,
  BlockFloor INTEGER,
  BlockCode INTEGER,
  Unavailable BOOLEAN,
  FOREIGN KEY (BlockFloor) REFERENCES Block(BlockFloor),
  FOREIGN KEY (BlockCode) REFERENCES Block(BlockCode)
);

CREATE TABLE On_Call (
  Nurse INTEGER PRIMARY KEY,
  BlockFloor INTEGER,
  BlockCode INTEGER,
  OnCallStart DATETIME,
  OnCallEnd DATETIME,
  FOREIGN KEY (BlockFloor) REFERENCES Block(BlockFloor),
  FOREIGN KEY (BlockCode) REFERENCES Block(BlockCode),
  FOREIGN KEY (Nurse) REFERENCES Nurse(EmployeeID)
);

CREATE TABLE Stay (
  StayID INTEGER PRIMARY KEY,
  Patient INTEGER,
  Room INTEGER,
  StayStart DATETIME,
  StayEnd DATETIME,
  FOREIGN KEY (Room) REFERENCES Room(RoomNumber),
  FOREIGN KEY (Patient) REFERENCES Patient(SSN)
);

CREATE TABLE Undergoes (
  Patient INTEGER PRIMARY KEY,
  Procedures INTEGER,
  Stay INTEGER,
  DateUndergoes DATETIME,
  Physician INTEGER,
  AssistingNurse INTEGER,
  FOREIGN KEY (AssistingNurse) REFERENCES Nurse(EmployeeID),
  FOREIGN KEY (Physician) REFERENCES Physician(EmployeeID),
  FOREIGN KEY (Stay) REFERENCES Stay(StayID),
  FOREIGN KEY (Procedures) REFERENCES Procedures(Code),
  FOREIGN KEY (Patient) REFERENCES Patient(SSN)
);

------------------------------------------------------------------------------------------
database_id: customers_campaigns_ecommerce
database schema :
CREATE TABLE Premises (
  premise_id INTEGER PRIMARY KEY,
  premises_type TEXT,
  premise_details TEXT
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  product_category TEXT,
  product_name TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  payment_method TEXT,
  customer_name TEXT,
  customer_phone TEXT,
  customer_email TEXT,
  customer_address TEXT,
  customer_login TEXT,
  customer_password TEXT
);

CREATE TABLE Mailshot_Campaigns (
  mailshot_id INTEGER PRIMARY KEY,
  product_category TEXT,
  mailshot_name TEXT,
  mailshot_start_date DATETIME,
  mailshot_end_date DATETIME
);

CREATE TABLE Customer_Addresses (
  customer_id INTEGER,
  premise_id INTEGER,
  date_address_from DATETIME,
  address_type_code TEXT,
  date_address_to DATETIME,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (premise_id) REFERENCES Premises(premise_id)
);

CREATE TABLE Customer_Orders (
  order_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  order_status_code TEXT,
  shipping_method_code TEXT,
  order_placed_datetime DATETIME,
  order_delivered_datetime DATETIME,
  order_shipping_charges TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Mailshot_Customers (
  mailshot_id INTEGER,
  customer_id INTEGER,
  outcome_code TEXT,
  mailshot_customer_date DATETIME,
  FOREIGN KEY (mailshot_id) REFERENCES Mailshot_Campaigns(mailshot_id),
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Order_Items (
  item_id REAL,
  order_item_status_code TEXT,
  order_id INTEGER,
  product_id INTEGER,
  item_status_code TEXT,
  item_delivered_datetime DATETIME,
  item_order_quantity TEXT,
  FOREIGN KEY (order_id) REFERENCES Customer_Orders(order_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

------------------------------------------------------------------------------------------
database_id: gymnast
database schema :
CREATE TABLE gymnast (
  Gymnast_ID INTEGER PRIMARY KEY,
  Floor_Exercise_Points REAL,
  Pommel_Horse_Points REAL,
  Rings_Points REAL,
  Vault_Points REAL,
  Parallel_Bars_Points REAL,
  Horizontal_Bar_Points REAL,
  Total_Points REAL,
  FOREIGN KEY (Gymnast_ID) REFERENCES people(People_ID)
);

CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Age REAL,
  Height REAL,
  Hometown TEXT
);

------------------------------------------------------------------------------------------
database_id: restaurants
database schema :
CREATE TABLE GEOGRAPHIC (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE RESTAURANT (
  ID INTEGER PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT,
  RATING REAL,
  FOREIGN KEY (CITY_NAME) REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE LOCATION (
  RESTAURANT_ID INTEGER PRIMARY KEY,
  HOUSE_NUMBER REAL,
  STREET_NAME TEXT,
  CITY_NAME TEXT,
  FOREIGN KEY (CITY_NAME) REFERENCES GEOGRAPHIC(CITY_NAME)
);

------------------------------------------------------------------------------------------
database_id: mountain_photos
database schema :
CREATE TABLE mountain (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Height REAL,
  Prominence REAL,
  Range TEXT,
  Country TEXT
);

CREATE TABLE camera_lens (
  id INTEGER PRIMARY KEY,
  brand TEXT,
  name TEXT,
  focal_length_mm REAL,
  max_aperture REAL
);

CREATE TABLE photos (
  id INTEGER PRIMARY KEY,
  camera_lens_id INTEGER,
  mountain_id INTEGER,
  color TEXT,
  name TEXT,
  FOREIGN KEY (mountain_id) REFERENCES mountain(id),
  FOREIGN KEY (camera_lens_id) REFERENCES camera_lens(id)
);

------------------------------------------------------------------------------------------
database_id: battle_death
database schema :
CREATE TABLE battle (
  id INTEGER PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE ship (
  lost_in_battle INTEGER,
  id INTEGER PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT,
  FOREIGN KEY (lost_in_battle) REFERENCES battle(id)
);

CREATE TABLE death (
  caused_by_ship_id INTEGER,
  id INTEGER PRIMARY KEY,
  note TEXT,
  killed REAL,
  injured REAL,
  FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id)
);

------------------------------------------------------------------------------------------
database_id: cre_Doc_Control_Systems
database schema :
CREATE TABLE Ref_Document_Types (
  document_type_code TEXT PRIMARY KEY,
  document_type_description TEXT
);

CREATE TABLE Roles (
  role_code TEXT PRIMARY KEY,
  role_description TEXT
);

CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  address_details TEXT
);

CREATE TABLE Ref_Document_Status (
  document_status_code TEXT PRIMARY KEY,
  document_status_description TEXT
);

CREATE TABLE Ref_Shipping_Agents (
  shipping_agent_code TEXT PRIMARY KEY,
  shipping_agent_name TEXT,
  shipping_agent_description TEXT
);

CREATE TABLE Documents (
  document_id INTEGER PRIMARY KEY,
  document_status_code TEXT,
  document_type_code TEXT,
  shipping_agent_code TEXT,
  receipt_date DATETIME,
  receipt_number TEXT,
  other_details TEXT,
  FOREIGN KEY (shipping_agent_code) REFERENCES Ref_Shipping_Agents(shipping_agent_code),
  FOREIGN KEY (document_status_code) REFERENCES Ref_Document_Status(document_status_code),
  FOREIGN KEY (document_type_code) REFERENCES Ref_Document_Types(document_type_code)
);

CREATE TABLE Employees (
  employee_id INTEGER PRIMARY KEY,
  role_code TEXT,
  employee_name TEXT,
  other_details TEXT,
  FOREIGN KEY (role_code) REFERENCES Roles(role_code)
);

CREATE TABLE Document_Drafts (
  document_id INTEGER PRIMARY KEY,
  draft_number REAL,
  draft_details TEXT,
  FOREIGN KEY (document_id) REFERENCES Documents(document_id)
);

CREATE TABLE Draft_Copies (
  document_id INTEGER PRIMARY KEY,
  draft_number INTEGER,
  copy_number REAL,
  FOREIGN KEY (document_id) REFERENCES Document_Drafts(document_id),
  FOREIGN KEY (draft_number) REFERENCES Document_Drafts(draft_number)
);

CREATE TABLE Circulation_History (
  document_id INTEGER PRIMARY KEY,
  draft_number INTEGER,
  copy_number INTEGER,
  employee_id INTEGER,
  FOREIGN KEY (employee_id) REFERENCES Employees(employee_id),
  FOREIGN KEY (document_id) REFERENCES Draft_Copies(document_id),
  FOREIGN KEY (draft_number) REFERENCES Draft_Copies(draft_number),
  FOREIGN KEY (copy_number) REFERENCES Draft_Copies(copy_number)
);

CREATE TABLE Documents_Mailed (
  document_id INTEGER PRIMARY KEY,
  mailed_to_address_id INTEGER,
  mailing_date DATETIME,
  FOREIGN KEY (mailed_to_address_id) REFERENCES Addresses(address_id),
  FOREIGN KEY (document_id) REFERENCES Documents(document_id)
);

------------------------------------------------------------------------------------------
database_id: tracking_share_transactions
database schema :
CREATE TABLE Investors (
  investor_id INTEGER PRIMARY KEY,
  Investor_details TEXT
);

CREATE TABLE Lots (
  lot_id INTEGER PRIMARY KEY,
  investor_id INTEGER,
  lot_details TEXT,
  FOREIGN KEY (investor_id) REFERENCES Investors(investor_id)
);

CREATE TABLE Ref_Transaction_Types (
  transaction_type_code TEXT PRIMARY KEY,
  transaction_type_description TEXT
);

CREATE TABLE Transactions (
  transaction_id INTEGER PRIMARY KEY,
  investor_id INTEGER,
  transaction_type_code TEXT,
  date_of_transaction DATETIME,
  amount_of_transaction REAL,
  share_count TEXT,
  other_details TEXT,
  FOREIGN KEY (transaction_type_code) REFERENCES Ref_Transaction_Types(transaction_type_code),
  FOREIGN KEY (investor_id) REFERENCES Investors(investor_id)
);

CREATE TABLE Sales (
  sales_transaction_id INTEGER PRIMARY KEY,
  sales_details TEXT,
  FOREIGN KEY (sales_transaction_id) REFERENCES Transactions(transaction_id)
);

CREATE TABLE Purchases (
  purchase_transaction_id INTEGER,
  purchase_details TEXT,
  FOREIGN KEY (purchase_transaction_id) REFERENCES Transactions(transaction_id)
);

CREATE TABLE Transactions_Lots (
  transaction_id INTEGER,
  lot_id INTEGER,
  FOREIGN KEY (transaction_id) REFERENCES Transactions(transaction_id),
  FOREIGN KEY (lot_id) REFERENCES Lots(lot_id)
);

------------------------------------------------------------------------------------------
database_id: apartment_rentals
database schema :
CREATE TABLE Apartment_Buildings (
  building_id INTEGER PRIMARY KEY,
  building_short_name TEXT,
  building_full_name TEXT,
  building_description TEXT,
  building_address TEXT,
  building_manager TEXT,
  building_phone TEXT
);

CREATE TABLE Apartments (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER,
  apt_type_code TEXT,
  apt_number TEXT,
  bathroom_count REAL,
  bedroom_count REAL,
  room_count TEXT,
  FOREIGN KEY (building_id) REFERENCES Apartment_Buildings(building_id)
);

CREATE TABLE Apartment_Facilities (
  apt_id INTEGER PRIMARY KEY,
  facility_code TEXT,
  FOREIGN KEY (apt_id) REFERENCES Apartments(apt_id)
);

CREATE TABLE Guests (
  guest_id INTEGER PRIMARY KEY,
  gender_code TEXT,
  guest_first_name TEXT,
  guest_last_name TEXT,
  date_of_birth DATETIME
);

CREATE TABLE Apartment_Bookings (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER,
  guest_id INTEGER,
  booking_status_code TEXT,
  booking_start_date DATETIME,
  booking_end_date DATETIME,
  FOREIGN KEY (guest_id) REFERENCES Guests(guest_id),
  FOREIGN KEY (apt_id) REFERENCES Apartments(apt_id)
);

CREATE TABLE View_Unit_Status (
  apt_id INTEGER,
  apt_booking_id INTEGER,
  status_date DATETIME PRIMARY KEY,
  available_yn TEXT,
  FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings(apt_booking_id),
  FOREIGN KEY (apt_id) REFERENCES Apartments(apt_id)
);

------------------------------------------------------------------------------------------
database_id: student_transcripts_tracking
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  line_1 TEXT,
  line_2 TEXT,
  line_3 TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT,
  other_address_details TEXT
);

CREATE TABLE Courses (
  course_id INTEGER PRIMARY KEY,
  course_name TEXT,
  course_description TEXT,
  other_details TEXT
);

CREATE TABLE Departments (
  department_id INTEGER PRIMARY KEY,
  department_name TEXT,
  department_description TEXT,
  other_details TEXT
);

CREATE TABLE Degree_Programs (
  degree_program_id INTEGER PRIMARY KEY,
  department_id INTEGER,
  degree_summary_name TEXT,
  degree_summary_description TEXT,
  other_details TEXT,
  FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);

CREATE TABLE Sections (
  section_id INTEGER PRIMARY KEY,
  course_id INTEGER,
  section_name TEXT,
  section_description TEXT,
  other_details TEXT,
  FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

CREATE TABLE Semesters (
  semester_id INTEGER PRIMARY KEY,
  semester_name TEXT,
  semester_description TEXT,
  other_details TEXT
);

CREATE TABLE Students (
  student_id INTEGER PRIMARY KEY,
  current_address_id INTEGER,
  permanent_address_id INTEGER,
  first_name TEXT,
  middle_name TEXT,
  last_name TEXT,
  cell_mobile_number TEXT,
  email_address TEXT,
  ssn TEXT,
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details TEXT,
  FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id),
  FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Student_Enrolment (
  student_enrolment_id INTEGER PRIMARY KEY,
  degree_program_id INTEGER,
  semester_id INTEGER,
  student_id INTEGER,
  other_details TEXT,
  FOREIGN KEY (student_id) REFERENCES Students(student_id),
  FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id),
  FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)
);

CREATE TABLE Student_Enrolment_Courses (
  student_course_id INTEGER PRIMARY KEY,
  course_id INTEGER,
  student_enrolment_id INTEGER,
  FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id),
  FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

CREATE TABLE Transcripts (
  transcript_id INTEGER PRIMARY KEY,
  transcript_date DATETIME,
  other_details TEXT
);

CREATE TABLE Transcript_Contents (
  student_course_id INTEGER,
  transcript_id INTEGER,
  FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id),
  FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id)
);

------------------------------------------------------------------------------------------
database_id: cre_Docs_and_Epenses
database schema :
CREATE TABLE Ref_Document_Types (
  Document_Type_Code TEXT PRIMARY KEY,
  Document_Type_Name TEXT,
  Document_Type_Description TEXT
);

CREATE TABLE Ref_Budget_Codes (
  Budget_Type_Code TEXT PRIMARY KEY,
  Budget_Type_Description TEXT
);

CREATE TABLE Projects (
  Project_ID INTEGER PRIMARY KEY,
  Project_Details TEXT
);

CREATE TABLE Documents (
  Document_ID INTEGER PRIMARY KEY,
  Document_Type_Code TEXT,
  Project_ID INTEGER,
  Document_Date DATETIME,
  Document_Name TEXT,
  Document_Description TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Project_ID) REFERENCES Projects(Project_ID),
  FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types(Document_Type_Code)
);

CREATE TABLE Statements (
  Statement_ID INTEGER PRIMARY KEY,
  Statement_Details TEXT,
  FOREIGN KEY (Statement_ID) REFERENCES Documents(Document_ID)
);

CREATE TABLE Documents_with_Expenses (
  Document_ID INTEGER PRIMARY KEY,
  Budget_Type_Code TEXT,
  Document_Details TEXT,
  FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID),
  FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes(Budget_Type_Code)
);

CREATE TABLE Accounts (
  Account_ID INTEGER PRIMARY KEY,
  Statement_ID INTEGER,
  Account_Details TEXT,
  FOREIGN KEY (Statement_ID) REFERENCES Statements(Statement_ID)
);

------------------------------------------------------------------------------------------
database_id: ship_mission
database schema :
CREATE TABLE mission (
  Mission_ID INTEGER PRIMARY KEY,
  Ship_ID INTEGER,
  Code TEXT,
  Launched_Year REAL,
  Location TEXT,
  Speed_knots REAL,
  Fate TEXT,
  FOREIGN KEY (Ship_ID) REFERENCES ship(Ship_ID)
);

CREATE TABLE ship (
  Ship_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Nationality TEXT,
  Tonnage REAL
);

------------------------------------------------------------------------------------------
database_id: company_office
database schema :
CREATE TABLE buildings (
  id INTEGER PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height REAL,
  Stories REAL,
  Status TEXT
);

CREATE TABLE Companies (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE Office_locations (
  building_id INTEGER PRIMARY KEY,
  company_id INTEGER,
  move_in_year REAL,
  FOREIGN KEY (company_id) REFERENCES Companies(id),
  FOREIGN KEY (building_id) REFERENCES buildings(id)
);

------------------------------------------------------------------------------------------
database_id: tracking_software_problems
database schema :
CREATE TABLE Problem_Category_Codes (
  problem_category_code TEXT PRIMARY KEY,
  problem_category_description TEXT
);

CREATE TABLE Problem_Log (
  problem_log_id INTEGER PRIMARY KEY,
  assigned_to_staff_id INTEGER,
  problem_id INTEGER,
  problem_category_code TEXT,
  problem_status_code TEXT,
  log_entry_date DATETIME,
  log_entry_description TEXT,
  log_entry_fix TEXT,
  other_log_details TEXT,
  FOREIGN KEY (problem_status_code) REFERENCES Problem_Status_Codes(problem_status_code),
  FOREIGN KEY (problem_id) REFERENCES Problems(problem_id),
  FOREIGN KEY (assigned_to_staff_id) REFERENCES Staff(staff_id),
  FOREIGN KEY (problem_category_code) REFERENCES Problem_Category_Codes(problem_category_code)
);

CREATE TABLE Problem_Status_Codes (
  problem_status_code TEXT PRIMARY KEY,
  problem_status_description TEXT
);

CREATE TABLE Product (
  product_id INTEGER PRIMARY KEY,
  product_name TEXT,
  product_details TEXT
);

CREATE TABLE Staff (
  staff_id INTEGER PRIMARY KEY,
  staff_first_name TEXT,
  staff_last_name TEXT,
  other_staff_details TEXT
);

CREATE TABLE Problems (
  problem_id INTEGER PRIMARY KEY,
  product_id INTEGER,
  closure_authorised_by_staff_id INTEGER,
  reported_by_staff_id INTEGER,
  date_problem_reported DATETIME,
  date_problem_closed DATETIME,
  problem_description TEXT,
  other_problem_details TEXT,
  FOREIGN KEY (reported_by_staff_id) REFERENCES Staff(staff_id),
  FOREIGN KEY (product_id) REFERENCES Product(product_id),
  FOREIGN KEY (closure_authorised_by_staff_id) REFERENCES Staff(staff_id)
);

------------------------------------------------------------------------------------------
database_id: products_gen_characteristics
database schema :
CREATE TABLE Ref_Characteristic_Types (
  characteristic_type_code TEXT PRIMARY KEY,
  characteristic_type_description TEXT
);

CREATE TABLE Ref_Colors (
  color_code TEXT PRIMARY KEY,
  color_description TEXT
);

CREATE TABLE Ref_Product_Categories (
  product_category_code TEXT PRIMARY KEY,
  product_category_description TEXT,
  unit_of_measure TEXT
);

CREATE TABLE Characteristics (
  characteristic_id INTEGER PRIMARY KEY,
  characteristic_type_code TEXT,
  characteristic_data_type TEXT,
  characteristic_name TEXT,
  other_characteristic_details TEXT,
  FOREIGN KEY (characteristic_type_code) REFERENCES Ref_Characteristic_Types(characteristic_type_code)
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  color_code TEXT,
  product_category_code TEXT,
  product_name TEXT,
  typical_buying_price TEXT,
  typical_selling_price TEXT,
  product_description TEXT,
  other_product_details TEXT,
  FOREIGN KEY (color_code) REFERENCES Ref_Colors(color_code),
  FOREIGN KEY (product_category_code) REFERENCES Ref_Product_Categories(product_category_code)
);

CREATE TABLE Product_Characteristics (
  product_id INTEGER,
  characteristic_id INTEGER,
  product_characteristic_value TEXT,
  FOREIGN KEY (product_id) REFERENCES Products(product_id),
  FOREIGN KEY (characteristic_id) REFERENCES Characteristics(characteristic_id)
);

------------------------------------------------------------------------------------------
database_id: coffee_shop
database schema :
CREATE TABLE shop (
  Shop_ID INTEGER PRIMARY KEY,
  Address TEXT,
  Num_of_staff TEXT,
  Score REAL,
  Open_Year TEXT
);

CREATE TABLE member (
  Member_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Membership_card TEXT,
  Age REAL,
  Time_of_purchase REAL,
  Level_of_membership REAL,
  Address TEXT
);

CREATE TABLE happy_hour (
  HH_ID INTEGER PRIMARY KEY,
  Shop_ID INTEGER,
  Month TEXT,
  Num_of_shaff_in_charge REAL,
  FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)
);

CREATE TABLE happy_hour_member (
  HH_ID INTEGER PRIMARY KEY,
  Member_ID INTEGER,
  Total_amount REAL,
  FOREIGN KEY (Member_ID) REFERENCES member(Member_ID)
);

------------------------------------------------------------------------------------------
database_id: riding_club
database schema :
CREATE TABLE player (
  Player_ID INTEGER PRIMARY KEY,
  Sponsor_name TEXT,
  Player_name TEXT,
  Gender TEXT,
  Residence TEXT,
  Occupation TEXT,
  Votes REAL,
  Rank TEXT
);

CREATE TABLE club (
  Club_ID INTEGER PRIMARY KEY,
  Club_name TEXT,
  Region TEXT,
  Start_year REAL
);

CREATE TABLE coach (
  Coach_ID INTEGER PRIMARY KEY,
  Coach_name TEXT,
  Gender TEXT,
  Club_ID INTEGER,
  Rank REAL,
  FOREIGN KEY (Club_ID) REFERENCES club(Club_ID)
);

CREATE TABLE player_coach (
  Player_ID INTEGER PRIMARY KEY,
  Coach_ID INTEGER,
  Starting_year REAL,
  FOREIGN KEY (Coach_ID) REFERENCES coach(Coach_ID),
  FOREIGN KEY (Player_ID) REFERENCES player(Player_ID)
);

CREATE TABLE match_result (
  Rank INTEGER PRIMARY KEY,
  Club_ID INTEGER,
  Gold REAL,
  Big_Silver REAL,
  Small_Silver REAL,
  Bronze REAL,
  Points REAL,
  FOREIGN KEY (Club_ID) REFERENCES club(Club_ID)
);

------------------------------------------------------------------------------------------
database_id: customers_card_transactions
database schema :
CREATE TABLE Accounts (
  account_id INTEGER PRIMARY KEY,
  customer_id REAL,
  account_name TEXT,
  other_account_details TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  customer_first_name TEXT,
  customer_last_name TEXT,
  customer_address TEXT,
  customer_phone TEXT,
  customer_email TEXT,
  other_customer_details TEXT
);

CREATE TABLE Customers_Cards (
  card_id INTEGER PRIMARY KEY,
  customer_id REAL,
  card_type_code TEXT,
  card_number TEXT,
  date_valid_from DATETIME,
  date_valid_to DATETIME,
  other_card_details TEXT
);

CREATE TABLE Financial_Transactions (
  transaction_id REAL,
  previous_transaction_id REAL,
  account_id INTEGER,
  card_id INTEGER,
  transaction_type TEXT,
  transaction_date DATETIME,
  transaction_amount REAL,
  transaction_comment TEXT,
  other_transaction_details TEXT,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id),
  FOREIGN KEY (card_id) REFERENCES Customers_Cards(card_id)
);

------------------------------------------------------------------------------------------
database_id: county_public_safety
database schema :
CREATE TABLE county_public_safety (
  County_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Population REAL,
  Police_officers REAL,
  Residents_per_officer REAL,
  Case_burden REAL,
  Crime_rate REAL,
  Police_force TEXT,
  Location TEXT
);

CREATE TABLE city (
  City_ID INTEGER PRIMARY KEY,
  County_ID INTEGER,
  Name TEXT,
  White REAL,
  Black REAL,
  Amerindian REAL,
  Asian REAL,
  Multiracial REAL,
  Hispanic REAL,
  FOREIGN KEY (County_ID) REFERENCES county_public_safety(County_ID)
);

------------------------------------------------------------------------------------------
database_id: performance_attendance
database schema :
CREATE TABLE member (
  Member_ID TEXT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Role TEXT
);

CREATE TABLE performance (
  Performance_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Host TEXT,
  Location TEXT,
  Attendance REAL
);

CREATE TABLE member_attendance (
  Member_ID INTEGER PRIMARY KEY,
  Performance_ID INTEGER,
  Num_of_Pieces REAL,
  FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID),
  FOREIGN KEY (Member_ID) REFERENCES member(Member_ID)
);

------------------------------------------------------------------------------------------
database_id: club_1
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Club (
  ClubID INTEGER PRIMARY KEY,
  ClubName TEXT,
  ClubDesc TEXT,
  ClubLocation TEXT
);

CREATE TABLE Member_of_club (
  StuID INTEGER,
  ClubID INTEGER,
  Position TEXT,
  FOREIGN KEY (ClubID) REFERENCES Club(ClubID),
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

------------------------------------------------------------------------------------------
database_id: singer
database schema :
CREATE TABLE singer (
  Singer_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE song (
  Song_ID INTEGER PRIMARY KEY,
  Title TEXT,
  Singer_ID INTEGER,
  Sales REAL,
  Highest_Position REAL,
  FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)
);

------------------------------------------------------------------------------------------
database_id: culture_company
database schema :
CREATE TABLE book_club (
  book_club_id INTEGER PRIMARY KEY,
  Year REAL,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

CREATE TABLE movie (
  movie_id INTEGER PRIMARY KEY,
  Title TEXT,
  Year REAL,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide REAL
);

CREATE TABLE culture_company (
  Company_name TEXT PRIMARY KEY,
  Type TEXT,
  Incorporated_in TEXT,
  Group_Equity_Shareholding REAL,
  book_club_id TEXT,
  movie_id TEXT,
  FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
  FOREIGN KEY (book_club_id) REFERENCES book_club(book_club_id)
);

------------------------------------------------------------------------------------------
database_id: cre_Doc_Template_Mgt
database schema :
CREATE TABLE Ref_Template_Types (
  Template_Type_Code TEXT PRIMARY KEY,
  Template_Type_Description TEXT
);

CREATE TABLE Templates (
  Template_ID INTEGER PRIMARY KEY,
  Version_Number REAL,
  Template_Type_Code TEXT,
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details TEXT,
  FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)
);

CREATE TABLE Documents (
  Document_ID INTEGER PRIMARY KEY,
  Template_ID INTEGER,
  Document_Name TEXT,
  Document_Description TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)
);

CREATE TABLE Paragraphs (
  Paragraph_ID INTEGER PRIMARY KEY,
  Document_ID INTEGER,
  Paragraph_Text TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID)
);

------------------------------------------------------------------------------------------
database_id: musical
database schema :
CREATE TABLE musical (
  Musical_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Year REAL,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

CREATE TABLE actor (
  Actor_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Musical_ID INTEGER,
  Character TEXT,
  Duration TEXT,
  age REAL,
  FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID)
);

------------------------------------------------------------------------------------------
database_id: world_1
database schema :
CREATE TABLE city (
  ID INTEGER PRIMARY KEY,
  Name TEXT,
  CountryCode TEXT,
  District TEXT,
  Population REAL,
  FOREIGN KEY (CountryCode) REFERENCES country(Code)
);

CREATE TABLE sqlite_sequence (
  name TEXT,
  seq TEXT
);

CREATE TABLE country (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear REAL,
  Population REAL,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital REAL,
  Code2 TEXT
);

CREATE TABLE countrylanguage (
  CountryCode TEXT PRIMARY KEY,
  Language TEXT,
  IsOfficial TEXT,
  Percentage REAL,
  FOREIGN KEY (CountryCode) REFERENCES country(Code)
);

------------------------------------------------------------------------------------------
database_id: device
database schema :
CREATE TABLE device (
  Device_ID INTEGER PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

CREATE TABLE shop (
  Shop_ID INTEGER PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year REAL
);

CREATE TABLE stock (
  Shop_ID INTEGER PRIMARY KEY,
  Device_ID INTEGER,
  Quantity REAL,
  FOREIGN KEY (Device_ID) REFERENCES device(Device_ID),
  FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)
);

------------------------------------------------------------------------------------------
database_id: tracking_grants_for_research
database schema :
CREATE TABLE Document_Types (
  document_type_code TEXT PRIMARY KEY,
  document_description TEXT
);

CREATE TABLE Documents (
  document_id INTEGER PRIMARY KEY,
  document_type_code TEXT,
  grant_id INTEGER,
  sent_date DATETIME,
  response_received_date DATETIME,
  other_details TEXT,
  FOREIGN KEY (grant_id) REFERENCES Grants(grant_id),
  FOREIGN KEY (document_type_code) REFERENCES Document_Types(document_type_code)
);

CREATE TABLE Grants (
  grant_id INTEGER PRIMARY KEY,
  organisation_id INTEGER,
  grant_amount REAL,
  grant_start_date DATETIME,
  grant_end_date DATETIME,
  other_details TEXT,
  FOREIGN KEY (organisation_id) REFERENCES Organisations(organisation_id)
);

CREATE TABLE Organisation_Types (
  organisation_type TEXT PRIMARY KEY,
  organisation_type_description TEXT
);

CREATE TABLE Organisations (
  organisation_id INTEGER PRIMARY KEY,
  organisation_type TEXT,
  organisation_details TEXT,
  FOREIGN KEY (organisation_type) REFERENCES Organisation_Types(organisation_type)
);

CREATE TABLE Project_Outcomes (
  project_id INTEGER,
  outcome_code TEXT,
  outcome_details TEXT,
  FOREIGN KEY (outcome_code) REFERENCES Research_Outcomes(outcome_code),
  FOREIGN KEY (project_id) REFERENCES Projects(project_id)
);

CREATE TABLE Project_Staff (
  staff_id INTEGER PRIMARY KEY,
  project_id INTEGER,
  role_code TEXT,
  date_from DATETIME,
  date_to DATETIME,
  other_details TEXT,
  FOREIGN KEY (role_code) REFERENCES Staff_Roles(role_code),
  FOREIGN KEY (project_id) REFERENCES Projects(project_id)
);

CREATE TABLE Projects (
  project_id INTEGER PRIMARY KEY,
  organisation_id INTEGER,
  project_details TEXT,
  FOREIGN KEY (organisation_id) REFERENCES Organisations(organisation_id)
);

CREATE TABLE Research_Outcomes (
  outcome_code TEXT PRIMARY KEY,
  outcome_description TEXT
);

CREATE TABLE Research_Staff (
  staff_id INTEGER PRIMARY KEY,
  employer_organisation_id INTEGER,
  staff_details TEXT,
  FOREIGN KEY (employer_organisation_id) REFERENCES Organisations(organisation_id)
);

CREATE TABLE Staff_Roles (
  role_code TEXT PRIMARY KEY,
  role_description TEXT
);

CREATE TABLE Tasks (
  task_id INTEGER PRIMARY KEY,
  project_id INTEGER,
  task_details TEXT,
  "eg Agree Objectives" TEXT,
  FOREIGN KEY (project_id) REFERENCES Projects(project_id)
);

------------------------------------------------------------------------------------------
database_id: employee_hire_evaluation
database schema :
CREATE TABLE employee (
  Employee_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Age REAL,
  City TEXT
);

CREATE TABLE shop (
  Shop_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products REAL,
  Manager_name TEXT
);

CREATE TABLE hiring (
  Shop_ID INTEGER,
  Employee_ID INTEGER PRIMARY KEY,
  Start_from TEXT,
  Is_full_time TEXT,
  FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID),
  FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)
);

CREATE TABLE evaluation (
  Employee_ID TEXT PRIMARY KEY,
  Year_awarded TEXT,
  Bonus REAL,
  FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID)
);

------------------------------------------------------------------------------------------
database_id: movie_1
database schema :
CREATE TABLE Movie (
  mID INTEGER PRIMARY KEY,
  title TEXT,
  year REAL,
  director TEXT
);

CREATE TABLE Reviewer (
  rID INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE Rating (
  rID INTEGER,
  mID INTEGER,
  stars REAL,
  ratingDate DATETIME,
  FOREIGN KEY (rID) REFERENCES Reviewer(rID),
  FOREIGN KEY (mID) REFERENCES Movie(mID)
);

------------------------------------------------------------------------------------------
database_id: network_1
database schema :
CREATE TABLE Highschooler (
  ID INTEGER PRIMARY KEY,
  name TEXT,
  grade REAL
);

CREATE TABLE Friend (
  student_id INTEGER PRIMARY KEY,
  friend_id INTEGER,
  FOREIGN KEY (friend_id) REFERENCES Highschooler(ID),
  FOREIGN KEY (student_id) REFERENCES Highschooler(ID)
);

CREATE TABLE Likes (
  student_id INTEGER PRIMARY KEY,
  liked_id INTEGER,
  FOREIGN KEY (student_id) REFERENCES Highschooler(ID),
  FOREIGN KEY (liked_id) REFERENCES Highschooler(ID)
);

------------------------------------------------------------------------------------------
database_id: poker_player
database schema :
CREATE TABLE poker_player (
  Poker_Player_ID INTEGER PRIMARY KEY,
  People_ID INTEGER,
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL,
  FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);

CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

------------------------------------------------------------------------------------------
database_id: program_share
database schema :
CREATE TABLE program (
  Program_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

CREATE TABLE channel (
  Channel_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

CREATE TABLE broadcast (
  Channel_ID INTEGER PRIMARY KEY,
  Program_ID INTEGER,
  Time_of_day TEXT,
  FOREIGN KEY (Program_ID) REFERENCES program(Program_ID),
  FOREIGN KEY (Channel_ID) REFERENCES channel(Channel_ID)
);

CREATE TABLE broadcast_share (
  Channel_ID INTEGER PRIMARY KEY,
  Program_ID INTEGER,
  Date TEXT,
  Share_in_percent REAL,
  FOREIGN KEY (Program_ID) REFERENCES program(Program_ID),
  FOREIGN KEY (Channel_ID) REFERENCES channel(Channel_ID)
);

------------------------------------------------------------------------------------------
database_id: aircraft
database schema :
CREATE TABLE pilot (
  Pilot_Id INTEGER PRIMARY KEY,
  Name TEXT,
  Age REAL
);

CREATE TABLE aircraft (
  Aircraft_ID INTEGER PRIMARY KEY,
  Aircraft TEXT,
  Description TEXT,
  Max_Gross_Weight TEXT,
  Total_disk_area TEXT,
  Max_disk_Loading TEXT
);

CREATE TABLE match (
  Round INTEGER PRIMARY KEY,
  Location TEXT,
  Country TEXT,
  Date TEXT,
  Fastest_Qualifying TEXT,
  Winning_Pilot TEXT,
  Winning_Aircraft TEXT,
  FOREIGN KEY (Winning_Pilot) REFERENCES pilot(Pilot_Id),
  FOREIGN KEY (Winning_Aircraft) REFERENCES aircraft(Aircraft_ID)
);

CREATE TABLE airport (
  Airport_ID INTEGER PRIMARY KEY,
  Airport_Name TEXT,
  Total_Passengers REAL,
  %_Change_2007 TEXT,
  International_Passengers REAL,
  Domestic_Passengers REAL,
  Transit_Passengers REAL,
  Aircraft_Movements REAL,
  Freight_Metric_Tonnes REAL
);

CREATE TABLE airport_aircraft (
  ID REAL,
  Airport_ID INTEGER PRIMARY KEY,
  Aircraft_ID INTEGER,
  FOREIGN KEY (Aircraft_ID) REFERENCES aircraft(Aircraft_ID),
  FOREIGN KEY (Airport_ID) REFERENCES airport(Airport_ID)
);

------------------------------------------------------------------------------------------
database_id: restaurant_1
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Restaurant (
  ResID INTEGER PRIMARY KEY,
  ResName TEXT,
  Address TEXT,
  Rating REAL
);

CREATE TABLE Type_Of_Restaurant (
  ResID INTEGER,
  ResTypeID INTEGER,
  FOREIGN KEY (ResTypeID) REFERENCES Restaurant_Type(ResTypeID),
  FOREIGN KEY (ResID) REFERENCES Restaurant(ResID)
);

CREATE TABLE Restaurant_Type (
  ResTypeID INTEGER PRIMARY KEY,
  ResTypeName TEXT,
  ResTypeDescription TEXT
);

CREATE TABLE Visits_Restaurant (
  StuID INTEGER,
  ResID INTEGER,
  Time DATETIME,
  Spent REAL,
  FOREIGN KEY (ResID) REFERENCES Restaurant(ResID),
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

------------------------------------------------------------------------------------------
database_id: customers_and_invoices
database schema :
CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  customer_first_name TEXT,
  customer_middle_initial TEXT,
  customer_last_name TEXT,
  gender TEXT,
  email_address TEXT,
  login_name TEXT,
  login_password TEXT,
  phone_number TEXT,
  town_city TEXT,
  state_county_province TEXT,
  country TEXT
);

CREATE TABLE Orders (
  order_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  date_order_placed DATETIME,
  order_details TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Invoices (
  invoice_number INTEGER PRIMARY KEY,
  order_id INTEGER,
  invoice_date DATETIME,
  FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

CREATE TABLE Accounts (
  account_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  date_account_opened DATETIME,
  account_name TEXT,
  other_account_details TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Product_Categories (
  production_type_code TEXT PRIMARY KEY,
  product_type_description TEXT,
  vat_rating REAL
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  parent_product_id REAL,
  production_type_code TEXT,
  unit_price REAL,
  product_name TEXT,
  product_color TEXT,
  product_size TEXT,
  FOREIGN KEY (production_type_code) REFERENCES Product_Categories(production_type_code)
);

CREATE TABLE Financial_Transactions (
  transaction_id REAL,
  account_id INTEGER,
  invoice_number INTEGER,
  transaction_type TEXT,
  transaction_date DATETIME,
  transaction_amount REAL,
  transaction_comment TEXT,
  other_transaction_details TEXT,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id),
  FOREIGN KEY (invoice_number) REFERENCES Invoices(invoice_number)
);

CREATE TABLE Order_Items (
  order_item_id INTEGER PRIMARY KEY,
  order_id INTEGER,
  product_id INTEGER,
  product_quantity TEXT,
  other_order_item_details TEXT,
  FOREIGN KEY (order_id) REFERENCES Orders(order_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Invoice_Line_Items (
  order_item_id INTEGER,
  invoice_number INTEGER,
  product_id INTEGER,
  product_title TEXT,
  product_quantity TEXT,
  product_price REAL,
  derived_product_cost REAL,
  derived_vat_payable REAL,
  derived_total_cost REAL,
  FOREIGN KEY (product_id) REFERENCES Products(product_id),
  FOREIGN KEY (invoice_number) REFERENCES Invoices(invoice_number),
  FOREIGN KEY (order_item_id) REFERENCES Order_Items(order_item_id)
);

------------------------------------------------------------------------------------------
database_id: insurance_and_eClaims
database schema :
CREATE TABLE Customers (
  Customer_ID INTEGER PRIMARY KEY,
  Customer_Details TEXT
);

CREATE TABLE Staff (
  Staff_ID INTEGER PRIMARY KEY,
  Staff_Details TEXT
);

CREATE TABLE Policies (
  Policy_ID INTEGER PRIMARY KEY,
  Customer_ID INTEGER,
  Policy_Type_Code TEXT,
  Start_Date DATETIME,
  End_Date DATETIME,
  FOREIGN KEY (Customer_ID) REFERENCES Customers(Customer_ID)
);

CREATE TABLE Claim_Headers (
  Claim_Header_ID INTEGER PRIMARY KEY,
  Claim_Status_Code TEXT,
  Claim_Type_Code TEXT,
  Policy_ID INTEGER,
  Date_of_Claim DATETIME,
  Date_of_Settlement DATETIME,
  Amount_Claimed REAL,
  Amount_Piad REAL,
  FOREIGN KEY (Policy_ID) REFERENCES Policies(Policy_ID)
);

CREATE TABLE Claims_Documents (
  Claim_ID INTEGER PRIMARY KEY,
  Document_Type_Code TEXT,
  Created_by_Staff_ID INTEGER,
  Created_Date REAL,
  FOREIGN KEY (Created_by_Staff_ID) REFERENCES Staff(Staff_ID),
  FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers(Claim_Header_ID)
);

CREATE TABLE Claims_Processing_Stages (
  Claim_Stage_ID INTEGER PRIMARY KEY,
  Next_Claim_Stage_ID REAL,
  Claim_Status_Name TEXT,
  Claim_Status_Description TEXT
);

CREATE TABLE Claims_Processing (
  Claim_Processing_ID INTEGER PRIMARY KEY,
  Claim_ID INTEGER,
  Claim_Outcome_Code TEXT,
  Claim_Stage_ID REAL,
  Staff_ID INTEGER,
  FOREIGN KEY (Staff_ID) REFERENCES Staff(Staff_ID),
  FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers(Claim_Header_ID)
);

------------------------------------------------------------------------------------------
database_id: college_1
database schema :
CREATE TABLE CLASS (
  CLASS_CODE TEXT PRIMARY KEY,
  CRS_CODE TEXT,
  CLASS_SECTION TEXT,
  CLASS_TIME TEXT,
  CLASS_ROOM TEXT,
  PROF_NUM INTEGER,
  FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM),
  FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE)
);

CREATE TABLE COURSE (
  CRS_CODE TEXT PRIMARY KEY,
  DEPT_CODE TEXT,
  CRS_DESCRIPTION TEXT,
  CRS_CREDIT REAL,
  FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE)
);

CREATE TABLE DEPARTMENT (
  DEPT_CODE TEXT PRIMARY KEY,
  DEPT_NAME TEXT,
  SCHOOL_CODE TEXT,
  EMP_NUM INTEGER,
  DEPT_ADDRESS TEXT,
  DEPT_EXTENSION TEXT,
  FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM)
);

CREATE TABLE EMPLOYEE (
  EMP_NUM INTEGER PRIMARY KEY,
  EMP_LNAME TEXT,
  EMP_FNAME TEXT,
  EMP_INITIAL TEXT,
  EMP_JOBCODE TEXT,
  EMP_HIREDATE DATETIME,
  EMP_DOB DATETIME
);

CREATE TABLE ENROLL (
  CLASS_CODE TEXT,
  STU_NUM INTEGER,
  ENROLL_GRADE TEXT,
  FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM),
  FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE)
);

CREATE TABLE PROFESSOR (
  EMP_NUM INTEGER,
  DEPT_CODE TEXT,
  PROF_OFFICE TEXT,
  PROF_EXTENSION TEXT,
  PROF_HIGH_DEGREE TEXT,
  FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE),
  FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM)
);

CREATE TABLE STUDENT (
  STU_NUM INTEGER PRIMARY KEY,
  STU_LNAME TEXT,
  STU_FNAME TEXT,
  STU_INIT TEXT,
  STU_DOB DATETIME,
  STU_HRS REAL,
  STU_CLASS TEXT,
  STU_GPA REAL,
  STU_TRANSFER REAL,
  DEPT_CODE TEXT,
  STU_PHONE TEXT,
  PROF_NUM REAL,
  FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE)
);

------------------------------------------------------------------------------------------
database_id: local_govt_mdm
database schema :
CREATE TABLE Customer_Master_Index (
  master_customer_id INTEGER PRIMARY KEY,
  cmi_details TEXT
);

CREATE TABLE CMI_Cross_References (
  cmi_cross_ref_id INTEGER PRIMARY KEY,
  master_customer_id INTEGER,
  source_system_code TEXT,
  FOREIGN KEY (master_customer_id) REFERENCES Customer_Master_Index(master_customer_id)
);

CREATE TABLE Council_Tax (
  council_tax_id INTEGER PRIMARY KEY,
  cmi_cross_ref_id INTEGER,
  FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE Business_Rates (
  business_rates_id INTEGER PRIMARY KEY,
  cmi_cross_ref_id INTEGER,
  FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE Benefits_Overpayments (
  council_tax_id INTEGER PRIMARY KEY,
  cmi_cross_ref_id INTEGER,
  FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE Parking_Fines (
  council_tax_id INTEGER PRIMARY KEY,
  cmi_cross_ref_id INTEGER,
  FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE Rent_Arrears (
  council_tax_id INTEGER PRIMARY KEY,
  cmi_cross_ref_id INTEGER,
  FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE Electoral_Register (
  electoral_register_id INTEGER PRIMARY KEY,
  cmi_cross_ref_id INTEGER,
  FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

------------------------------------------------------------------------------------------
database_id: book_2
database schema :
CREATE TABLE publication (
  Publication_ID INTEGER PRIMARY KEY,
  Book_ID INTEGER,
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL,
  FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)
);

CREATE TABLE book (
  Book_ID INTEGER PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

------------------------------------------------------------------------------------------
database_id: hr_1
database schema :
CREATE TABLE regions (
  REGION_ID INTEGER PRIMARY KEY,
  REGION_NAME TEXT
);

CREATE TABLE countries (
  COUNTRY_ID TEXT PRIMARY KEY,
  COUNTRY_NAME TEXT,
  REGION_ID INTEGER,
  FOREIGN KEY (REGION_ID) REFERENCES regions(REGION_ID)
);

CREATE TABLE departments (
  DEPARTMENT_ID INTEGER PRIMARY KEY,
  DEPARTMENT_NAME TEXT,
  MANAGER_ID REAL,
  LOCATION_ID REAL
);

CREATE TABLE jobs (
  JOB_ID TEXT PRIMARY KEY,
  JOB_TITLE TEXT,
  MIN_SALARY REAL,
  MAX_SALARY REAL
);

CREATE TABLE employees (
  EMPLOYEE_ID INTEGER PRIMARY KEY,
  FIRST_NAME TEXT,
  LAST_NAME TEXT,
  EMAIL TEXT,
  PHONE_NUMBER TEXT,
  HIRE_DATE DATETIME,
  JOB_ID TEXT,
  SALARY REAL,
  COMMISSION_PCT REAL,
  MANAGER_ID REAL,
  DEPARTMENT_ID INTEGER,
  FOREIGN KEY (JOB_ID) REFERENCES jobs(JOB_ID),
  FOREIGN KEY (DEPARTMENT_ID) REFERENCES departments(DEPARTMENT_ID)
);

CREATE TABLE job_history (
  EMPLOYEE_ID INTEGER PRIMARY KEY,
  START_DATE DATETIME,
  END_DATE DATETIME,
  JOB_ID TEXT,
  DEPARTMENT_ID INTEGER,
  FOREIGN KEY (JOB_ID) REFERENCES jobs(JOB_ID),
  FOREIGN KEY (DEPARTMENT_ID) REFERENCES departments(DEPARTMENT_ID),
  FOREIGN KEY (EMPLOYEE_ID) REFERENCES employees(EMPLOYEE_ID)
);

CREATE TABLE locations (
  LOCATION_ID INTEGER PRIMARY KEY,
  STREET_ADDRESS TEXT,
  POSTAL_CODE TEXT,
  CITY TEXT,
  STATE_PROVINCE TEXT,
  COUNTRY_ID TEXT,
  FOREIGN KEY (COUNTRY_ID) REFERENCES countries(COUNTRY_ID)
);

------------------------------------------------------------------------------------------
database_id: soccer_1
database schema :
CREATE TABLE Player_Attributes (
  id INTEGER PRIMARY KEY,
  player_fifa_api_id INTEGER,
  player_api_id INTEGER,
  date TEXT,
  overall_rating REAL,
  potential REAL,
  preferred_foot TEXT,
  attacking_work_rate TEXT,
  defensive_work_rate TEXT,
  crossing REAL,
  finishing REAL,
  heading_accuracy REAL,
  short_passing REAL,
  volleys REAL,
  dribbling REAL,
  curve REAL,
  free_kick_accuracy REAL,
  long_passing REAL,
  ball_control REAL,
  acceleration REAL,
  sprint_speed REAL,
  agility REAL,
  reactions REAL,
  balance REAL,
  shot_power REAL,
  jumping REAL,
  stamina REAL,
  strength REAL,
  long_shots REAL,
  aggression REAL,
  interceptions REAL,
  positioning REAL,
  vision REAL,
  penalties REAL,
  marking REAL,
  standing_tackle REAL,
  sliding_tackle REAL,
  gk_diving REAL,
  gk_handling REAL,
  gk_kicking REAL,
  gk_positioning REAL,
  gk_reflexes REAL,
  FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
  FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id)
);

CREATE TABLE sqlite_sequence (
  name TEXT,
  seq TEXT
);

CREATE TABLE Player (
  id INTEGER PRIMARY KEY,
  player_api_id REAL,
  player_name TEXT,
  player_fifa_api_id REAL,
  birthday TEXT,
  height REAL,
  weight REAL
);

CREATE TABLE League (
  id INTEGER PRIMARY KEY,
  country_id INTEGER,
  name TEXT,
  FOREIGN KEY (country_id) REFERENCES Country(id)
);

CREATE TABLE Country (
  id INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE Team (
  id INTEGER PRIMARY KEY,
  team_api_id REAL,
  team_fifa_api_id REAL,
  team_long_name TEXT,
  team_short_name TEXT
);

CREATE TABLE Team_Attributes (
  id INTEGER PRIMARY KEY,
  team_fifa_api_id INTEGER,
  team_api_id INTEGER,
  date TEXT,
  buildUpPlaySpeed REAL,
  buildUpPlaySpeedClass TEXT,
  buildUpPlayDribbling REAL,
  buildUpPlayDribblingClass TEXT,
  buildUpPlayPassing REAL,
  buildUpPlayPassingClass TEXT,
  buildUpPlayPositioningClass TEXT,
  chanceCreationPassing REAL,
  chanceCreationPassingClass TEXT,
  chanceCreationCrossing REAL,
  chanceCreationCrossingClass TEXT,
  chanceCreationShooting REAL,
  chanceCreationShootingClass TEXT,
  chanceCreationPositioningClass TEXT,
  defencePressure REAL,
  defencePressureClass TEXT,
  defenceAggression REAL,
  defenceAggressionClass TEXT,
  defenceTeamWidth REAL,
  defenceTeamWidthClass TEXT,
  defenceDefenderLineClass TEXT,
  FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
  FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id)
);

------------------------------------------------------------------------------------------
database_id: sakila_1
database schema :
CREATE TABLE actor (
  actor_id INTEGER PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  last_update DATETIME
);

CREATE TABLE address (
  address_id INTEGER PRIMARY KEY,
  address TEXT,
  address2 TEXT,
  district TEXT,
  city_id INTEGER,
  postal_code TEXT,
  phone TEXT,
  last_update DATETIME,
  FOREIGN KEY (city_id) REFERENCES city(city_id)
);

CREATE TABLE category (
  category_id INTEGER PRIMARY KEY,
  name TEXT,
  last_update DATETIME
);

CREATE TABLE city (
  city_id INTEGER PRIMARY KEY,
  city TEXT,
  country_id INTEGER,
  last_update DATETIME,
  FOREIGN KEY (country_id) REFERENCES country(country_id)
);

CREATE TABLE country (
  country_id INTEGER PRIMARY KEY,
  country TEXT,
  last_update DATETIME
);

CREATE TABLE customer (
  customer_id INTEGER PRIMARY KEY,
  store_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  address_id INTEGER,
  active BOOLEAN,
  create_date DATETIME,
  last_update DATETIME,
  FOREIGN KEY (store_id) REFERENCES store(store_id),
  FOREIGN KEY (address_id) REFERENCES address(address_id)
);

CREATE TABLE film (
  film_id INTEGER PRIMARY KEY,
  title TEXT,
  description TEXT,
  release_year DATETIME,
  language_id INTEGER,
  original_language_id INTEGER,
  rental_duration REAL,
  rental_rate REAL,
  length REAL,
  replacement_cost REAL,
  rating TEXT,
  special_features TEXT,
  last_update DATETIME,
  FOREIGN KEY (original_language_id) REFERENCES language(language_id),
  FOREIGN KEY (language_id) REFERENCES language(language_id)
);

CREATE TABLE film_actor (
  actor_id INTEGER PRIMARY KEY,
  film_id INTEGER,
  last_update DATETIME,
  FOREIGN KEY (film_id) REFERENCES film(film_id),
  FOREIGN KEY (actor_id) REFERENCES actor(actor_id)
);

CREATE TABLE film_category (
  film_id INTEGER PRIMARY KEY,
  category_id INTEGER,
  last_update DATETIME,
  FOREIGN KEY (category_id) REFERENCES category(category_id),
  FOREIGN KEY (film_id) REFERENCES film(film_id)
);

CREATE TABLE film_text (
  film_id INTEGER PRIMARY KEY,
  title TEXT,
  description TEXT
);

CREATE TABLE inventory (
  inventory_id INTEGER PRIMARY KEY,
  film_id INTEGER,
  store_id INTEGER,
  last_update DATETIME,
  FOREIGN KEY (film_id) REFERENCES film(film_id),
  FOREIGN KEY (store_id) REFERENCES store(store_id)
);

CREATE TABLE language (
  language_id INTEGER PRIMARY KEY,
  name TEXT,
  last_update DATETIME
);

CREATE TABLE payment (
  payment_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  staff_id INTEGER,
  rental_id INTEGER,
  amount REAL,
  payment_date DATETIME,
  last_update DATETIME,
  FOREIGN KEY (staff_id) REFERENCES staff(staff_id),
  FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
  FOREIGN KEY (rental_id) REFERENCES rental(rental_id)
);

CREATE TABLE rental (
  rental_id INTEGER PRIMARY KEY,
  rental_date DATETIME,
  inventory_id INTEGER,
  customer_id INTEGER,
  return_date DATETIME,
  staff_id INTEGER,
  last_update DATETIME,
  FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
  FOREIGN KEY (inventory_id) REFERENCES inventory(inventory_id),
  FOREIGN KEY (staff_id) REFERENCES staff(staff_id)
);

CREATE TABLE staff (
  staff_id INTEGER PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  address_id INTEGER,
  picture TEXT,
  email TEXT,
  store_id REAL,
  active BOOLEAN,
  username TEXT,
  password TEXT,
  last_update DATETIME,
  FOREIGN KEY (address_id) REFERENCES address(address_id)
);

CREATE TABLE store (
  store_id INTEGER PRIMARY KEY,
  manager_staff_id INTEGER,
  address_id INTEGER,
  last_update DATETIME,
  FOREIGN KEY (address_id) REFERENCES address(address_id),
  FOREIGN KEY (manager_staff_id) REFERENCES staff(staff_id)
);

------------------------------------------------------------------------------------------
database_id: real_estate_properties
database schema :
CREATE TABLE Ref_Feature_Types (
  feature_type_code TEXT PRIMARY KEY,
  feature_type_name TEXT
);

CREATE TABLE Ref_Property_Types (
  property_type_code TEXT PRIMARY KEY,
  property_type_description TEXT
);

CREATE TABLE Other_Available_Features (
  feature_id INTEGER PRIMARY KEY,
  feature_type_code TEXT,
  feature_name TEXT,
  feature_description TEXT,
  FOREIGN KEY (feature_type_code) REFERENCES Ref_Feature_Types(feature_type_code)
);

CREATE TABLE Properties (
  property_id INTEGER PRIMARY KEY,
  property_type_code TEXT,
  date_on_market DATETIME,
  date_sold DATETIME,
  property_name TEXT,
  property_address TEXT,
  room_count REAL,
  vendor_requested_price REAL,
  buyer_offered_price REAL,
  agreed_selling_price REAL,
  apt_feature_1 TEXT,
  apt_feature_2 TEXT,
  apt_feature_3 TEXT,
  fld_feature_1 TEXT,
  fld_feature_2 TEXT,
  fld_feature_3 TEXT,
  hse_feature_1 TEXT,
  hse_feature_2 TEXT,
  hse_feature_3 TEXT,
  oth_feature_1 TEXT,
  oth_feature_2 TEXT,
  oth_feature_3 TEXT,
  shp_feature_1 TEXT,
  shp_feature_2 TEXT,
  shp_feature_3 TEXT,
  other_property_details TEXT,
  FOREIGN KEY (property_type_code) REFERENCES Ref_Property_Types(property_type_code)
);

CREATE TABLE Other_Property_Features (
  property_id INTEGER,
  feature_id INTEGER,
  property_feature_description TEXT,
  FOREIGN KEY (property_id) REFERENCES Properties(property_id),
  FOREIGN KEY (feature_id) REFERENCES Other_Available_Features(feature_id)
);

------------------------------------------------------------------------------------------
database_id: college_3
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Faculty (
  FacID INTEGER PRIMARY KEY,
  Lname TEXT,
  Fname TEXT,
  Rank TEXT,
  Sex TEXT,
  Phone REAL,
  Room TEXT,
  Building TEXT
);

CREATE TABLE Department (
  DNO INTEGER PRIMARY KEY,
  Division TEXT,
  DName TEXT,
  Room TEXT,
  Building TEXT,
  DPhone REAL
);

CREATE TABLE Member_of (
  FacID INTEGER,
  DNO INTEGER,
  Appt_Type TEXT,
  FOREIGN KEY (DNO) REFERENCES Department(DNO),
  FOREIGN KEY (FacID) REFERENCES Faculty(FacID)
);

CREATE TABLE Course (
  CID TEXT PRIMARY KEY,
  CName TEXT,
  Credits REAL,
  Instructor INTEGER,
  Days TEXT,
  Hours TEXT,
  DNO INTEGER,
  FOREIGN KEY (DNO) REFERENCES Department(DNO),
  FOREIGN KEY (Instructor) REFERENCES Faculty(FacID)
);

CREATE TABLE Minor_in (
  StuID INTEGER,
  DNO INTEGER,
  FOREIGN KEY (DNO) REFERENCES Department(DNO),
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

CREATE TABLE Enrolled_in (
  StuID INTEGER,
  CID TEXT,
  Grade TEXT,
  FOREIGN KEY (Grade) REFERENCES Gradeconversion(lettergrade),
  FOREIGN KEY (CID) REFERENCES Course(CID),
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

CREATE TABLE Gradeconversion (
  lettergrade TEXT PRIMARY KEY,
  gradepoint REAL
);

------------------------------------------------------------------------------------------
database_id: course_teach
database schema :
CREATE TABLE course (
  Course_ID INTEGER PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE teacher (
  Teacher_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE course_arrange (
  Course_ID INTEGER PRIMARY KEY,
  Teacher_ID INTEGER,
  Grade REAL,
  FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID),
  FOREIGN KEY (Course_ID) REFERENCES course(Course_ID)
);

------------------------------------------------------------------------------------------
database_id: roller_coaster
database schema :
CREATE TABLE roller_coaster (
  Roller_Coaster_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INTEGER,
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT,
  FOREIGN KEY (Country_ID) REFERENCES country(Country_ID)
);

CREATE TABLE country (
  Country_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Population REAL,
  Area REAL,
  Languages TEXT
);

------------------------------------------------------------------------------------------
database_id: customer_deliveries
database schema :
CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  product_name TEXT,
  product_price REAL,
  product_description TEXT
);

CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  address_details TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  payment_method TEXT,
  customer_name TEXT,
  customer_phone TEXT,
  customer_email TEXT,
  date_became_customer DATETIME
);

CREATE TABLE Regular_Orders (
  regular_order_id INTEGER PRIMARY KEY,
  distributer_id INTEGER,
  FOREIGN KEY (distributer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Regular_Order_Products (
  regular_order_id INTEGER,
  product_id INTEGER,
  FOREIGN KEY (regular_order_id) REFERENCES Regular_Orders(regular_order_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Actual_Orders (
  actual_order_id INTEGER PRIMARY KEY,
  order_status_code TEXT,
  regular_order_id INTEGER,
  actual_order_date DATETIME,
  FOREIGN KEY (regular_order_id) REFERENCES Regular_Orders(regular_order_id)
);

CREATE TABLE Actual_Order_Products (
  actual_order_id INTEGER,
  product_id INTEGER,
  FOREIGN KEY (actual_order_id) REFERENCES Actual_Orders(actual_order_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Customer_Addresses (
  customer_id INTEGER,
  address_id INTEGER,
  date_from DATETIME,
  address_type TEXT,
  date_to DATETIME,
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id),
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Delivery_Routes (
  route_id INTEGER PRIMARY KEY,
  route_name TEXT,
  other_route_details TEXT
);

CREATE TABLE Delivery_Route_Locations (
  location_code TEXT PRIMARY KEY,
  route_id INTEGER,
  location_address_id INTEGER,
  location_name TEXT,
  FOREIGN KEY (route_id) REFERENCES Delivery_Routes(route_id),
  FOREIGN KEY (location_address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Trucks (
  truck_id INTEGER PRIMARY KEY,
  truck_licence_number TEXT,
  truck_details TEXT
);

CREATE TABLE Employees (
  employee_id INTEGER PRIMARY KEY,
  employee_address_id INTEGER,
  employee_name TEXT,
  employee_phone TEXT,
  FOREIGN KEY (employee_address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Order_Deliveries (
  location_code TEXT,
  actual_order_id INTEGER,
  delivery_status_code TEXT,
  driver_employee_id INTEGER,
  truck_id INTEGER,
  delivery_date DATETIME,
  FOREIGN KEY (driver_employee_id) REFERENCES Employees(employee_id),
  FOREIGN KEY (location_code) REFERENCES Delivery_Route_Locations(location_code),
  FOREIGN KEY (actual_order_id) REFERENCES Actual_Orders(actual_order_id),
  FOREIGN KEY (truck_id) REFERENCES Trucks(truck_id)
);

------------------------------------------------------------------------------------------
database_id: game_injury
database schema :
CREATE TABLE stadium (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Home_Games REAL,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

CREATE TABLE game (
  stadium_id INTEGER,
  id INTEGER PRIMARY KEY,
  Season REAL,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT,
  FOREIGN KEY (stadium_id) REFERENCES stadium(id)
);

CREATE TABLE injury_accident (
  game_id INTEGER,
  id INTEGER PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT,
  FOREIGN KEY (game_id) REFERENCES game(id)
);

------------------------------------------------------------------------------------------
database_id: school_finance
database schema :
CREATE TABLE School (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment REAL,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

CREATE TABLE budget (
  School_id INTEGER PRIMARY KEY,
  Year REAL,
  Budgeted REAL,
  total_budget_percent_budgeted REAL,
  Invested REAL,
  total_budget_percent_invested REAL,
  Budget_invested_percent TEXT,
  FOREIGN KEY (School_id) REFERENCES School(School_id)
);

CREATE TABLE endowment (
  endowment_id INTEGER PRIMARY KEY,
  School_id INTEGER,
  donator_name TEXT,
  amount REAL,
  FOREIGN KEY (School_id) REFERENCES School(School_id)
);

------------------------------------------------------------------------------------------
database_id: scholar
database schema :
CREATE TABLE venue (
  venueId INTEGER PRIMARY KEY,
  venueName TEXT
);

CREATE TABLE author (
  authorId INTEGER PRIMARY KEY,
  authorName TEXT
);

CREATE TABLE dataset (
  datasetId INTEGER PRIMARY KEY,
  datasetName TEXT
);

CREATE TABLE journal (
  journalId INTEGER PRIMARY KEY,
  journalName TEXT
);

CREATE TABLE keyphrase (
  keyphraseId INTEGER PRIMARY KEY,
  keyphraseName TEXT
);

CREATE TABLE paper (
  paperId INTEGER PRIMARY KEY,
  title TEXT,
  venueId INTEGER,
  year REAL,
  numCiting REAL,
  numCitedBy REAL,
  journalId INTEGER,
  FOREIGN KEY (venueId) REFERENCES venue(venueId),
  FOREIGN KEY (journalId) REFERENCES journal(journalId)
);

CREATE TABLE cite (
  citingPaperId INTEGER PRIMARY KEY,
  citedPaperId INTEGER,
  FOREIGN KEY (citingPaperId) REFERENCES paper(paperId),
  FOREIGN KEY (citedPaperId) REFERENCES paper(paperId)
);

CREATE TABLE paperDataset (
  paperId REAL,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE paperKeyphrase (
  paperId INTEGER,
  keyphraseId INTEGER PRIMARY KEY,
  FOREIGN KEY (keyphraseId) REFERENCES keyphrase(keyphraseId),
  FOREIGN KEY (paperId) REFERENCES paper(paperId)
);

CREATE TABLE writes (
  paperId INTEGER PRIMARY KEY,
  authorId INTEGER,
  FOREIGN KEY (authorId) REFERENCES author(authorId),
  FOREIGN KEY (paperId) REFERENCES paper(paperId)
);

------------------------------------------------------------------------------------------
database_id: voter_1
database schema :
CREATE TABLE AREA_CODE_STATE (
  area_code INTEGER PRIMARY KEY,
  state TEXT
);

CREATE TABLE CONTESTANTS (
  contestant_number INTEGER PRIMARY KEY,
  contestant_name TEXT
);

CREATE TABLE VOTES (
  vote_id INTEGER PRIMARY KEY,
  phone_number REAL,
  state TEXT,
  contestant_number INTEGER,
  created DATETIME,
  FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number),
  FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state)
);

------------------------------------------------------------------------------------------
database_id: match_season
database schema :
CREATE TABLE country (
  Country_id INTEGER PRIMARY KEY,
  Country_name TEXT,
  Capital TEXT,
  Official_native_language TEXT
);

CREATE TABLE team (
  Team_id INTEGER PRIMARY KEY,
  Name TEXT
);

CREATE TABLE match_season (
  Season INTEGER PRIMARY KEY,
  Player TEXT,
  Position TEXT,
  Country INTEGER,
  Team INTEGER,
  Draft_Pick_Number REAL,
  Draft_Class TEXT,
  College TEXT,
  FOREIGN KEY (Team) REFERENCES team(Team_id),
  FOREIGN KEY (Country) REFERENCES country(Country_id)
);

CREATE TABLE player (
  Player_ID INTEGER PRIMARY KEY,
  Player TEXT,
  Years_Played TEXT,
  Total_WL TEXT,
  Singles_WL TEXT,
  Doubles_WL TEXT,
  Team INTEGER,
  FOREIGN KEY (Team) REFERENCES team(Team_id)
);

------------------------------------------------------------------------------------------
database_id: small_bank_1
database schema :
CREATE TABLE ACCOUNTS (
  custid INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE SAVINGS (
  custid INTEGER PRIMARY KEY,
  balance REAL,
  FOREIGN KEY (custid) REFERENCES ACCOUNTS(custid)
);

CREATE TABLE CHECKING (
  custid INTEGER PRIMARY KEY,
  balance REAL,
  FOREIGN KEY (custid) REFERENCES ACCOUNTS(custid)
);

------------------------------------------------------------------------------------------
database_id: wta_1
database schema :
CREATE TABLE players (
  player_id INTEGER PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATETIME,
  country_code TEXT
);

CREATE TABLE matches (
  best_of REAL,
  draw_size REAL,
  loser_age REAL,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht REAL,
  loser_id INTEGER,
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank REAL,
  loser_rank_points REAL,
  loser_seed REAL,
  match_num REAL,
  minutes REAL,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATETIME,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age REAL,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht REAL,
  winner_id INTEGER,
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank REAL,
  winner_rank_points REAL,
  winner_seed REAL,
  year REAL,
  FOREIGN KEY (winner_id) REFERENCES players(player_id),
  FOREIGN KEY (loser_id) REFERENCES players(player_id)
);

CREATE TABLE rankings (
  ranking_date DATETIME,
  ranking REAL,
  player_id INTEGER,
  ranking_points REAL,
  tours REAL,
  FOREIGN KEY (player_id) REFERENCES players(player_id)
);

------------------------------------------------------------------------------------------
database_id: yelp
database schema :
CREATE TABLE business (
  bid INTEGER PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count REAL,
  is_open REAL,
  rating REAL,
  state TEXT
);

CREATE TABLE category (
  id INTEGER PRIMARY KEY,
  business_id TEXT,
  category_name TEXT,
  FOREIGN KEY (business_id) REFERENCES business(business_id)
);

CREATE TABLE user (
  uid INTEGER PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE checkin (
  cid INTEGER PRIMARY KEY,
  business_id TEXT,
  count REAL,
  day TEXT,
  FOREIGN KEY (business_id) REFERENCES business(business_id)
);

CREATE TABLE neighbourhood (
  id INTEGER PRIMARY KEY,
  business_id TEXT,
  neighbourhood_name TEXT,
  FOREIGN KEY (business_id) REFERENCES business(business_id)
);

CREATE TABLE review (
  rid INTEGER PRIMARY KEY,
  business_id TEXT,
  user_id TEXT,
  rating REAL,
  text TEXT,
  year REAL,
  month TEXT,
  FOREIGN KEY (user_id) REFERENCES user(user_id),
  FOREIGN KEY (business_id) REFERENCES business(business_id)
);

CREATE TABLE tip (
  tip_id INTEGER PRIMARY KEY,
  business_id TEXT,
  text TEXT,
  user_id TEXT,
  likes REAL,
  year REAL,
  month TEXT,
  FOREIGN KEY (user_id) REFERENCES user(user_id),
  FOREIGN KEY (business_id) REFERENCES business(business_id)
);

------------------------------------------------------------------------------------------
database_id: student_1
database schema :
CREATE TABLE list (
  LastName TEXT PRIMARY KEY,
  FirstName TEXT,
  Grade REAL,
  Classroom REAL
);

CREATE TABLE teachers (
  LastName TEXT PRIMARY KEY,
  FirstName TEXT,
  Classroom REAL
);

------------------------------------------------------------------------------------------
database_id: manufacturer
database schema :
CREATE TABLE manufacturer (
  Manufacturer_ID INTEGER PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories REAL,
  Num_of_Shops REAL
);

CREATE TABLE furniture (
  Furniture_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Num_of_Component REAL,
  Market_Rate REAL
);

CREATE TABLE furniture_manufacte (
  Manufacturer_ID INTEGER PRIMARY KEY,
  Furniture_ID INTEGER,
  Price_in_Dollar REAL,
  FOREIGN KEY (Furniture_ID) REFERENCES furniture(Furniture_ID),
  FOREIGN KEY (Manufacturer_ID) REFERENCES manufacturer(Manufacturer_ID)
);

------------------------------------------------------------------------------------------
database_id: store_1
database schema :
CREATE TABLE artists (
  id INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE sqlite_sequence (
  name TEXT,
  seq TEXT
);

CREATE TABLE albums (
  id INTEGER PRIMARY KEY,
  title TEXT,
  artist_id INTEGER,
  FOREIGN KEY (artist_id) REFERENCES artists(id)
);

CREATE TABLE employees (
  id INTEGER PRIMARY KEY,
  last_name TEXT,
  first_name TEXT,
  title TEXT,
  reports_to INTEGER,
  birth_date DATETIME,
  hire_date DATETIME,
  address TEXT,
  city TEXT,
  state TEXT,
  country TEXT,
  postal_code TEXT,
  phone TEXT,
  fax TEXT,
  email TEXT,
  FOREIGN KEY (reports_to) REFERENCES employees(id)
);

CREATE TABLE customers (
  id INTEGER PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  company TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  country TEXT,
  postal_code TEXT,
  phone TEXT,
  fax TEXT,
  email TEXT,
  support_rep_id INTEGER,
  FOREIGN KEY (support_rep_id) REFERENCES employees(id)
);

CREATE TABLE genres (
  id INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE invoices (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  invoice_date DATETIME,
  billing_address TEXT,
  billing_city TEXT,
  billing_state TEXT,
  billing_country TEXT,
  billing_postal_code TEXT,
  total REAL,
  FOREIGN KEY (customer_id) REFERENCES customers(id)
);

CREATE TABLE media_types (
  id INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE tracks (
  id INTEGER PRIMARY KEY,
  name TEXT,
  album_id INTEGER,
  media_type_id INTEGER,
  genre_id INTEGER,
  composer TEXT,
  milliseconds REAL,
  bytes REAL,
  unit_price REAL,
  FOREIGN KEY (media_type_id) REFERENCES media_types(id),
  FOREIGN KEY (genre_id) REFERENCES genres(id),
  FOREIGN KEY (album_id) REFERENCES albums(id)
);

CREATE TABLE invoice_lines (
  id INTEGER PRIMARY KEY,
  invoice_id INTEGER,
  track_id INTEGER,
  unit_price REAL,
  quantity REAL,
  FOREIGN KEY (track_id) REFERENCES tracks(id),
  FOREIGN KEY (invoice_id) REFERENCES invoices(id)
);

CREATE TABLE playlists (
  id INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE playlist_tracks (
  playlist_id INTEGER PRIMARY KEY,
  track_id INTEGER,
  FOREIGN KEY (track_id) REFERENCES tracks(id),
  FOREIGN KEY (playlist_id) REFERENCES playlists(id)
);

------------------------------------------------------------------------------------------
database_id: train_station
database schema :
CREATE TABLE station (
  Station_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Annual_entry_exit REAL,
  Annual_interchanges REAL,
  Total_Passengers REAL,
  Location TEXT,
  Main_Services TEXT,
  Number_of_Platforms REAL
);

CREATE TABLE train (
  Train_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Time TEXT,
  Service TEXT
);

CREATE TABLE train_station (
  Train_ID INTEGER PRIMARY KEY,
  Station_ID INTEGER,
  FOREIGN KEY (Station_ID) REFERENCES station(Station_ID),
  FOREIGN KEY (Train_ID) REFERENCES train(Train_ID)
);

------------------------------------------------------------------------------------------
database_id: document_management
database schema :
CREATE TABLE Roles (
  role_code TEXT PRIMARY KEY,
  role_description TEXT
);

CREATE TABLE Users (
  user_id INTEGER PRIMARY KEY,
  role_code TEXT,
  user_name TEXT,
  user_login TEXT,
  password TEXT,
  FOREIGN KEY (role_code) REFERENCES Roles(role_code)
);

CREATE TABLE Document_Structures (
  document_structure_code TEXT PRIMARY KEY,
  parent_document_structure_code TEXT,
  document_structure_description TEXT
);

CREATE TABLE Functional_Areas (
  functional_area_code TEXT PRIMARY KEY,
  parent_functional_area_code TEXT,
  functional_area_description TEXT
);

CREATE TABLE Images (
  image_id INTEGER PRIMARY KEY,
  image_alt_text TEXT,
  image_name TEXT,
  image_url TEXT
);

CREATE TABLE Documents (
  document_code TEXT PRIMARY KEY,
  document_structure_code TEXT,
  document_type_code TEXT,
  access_count REAL,
  document_name TEXT,
  FOREIGN KEY (document_structure_code) REFERENCES Document_Structures(document_structure_code)
);

CREATE TABLE Document_Functional_Areas (
  document_code TEXT,
  functional_area_code TEXT,
  FOREIGN KEY (functional_area_code) REFERENCES Functional_Areas(functional_area_code),
  FOREIGN KEY (document_code) REFERENCES Documents(document_code)
);

CREATE TABLE Document_Sections (
  section_id INTEGER PRIMARY KEY,
  document_code TEXT,
  section_sequence REAL,
  section_code TEXT,
  section_title TEXT,
  FOREIGN KEY (document_code) REFERENCES Documents(document_code)
);

CREATE TABLE Document_Sections_Images (
  section_id INTEGER PRIMARY KEY,
  image_id INTEGER,
  FOREIGN KEY (image_id) REFERENCES Images(image_id),
  FOREIGN KEY (section_id) REFERENCES Document_Sections(section_id)
);

------------------------------------------------------------------------------------------
database_id: formula_1
database schema :
CREATE TABLE circuits (
  circuitId INTEGER PRIMARY KEY,
  circuitRef TEXT,
  name TEXT,
  location TEXT,
  country TEXT,
  lat REAL,
  lng REAL,
  alt REAL,
  url TEXT
);

CREATE TABLE races (
  raceId INTEGER PRIMARY KEY,
  year REAL,
  round REAL,
  circuitId INTEGER,
  name TEXT,
  date TEXT,
  time TEXT,
  url TEXT,
  FOREIGN KEY (circuitId) REFERENCES circuits(circuitId)
);

CREATE TABLE drivers (
  driverId INTEGER PRIMARY KEY,
  driverRef TEXT,
  number REAL,
  code TEXT,
  forename TEXT,
  surname TEXT,
  dob TEXT,
  nationality TEXT,
  url TEXT
);

CREATE TABLE status (
  statusId INTEGER PRIMARY KEY,
  status TEXT
);

CREATE TABLE seasons (
  year INTEGER PRIMARY KEY,
  url TEXT
);

CREATE TABLE constructors (
  constructorId INTEGER PRIMARY KEY,
  constructorRef TEXT,
  name TEXT,
  nationality TEXT,
  url TEXT
);

CREATE TABLE constructorStandings (
  constructorStandingsId INTEGER PRIMARY KEY,
  raceId INTEGER,
  constructorId INTEGER,
  points REAL,
  position REAL,
  positionText TEXT,
  wins REAL,
  FOREIGN KEY (raceId) REFERENCES races(raceId),
  FOREIGN KEY (constructorId) REFERENCES constructors(constructorId)
);

CREATE TABLE results (
  resultId INTEGER PRIMARY KEY,
  raceId INTEGER,
  driverId INTEGER,
  constructorId INTEGER,
  number REAL,
  grid REAL,
  position REAL,
  positionText TEXT,
  positionOrder REAL,
  points REAL,
  laps REAL,
  time TEXT,
  milliseconds REAL,
  fastestLap REAL,
  rank REAL,
  fastestLapTime TEXT,
  fastestLapSpeed TEXT,
  statusId REAL,
  FOREIGN KEY (driverId) REFERENCES drivers(driverId),
  FOREIGN KEY (raceId) REFERENCES races(raceId),
  FOREIGN KEY (constructorId) REFERENCES constructors(constructorId)
);

CREATE TABLE driverStandings (
  driverStandingsId INTEGER PRIMARY KEY,
  raceId INTEGER,
  driverId INTEGER,
  points REAL,
  position REAL,
  positionText TEXT,
  wins REAL,
  FOREIGN KEY (driverId) REFERENCES drivers(driverId),
  FOREIGN KEY (raceId) REFERENCES races(raceId)
);

CREATE TABLE constructorResults (
  constructorResultsId INTEGER PRIMARY KEY,
  raceId INTEGER,
  constructorId INTEGER,
  points REAL,
  status REAL,
  FOREIGN KEY (raceId) REFERENCES races(raceId),
  FOREIGN KEY (constructorId) REFERENCES constructors(constructorId)
);

CREATE TABLE qualifying (
  qualifyId INTEGER PRIMARY KEY,
  raceId INTEGER,
  driverId INTEGER,
  constructorId INTEGER,
  number REAL,
  position REAL,
  q1 TEXT,
  q2 TEXT,
  q3 TEXT,
  FOREIGN KEY (driverId) REFERENCES drivers(driverId),
  FOREIGN KEY (raceId) REFERENCES races(raceId),
  FOREIGN KEY (constructorId) REFERENCES constructors(constructorId)
);

CREATE TABLE pitStops (
  raceId INTEGER PRIMARY KEY,
  driverId INTEGER,
  stop REAL,
  lap REAL,
  time TEXT,
  duration TEXT,
  milliseconds REAL,
  FOREIGN KEY (driverId) REFERENCES drivers(driverId),
  FOREIGN KEY (raceId) REFERENCES races(raceId)
);

CREATE TABLE lapTimes (
  raceId INTEGER PRIMARY KEY,
  driverId INTEGER,
  lap REAL,
  position REAL,
  time TEXT,
  milliseconds REAL,
  FOREIGN KEY (driverId) REFERENCES drivers(driverId),
  FOREIGN KEY (raceId) REFERENCES races(raceId)
);

------------------------------------------------------------------------------------------
database_id: game_1
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Video_Games (
  GameID INTEGER PRIMARY KEY,
  GName TEXT,
  GType TEXT
);

CREATE TABLE Plays_Games (
  StuID INTEGER,
  GameID INTEGER,
  Hours_Played REAL,
  FOREIGN KEY (StuID) REFERENCES Student(StuID),
  FOREIGN KEY (GameID) REFERENCES Video_Games(GameID)
);

CREATE TABLE SportsInfo (
  StuID INTEGER,
  SportName TEXT,
  HoursPerWeek REAL,
  GamesPlayed REAL,
  OnScholarship TEXT,
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

------------------------------------------------------------------------------------------
database_id: loan_1
database schema :
CREATE TABLE bank (
  branch_ID INTEGER PRIMARY KEY,
  bname TEXT,
  no_of_customers REAL,
  city TEXT,
  state TEXT
);

CREATE TABLE customer (
  cust_ID TEXT PRIMARY KEY,
  cust_name TEXT,
  acc_type TEXT,
  acc_bal REAL,
  no_of_loans REAL,
  credit_score REAL,
  branch_ID INTEGER,
  state TEXT,
  FOREIGN KEY (branch_ID) REFERENCES bank(branch_ID)
);

CREATE TABLE loan (
  loan_ID TEXT PRIMARY KEY,
  loan_type TEXT,
  cust_ID TEXT,
  branch_ID TEXT,
  amount REAL,
  FOREIGN KEY (branch_ID) REFERENCES bank(branch_ID)
);

------------------------------------------------------------------------------------------
database_id: bike_1
database schema :
CREATE TABLE station (
  id INTEGER PRIMARY KEY,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count REAL,
  city TEXT,
  installation_date TEXT
);

CREATE TABLE status (
  station_id INTEGER,
  bikes_available REAL,
  docks_available REAL,
  time TEXT,
  FOREIGN KEY (station_id) REFERENCES station(id)
);

CREATE TABLE trip (
  id INTEGER PRIMARY KEY,
  duration REAL,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id REAL,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id REAL,
  bike_id REAL,
  subscription_type TEXT,
  zip_code REAL
);

CREATE TABLE weather (
  date TEXT,
  max_temperature_f REAL,
  mean_temperature_f REAL,
  min_temperature_f REAL,
  max_dew_point_f REAL,
  mean_dew_point_f REAL,
  min_dew_point_f REAL,
  max_humidity REAL,
  mean_humidity REAL,
  min_humidity REAL,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles REAL,
  mean_visibility_miles REAL,
  min_visibility_miles REAL,
  max_wind_Speed_mph REAL,
  mean_wind_speed_mph REAL,
  max_gust_speed_mph REAL,
  precipitation_inches REAL,
  cloud_cover REAL,
  events TEXT,
  wind_dir_degrees REAL,
  zip_code REAL
);

------------------------------------------------------------------------------------------
database_id: entrepreneur
database schema :
CREATE TABLE entrepreneur (
  Entrepreneur_ID INTEGER PRIMARY KEY,
  People_ID INTEGER,
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT,
  FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);

CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

------------------------------------------------------------------------------------------
database_id: orchestra
database schema :
CREATE TABLE conductor (
  Conductor_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Age REAL,
  Nationality TEXT,
  Year_of_Work REAL
);

CREATE TABLE orchestra (
  Orchestra_ID INTEGER PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INTEGER,
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT,
  FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)
);

CREATE TABLE performance (
  Performance_ID INTEGER PRIMARY KEY,
  Orchestra_ID INTEGER,
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT,
  FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)
);

CREATE TABLE show (
  Show_ID REAL,
  Performance_ID INTEGER,
  If_first_show TEXT,
  Result TEXT,
  Attendance REAL,
  FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID)
);

------------------------------------------------------------------------------------------
database_id: cre_Drama_Workshop_Groups
database schema :
CREATE TABLE Ref_Payment_Methods (
  payment_method_code TEXT PRIMARY KEY,
  payment_method_description TEXT
);

CREATE TABLE Ref_Service_Types (
  Service_Type_Code TEXT PRIMARY KEY,
  Parent_Service_Type_Code TEXT,
  Service_Type_Description TEXT
);

CREATE TABLE Addresses (
  Address_ID TEXT PRIMARY KEY,
  Line_1 TEXT,
  Line_2 TEXT,
  City_Town TEXT,
  State_County TEXT,
  Other_Details TEXT
);

CREATE TABLE Products (
  Product_ID TEXT PRIMARY KEY,
  Product_Name TEXT,
  Product_Price REAL,
  Product_Description TEXT,
  Other_Product_Service_Details TEXT
);

CREATE TABLE Marketing_Regions (
  Marketing_Region_Code TEXT PRIMARY KEY,
  Marketing_Region_Name TEXT,
  Marketing_Region_Descriptrion TEXT,
  Other_Details TEXT
);

CREATE TABLE Clients (
  Client_ID INTEGER PRIMARY KEY,
  Address_ID INTEGER,
  Customer_Email_Address TEXT,
  Customer_Name TEXT,
  Customer_Phone TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Address_ID) REFERENCES Addresses(Address_ID)
);

CREATE TABLE Drama_Workshop_Groups (
  Workshop_Group_ID INTEGER PRIMARY KEY,
  Address_ID INTEGER,
  Currency_Code TEXT,
  Marketing_Region_Code TEXT,
  Store_Name TEXT,
  Store_Phone TEXT,
  Store_Email_Address TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Address_ID) REFERENCES Addresses(Address_ID)
);

CREATE TABLE Performers (
  Performer_ID INTEGER PRIMARY KEY,
  Address_ID INTEGER,
  Customer_Name TEXT,
  Customer_Phone TEXT,
  Customer_Email_Address TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Address_ID) REFERENCES Addresses(Address_ID)
);

CREATE TABLE Customers (
  Customer_ID TEXT PRIMARY KEY,
  Address_ID INTEGER,
  Customer_Name TEXT,
  Customer_Phone TEXT,
  Customer_Email_Address TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Address_ID) REFERENCES Addresses(Address_ID)
);

CREATE TABLE Stores (
  Store_ID TEXT PRIMARY KEY,
  Address_ID INTEGER,
  Marketing_Region_Code TEXT,
  Store_Name TEXT,
  Store_Phone TEXT,
  Store_Email_Address TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions(Marketing_Region_Code),
  FOREIGN KEY (Address_ID) REFERENCES Addresses(Address_ID)
);

CREATE TABLE Bookings (
  Booking_ID INTEGER PRIMARY KEY,
  Customer_ID INTEGER,
  Workshop_Group_ID TEXT,
  Status_Code TEXT,
  Store_ID REAL,
  Order_Date DATETIME,
  Planned_Delivery_Date DATETIME,
  Actual_Delivery_Date DATETIME,
  Other_Order_Details TEXT,
  FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID),
  FOREIGN KEY (Customer_ID) REFERENCES Clients(Client_ID)
);

CREATE TABLE Performers_in_Bookings (
  Order_ID INTEGER PRIMARY KEY,
  Performer_ID INTEGER,
  FOREIGN KEY (Order_ID) REFERENCES Bookings(Booking_ID),
  FOREIGN KEY (Performer_ID) REFERENCES Performers(Performer_ID)
);

CREATE TABLE Customer_Orders (
  Order_ID INTEGER PRIMARY KEY,
  Customer_ID INTEGER,
  Store_ID INTEGER,
  Order_Date DATETIME,
  Planned_Delivery_Date DATETIME,
  Actual_Delivery_Date DATETIME,
  Other_Order_Details TEXT,
  FOREIGN KEY (Store_ID) REFERENCES Stores(Store_ID),
  FOREIGN KEY (Customer_ID) REFERENCES Customers(Customer_ID)
);

CREATE TABLE Order_Items (
  Order_Item_ID INTEGER PRIMARY KEY,
  Order_ID INTEGER,
  Product_ID INTEGER,
  Order_Quantity TEXT,
  Other_Item_Details TEXT,
  FOREIGN KEY (Product_ID) REFERENCES Products(Product_ID),
  FOREIGN KEY (Order_ID) REFERENCES Customer_Orders(Order_ID)
);

CREATE TABLE Invoices (
  Invoice_ID INTEGER PRIMARY KEY,
  Order_ID INTEGER,
  payment_method_code TEXT,
  Product_ID REAL,
  Order_Quantity TEXT,
  Other_Item_Details TEXT,
  Order_Item_ID REAL,
  FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods(payment_method_code),
  FOREIGN KEY (Order_ID) REFERENCES Bookings(Booking_ID),
  FOREIGN KEY (Order_ID) REFERENCES Customer_Orders(Order_ID)
);

CREATE TABLE Services (
  Service_ID INTEGER PRIMARY KEY,
  Service_Type_Code TEXT,
  Workshop_Group_ID INTEGER,
  Product_Description TEXT,
  Product_Name TEXT,
  Product_Price REAL,
  Other_Product_Service_Details TEXT,
  FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types(Service_Type_Code),
  FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID)
);

CREATE TABLE Bookings_Services (
  Order_ID INTEGER PRIMARY KEY,
  Product_ID INTEGER,
  FOREIGN KEY (Product_ID) REFERENCES Services(Service_ID),
  FOREIGN KEY (Order_ID) REFERENCES Bookings(Booking_ID)
);

CREATE TABLE Invoice_Items (
  Invoice_Item_ID INTEGER PRIMARY KEY,
  Invoice_ID INTEGER,
  Order_ID INTEGER,
  Order_Item_ID INTEGER,
  Product_ID INTEGER,
  Order_Quantity REAL,
  Other_Item_Details TEXT,
  FOREIGN KEY (Order_ID) REFERENCES Bookings_Services(Order_ID),
  FOREIGN KEY (Product_ID) REFERENCES Bookings_Services(Product_ID),
  FOREIGN KEY (Invoice_ID) REFERENCES Invoices(Invoice_ID),
  FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items(Order_Item_ID)
);

------------------------------------------------------------------------------------------
database_id: car_1
database schema :
CREATE TABLE continents (
  ContId INTEGER PRIMARY KEY,
  Continent TEXT
);

CREATE TABLE countries (
  CountryId INTEGER PRIMARY KEY,
  CountryName TEXT,
  Continent INTEGER,
  FOREIGN KEY (Continent) REFERENCES continents(ContId)
);

CREATE TABLE car_makers (
  Id INTEGER PRIMARY KEY,
  Maker TEXT,
  FullName TEXT,
  Country TEXT,
  FOREIGN KEY (Country) REFERENCES countries(CountryId)
);

CREATE TABLE model_list (
  ModelId INTEGER PRIMARY KEY,
  Maker INTEGER,
  Model TEXT,
  FOREIGN KEY (Maker) REFERENCES car_makers(Id)
);

CREATE TABLE car_names (
  MakeId INTEGER PRIMARY KEY,
  Model TEXT,
  Make TEXT,
  FOREIGN KEY (Model) REFERENCES model_list(Model)
);

CREATE TABLE cars_data (
  Id INTEGER PRIMARY KEY,
  MPG TEXT,
  Cylinders REAL,
  Edispl REAL,
  Horsepower TEXT,
  Weight REAL,
  Accelerate REAL,
  Year REAL,
  FOREIGN KEY (Id) REFERENCES car_names(MakeId)
);

------------------------------------------------------------------------------------------
database_id: geo
database schema :
CREATE TABLE state (
  state_name TEXT PRIMARY KEY,
  population REAL,
  area REAL,
  country_name TEXT,
  capital TEXT,
  density REAL
);

CREATE TABLE city (
  city_name TEXT PRIMARY KEY,
  population REAL,
  country_name TEXT,
  state_name TEXT,
  FOREIGN KEY (state_name) REFERENCES state(state_name)
);

CREATE TABLE border_info (
  state_name TEXT,
  border TEXT PRIMARY KEY,
  FOREIGN KEY (border) REFERENCES state(state_name),
  FOREIGN KEY (state_name) REFERENCES state(state_name)
);

CREATE TABLE highlow (
  state_name TEXT PRIMARY KEY,
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT,
  FOREIGN KEY (state_name) REFERENCES state(state_name)
);

CREATE TABLE lake (
  lake_name TEXT,
  area REAL,
  country_name TEXT,
  state_name TEXT
);

CREATE TABLE mountain (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude REAL,
  country_name TEXT,
  state_name TEXT,
  FOREIGN KEY (state_name) REFERENCES state(state_name)
);

CREATE TABLE river (
  river_name TEXT PRIMARY KEY,
  length REAL,
  country_name TEXT,
  traverse TEXT,
  FOREIGN KEY (traverse) REFERENCES state(state_name)
);

------------------------------------------------------------------------------------------
database_id: behavior_monitoring
database schema :
CREATE TABLE Ref_Address_Types (
  address_type_code TEXT PRIMARY KEY,
  address_type_description TEXT
);

CREATE TABLE Ref_Detention_Type (
  detention_type_code TEXT PRIMARY KEY,
  detention_type_description TEXT
);

CREATE TABLE Ref_Incident_Type (
  incident_type_code TEXT PRIMARY KEY,
  incident_type_description TEXT
);

CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  line_1 TEXT,
  line_2 TEXT,
  line_3 TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT,
  other_address_details TEXT
);

CREATE TABLE Students (
  student_id INTEGER PRIMARY KEY,
  address_id INTEGER,
  first_name TEXT,
  middle_name TEXT,
  last_name TEXT,
  cell_mobile_number TEXT,
  email_address TEXT,
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details TEXT,
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Teachers (
  teacher_id INTEGER PRIMARY KEY,
  address_id INTEGER,
  first_name TEXT,
  middle_name TEXT,
  last_name TEXT,
  gender TEXT,
  cell_mobile_number TEXT,
  email_address TEXT,
  other_details TEXT,
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Assessment_Notes (
  notes_id REAL,
  student_id INTEGER,
  teacher_id INTEGER,
  date_of_notes DATETIME,
  text_of_notes TEXT,
  other_details TEXT,
  FOREIGN KEY (teacher_id) REFERENCES Teachers(teacher_id),
  FOREIGN KEY (student_id) REFERENCES Students(student_id)
);

CREATE TABLE Behavior_Incident (
  incident_id INTEGER PRIMARY KEY,
  incident_type_code TEXT,
  student_id INTEGER,
  date_incident_start DATETIME,
  date_incident_end DATETIME,
  incident_summary TEXT,
  recommendations TEXT,
  other_details TEXT,
  FOREIGN KEY (student_id) REFERENCES Students(student_id),
  FOREIGN KEY (incident_type_code) REFERENCES Ref_Incident_Type(incident_type_code)
);

CREATE TABLE Detention (
  detention_id INTEGER PRIMARY KEY,
  detention_type_code TEXT,
  teacher_id INTEGER,
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary TEXT,
  other_details TEXT,
  FOREIGN KEY (teacher_id) REFERENCES Teachers(teacher_id),
  FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type(detention_type_code)
);

CREATE TABLE Student_Addresses (
  student_id INTEGER,
  address_id INTEGER,
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental REAL,
  other_details TEXT,
  FOREIGN KEY (student_id) REFERENCES Students(student_id),
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Students_in_Detention (
  student_id INTEGER,
  detention_id INTEGER,
  incident_id INTEGER,
  FOREIGN KEY (student_id) REFERENCES Students(student_id),
  FOREIGN KEY (detention_id) REFERENCES Detention(detention_id),
  FOREIGN KEY (incident_id) REFERENCES Behavior_Incident(incident_id)
);

------------------------------------------------------------------------------------------
database_id: cre_Doc_Tracking_DB
database schema :
CREATE TABLE Ref_Document_Types (
  Document_Type_Code TEXT PRIMARY KEY,
  Document_Type_Name TEXT,
  Document_Type_Description TEXT
);

CREATE TABLE Ref_Calendar (
  Calendar_Date DATETIME PRIMARY KEY,
  Day_Number REAL
);

CREATE TABLE Ref_Locations (
  Location_Code TEXT PRIMARY KEY,
  Location_Name TEXT,
  Location_Description TEXT
);

CREATE TABLE Roles (
  Role_Code TEXT PRIMARY KEY,
  Role_Name TEXT,
  Role_Description TEXT
);

CREATE TABLE All_Documents (
  Document_ID INTEGER PRIMARY KEY,
  Date_Stored DATETIME,
  Document_Type_Code TEXT,
  Document_Name TEXT,
  Document_Description TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar(Calendar_Date),
  FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types(Document_Type_Code)
);

CREATE TABLE Employees (
  Employee_ID INTEGER PRIMARY KEY,
  Role_Code TEXT,
  Employee_Name TEXT,
  Gender_MFU TEXT,
  Date_of_Birth DATETIME,
  Other_Details TEXT,
  FOREIGN KEY (Role_Code) REFERENCES Roles(Role_Code)
);

CREATE TABLE Document_Locations (
  Document_ID INTEGER PRIMARY KEY,
  Location_Code TEXT,
  Date_in_Location_From DATETIME,
  Date_in_Locaton_To DATETIME,
  FOREIGN KEY (Document_ID) REFERENCES All_Documents(Document_ID),
  FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar(Calendar_Date),
  FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar(Calendar_Date),
  FOREIGN KEY (Location_Code) REFERENCES Ref_Locations(Location_Code)
);

CREATE TABLE Documents_to_be_Destroyed (
  Document_ID INTEGER PRIMARY KEY,
  Destruction_Authorised_by_Employee_ID INTEGER,
  Destroyed_by_Employee_ID INTEGER,
  Planned_Destruction_Date DATETIME,
  Actual_Destruction_Date DATETIME,
  Other_Details TEXT,
  FOREIGN KEY (Document_ID) REFERENCES All_Documents(Document_ID),
  FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar(Calendar_Date),
  FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar(Calendar_Date),
  FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees(Employee_ID),
  FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees(Employee_ID)
);

------------------------------------------------------------------------------------------
database_id: university_basketball
database schema :
CREATE TABLE basketball_match (
  Team_ID INTEGER PRIMARY KEY,
  School_ID INTEGER,
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent REAL,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT,
  FOREIGN KEY (School_ID) REFERENCES university(School_ID)
);

CREATE TABLE university (
  School_ID INTEGER PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

------------------------------------------------------------------------------------------
database_id: soccer_2
database schema :
CREATE TABLE College (
  cName TEXT PRIMARY KEY,
  state TEXT,
  enr REAL
);

CREATE TABLE Player (
  pID INTEGER PRIMARY KEY,
  pName TEXT,
  yCard TEXT,
  HS REAL
);

CREATE TABLE Tryout (
  pID INTEGER PRIMARY KEY,
  cName TEXT,
  pPos TEXT,
  decision TEXT,
  FOREIGN KEY (cName) REFERENCES College(cName),
  FOREIGN KEY (pID) REFERENCES Player(pID)
);

------------------------------------------------------------------------------------------
database_id: activity_1
database schema :
CREATE TABLE Activity (
  actid INTEGER PRIMARY KEY,
  activity_name TEXT
);

CREATE TABLE Participates_in (
  stuid INTEGER,
  actid INTEGER,
  FOREIGN KEY (actid) REFERENCES Activity(actid),
  FOREIGN KEY (stuid) REFERENCES Student(StuID)
);

CREATE TABLE Faculty_Participates_in (
  FacID INTEGER,
  actid INTEGER,
  FOREIGN KEY (actid) REFERENCES Activity(actid),
  FOREIGN KEY (FacID) REFERENCES Faculty(FacID)
);

CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Faculty (
  FacID INTEGER PRIMARY KEY,
  Lname TEXT,
  Fname TEXT,
  Rank TEXT,
  Sex TEXT,
  Phone REAL,
  Room TEXT,
  Building TEXT
);

------------------------------------------------------------------------------------------
database_id: cre_Theme_park
database schema :
CREATE TABLE Ref_Hotel_Star_Ratings (
  star_rating_code TEXT PRIMARY KEY,
  star_rating_description TEXT
);

CREATE TABLE Locations (
  Location_ID INTEGER PRIMARY KEY,
  Location_Name TEXT,
  Address TEXT,
  Other_Details TEXT
);

CREATE TABLE Ref_Attraction_Types (
  Attraction_Type_Code TEXT PRIMARY KEY,
  Attraction_Type_Description TEXT
);

CREATE TABLE Visitors (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details TEXT
);

CREATE TABLE Features (
  Feature_ID INTEGER PRIMARY KEY,
  Feature_Details TEXT
);

CREATE TABLE Hotels (
  hotel_id INTEGER PRIMARY KEY,
  star_rating_code TEXT,
  pets_allowed_yn TEXT,
  price_range REAL,
  other_hotel_details TEXT,
  FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code)
);

CREATE TABLE Tourist_Attractions (
  Tourist_Attraction_ID INTEGER PRIMARY KEY,
  Attraction_Type_Code TEXT,
  Location_ID INTEGER,
  How_to_Get_There TEXT,
  Name TEXT,
  Description TEXT,
  Opening_Hours TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  FOREIGN KEY (Location_ID) REFERENCES Locations(Location_ID)
);

CREATE TABLE Street_Markets (
  Market_ID INTEGER PRIMARY KEY,
  Market_Details TEXT,
  FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Shops (
  Shop_ID INTEGER PRIMARY KEY,
  Shop_Details TEXT,
  FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Museums (
  Museum_ID INTEGER PRIMARY KEY,
  Museum_Details TEXT,
  FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Royal_Family (
  Royal_Family_ID INTEGER PRIMARY KEY,
  Royal_Family_Details TEXT,
  FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Theme_Parks (
  Theme_Park_ID INTEGER PRIMARY KEY,
  Theme_Park_Details TEXT,
  FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Visits (
  Visit_ID INTEGER PRIMARY KEY,
  Tourist_Attraction_ID INTEGER,
  Tourist_ID INTEGER,
  Visit_Date DATETIME,
  Visit_Details TEXT,
  FOREIGN KEY (Tourist_ID) REFERENCES Visitors(Tourist_ID),
  FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Photos (
  Photo_ID INTEGER PRIMARY KEY,
  Tourist_Attraction_ID INTEGER,
  Name TEXT,
  Description TEXT,
  Filename TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Staff (
  Staff_ID INTEGER PRIMARY KEY,
  Tourist_Attraction_ID INTEGER,
  Name TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Tourist_Attraction_Features (
  Tourist_Attraction_ID INTEGER PRIMARY KEY,
  Feature_ID INTEGER,
  FOREIGN KEY (Feature_ID) REFERENCES Features(Feature_ID),
  FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

------------------------------------------------------------------------------------------
database_id: twitter_1
database schema :
CREATE TABLE follows (
  f1 INTEGER PRIMARY KEY,
  f2 INTEGER,
  FOREIGN KEY (f2) REFERENCES user_profiles(uid),
  FOREIGN KEY (f1) REFERENCES user_profiles(uid)
);

CREATE TABLE tweets (
  id INTEGER PRIMARY KEY,
  uid INTEGER,
  text TEXT,
  createdate DATETIME,
  FOREIGN KEY (uid) REFERENCES user_profiles(uid)
);

CREATE TABLE user_profiles (
  uid INTEGER PRIMARY KEY,
  name TEXT,
  email TEXT,
  partitionid REAL,
  followers REAL
);

------------------------------------------------------------------------------------------
database_id: election_representative
database schema :
CREATE TABLE election (
  Election_ID INTEGER PRIMARY KEY,
  Representative_ID INTEGER,
  Date TEXT,
  Votes REAL,
  Vote_Percent REAL,
  Seats REAL,
  Place REAL,
  FOREIGN KEY (Representative_ID) REFERENCES representative(Representative_ID)
);

CREATE TABLE representative (
  Representative_ID INTEGER PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

------------------------------------------------------------------------------------------
database_id: voter_2
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Voting_record (
  StuID INTEGER,
  Registration_Date TEXT,
  Election_Cycle TEXT,
  President_Vote INTEGER,
  Vice_President_Vote INTEGER,
  Secretary_Vote INTEGER,
  Treasurer_Vote INTEGER,
  Class_President_Vote INTEGER,
  Class_Senator_Vote INTEGER,
  FOREIGN KEY (Class_Senator_Vote) REFERENCES Student(StuID),
  FOREIGN KEY (Class_President_Vote) REFERENCES Student(StuID),
  FOREIGN KEY (Treasurer_Vote) REFERENCES Student(StuID),
  FOREIGN KEY (Secretary_Vote) REFERENCES Student(StuID),
  FOREIGN KEY (Vice_President_Vote) REFERENCES Student(StuID),
  FOREIGN KEY (President_Vote) REFERENCES Student(StuID),
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

------------------------------------------------------------------------------------------
database_id: wedding
database schema :
CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Is_Male TEXT,
  Age REAL
);

CREATE TABLE church (
  Church_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Organized_by TEXT,
  Open_Date REAL,
  Continuation_of TEXT
);

CREATE TABLE wedding (
  Church_ID INTEGER PRIMARY KEY,
  Male_ID INTEGER,
  Female_ID INTEGER,
  Year REAL,
  FOREIGN KEY (Female_ID) REFERENCES people(People_ID),
  FOREIGN KEY (Male_ID) REFERENCES people(People_ID),
  FOREIGN KEY (Church_ID) REFERENCES church(Church_ID)
);

------------------------------------------------------------------------------------------
database_id: news_report
database schema :
CREATE TABLE event (
  Event_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance REAL
);

CREATE TABLE journalist (
  journalist_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working REAL
);

CREATE TABLE news_report (
  journalist_ID INTEGER PRIMARY KEY,
  Event_ID INTEGER,
  Work_Type TEXT,
  FOREIGN KEY (Event_ID) REFERENCES event(Event_ID),
  FOREIGN KEY (journalist_ID) REFERENCES journalist(journalist_ID)
);

------------------------------------------------------------------------------------------
database_id: wine_1
database schema :
CREATE TABLE grapes (
  ID INTEGER PRIMARY KEY,
  Grape TEXT,
  Color TEXT
);

CREATE TABLE appellations (
  No INTEGER PRIMARY KEY,
  Appelation TEXT,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

CREATE TABLE wine (
  No REAL,
  Grape TEXT,
  Winery TEXT,
  Appelation TEXT,
  State TEXT,
  Name TEXT,
  Year REAL,
  Price REAL,
  Score REAL,
  Cases REAL,
  Drink TEXT,
  FOREIGN KEY (Appelation) REFERENCES appellations(Appelation),
  FOREIGN KEY (Grape) REFERENCES grapes(Grape)
);

------------------------------------------------------------------------------------------
database_id: customers_and_addresses
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  address_content TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT,
  other_address_details TEXT
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  product_details TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  payment_method TEXT,
  customer_name TEXT,
  date_became_customer DATETIME,
  other_customer_details TEXT
);

CREATE TABLE Customer_Addresses (
  customer_id INTEGER,
  address_id INTEGER,
  date_address_from DATETIME,
  address_type TEXT,
  date_address_to DATETIME,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Customer_Contact_Channels (
  customer_id INTEGER,
  channel_code TEXT,
  active_from_date DATETIME,
  active_to_date DATETIME,
  contact_number TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Customer_Orders (
  order_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  order_status TEXT,
  order_date DATETIME,
  order_details TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Order_Items (
  order_id INTEGER,
  product_id INTEGER,
  order_quantity TEXT,
  FOREIGN KEY (order_id) REFERENCES Customer_Orders(order_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

------------------------------------------------------------------------------------------
database_id: protein_institute
database schema :
CREATE TABLE building (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet REAL,
  Floors REAL
);

CREATE TABLE Institution (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment REAL,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT,
  FOREIGN KEY (building_id) REFERENCES building(building_id)
);

CREATE TABLE protein (
  common_name TEXT PRIMARY KEY,
  protein_name TEXT,
  divergence_from_human_lineage REAL,
  accession_number TEXT,
  sequence_length REAL,
  sequence_identity_to_human_protein TEXT,
  Institution_id TEXT,
  FOREIGN KEY (Institution_id) REFERENCES Institution(Institution_id)
);

------------------------------------------------------------------------------------------
database_id: school_player
database schema :
CREATE TABLE school (
  School_ID INTEGER PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Enrollment REAL,
  Founded REAL,
  Denomination TEXT,
  Boys_or_Girls TEXT,
  Day_or_Boarding TEXT,
  Year_Entered_Competition REAL,
  School_Colors TEXT
);

CREATE TABLE school_details (
  School_ID INTEGER PRIMARY KEY,
  Nickname TEXT,
  Colors TEXT,
  League TEXT,
  Class TEXT,
  Division TEXT,
  FOREIGN KEY (School_ID) REFERENCES school(School_ID)
);

CREATE TABLE school_performance (
  School_Id INTEGER PRIMARY KEY,
  School_Year TEXT,
  Class_A TEXT,
  Class_AA TEXT,
  FOREIGN KEY (School_Id) REFERENCES school(School_ID)
);

CREATE TABLE player (
  Player_ID INTEGER PRIMARY KEY,
  Player TEXT,
  Team TEXT,
  Age REAL,
  Position TEXT,
  School_ID INTEGER,
  FOREIGN KEY (School_ID) REFERENCES school(School_ID)
);

------------------------------------------------------------------------------------------
database_id: phone_1
database schema :
CREATE TABLE chip_model (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

CREATE TABLE screen_mode (
  Graphics_mode INTEGER PRIMARY KEY,
  Char_cells TEXT,
  Pixels TEXT,
  Hardware_colours REAL,
  used_kb REAL,
  map TEXT,
  Type TEXT
);

CREATE TABLE phone (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT,
  screen_mode TEXT,
  FOREIGN KEY (chip_model) REFERENCES chip_model(Model_name),
  FOREIGN KEY (screen_mode) REFERENCES screen_mode(Graphics_mode)
);

------------------------------------------------------------------------------------------
database_id: tvshow
database schema :
CREATE TABLE TV_Channel (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE TV_series (
  id INTEGER PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT,
  FOREIGN KEY (Channel) REFERENCES TV_Channel(id)
);

CREATE TABLE Cartoon (
  id INTEGER PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT,
  FOREIGN KEY (Channel) REFERENCES TV_Channel(id)
);

------------------------------------------------------------------------------------------
database_id: wrestler
database schema :
CREATE TABLE wrestler (
  Wrestler_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE Elimination (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT,
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT,
  FOREIGN KEY (Wrestler_ID) REFERENCES wrestler(Wrestler_ID)
);

------------------------------------------------------------------------------------------
database_id: customer_complaints
database schema :
CREATE TABLE Staff (
  staff_id INTEGER PRIMARY KEY,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email_address TEXT,
  phone_number TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  customer_type_code TEXT,
  address_line_1 TEXT,
  address_line_2 TEXT,
  town_city TEXT,
  state TEXT,
  email_address TEXT,
  phone_number TEXT
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  parent_product_id REAL,
  product_category_code TEXT,
  date_product_first_available DATETIME,
  date_product_discontinued DATETIME,
  product_name TEXT,
  product_description TEXT,
  product_price REAL
);

CREATE TABLE Complaints (
  complaint_id REAL,
  product_id INTEGER,
  customer_id INTEGER,
  complaint_outcome_code TEXT,
  complaint_status_code TEXT,
  complaint_type_code TEXT,
  date_complaint_raised DATETIME,
  date_complaint_closed DATETIME,
  staff_id INTEGER,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id),
  FOREIGN KEY (staff_id) REFERENCES Staff(staff_id)
);

------------------------------------------------------------------------------------------
database_id: department_management
database schema :
CREATE TABLE department (
  Department_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Creation TEXT,
  Ranking REAL,
  Budget_in_Billions REAL,
  Num_Employees REAL
);

CREATE TABLE head (
  head_ID INTEGER PRIMARY KEY,
  name TEXT,
  born_state TEXT,
  age REAL
);

CREATE TABLE management (
  department_ID INTEGER PRIMARY KEY,
  head_ID INTEGER,
  temporary_acting TEXT,
  FOREIGN KEY (head_ID) REFERENCES head(head_ID),
  FOREIGN KEY (department_ID) REFERENCES department(Department_ID)
);

------------------------------------------------------------------------------------------
database_id: customers_and_products_contacts
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  line_1_number_building TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  product_type_code TEXT,
  product_name TEXT,
  product_price REAL
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  payment_method_code TEXT,
  customer_number TEXT,
  customer_name TEXT,
  customer_address TEXT,
  customer_phone TEXT,
  customer_email TEXT
);

CREATE TABLE Contacts (
  contact_id INTEGER PRIMARY KEY,
  customer_id REAL,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  contact_phone TEXT
);

CREATE TABLE Customer_Address_History (
  customer_id INTEGER,
  address_id INTEGER,
  date_from DATETIME,
  date_to DATETIME,
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id),
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Customer_Orders (
  order_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  order_date DATETIME,
  order_status_code TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Order_Items (
  order_item_id REAL,
  order_id INTEGER,
  product_id INTEGER,
  order_quantity TEXT,
  FOREIGN KEY (order_id) REFERENCES Customer_Orders(order_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

------------------------------------------------------------------------------------------
database_id: company_1
database schema :
CREATE TABLE works_on (
  Essn INTEGER PRIMARY KEY,
  Pno REAL,
  Hours REAL
);

CREATE TABLE employee (
  Fname TEXT,
  Minit TEXT,
  Lname TEXT,
  Ssn INTEGER PRIMARY KEY,
  Bdate TEXT,
  Address TEXT,
  Sex TEXT,
  Salary REAL,
  Super_ssn REAL,
  Dno REAL
);

CREATE TABLE department (
  Dname TEXT,
  Dnumber INTEGER PRIMARY KEY,
  Mgr_ssn REAL,
  Mgr_start_date TEXT
);

CREATE TABLE project (
  Pname TEXT,
  Pnumber INTEGER PRIMARY KEY,
  Plocation TEXT,
  Dnum REAL
);

CREATE TABLE dependent (
  Essn INTEGER PRIMARY KEY,
  Dependent_name TEXT,
  Sex TEXT,
  Bdate TEXT,
  Relationship TEXT
);

CREATE TABLE dept_locations (
  Dnumber INTEGER PRIMARY KEY,
  Dlocation TEXT
);

------------------------------------------------------------------------------------------
database_id: workshop_paper
database schema :
CREATE TABLE workshop (
  Workshop_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT
);

CREATE TABLE submission (
  Submission_ID INTEGER PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

CREATE TABLE Acceptance (
  Submission_ID INTEGER PRIMARY KEY,
  Workshop_ID INTEGER,
  Result TEXT,
  FOREIGN KEY (Workshop_ID) REFERENCES workshop(Workshop_ID),
  FOREIGN KEY (Submission_ID) REFERENCES submission(Submission_ID)
);

------------------------------------------------------------------------------------------
database_id: epinions_1
database schema :
CREATE TABLE item (
  i_id INTEGER PRIMARY KEY,
  title TEXT
);

CREATE TABLE review (
  a_id INTEGER PRIMARY KEY,
  u_id INTEGER,
  i_id INTEGER,
  rating REAL,
  rank REAL,
  FOREIGN KEY (i_id) REFERENCES item(i_id),
  FOREIGN KEY (u_id) REFERENCES useracct(u_id)
);

CREATE TABLE useracct (
  u_id INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE trust (
  source_u_id INTEGER,
  target_u_id INTEGER,
  trust REAL,
  FOREIGN KEY (target_u_id) REFERENCES useracct(u_id),
  FOREIGN KEY (source_u_id) REFERENCES useracct(u_id)
);

------------------------------------------------------------------------------------------
database_id: party_host
database schema :
CREATE TABLE party (
  Party_ID INTEGER PRIMARY KEY,
  Party_Theme TEXT,
  Location TEXT,
  First_year TEXT,
  Last_year TEXT,
  Number_of_hosts REAL
);

CREATE TABLE host (
  Host_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT
);

CREATE TABLE party_host (
  Party_ID INTEGER PRIMARY KEY,
  Host_ID INTEGER,
  Is_Main_in_Charge TEXT,
  FOREIGN KEY (Party_ID) REFERENCES party(Party_ID),
  FOREIGN KEY (Host_ID) REFERENCES host(Host_ID)
);

------------------------------------------------------------------------------------------
database_id: product_catalog
database schema :
CREATE TABLE Attribute_Definitions (
  attribute_id INTEGER PRIMARY KEY,
  attribute_name TEXT,
  attribute_data_type TEXT
);

CREATE TABLE Catalogs (
  catalog_id INTEGER PRIMARY KEY,
  catalog_name TEXT,
  catalog_publisher TEXT,
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

CREATE TABLE Catalog_Structure (
  catalog_level_number INTEGER PRIMARY KEY,
  catalog_id INTEGER,
  catalog_level_name TEXT,
  FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)
);

CREATE TABLE Catalog_Contents (
  catalog_entry_id INTEGER PRIMARY KEY,
  catalog_level_number INTEGER,
  parent_entry_id REAL,
  previous_entry_id REAL,
  next_entry_id REAL,
  catalog_entry_name TEXT,
  product_stock_number TEXT,
  price_in_dollars REAL,
  price_in_euros REAL,
  price_in_pounds REAL,
  capacity TEXT,
  length TEXT,
  height TEXT,
  width TEXT,
  FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)
);

CREATE TABLE Catalog_Contents_Additional_Attributes (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER,
  attribute_id REAL,
  attribute_value TEXT,
  FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number),
  FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id)
);

---

# --- Example ---
# Task: Examine all the database schemas provided above and return a ranked list of the 10 most relevant database_ids for answering the following question.
# Q: How many French singers are there?
#
# The 10 most relevant database_ids are:
1. singer
2. orchestra
3. musical
4. concert_singer
5. sports_competition
6. tvshow
7. museum_visit
8. department_store
9. poker_player
10. party_host
# --- End of Example ---


# --- Your Task ---
# Task: Examine all the database schemas provided above and return a ranked list of the 10 most relevant database_ids for answering the following question.
# Q: Which country has the most of TV Channels? List the country and number of TV Channels it has.
#
# The 10 most relevant database_ids are:
