
You are given multiple databases. Each database has a schema consisting of tables, columns, and relationships (foreign keys).
---
database_id: perpetrator
database schema :
table perpetrator, columns = [ perpetrator.Perpetrator_ID ( integer | primary key | values: 1, 2 ), perpetrator.People_ID ( integer | values: 1, 3 ), perpetrator.Date ( text | values: 04.26 April 26/27, 11.18 Nov. 18 ), perpetrator.Year ( real | values: 1982.0, 1995.0 ), perpetrator.Location ( text | values: Uiryeong, Zhaodong ), perpetrator.Country ( text | values: South Korea, China ), perpetrator.Killed ( real | values: 56, 32 ), perpetrator.Injured ( real | values: 37, 16 ) ]
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Name ( text | values: Ron Baxter, Brent Boyd ), people.Height ( real | values: 6.4, 6.3 ), people.Weight ( real | values: 205.0, 185.0 ), people.Home Town ( text | values: Los Angeles, CA, Baton Rouge, LA ) ]
foreign keys:
perpetrator.People_ID = people.People_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many people are recorded in the database?
-- What is the average height of people who have a weight greater than 70kg?
-- Which location has the highest number of perpetrators who killed more than 5 people?
-- What is the name of the person with People_ID = 2?
-- What is the year with the most perpetrators?
------------------------------------------------------------------------------------------
database_id: college_2
database schema :
table classroom, columns = [ classroom.building ( text | primary key | values: Alumni, Bronfman ), classroom.room_number ( text | values: 143, 547 ), classroom.capacity ( real | values: 10, 27 ) ]
table department, columns = [ department.dept_name ( text | primary key | values: Accounting, Astronomy ), department.building ( text | values: Chandler, Candlestick ), department.budget ( real | values: 255041.46, 647610.55 ) ]
table course, columns = [ course.course_id ( text | primary key | values: 101, 105 ), course.title ( text | values: C  Programming, The Music of Donovan ), course.dept_name ( text | values: Mech. Eng., Comp. Sci. ), course.credits ( real | values: 4, 3 ) ]
table instructor, columns = [ instructor.ID ( text | primary key | values: 14365, 15347 ), instructor.name ( text | values: McKinnon, Pingr ), instructor.dept_name ( text | values: Cybernetics, Statistics ), instructor.salary ( real | values: 94333.99, 59303.62 ) ]
table section, columns = [ section.course_id ( text | primary key | values: 105, 137 ), section.sec_id ( text | values: 1, 2 ), section.semester ( text | values: Fall, Spring ), section.year ( real | values: 2009, 2002 ), section.building ( text | values: Chandler, Gates ), section.room_number ( text | values: 804, 314 ), section.time_slot_id ( text | values: N, K ) ]
table teaches, columns = [ teaches.ID ( text | primary key | values: 14365, 15347 ), teaches.course_id ( text | values: 747, 169 ), teaches.sec_id ( text | values: 1, 2 ), teaches.semester ( text | values: Spring, Fall ), teaches.year ( integer | values: 2004, 2007 ) ]
table student, columns = [ student.ID ( text | primary key | values: 1000, 10033 ), student.name ( text | values: Schrefl, Rumat ), student.dept_name ( text | values: History, Finance ), student.tot_cred ( real | values: 4, 100 ) ]
table takes, columns = [ takes.ID ( text | primary key | values: 1000, 10033 ), takes.course_id ( text | values: 239, 319 ), takes.sec_id ( text | values: 1, 2 ), takes.semester ( text | values: Fall, Spring ), takes.year ( integer | values: 2006, 2003 ), takes.grade ( text | values: C-, B- ) ]
table advisor, columns = [ advisor.s_ID ( text | primary key | values: 1000, 10033 ), advisor.i_ID ( text | values: 19368, 95030 ) ]
table time_slot, columns = [ time_slot.time_slot_id ( text | primary key | values: A, B ), time_slot.day ( text | values: F, M ), time_slot.start_hr ( real | values: 8, 9 ), time_slot.start_min ( real | values: 0, 30 ), time_slot.end_hr ( real | values: 8, 9 ), time_slot.end_min ( real | values: 50, 45 ) ]
table prereq, columns = [ prereq.course_id ( text | primary key | values: 133, 158 ), prereq.prereq_id ( text | values: 130, 169 ) ]
foreign keys:
course.dept_name = department.dept_name
instructor.dept_name = department.dept_name
section.building = classroom.building
section.room_number = classroom.room_number
section.course_id = course.course_id
teaches.ID = instructor.ID
teaches.course_id = section.course_id
teaches.sec_id = section.sec_id
teaches.semester = section.semester
teaches.year = section.year
student.dept_name = department.dept_name
takes.ID = student.ID
takes.course_id = section.course_id
takes.sec_id = section.sec_id
takes.semester = section.semester
takes.year = section.year
advisor.s_ID = student.ID
advisor.i_ID = instructor.ID
prereq.prereq_id = course.course_id
prereq.course_id = course.course_id

# Here are some example questions that CAN be answered by the schema below:
-- What are the names and budgets of all departments?
-- Which courses have prerequisites, and what are their prerequisite course IDs?
-- List the names of instructors and the course IDs of the sections they teach in the Fall semester.
-- How many sections of the course 'Math 300' are scheduled in the Fall semester?
-- What is the name of the instructor who teaches the 'Math 300' course in the Spring semester of the year 2020?
------------------------------------------------------------------------------------------
database_id: flight_company
database schema :
table airport, columns = [ airport.id ( integer | primary key | values: 1, 2 ), airport.City ( text | values: Akureyri, Amsterdam ), airport.Country ( text | values: Iceland, Netherlands ), airport.IATA ( text | values: AEY, AMS ), airport.ICAO ( text | values: BIAR, EHAM ), airport.name ( text | values: Akureyri Airport, Schiphol Airport ) ]
table operate_company, columns = [ operate_company.id ( integer | primary key | values: 1, 2 ), operate_company.name ( text | values: Air China, Air China Cargo ), operate_company.Type ( text | values: Corporate, Joint Venture ), operate_company.Principal_activities ( text | values: Airline, Cargo airline ), operate_company.Incorporated_in ( text | values: China, Hong Kong ), operate_company.Group_Equity_Shareholding ( real | values: 18.77, 49.0 ) ]
table flight, columns = [ flight.id ( integer | primary key | values: 1, 2 ), flight.Vehicle_Flight_number ( text | values: M2-F1 #0, M2-F1 #1 ), flight.Date ( text | values: March 1, 1963, August 16, 1963 ), flight.Pilot ( text | values: Thompson, Peterson ), flight.Velocity ( real | values: 135.0, 240.0 ), flight.Altitude ( real | values: 0.0, 3650.0 ), flight.airport_id ( integer | values: 1, 2 ), flight.company_id ( integer | values: 2, 3 ) ]
foreign keys:
flight.company_id = operate_company.id
flight.airport_id = airport.id

# Here are some example questions that CAN be answered by the schema below:
-- What is the average altitude of flights that departed from airports in the United States?
-- What are the names of the pilots who flew flights operated by companies whose name starts with 'A', on Sundays?
-- Which airport has the highest number of flights that departed on a Monday?
-- What is the velocity of flights that departed from the airport with the IATA code 'LHR', on a day when the temperature was above 0 degrees Celsius?
-- How many flights operated by companies with a Group Equity Shareholding greater than 50% have been operated by pilots who are also the principal of the company they work for?
------------------------------------------------------------------------------------------
database_id: icfp_1
database schema :
table Inst, columns = [ Inst.instID ( integer | primary key | values: 1000, 1010 ), Inst.name ( text | values: University of Oxford, Northeastern University ), Inst.country ( text | values: UK, USA ) ]
table Authors, columns = [ Authors.authID ( integer | primary key | values: 50, 51 ), Authors.lname ( text | values: Gibbons, Hinze ), Authors.fname ( text | values: Jeremy, Ralf ) ]
table Papers, columns = [ Papers.paperID ( integer | primary key | values: 200, 201 ), Papers.title ( text | values: Just do it: Simple Monadic Equational Reasoning, Proving the Unique Fixed-Point Principle Correct: An Adventure with Category Theory ) ]
table Authorship, columns = [ Authorship.authID ( integer | primary key | values: 50, 51 ), Authorship.instID ( integer | values: 1000, 1010 ), Authorship.paperID ( integer | values: 200, 201 ), Authorship.authOrder ( real | values: 1, 2 ) ]
foreign keys:
Authorship.paperID = Papers.paperID
Authorship.instID = Inst.instID
Authorship.authID = Authors.authID

# Here are some example questions that CAN be answered by the schema below:
-- How many papers were written by authors from the USA?
-- What is the average number of authors per paper for papers written by authors from Germany?
-- List all authors who have written more than 5 papers.
-- What is the title of the paper with the highest number of authors?
-- How many papers were written by authors from institutions in the UK?
------------------------------------------------------------------------------------------
database_id: body_builder
database schema :
table body_builder, columns = [ body_builder.Body_Builder_ID ( integer | primary key | values: 1, 2 ), body_builder.People_ID ( integer | values: 1, 2 ), body_builder.Snatch ( real | values: 142.5, 137.5 ), body_builder.Clean_Jerk ( real | values: 175.0, 177.5 ), body_builder.Total ( real | values: 317.5, 315.0 ) ]
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Name ( text | values: Jack Campbell, Ty Conklin ), people.Height ( real | values: 182.0, 192.0 ), people.Weight ( real | values: 80.0, 90.0 ), people.Birth_Date ( text | values: January 1, 1992, March 30, 1976 ), people.Birth_Place ( text | values: Port Huron, Michigan, Anchorage, Alaska ) ]
foreign keys:
body_builder.People_ID = people.People_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many body builders have a total score above 300?
-- What is the average snatch weight for body builders born in 1980?
-- List the names of people who have a body builder with a snatch weight of 100 or more.
-- What is the average weight of people who have a body builder with a total score above 350?
-- How many body builders have a snatch weight below 70?  How many of these body builders are from the city of Tokyo?  What is the average weight of these body builders?  How many of these body builders have a total score above 300?  How many of these body builders have a birth date in 1990?  How many of these body builders are from the city of New York?  What is the average height of these body builders?  How many of these body builders have a birth date in 1985?  What is the average snatch weight of these body builders?  How many of these body builders have a weight below 60?  How many of these body builders are from the city of London?  How many of these body builders have a birth date in 1995?  What is the average
------------------------------------------------------------------------------------------
database_id: storm_record
database schema :
table storm, columns = [ storm.Storm_ID ( integer | primary key | values: 1, 2 ), storm.Name ( text | values: One, Two ), storm.Dates_active ( text | values: May19–May25, August3–August10 ), storm.Max_speed ( real | values: 995, 972 ), storm.Damage_millions_USD ( real | values: 13.0, 10.75 ), storm.Number_Deaths ( real | values: 0, 7 ) ]
table region, columns = [ region.Region_id ( integer | primary key | values: 1, 2 ), region.Region_code ( text | values: AF, AL ), region.Region_name ( text | values: Afghanistan, Albania ) ]
table affected_region, columns = [ affected_region.Region_id ( integer | primary key | values: 1, 2 ), affected_region.Storm_ID ( integer | values: 1, 4 ), affected_region.Number_city_affected ( real | values: 10.0, 15.0 ) ]
foreign keys:
affected_region.Storm_ID = storm.Storm_ID
affected_region.Region_id = region.Region_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of deaths in all storms?
-- Which region has the highest number of cities affected by all storms?
-- What is the number of storms that occurred between 2010-01-01 and 2020-01-01?
-- What is the storm with the highest damage in the region with code 'US-01'?
-- What is the total number of deaths in storms where the storm's max speed was above 120 miles per hour?  in the storm that caused the most deaths?  in the region 'US-01'?  in the storm that caused the most deaths in the region 'US-01'?  in the storm with the highest damage in the region 'US-01'?  in the storm that caused the most deaths where the storm's max speed was above 120 miles per hour?  in the region with the highest number of cities affected by all storms?  in the storm with the highest damage in the region with code 'US-01'?  in the region 'US-01'?  in the storm that caused the most deaths where the storm's max speed was above 120 miles per hour?  in the storm that caused the
------------------------------------------------------------------------------------------
database_id: pilot_record
database schema :
table aircraft, columns = [ aircraft.Aircraft_ID ( integer | primary key | values: 1, 2 ), aircraft.Order_Year ( real | values: 1992, 1996 ), aircraft.Manufacturer ( text | values: Gillig, NFI ), aircraft.Model ( text | values: Phantom (High Floor), Advantage (Low Floor) ), aircraft.Fleet_Series ( text | values: 444-464 (21), 465-467 (3) ), aircraft.Powertrain ( text | values: DD S50EGR Allison WB-400R, DD S50 Allison WB-400R ), aircraft.Fuel_Propulsion ( text | values: Diesel, Hybrid ) ]
table pilot, columns = [ pilot.Pilot_ID ( integer | primary key | values: 1, 2 ), pilot.Pilot_name ( text | values: Patrick O'Bryant, Jermaine O'Neal ), pilot.Rank ( real | values: 13, 6 ), pilot.Age ( real | values: 33, 40 ), pilot.Nationality ( text | values: United States, United Kindom ), pilot.Position ( text | values: Center Team, Forward-Center Team ), pilot.Join_Year ( real | values: 2009, 2008 ), pilot.Team ( text | values: Bradley, Eau Claire High School ) ]
table pilot_record, columns = [ pilot_record.Record_ID ( real | values: 1, 2 ), pilot_record.Pilot_ID ( integer | primary key | values: 1, 2 ), pilot_record.Aircraft_ID ( integer | values: 1, 4 ), pilot_record.Date ( text | values: 2003/01/04, 2005/01/04 ) ]
foreign keys:
pilot_record.Aircraft_ID = aircraft.Aircraft_ID
pilot_record.Pilot_ID = pilot.Pilot_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of pilots in the 'Team' 'Delta'?
-- How many aircraft are manufactured by 'Boeing' in the year '2010'?
-- What is the name of the aircraft with the highest number of records, and what is the model of that aircraft?
-- What is the average number of flights performed by pilots who flew in the year '2015'?
-- What is the nationality of the pilots who have flown the aircraft manufactured by 'Airbus' and have more than 100 records?  The result should only show unique nationalities.  The nationality should be the one that is more represented among the pilots.   The nationality with the highest number of occurrences among the pilots who flew the Airbus aircraft should be returned.  The nationality should be shown in the format 'country (occurrences)'.  The result should show the nationality with the highest occurrences.  The occurrences should be ordered by the descending order.   If two or more nationalities have the same occurrences, the nationality that appears first in the database should be returned.  If there is more than one nationality with the same highest occurrences, all should be returned.  If there are no pilots who
------------------------------------------------------------------------------------------
database_id: race_track
database schema :
table race, columns = [ race.Race_ID ( integer | primary key | values: 1, 2 ), race.Name ( text | values: Rolex 24 At Daytona, Gainsco Grand Prix of Miami ), race.Class ( text | values: DP/GT, GT ), race.Date ( text | values: January 26 January 27, March 29 ), race.Track_ID ( text | values: 1, 2 ) ]
table track, columns = [ track.Track_ID ( integer | primary key | values: 1, 2 ), track.Name ( text | values: Auto Club Speedway, Chicagoland Speedway ), track.Location ( text | values: Fontana, CA, Joliet, IL ), track.Seating ( real | values: 92000.0, 75000.0 ), track.Year_Opened ( real | values: 1997.0, 2001.0 ) ]
foreign keys:
race.Track_ID = track.Track_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of seats per track that hosted a race in 2020?
-- What are the names of all the tracks that hosted a race on the 12th day of February?
-- Which track has the highest seating capacity?
-- What is the name of the race that occurred on the track with the highest seating capacity?
-- What is the count of all the races that took place on a track with a seating capacity of over 40,000?
------------------------------------------------------------------------------------------
database_id: academic
database schema :
table author, columns = [ author.aid ( integer | primary key | values: N/A ), author.homepage ( text | values: N/A ), author.name ( text | values: N/A ), author.oid ( real | values: N/A ) ]
table conference, columns = [ conference.cid ( integer | primary key | values: N/A ), conference.homepage ( text | values: N/A ), conference.name ( text | values: N/A ) ]
table domain, columns = [ domain.did ( integer | primary key | values: N/A ), domain.name ( text | values: N/A ) ]
table domain_author, columns = [ domain_author.aid ( integer | values: N/A ), domain_author.did ( integer | primary key | values: N/A ) ]
table domain_conference, columns = [ domain_conference.cid ( integer | values: N/A ), domain_conference.did ( integer | primary key | values: N/A ) ]
table journal, columns = [ journal.homepage ( text | values: N/A ), journal.jid ( integer | primary key | values: N/A ), journal.name ( text | values: N/A ) ]
table domain_journal, columns = [ domain_journal.did ( integer | primary key | values: N/A ), domain_journal.jid ( integer | values: N/A ) ]
table keyword, columns = [ keyword.keyword ( text | values: N/A ), keyword.kid ( integer | primary key | values: N/A ) ]
table domain_keyword, columns = [ domain_keyword.did ( integer | primary key | values: N/A ), domain_keyword.kid ( integer | values: N/A ) ]
table publication, columns = [ publication.abstract ( text | values: N/A ), publication.cid ( text | values: N/A ), publication.citation_num ( real | values: N/A ), publication.jid ( integer | values: N/A ), publication.pid ( integer | primary key | values: N/A ), publication.reference_num ( real | values: N/A ), publication.title ( text | values: N/A ), publication.year ( real | values: N/A ) ]
table domain_publication, columns = [ domain_publication.did ( integer | primary key | values: N/A ), domain_publication.pid ( integer | values: N/A ) ]
table organization, columns = [ organization.continent ( text | values: N/A ), organization.homepage ( text | values: N/A ), organization.name ( text | values: N/A ), organization.oid ( integer | primary key | values: N/A ) ]
table publication_keyword, columns = [ publication_keyword.pid ( integer | values: N/A ), publication_keyword.kid ( integer | primary key | values: N/A ) ]
table writes, columns = [ writes.aid ( integer | primary key | values: N/A ), writes.pid ( integer | values: N/A ) ]
table cite, columns = [ cite.cited ( integer | values: N/A ), cite.citing ( integer | values: N/A ) ]
foreign keys:
domain_author.did = domain.did
domain_author.aid = author.aid
domain_conference.did = domain.did
domain_conference.cid = conference.cid
domain_journal.did = domain.did
domain_journal.jid = journal.jid
domain_keyword.did = domain.did
domain_keyword.kid = keyword.kid
publication.cid = conference.cid
publication.jid = journal.jid
domain_publication.did = domain.did
domain_publication.pid = publication.pid
publication_keyword.kid = keyword.kid
publication_keyword.pid = publication.pid
writes.aid = author.aid
writes.pid = publication.pid
cite.citing = publication.pid
cite.cited = publication.pid

# Here are some example questions that CAN be answered by the schema below:
-- What are the names and homepages of all authors?
-- List the titles and years of publications presented at each conference.
-- Which keywords are associated with each publication?
-- Which domain has the most publications, including both conference and journal papers?
-- What is the name of the author who wrote the most papers that were cited at least 10 times?
------------------------------------------------------------------------------------------
database_id: department_store
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.address_details ( text | values: 28481 Crist Circle
East Burdettestad, IA 21232, 0292 Mitchel Pike
Port Abefurt, IA 84402-4249 ) ]
table Staff, columns = [ Staff.staff_id ( integer | primary key | values: 1, 2 ), Staff.staff_gender ( text | values: 1, 0 ), Staff.staff_name ( text | values: Tom, Malika ) ]
table Suppliers, columns = [ Suppliers.supplier_id ( integer | primary key | values: 1, 2 ), Suppliers.supplier_name ( text | values: Lidl, AB Store ), Suppliers.supplier_phone ( text | values: (692)009-5928, 1-483-283-4742 ) ]
table Department_Store_Chain, columns = [ Department_Store_Chain.dept_store_chain_id ( integer | primary key | values: 1, 2 ), Department_Store_Chain.dept_store_chain_name ( text | values: South, West ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.payment_method_code ( text | values: Credit Card, Direct Debit ), Customers.customer_code ( text | values: 401, 665 ), Customers.customer_name ( text | values: Ahmed, Chauncey ), Customers.customer_address ( text | values: 75099 Tremblay Port Apt. 163
South Norrisland, SC 80546, 8408 Lindsay Court
East Dasiabury, IL 72656-3552 ), Customers.customer_phone ( text | values: 254-072-4068x33935, +41(8)1897032009 ), Customers.customer_email ( text | values: margarett.vonrueden@example.com, stiedemann.sigrid@example.com ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.product_type_code ( text | values: Clothes, Hardware ), Products.product_name ( text | values: red jeans, yellow jeans ), Products.product_price ( real | values: 734.73, 687.23 ) ]
table Supplier_Addresses, columns = [ Supplier_Addresses.supplier_id ( integer | primary key | values: 2, 3 ), Supplier_Addresses.address_id ( integer | values: 11, 2 ), Supplier_Addresses.date_from ( datetime | values: 2016-09-22 16:41:31, 2014-11-07 19:18:49 ), Supplier_Addresses.date_to ( datetime | values: 2018-03-14 20:06:37, 2018-03-16 16:39:58 ) ]
table Customer_Addresses, columns = [ Customer_Addresses.customer_id ( integer | primary key | values: 1, 2 ), Customer_Addresses.address_id ( integer | values: 2, 6 ), Customer_Addresses.date_from ( datetime | values: 2017-12-11 05:00:22, 2017-10-07 23:00:26 ), Customer_Addresses.date_to ( datetime | values: 2018-03-20 20:52:34, 2018-02-28 14:53:52 ) ]
table Customer_Orders, columns = [ Customer_Orders.order_id ( integer | primary key | values: 1, 2 ), Customer_Orders.customer_id ( integer | values: 12, 4 ), Customer_Orders.order_status_code ( text | values: Completed, New ), Customer_Orders.order_date ( datetime | values: 2018-02-10 15:44:48, 2018-01-31 17:49:18 ) ]
table Department_Stores, columns = [ Department_Stores.dept_store_id ( integer | primary key | values: 1, 2 ), Department_Stores.dept_store_chain_id ( integer | values: 1, 3 ), Department_Stores.store_name ( text | values: store_name ), Department_Stores.store_address ( text | values: 01290 Jeremie Parkway Suite 753
North Arielle, MS 51249, 082 Purdy Expressway
O'Connellshire, IL 31732 ), Department_Stores.store_phone ( text | values: (948)944-5099x2027, 877-917-5029 ), Department_Stores.store_email ( text | values: bmaggio@example.com, larissa10@example.org ) ]
table Departments, columns = [ Departments.department_id ( integer | primary key | values: 1, 2 ), Departments.dept_store_id ( integer | values: 5, 11 ), Departments.department_name ( text | values: human resource, purchasing ) ]
table Order_Items, columns = [ Order_Items.order_item_id ( integer | primary key | values: 1, 2 ), Order_Items.order_id ( integer | values: 9, 1 ), Order_Items.product_id ( integer | values: 7, 3 ) ]
table Product_Suppliers, columns = [ Product_Suppliers.product_id ( integer | primary key | values: 3, 4 ), Product_Suppliers.supplier_id ( integer | values: 3, 1 ), Product_Suppliers.date_supplied_from ( datetime | values: 2017-06-19 00:49:05, 2017-07-02 00:35:12 ), Product_Suppliers.date_supplied_to ( datetime | values: 2018-03-24 19:29:18, 2018-03-25 07:30:49 ), Product_Suppliers.total_amount_purchased ( text | values: 89366.05, 25085.57 ), Product_Suppliers.total_value_purchased ( real | values: 36014.6, 36274.56 ) ]
table Staff_Department_Assignments, columns = [ Staff_Department_Assignments.staff_id ( integer | primary key | values: 1, 2 ), Staff_Department_Assignments.department_id ( integer | values: 5, 3 ), Staff_Department_Assignments.date_assigned_from ( datetime | values: 2017-06-11 22:55:20, 2017-12-18 19:12:15 ), Staff_Department_Assignments.job_title_code ( text | values: Department Manager, Sales Person ), Staff_Department_Assignments.date_assigned_to ( datetime | values: 2018-03-23 21:59:11, 2018-03-23 20:25:24 ) ]
foreign keys:
Supplier_Addresses.supplier_id = Suppliers.supplier_id
Supplier_Addresses.address_id = Addresses.address_id
Customer_Addresses.customer_id = Customers.customer_id
Customer_Addresses.address_id = Addresses.address_id
Customer_Orders.customer_id = Customers.customer_id
Department_Stores.dept_store_chain_id = Department_Store_Chain.dept_store_chain_id
Departments.dept_store_id = Department_Stores.dept_store_id
Order_Items.product_id = Products.product_id
Order_Items.order_id = Customer_Orders.order_id
Product_Suppliers.product_id = Products.product_id
Product_Suppliers.supplier_id = Suppliers.supplier_id
Staff_Department_Assignments.staff_id = Staff.staff_id
Staff_Department_Assignments.department_id = Departments.department_id

# Here are some example questions that CAN be answered by the schema below:
-- Which customers have placed orders along with their order dates and statuses
-- List each product with the names of its suppliers and the dates they started supplying it
-- What is the name of the department where staff member with staff_id = 1 is assigned?
-- How many different addresses does the supplier with supplier_id = 1 have?
-- What is the total amount of money spent by all customers on orders placed after '2020-01-01' and before '2020-12-31'?  Select only the sum of total_amount_purchased for orders placed during the specified date range.  ORDER BY total_amount_purchased in descending order.  LIMIT 10.  Group the results by total_amount_purchased.  (Hint:  Use the Customer_Orders table to get the date range of the orders.)  Use the Product_Suppliers table to get the total_amount_purchased.  Use the Order_Items table to get the order_id.  Use the Customer_Orders table to get the customer_id.  Use the Customers table to filter the results by customer_id.  Use the Product_Suppliers table to get the supplier_id.  Use the Suppliers table to get the supplier_name.  Use the Product_Suppliers table to get the product_id.  Use the Products table to get the product_name.  Use the Product_S
------------------------------------------------------------------------------------------
database_id: music_4
database schema :
table artist, columns = [ artist.Artist_ID ( integer | primary key | values: 1, 2 ), artist.Artist ( text | values: Gorgoroth, Ophiolatry ), artist.Age ( real | values: 34, 35 ), artist.Famous_Title ( text | values: Bergen 1996, Transmutation ), artist.Famous_Release_date ( text | values: November 2007, January 21, 2008 ) ]
table volume, columns = [ volume.Volume_ID ( integer | primary key | values: 1, 2 ), volume.Volume_Issue ( text | values: 45:14 §, 45:15 ), volume.Issue_Date ( text | values: 27 December 1986 - 10 January, 17 January ), volume.Weeks_on_Top ( real | values: 3.0, 1.0 ), volume.Song ( text | values:  The Way,  Everybody Have Fun Tonight  ), volume.Artist_ID ( integer | values: 1, 2 ) ]
table music_festival, columns = [ music_festival.ID ( integer | primary key | values: 1, 2 ), music_festival.Music_Festival ( text | values: 34th England Academy Prize, 34th Japan Academy Prize ), music_festival.Date_of_ceremony ( text | values: 18 February 2011 ), music_festival.Category ( text | values: Best Song, Best Lyrics ), music_festival.Volume ( integer | values: 1, 2 ), music_festival.Result ( text | values: Nominated, Awarded ) ]
foreign keys:
volume.Artist_ID = artist.Artist_ID
music_festival.Volume = volume.Volume_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the artist with the most weeks on top in the database?
-- What is the average age of all artists in the database?
-- What are the names of all the music festivals that had at least one artist that won in the "rock" category?
-- What is the number of artists in the database that released a song with a release date before 2010?
-- What are the names of all the artists that participated in music festivals with the category "hip hop"?  Show the artist names only if their song was on top for at least 10 weeks.  Order the results by the number of weeks on top.  Exclude any artists that are not famous.  Use the music_festival table for filtering.  Use the volume table for the weeks_on_top information.  Use the artist table for filtering the famous title.  Use the music_festival table to filter the hip hop category.  Use the artist table for ordering the results.  Use the volume table for counting the weeks_on_top.  Use the artist table for filtering the famous title.  Use the music_festival table for filtering the hip hop category.  Use the artist table for ordering the results
------------------------------------------------------------------------------------------
database_id: insurance_fnol
database schema :
table Customers, columns = [ Customers.Customer_ID ( integer | primary key | values: 194, 214 ), Customers.Customer_name ( text | values: America Jaskolski, Ellsworth Paucek ) ]
table Services, columns = [ Services.Service_ID ( integer | primary key | values: 1, 4 ), Services.Service_name ( text | values: New policy application, Close a policy ) ]
table Available_Policies, columns = [ Available_Policies.Policy_ID ( integer | primary key | values: 246, 257 ), Available_Policies.policy_type_code ( text | values: Life Insurance, Property Insurance ), Available_Policies.Customer_Phone ( text | values: +16(2)5838999222, 242.763.9214 ) ]
table Customers_Policies, columns = [ Customers_Policies.Customer_ID ( integer | primary key | values: 214, 256 ), Customers_Policies.Policy_ID ( integer | values: 257, 301 ), Customers_Policies.Date_Opened ( datetime | values: 2016-11-19, 2016-04-12 ), Customers_Policies.Date_Closed ( datetime | values: 2018-03-04, 2018-02-07 ) ]
table First_Notification_of_Loss, columns = [ First_Notification_of_Loss.FNOL_ID ( integer | primary key | values: 532, 1611 ), First_Notification_of_Loss.Customer_ID ( integer | values: 214, 996 ), First_Notification_of_Loss.Policy_ID ( integer | values: 257, 993 ), First_Notification_of_Loss.Service_ID ( integer | values: 6, 9 ) ]
table Claims, columns = [ Claims.Claim_ID ( integer | primary key | values: 134, 145 ), Claims.FNOL_ID ( integer | values: 1722, 1611 ), Claims.Effective_Date ( datetime | values: 1973-08-18, 2014-10-19 ) ]
table Settlements, columns = [ Settlements.Settlement_ID ( integer | primary key | values: 161, 176 ), Settlements.Claim_ID ( integer | values: 717, 641 ), Settlements.Effective_Date ( datetime | values: 2009-11-20, 1971-06-29 ), Settlements.Settlement_Amount ( real | values: 6451.65, 1588.45 ) ]
foreign keys:
Customers_Policies.Policy_ID = Available_Policies.Policy_ID
Customers_Policies.Customer_ID = Customers.Customer_ID
First_Notification_of_Loss.Customer_ID = Customers_Policies.Customer_ID
First_Notification_of_Loss.Policy_ID = Customers_Policies.Policy_ID
First_Notification_of_Loss.Service_ID = Services.Service_ID
Claims.FNOL_ID = First_Notification_of_Loss.FNOL_ID
Settlements.Claim_ID = Claims.Claim_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average settlement amount for claims settled on a Monday?
-- How many customers have policies that are still open?
-- What is the count of customers with at least one policy that was opened in the year 2020?
-- What is the number of claims for which the settlement amount is greater than $100,000 and the claim was settled on a day of the week that is not a Friday?   -5
-- What is the number of customers who have made at least one claim in the year 2020 and also have a policy that was opened in the year 2019?   -6
------------------------------------------------------------------------------------------
database_id: cinema
database schema :
table film, columns = [ film.Film_ID ( integer | primary key | values: 1, 2 ), film.Rank_in_series ( real | values: 26, 27 ), film.Number_in_season ( real | values: 1, 2 ), film.Title ( text | values: The Case of the Mystery Weekend, The Case of the Smart Dummy ), film.Directed_by ( text | values: Bill Schreiner, Jesus Salvador Treviño ), film.Original_air_date ( text | values: September 21–25, 1992, September 28–October 2, 1992 ), film.Production_code ( text | values: 50021–50025, 50231–50235 ) ]
table cinema, columns = [ cinema.Cinema_ID ( integer | primary key | values: 1, 2 ), cinema.Name ( text | values: Codling, Carrowleagh ), cinema.Openning_year ( real | values: 2010, 2012 ), cinema.Capacity ( real | values: 1100, 368 ), cinema.Location ( text | values: County Wicklow, County Cork ) ]
table schedule, columns = [ schedule.Cinema_ID ( integer | primary key | values: 1, 2 ), schedule.Film_ID ( integer | values: 1, 2 ), schedule.Date ( text | values: 21 May, 21 Jun ), schedule.Show_times_per_day ( real | values: 5, 3 ), schedule.Price ( real | values: 12.99, 8.99 ) ]
foreign keys:
schedule.Cinema_ID = cinema.Cinema_ID
schedule.Film_ID = film.Film_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many films were directed by the director with the name "Rick and Morty"?
-- What is the average price of a ticket for films of the "Rick and Morty" series?
-- What is the name of the cinema with the highest capacity?
-- How many films were shown on the 1st of January, 2022?
-- What is the rank of the film with title "Pilot" in the series?  (assuming there are multiple films with the same title in the series)  and what is the number of films with title "Pilot" in the series?  and what is the number of seasons in which the film "Pilot" was shown?   and what is the title of the first film in the series?   and what is the title of the first film in the series that was shown on the 1st of January, 2022?   and what is the number of films with title "Pilot" that were shown on the 1st of January, 2022?   and what is the number of seasons in which the film "Pilot" was shown on the 1st of January, 2022?
------------------------------------------------------------------------------------------
database_id: decoration_competition
database schema :
table college, columns = [ college.College_ID ( integer | primary key | values: 1, 2 ), college.Name ( text | values: Saskatchewan School, B.C. School ), college.Leader_Name ( text | values: Ousame Tounkara, Ryan Thelwell ), college.College_Location ( text | values: Ottawa, Minnesota ) ]
table member, columns = [ member.Member_ID ( integer | primary key | values: 1, 2 ), member.Name ( text | values: Jack Nicklaus, Billy Casper ), member.Country ( text | values: United States, Canada ), member.College_ID ( integer | values: 1, 4 ) ]
table round, columns = [ round.Round_ID ( real | values: 1, 2 ), round.Member_ID ( integer | primary key | values: 1, 2 ), round.Decoration_Theme ( text | values: Walk on the Moon, Soft Dream ), round.Rank_in_Round ( real | values: 1, 2 ) ]
foreign keys:
member.College_ID = college.College_ID
round.Member_ID = member.Member_ID

# Here are some example questions that CAN be answered by the schema below:
-- List all colleges with their leader names and locations
-- Which members belong to each college and their representing countries
-- Show the decoration themes assigned to each member and their rank in the round
-- Identify members who achieved first rank in any round and the associated theme
-- Provide each college’s name along with the names of its members
------------------------------------------------------------------------------------------
database_id: phone_market
database schema :
table phone, columns = [ phone.Name ( text | values: IPhone 5s, IPhone 6 ), phone.Phone_ID ( integer | primary key | values: 1, 2 ), phone.Memory_in_G ( real | values: 32, 128 ), phone.Carrier ( text | values: Sprint, TMobile ), phone.Price ( real | values: 320.0, 480.0 ) ]
table market, columns = [ market.Market_ID ( integer | primary key | values: 1, 2 ), market.District ( text | values: Alberta, British Columbia ), market.Num_of_employees ( real | values: 1966, 1965 ), market.Num_of_shops ( real | values: 40.0, 49.0 ), market.Ranking ( real | values: 1, 21 ) ]
table phone_market, columns = [ phone_market.Market_ID ( integer | primary key | values: 1, 2 ), phone_market.Phone_ID ( text | values: 1, 4 ), phone_market.Num_of_stock ( real | values: 2232, 4324 ) ]
foreign keys:
phone_market.Phone_ID = phone.Phone_ID
phone_market.Market_ID = market.Market_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of phones sold in the market with district 'North'?
-- How many phones does the market with district 'North' have in stock in total?
-- What is the name of the phone with the highest memory and a price of more than 500?
-- What is the average ranking of the markets with more than 50 employees?
-- What are the names of the phones sold in the market with district 'North' and a ranking of more than 5?  #include the phone memory in the results.
------------------------------------------------------------------------------------------
database_id: store_product
database schema :
table product, columns = [ product.product_id ( integer | primary key | values: 1, 2 ), product.product ( text | values: Fujitsu fi-6130 A4 Series Scanner, Plustek MobileOffice D28 Corporate ), product.dimensions ( text | values: 301 x 160 x 158, 303 x 94 x 60 ), product.dpi ( real | values: 600.0 ), product.pages_per_minute_color ( real | values: 30.0, 28.0 ), product.max_page_size ( text | values: A4, 216mm x 356mm ), product.interface ( text | values: USB 2.0 ) ]
table store, columns = [ store.Store_ID ( integer | primary key | values: 1, 2 ), store.Store_Name ( text | values: Miramichi, Neguac ), store.Type ( text | values: City Mall, Village Store ), store.Area_size ( real | values: 179.84, 26.69 ), store.Number_of_product_category ( real | values: 17811.0, 1678.0 ), store.Ranking ( real | values: 2, 3 ) ]
table district, columns = [ district.District_ID ( integer | primary key | values: 1, 2 ), district.District_name ( text | values: Attock District, Bahawalnagar District ), district.Headquartered_City ( text | values: Attock City, Bahawalnagar City ), district.City_Population ( real | values: 94620.0, 134936.0 ), district.City_Area ( real | values: 20.0, 13.0 ) ]
table store_product, columns = [ store_product.Store_ID ( integer | primary key | values: 1, 2 ), store_product.Product_ID ( real | values: 1, 2 ) ]
table store_district, columns = [ store_district.Store_ID ( integer | primary key | values: 1, 2 ), store_district.District_ID ( integer | values: 15, 11 ) ]
foreign keys:
store_product.Store_ID = store.Store_ID
store_district.District_ID = district.District_ID
store_district.Store_ID = store.Store_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the product with product_id = 10?
-- What is the average number of products in a store with interface = "USB"?
-- What is the product with the highest dpi?
-- What is the district with the highest population?
-- What is the name of the store with the highest ranking and the product with product_id = 20?  SELECT product_name FROM product AS p  JOIN store_product AS sp ON p.product_id = sp.Product_id  JOIN store AS s ON sp.Store_id = s.Store_id WHERE s.Ranking = (SELECT MAX(Ranking) FROM store) AND p.product_id = 20;  (this query is for the question 5, don't include it in your answer)  SELECT p.product, s.Store_Name FROM product AS p  JOIN store_product AS sp ON p.product_id = sp.Product_id  JOIN store AS s ON sp.Store_id = s.Store_ID WHERE s.Store_Name = 'Store Name' AND p.product_id = 20;  (this query is for the question 5, don't include it in your answer)  SELECT s.Store_Name FROM store AS s  JOIN store_product AS sp ON s.Store
------------------------------------------------------------------------------------------
database_id: assets_maintenance
database schema :
table Third_Party_Companies, columns = [ Third_Party_Companies.company_id ( integer | primary key | values: 1, 2 ), Third_Party_Companies.company_type ( text | values: Maintenance Contractor, Supplier ), Third_Party_Companies.company_name ( text | values: Langworth-Funk, McDermott Group ), Third_Party_Companies.company_address ( text | values: 615 Jacobs Mews, 873 Conrad Creek Apt. 286 ), Third_Party_Companies.other_company_details ( text | values: Uganda, China ) ]
table Maintenance_Contracts, columns = [ Maintenance_Contracts.maintenance_contract_id ( integer | primary key | values: 1, 2 ), Maintenance_Contracts.maintenance_contract_company_id ( integer | values: 15, 9 ), Maintenance_Contracts.contract_start_date ( datetime | values: 2017-09-13 11:51:29, 2017-12-18 11:43:16 ), Maintenance_Contracts.contract_end_date ( datetime | values: 2018-03-16 21:21:50, 2018-03-22 06:00:37 ), Maintenance_Contracts.other_contract_details ( text | values: N/A ) ]
table Parts, columns = [ Parts.part_id ( integer | primary key | values: 1, 2 ), Parts.part_name ( text | values: top, middle ), Parts.chargeable_yn ( text | values: 0, 1 ), Parts.chargeable_amount ( text | values: 4, 9 ), Parts.other_part_details ( text | values: N/A ) ]
table Skills, columns = [ Skills.skill_id ( integer | primary key | values: 1, 2 ), Skills.skill_code ( text | values: ELEC, MECH ), Skills.skill_description ( text | values: Electrical, Mechanical ) ]
table Staff, columns = [ Staff.staff_id ( integer | primary key | values: 1, 2 ), Staff.staff_name ( text | values: Audreanne, Berneice ), Staff.gender ( text | values: 1, 0 ), Staff.other_staff_details ( text | values: Manager, Woker ) ]
table Assets, columns = [ Assets.asset_id ( integer | primary key | values: 1, 2 ), Assets.maintenance_contract_id ( integer | values: 2, 14 ), Assets.supplier_company_id ( integer | values: 2, 1 ), Assets.asset_details ( text | values: dell laptop1, dell laptop2 ), Assets.asset_make ( text | values: PT, IN ), Assets.asset_model ( text | values: 58 ub, 35 xt ), Assets.asset_acquired_date ( datetime | values: 2017-12-25 00:31:27, 2018-01-27 00:59:46 ), Assets.asset_disposed_date ( datetime | values: 2018-03-14 10:50:00, 2018-03-20 04:24:09 ), Assets.other_asset_details ( text | values: Bad condition ) ]
table Asset_Parts, columns = [ Asset_Parts.asset_id ( integer | values: 5, 3 ), Asset_Parts.part_id ( integer | values: 3, 1 ) ]
table Maintenance_Engineers, columns = [ Maintenance_Engineers.engineer_id ( integer | primary key | values: 1, 2 ), Maintenance_Engineers.company_id ( integer | values: 14, 2 ), Maintenance_Engineers.first_name ( text | values: Etha, Clemens ), Maintenance_Engineers.last_name ( text | values: Reinger, Orn ), Maintenance_Engineers.other_details ( text | values: Skilled ) ]
table Engineer_Skills, columns = [ Engineer_Skills.engineer_id ( integer | values: 10, 15 ), Engineer_Skills.skill_id ( integer | values: 2, 1 ) ]
table Fault_Log, columns = [ Fault_Log.fault_log_entry_id ( integer | primary key | values: 1, 2 ), Fault_Log.asset_id ( integer | values: 3, 7 ), Fault_Log.recorded_by_staff_id ( integer | values: 14, 4 ), Fault_Log.fault_log_entry_datetime ( datetime | values: 2018-03-21 04:25:00, 2018-03-13 09:43:05 ), Fault_Log.fault_description ( text | values: system error, failed parts ), Fault_Log.other_fault_details ( text | values: N/A ) ]
table Engineer_Visits, columns = [ Engineer_Visits.engineer_visit_id ( integer | primary key | values: 1, 2 ), Engineer_Visits.contact_staff_id ( integer | values: 8, 7 ), Engineer_Visits.engineer_id ( integer | values: 8, 15 ), Engineer_Visits.fault_log_entry_id ( integer | values: 13, 4 ), Engineer_Visits.fault_status ( text | values: Waiting, Return ), Engineer_Visits.visit_start_datetime ( datetime | values: 1978-10-12 23:14:40, 1980-05-02 23:31:18 ), Engineer_Visits.visit_end_datetime ( datetime | values: 1988-01-07 06:41:51, 1990-08-30 22:44:16 ), Engineer_Visits.other_visit_details ( text | values: N/A ) ]
table Part_Faults, columns = [ Part_Faults.part_fault_id ( integer | primary key | values: 1, 2 ), Part_Faults.part_id ( integer | values: 1, 3 ), Part_Faults.fault_short_name ( text | values: PW, TW ), Part_Faults.fault_description ( text | values: Package Wrong, Top Parts Wrong ), Part_Faults.other_fault_details ( text | values: N/A ) ]
table Fault_Log_Parts, columns = [ Fault_Log_Parts.fault_log_entry_id ( integer | values: 12, 7 ), Fault_Log_Parts.part_fault_id ( integer | values: 3, 4 ), Fault_Log_Parts.fault_status ( text | values: Reported, Return ) ]
table Skills_Required_To_Fix, columns = [ Skills_Required_To_Fix.part_fault_id ( integer | values: 3, 12 ), Skills_Required_To_Fix.skill_id ( integer | values: 2, 3 ) ]
foreign keys:
Maintenance_Contracts.maintenance_contract_company_id = Third_Party_Companies.company_id
Assets.supplier_company_id = Third_Party_Companies.company_id
Assets.maintenance_contract_id = Maintenance_Contracts.maintenance_contract_id
Asset_Parts.asset_id = Assets.asset_id
Asset_Parts.part_id = Parts.part_id
Maintenance_Engineers.company_id = Third_Party_Companies.company_id
Engineer_Skills.skill_id = Skills.skill_id
Engineer_Skills.engineer_id = Maintenance_Engineers.engineer_id
Fault_Log.recorded_by_staff_id = Staff.staff_id
Fault_Log.asset_id = Assets.asset_id
Engineer_Visits.contact_staff_id = Staff.staff_id
Engineer_Visits.engineer_id = Maintenance_Engineers.engineer_id
Engineer_Visits.fault_log_entry_id = Fault_Log.fault_log_entry_id
Part_Faults.part_id = Parts.part_id
Fault_Log_Parts.fault_log_entry_id = Fault_Log.fault_log_entry_id
Fault_Log_Parts.part_fault_id = Part_Faults.part_fault_id
Skills_Required_To_Fix.skill_id = Skills.skill_id
Skills_Required_To_Fix.part_fault_id = Part_Faults.part_fault_id

# Here are some example questions that CAN be answered by the schema below:
-- List all third-party companies along with their contract start and end dates
-- Which assets are maintained by each company and what models they are
-- What is the total number of assets that have been disposed of?
-- What are the names of the third-party companies that have a maintenance contract with a company that has a maintenance contract company_id of 100?
-- What is the part name of the most expensive part, i.e., the part with the maximum chargeable_amount?
------------------------------------------------------------------------------------------
database_id: student_assessment
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 5, 9 ), Addresses.line_1 ( text | values: 0900 Roderick Oval
New Albina, WA 19200-7914, 966 Dach Ports Apt. 322
Lake Harmonyhaven, VA 65235 ), Addresses.line_2 ( text | values: Suite 096, Apt. 163 ), Addresses.city ( text | values: Linnealand, South Minnie ), Addresses.zip_postcode ( text | values: 862, 716 ), Addresses.state_province_county ( text | values: Montana, Texas ), Addresses.country ( text | values: USA ) ]
table People, columns = [ People.person_id ( integer | primary key | values: 111, 121 ), People.first_name ( text | values: Shannon, Virginie ), People.middle_name ( text | values: Elissa, Jasmin ), People.last_name ( text | values: Senger, Hartmann ), People.cell_mobile_number ( text | values: 01955267735, (508)319-2970x043 ), People.email_address ( text | values: javier.trantow@example.net, boyer.lonie@example.com ), People.login_name ( text | values: pgub, bkkv ), People.password ( text | values: 5e4ff49a61b3544da3ad7dc7e2cf28847564c64c, b063331ea8116befaa7b84c59c6a22200f5f8caa ) ]
table Students, columns = [ Students.student_id ( integer | primary key | values: 111, 121 ), Students.student_details ( text | values: Marry, Martin ) ]
table Courses, columns = [ Courses.course_id ( text | primary key | values: 301, 302 ), Courses.course_name ( text | values: statistics, English ), Courses.course_description ( text | values: statistics, English ), Courses.other_details ( text | values: N/A ) ]
table People_Addresses, columns = [ People_Addresses.person_address_id ( integer | primary key | values: 122, 257 ), People_Addresses.person_id ( integer | values: 111, 121 ), People_Addresses.address_id ( integer | values: 9, 5 ), People_Addresses.date_from ( datetime | values: 2012-09-26 13:21:00, 2008-07-31 02:17:25 ), People_Addresses.date_to ( datetime | values: 2018-03-21 09:46:30, 2018-03-09 02:11:12 ) ]
table Student_Course_Registrations, columns = [ Student_Course_Registrations.student_id ( integer | primary key | values: 111, 121 ), Student_Course_Registrations.course_id ( integer | values: 301, 303 ), Student_Course_Registrations.registration_date ( datetime | values: 2008-11-04 10:35:13, 2008-10-04 10:35:13 ) ]
table Student_Course_Attendance, columns = [ Student_Course_Attendance.student_id ( integer | primary key | values: 111, 121 ), Student_Course_Attendance.course_id ( integer | values: 301, 303 ), Student_Course_Attendance.date_of_attendance ( datetime | values: 2008-11-04 10:35:13, 2012-04-09 11:44:34 ) ]
table Candidates, columns = [ Candidates.candidate_id ( integer | primary key | values: 111, 121 ), Candidates.candidate_details ( text | values: Jane, Robert ) ]
table Candidate_Assessments, columns = [ Candidate_Assessments.candidate_id ( integer | primary key | values: 111, 121 ), Candidate_Assessments.qualification ( text | values: A, B ), Candidate_Assessments.assessment_date ( datetime | values: 2010-04-07 11:44:34, 2010-04-17 11:44:34 ), Candidate_Assessments.asessment_outcome_code ( text | values: Pass, Fail ) ]
foreign keys:
Students.student_id = People.person_id
People_Addresses.address_id = Addresses.address_id
People_Addresses.person_id = People.person_id
Student_Course_Registrations.course_id = Courses.course_id
Student_Course_Registrations.student_id = Students.student_id
Student_Course_Attendance.student_id = Student_Course_Registrations.student_id
Student_Course_Attendance.course_id = Student_Course_Registrations.course_id
Candidates.candidate_id = People.person_id
Candidate_Assessments.candidate_id = Candidates.candidate_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of addresses a person has? SELECT AVG(cnt) FROM (SELECT COUNT(*) cnt FROM People_Addresses GROUP BY person_id) 2. How many students have registered for the course with the course name "Data Analysis"? SELECT COUNT(*) FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Data Analysis') 3. What is the name of the city where the address with the highest zip code is located? SELECT city FROM Addresses ORDER BY zip_postcode DESC LIMIT 1 4. What is the number of candidates who have passed the assessment for the qualification "Certified Data Analyst"? SELECT COUNT(*) FROM Candidate_Assessments WHERE asessment_outcome_code = 'Pass' AND qualification = 'Certified Data Analyst' 5. What is the name of the first student who registered for the course with the course name "Data Analysis"? SELECT first_name, last_name FROM Student_Course_Registrations AS S JOIN Students AS ST ON S.student_id = ST.student_id WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Data Analysis') ORDER BY S.registration_date LIMIT
-- This is the beginning of the problem. Please see below for the continuation of the problem.
------------------------------------------------------------------------------------------
database_id: dog_kennels
database schema :
table Breeds, columns = [ Breeds.breed_code ( text | primary key | values: BUL, ESK ), Breeds.breed_name ( text | values: Eskimo, Husky ) ]
table Charges, columns = [ Charges.charge_id ( integer | primary key | values: 1, 2 ), Charges.charge_type ( text | values: Daily Accommodation, Drugs ), Charges.charge_amount ( real | values: 98, 322 ) ]
table Sizes, columns = [ Sizes.size_code ( text | primary key | values: LGE, MED ), Sizes.size_description ( text | values: Small, Medium ) ]
table Treatment_Types, columns = [ Treatment_Types.treatment_type_code ( text | primary key | values: EXAM, VAC ), Treatment_Types.treatment_type_description ( text | values: Physical examination, Vaccination ) ]
table Owners, columns = [ Owners.owner_id ( integer | primary key | values: 1, 2 ), Owners.first_name ( text | values: Nora, Melisa ), Owners.last_name ( text | values: Haley, DuBuque ), Owners.street ( text | values: 0647 Hintz Village Apt. 024, 1204 Mae Highway Apt. 107 ), Owners.city ( text | values: Lake Tia, Port Reannamouth ), Owners.state ( text | values: Wisconsin, Virginia ), Owners.zip_code ( text | values: 93165, 45244 ), Owners.email_address ( text | values: lynn81@example.org, ykris@example.com ), Owners.home_phone ( text | values: 1-682-845-0116x63235, (799)563-0260x454 ), Owners.cell_number ( text | values: 478.978.0729, (722)768-5439x484 ) ]
table Dogs, columns = [ Dogs.dog_id ( integer | primary key | values: 1, 2 ), Dogs.owner_id ( integer | values: 3, 11 ), Dogs.abandoned_yn ( text | values: 1, 0 ), Dogs.breed_code ( text | values: ESK, BUL ), Dogs.size_code ( text | values: LGE, MED ), Dogs.name ( text | values: Kacey, Hipolito ), Dogs.age ( text | values: 6, 9 ), Dogs.date_of_birth ( datetime | values: 2012-01-27 05:11:53, 2013-02-13 05:15:21 ), Dogs.gender ( text | values: 1, 0 ), Dogs.weight ( text | values: 7.57, 1.72 ), Dogs.date_arrived ( datetime | values: 2017-09-08 20:10:13, 2017-12-22 05:02:02 ), Dogs.date_adopted ( datetime | values: 2018-03-06 16:32:11, 2018-03-25 08:12:51 ), Dogs.date_departed ( datetime | values: 2018-03-25 06:58:44, 2018-03-25 02:11:32 ) ]
table Professionals, columns = [ Professionals.professional_id ( integer | primary key | values: 1, 2 ), Professionals.role_code ( text | values: Employee, Veterenarian ), Professionals.first_name ( text | values: Taryn, Jayson ), Professionals.street ( text | values: 6915 Oberbrunner Point Suite 491
Gleasonville, LA , 88665 Terence Lodge Apt. 904
Corneliusfort, NC 194 ), Professionals.city ( text | values: West Heidi, North Odellfurt ), Professionals.state ( text | values: Indiana, Connecticut ), Professionals.zip_code ( text | values: 06646, 43129 ), Professionals.last_name ( text | values: Braun, Ullrich ), Professionals.email_address ( text | values: deanna.schuster@example.com, lucile.shanahan@example.org ), Professionals.home_phone ( text | values: +71(6)2898266914, +02(1)0259033559 ), Professionals.cell_number ( text | values: (275)939-2435x80863, 889-940-2676 ) ]
table Treatments, columns = [ Treatments.treatment_id ( integer | primary key | values: 1, 2 ), Treatments.dog_id ( integer | values: 14, 4 ), Treatments.professional_id ( integer | values: 9, 10 ), Treatments.treatment_type_code ( text | values: WALK, VAC ), Treatments.date_of_treatment ( datetime | values: 2018-03-19 04:39:54, 2018-03-15 20:25:34 ), Treatments.cost_of_treatment ( real | values: 567, 147 ) ]
foreign keys:
Dogs.owner_id = Owners.owner_id
Dogs.owner_id = Owners.owner_id
Dogs.size_code = Sizes.size_code
Dogs.breed_code = Breeds.breed_code
Treatments.dog_id = Dogs.dog_id
Treatments.professional_id = Professionals.professional_id
Treatments.treatment_type_code = Treatment_Types.treatment_type_code

# Here are some example questions that CAN be answered by the schema below:
-- What is the average weight of dogs that were adopted by owners from the state of California?
-- Which treatment types are used for dogs that are abandoned and weigh over 20 pounds?
------------------------------------------------------------------------------------------
database_id: music_1
database schema :
table genre, columns = [ genre.g_name ( text | primary key | values: blues, folk ), genre.rating ( text | values: 8, 7 ), genre.most_popular_in ( text | values: Bangladesh, Sylhet,Chittagong,Kustia ) ]
table artist, columns = [ artist.artist_name ( text | primary key | values: Enrique, Farida ), artist.country ( text | values: India, Bangladesh ), artist.gender ( text | values: Male, Female ), artist.preferred_genre ( text | values: tagore, nazrul ) ]
table files, columns = [ files.f_id ( integer | primary key | values: 1, 2 ), files.artist_name ( text | values: Shrikanta, Prity ), files.file_size ( text | values: 3.78 MB, 4.12 MB ), files.duration ( text | values: 3:45, 2:56 ), files.formats ( text | values: mp4, mp3 ) ]
table song, columns = [ song.song_name ( text | primary key | values: Aj ei akash, Ami opar hoye ), song.artist_name ( text | values: Shrikanta, Prity ), song.country ( text | values: India, Bangladesh ), song.f_id ( integer | values: 1, 2 ), song.genre_is ( text | values: tagore, nazrul ), song.rating ( real | values: 8, 5 ), song.languages ( text | values: bangla, english ), song.releasedate ( datetime | values: 28-AUG-2011, 21-SEP-1997 ), song.resolution ( real | values: 1080, 512 ) ]
foreign keys:
artist.preferred_genre = genre.g_name
files.artist_name = artist.artist_name
song.genre_is = genre.g_name
song.f_id = files.f_id
song.artist_name = artist.artist_name

# Here are some example questions that CAN be answered by the schema below:
-- What is the average file size of songs by artists from the United States that are rated 4 or higher, grouped by genre?
-- What is the total number of songs released in the year 2000, by artist, that belong to the 'rock' genre?
-- What is the name of the artist with the highest number of songs in the 'pop' genre, who is from the United Kingdom?
-- What is the total number of songs by artists from the 'Electronic' genre that have a duration of more than 5 minutes?
-- What is the name of the most popular artist in the 'Hip-Hop/Rap' genre who has a song with a rating of 5?
------------------------------------------------------------------------------------------
database_id: company_employee
database schema :
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Age ( real | values: 27, 25 ), people.Name ( text | values: Reggie Lewis, Brad Lohaus ), people.Nationality ( text | values: United States, United Kindom ), people.Graduation_College ( text | values: Northeastern, Iowa ) ]
table company, columns = [ company.Company_ID ( integer | primary key | values: 1.0, 2.0 ), company.Name ( text | values: ExxonMobil, JPMorgan Chase ), company.Headquarters ( text | values: USA, Netherlands ), company.Industry ( text | values: Oil and gas, Banking ), company.Sales_in_Billion ( real | values: 433.5, 110.8 ), company.Profits_in_Billion ( real | values: 41.1, 19.0 ), company.Assets_in_Billion ( real | values: 331.1, 2265.8 ), company.Market_Value_in_Billion ( real | values: 407.4, 170.1 ) ]
table employment, columns = [ employment.Company_ID ( integer | primary key | values: 7, 11 ), employment.People_ID ( integer | values: 4, 3 ), employment.Year_working ( real | values: 2, 3 ) ]
foreign keys:
employment.People_ID = people.People_ID
employment.Company_ID = company.Company_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of people who graduated from 'Harvard University'?
-- How many people are working at a company that has its headquarters in 'New York City'?
-- What is the total sales in billion of companies that have at least 1000 employees?
-- What is the average profits in billion of companies that have their market value in billion above 100?
-- What is the name of the people who are working at a company that has its headquarters in 'Chicago', are older than 30 years, and have a graduation college that is not 'MIT' or 'Harvard University'?  order them by name in ascending order.  ](https://lms-01-sql.challenge.dev/)
------------------------------------------------------------------------------------------
database_id: farm
database schema :
table city, columns = [ city.City_ID ( integer | primary key | values: 1, 2 ), city.Official_Name ( text | values: Grand Falls/Grand-Sault, Perth-Andover ), city.Status ( text | values: Town, Village ), city.Area_km_2 ( real | values: 18.06, 8.89 ), city.Population ( real | values: 5706.0, 1778.0 ), city.Census_Ranking ( text | values: 636 of 5008, 1442 of 5,008 ) ]
table farm, columns = [ farm.Farm_ID ( integer | primary key | values: 1, 2 ), farm.Year ( real | values: 1927, 1928 ), farm.Total_Horses ( real | values: 5056.5, 5486.9 ), farm.Working_Horses ( real | values: 3900.1, 4090.5 ), farm.Total_Cattle ( real | values: 8374.5, 8604.8 ), farm.Oxen ( real | values: 805.5, 895.3 ), farm.Bulls ( real | values: 31.6, 32.8 ), farm.Cows ( real | values: 3852.1, 3987.0 ), farm.Pigs ( real | values: 4412.4, 6962.9 ), farm.Sheep_and_Goats ( real | values: 7956.3, 8112.2 ) ]
table farm_competition, columns = [ farm_competition.Competition_ID ( integer | primary key | values: 1, 2 ), farm_competition.Year ( real | values: 2013, 2006 ), farm_competition.Theme ( text | values: Carnival M is back!, Codehunters ), farm_competition.Host_city_ID ( integer | values: 1, 2 ), farm_competition.Hosts ( text | values: Miley Cyrus Jared Leto and Karen Mok, Leehom Wang and Kelly Rowland ) ]
table competition_record, columns = [ competition_record.Competition_ID ( integer | primary key | values: 1, 2 ), competition_record.Farm_ID ( integer | values: 2, 3 ), competition_record.Rank ( real | values: 1, 2 ) ]
foreign keys:
farm_competition.Host_city_ID = city.City_ID
competition_record.Farm_ID = farm.Farm_ID
competition_record.Competition_ID = farm_competition.Competition_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of horses on farms in the city with the official name 'London'?
-- What is the total number of farms participating in the farm competition with the theme 'Cattle' held in the city with the official name 'Paris'?
-- What is the total number of cows on farms in the city with the status 'Town' and the area more than 500 km^2?
-- What is the number of farms that have participated in at least two farm competitions and have won a prize in the competition with the theme 'Sheep and Goats'?  ````
-- What is the total number of cities that host farm competitions?
------------------------------------------------------------------------------------------
database_id: solvency_ii
database schema :
table Addresses, columns = [ Addresses.Address_ID ( integer | primary key | values: 1, 2 ), Addresses.address_details ( text | values: 465 Emely Bypass
West Mafalda, CO 23309, 669 Carter Trafficway
Port Delbert, OK 66249 ) ]
table Locations, columns = [ Locations.Location_ID ( integer | primary key | values: 1, 2 ), Locations.Other_Details ( text | values: Rowe PLC, Ebert, Green and Bogisich ) ]
table Products, columns = [ Products.Product_ID ( integer | primary key | values: 1, 3 ), Products.Product_Type_Code ( text | values: Books, Food ), Products.Product_Name ( text | values: Business Policy, Special Dinning ), Products.Product_Price ( real | values: 1336.26, 2894.94 ) ]
table Parties, columns = [ Parties.Party_ID ( integer | primary key | values: 3, 4 ), Parties.Party_Details ( text | values: European People's Party, European Free Alliance ) ]
table Assets, columns = [ Assets.Asset_ID ( integer | primary key | values: 1, 2 ), Assets.Other_Details ( text | values: Transportation Cars, Meeting Rooms ) ]
table Channels, columns = [ Channels.Channel_ID ( integer | primary key | values: 1, 2 ), Channels.Other_Details ( text | values: 145, 348 ) ]
table Finances, columns = [ Finances.Finance_ID ( integer | primary key | values: 1, 2 ), Finances.Other_Details ( text | values: Mutual, Good ) ]
table Events, columns = [ Events.Event_ID ( integer | primary key | values: 1, 2 ), Events.Address_ID ( integer | values: 3, 15 ), Events.Channel_ID ( real | values: 12, 13 ), Events.Event_Type_Code ( text | values: Trade Show, Press Conferenc ), Events.Finance_ID ( integer | values: 2, 8 ), Events.Location_ID ( integer | values: 13, 11 ) ]
table Products_in_Events, columns = [ Products_in_Events.Product_in_Event_ID ( integer | primary key | values: 13, 23 ), Products_in_Events.Event_ID ( integer | values: 4, 8 ), Products_in_Events.Product_ID ( integer | values: 29, 3 ) ]
table Parties_in_Events, columns = [ Parties_in_Events.Party_ID ( integer | primary key | values: 3, 4 ), Parties_in_Events.Event_ID ( integer | values: 7, 8 ), Parties_in_Events.Role_Code ( text | values: Organizer, Participant ) ]
table Agreements, columns = [ Agreements.Document_ID ( integer | primary key | values: 1, 2 ), Agreements.Event_ID ( integer | values: 13, 15 ) ]
table Assets_in_Events, columns = [ Assets_in_Events.Asset_ID ( integer | primary key | values: 1, 2 ), Assets_in_Events.Event_ID ( integer | values: 4, 5 ) ]
foreign keys:
Events.Finance_ID = Finances.Finance_ID
Events.Address_ID = Addresses.Address_ID
Events.Location_ID = Locations.Location_ID
Products_in_Events.Product_ID = Products.Product_ID
Products_in_Events.Event_ID = Events.Event_ID
Parties_in_Events.Event_ID = Events.Event_ID
Parties_in_Events.Party_ID = Parties.Party_ID
Agreements.Event_ID = Events.Event_ID
Assets_in_Events.Event_ID = Events.Event_ID
Assets_in_Events.Event_ID = Events.Event_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the count of unique addresses that have been used for events?
-- What is the average product price for all products that have been used in events with location ID 1234?
-- What are the event types that have been used for events in channels with ID 5678?
-- How many parties have participated in events with location ID 9012 and have the role code 'organizer'?
-- What is the total number of assets that have been used in events with finance ID 3456?
------------------------------------------------------------------------------------------
database_id: city_record
database schema :
table city, columns = [ city.City_ID ( integer | primary key | values: 1, 2 ), city.City ( text | values: Shanghai, Nanjing ( Jiangsu ) ), city.Hanzi ( text | values: 上海, 南京 ), city.Hanyu_Pinyin ( text | values: Shànghǎi, Nánjīng ), city.Regional_Population ( real | values: 23019148, 8004680 ), city.GDP ( real | values: 1919.57, 614.55 ) ]
table match, columns = [ match.Match_ID ( integer | primary key | values: 1, 2 ), match.Date ( text | values: 18 February 1992, 19 July 1992 ), match.Venue ( text | values: Estadio Cuscatlán , San Salvador , El Salvador, Estadio Rigoberto López , Managua , Nicaragua ), match.Score ( text | values: 1-0, 3-0 ), match.Result ( text | values: 2-0, 5-0 ), match.Competition ( text | values: Friendly match, 1994 FIFA World Cup qualification ) ]
table temperature, columns = [ temperature.City_ID ( integer | primary key | values: 1, 2 ), temperature.Jan ( real | values: 17.8, 26.1 ), temperature.Feb ( real | values: 17.8, 26.1 ), temperature.Mar ( real | values: 18.3, 26.1 ), temperature.Apr ( real | values: 18.9, 26.1 ), temperature.Jun ( real | values: 20.0, 27.8 ), temperature.Jul ( real | values: 20.6, 27.8 ), temperature.Aug ( real | values: 20.6, 28.3 ), temperature.Sep ( real | values: 20.6, 28.3 ), temperature.Oct ( real | values: 20.0, 28.3 ), temperature.Nov ( real | values: 19.4, 27.2 ), temperature.Dec ( real | values: 18.3, 26.7 ) ]
table hosting_city, columns = [ hosting_city.Year ( integer | primary key | values: 2008, 2009 ), hosting_city.Match_ID ( integer | values: 1, 2 ), hosting_city.Host_City ( text | values: 1, 2 ) ]
foreign keys:
temperature.City_ID = city.City_ID
hosting_city.Match_ID = match.Match_ID
hosting_city.Host_City = city.City_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many cities have a population greater than 10 million?
-- What is the average GDP of cities whose Hanzi is "???"?
-- What is the average temperature in the city whose City_ID is 1 in January?
-- What is the most populous city in the competition "World Cup"?
-- How many cities are hosting cities for the year 2010 and have a population greater than 5 million?  Answer the question by joining city, hosting_city and match tables.  (Hint: Use subquery or join for this question)  You may use either match or hosting_city to get the result.  Please explain your answer.  (Note: You cannot use the match table alone to answer this question.)  You should use a subquery or join to answer this question.)
------------------------------------------------------------------------------------------
database_id: swimming
database schema :
table swimmer, columns = [ swimmer.ID ( integer | primary key | values: 1, 2 ), swimmer.name ( text | values: Przemysław Stańczyk, Craig Stevens ), swimmer.Nationality ( text | values: Poland, Australia ), swimmer.meter_100 ( real | values: 57.31, 57.35 ), swimmer.meter_200 ( text | values: 1:57.10, 1:56.34 ), swimmer.meter_300 ( text | values: 2:56.02, 2:55.90 ), swimmer.meter_400 ( text | values: 3:55.36, 3:55.72 ), swimmer.meter_500 ( text | values: 4:54.21, 4:55.08 ), swimmer.meter_600 ( text | values: 5:52.59, 5:54.45 ), swimmer.meter_700 ( text | values: 6:50.91, 6:52.69 ), swimmer.Time ( text | values: 7:47.91, 7:48.67 ) ]
table stadium, columns = [ stadium.ID ( integer | primary key | values: 1, 2 ), stadium.name ( text | values: Nou Mestalla, Gazprom Arena ), stadium.Capacity ( real | values: 75000, 69501 ), stadium.City ( text | values: Valencia, Saint Petersburg ), stadium.Country ( text | values: Spain, Russia ), stadium.Opening_year ( real | values: 2004, 2005 ) ]
table event, columns = [ event.ID ( integer | primary key | values: 1, 2 ), event.Name ( text | values: FINA, Pacific ), event.Stadium_ID ( integer | values: 1, 10 ), event.Year ( text | values: 2016, 2011 ) ]
table record, columns = [ record.ID ( real | values: 1, 2 ), record.Result ( text | values: NC, Win ), record.Swimmer_ID ( integer | primary key | values: 1, 2 ), record.Event_ID ( integer | values: 1, 2 ) ]
foreign keys:
event.Stadium_ID = stadium.ID
record.Swimmer_ID = swimmer.ID
record.Event_ID = event.ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of swimmers participating in events at the stadium with a capacity of 50000?
-- Which swimmers have a meter 100 time less than 1:20?
-- What is the name of the stadium with the highest opening year?
-- How many swimmers have won a record in the year 2010?
-- What are the names of the swimmers who won a record in the event with the name '50m freestyle'?  (Note: '50m freestyle' is in the records table)  (Note: this is a complex question using a join, as the event name is not directly in the records table)  (Note: you will need to join the records table with the event table to find the event ID, and then join that with the event table again to find the event name)  (Note: this is a complex question using a join, as the event name is not directly in the records table)  (Note: you will need to join the records table with the event table to find the event ID, and then join that with the event table again to find the event name)  (Note: you will need to
------------------------------------------------------------------------------------------
database_id: flight_2
database schema :
table airlines, columns = [ airlines.uid ( integer | primary key | values: 1, 2 ), airlines.Airline ( text | values: United Airlines, US Airways ), airlines.Abbreviation ( text | values: UAL, USAir ), airlines.Country ( text | values: USA ) ]
table airports, columns = [ airports.City ( text | values: Aberdeen , Abilene  ), airports.AirportCode ( text | primary key | values: AAF, ABI ), airports.AirportName ( text | values: Phillips AAF , Municipal  ), airports.Country ( text | values: United States  ), airports.CountryAbbrev ( text | values: US , US ) ]
table flights, columns = [ flights.Airline ( integer | primary key | values: 1, 2 ), flights.FlightNo ( real | values: 28, 29 ), flights.SourceAirport ( text | values:  APG,  ASY ), flights.DestAirport ( text | values:  ASY,  APG ) ]
foreign keys:
flights.DestAirport = airports.AirportCode
flights.SourceAirport = airports.AirportCode

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM flights WHERE DestAirport = 'JFK' AND Airline = 1;
-- SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
-- SELECT COUNT(*) FROM airports WHERE Country = 'USA' AND City LIKE 'New%';
-- SELECT COUNT(DISTINCT Airline) FROM flights WHERE DestAirport = 'LHR';
-- SELECT COUNT(*) FROM airports WHERE Country = 'USA' AND City = 'New York';  // Note: This will return 0 because the City column does not have a separate entry for 'New York', it is 'New York City' in the database.  // However, the schema allows this question to be asked.  // This is an example of a question that might require some clarification or expansion of the schema.  //  // Alternatively, the question could be rephrased to 'How many airports are in the US that have "New York" in their city name?'  // This would be a more accurate and schema-friendly question.  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
------------------------------------------------------------------------------------------
database_id: election
database schema :
table county, columns = [ county.County_Id ( integer | primary key | values: 1, 2 ), county.County_name ( text | values: Howard, Baltimore County ), county.Population ( real | values: 21000.0, 90000.0 ), county.Zip_code ( text | values: D21, D08 ) ]
table party, columns = [ party.Party_ID ( integer | primary key | values: 1, 2 ), party.Year ( real | values: 1998.0, 2002.0 ), party.Party ( text | values: Democratic, Liberal ), party.Governor ( text | values: Peter Vallone, Betsy McCaughey Ross ), party.Lieutenant_Governor ( text | values: Sandra Frankel, Jonathan Reiter ), party.Comptroller ( text | values: Carl McCall, Alan Hevesi ), party.Attorney_General ( text | values: Eliot Spitzer, Andrew Cuomo ), party.US_Senate ( text | values: Charles Schumer, (no election) ) ]
table election, columns = [ election.Election_ID ( integer | primary key | values: 1, 2 ), election.Counties_Represented ( text | values: 09.1 9A, 12.1 12A ), election.District ( integer | values: 1, 2 ), election.Delegate ( text | values: Bates, Gail H. Gail H. Bates, Miller, Warren E. Warren E. Miller ), election.Party ( integer | values: 1, 2 ), election.First_Elected ( real | values: 2002.0, 2003.0 ), election.Committee ( text | values: Appropriations, Economic Matters ) ]
foreign keys:
election.District = county.County_Id
election.Party = party.Party_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the total population of all counties in the database?
-- How many counties have a population greater than 100000?
-- What is the name of the governor who was elected in the year 2010 as a Democrat?
-- What are the names of all the lieutenant governors who were elected as Republicans in the year 2005?
-- What is the total number of delegates elected in the year 2010?
------------------------------------------------------------------------------------------
database_id: manufactory_1
database schema :
table Manufacturers, columns = [ Manufacturers.Code ( integer | primary key | values: 1, 2 ), Manufacturers.Name ( text | values: Sony, Creative Labs ), Manufacturers.Headquarter ( text | values: Tokyo, Austin ), Manufacturers.Founder ( text | values: Andy, Owen ), Manufacturers.Revenue ( real | values: 120.0, 100.0 ) ]
table Products, columns = [ Products.Code ( integer | primary key | values: 1, 2 ), Products.Name ( text | values: Hard drive, Memory ), Products.Price ( real | values: 240, 120 ), Products.Manufacturer ( integer | values: 5, 6 ) ]
foreign keys:
Products.Manufacturer = Manufacturers.Code

# Here are some example questions that CAN be answered by the schema below:
-- How many products does manufacturer code 12345 produce?
-- What is the name of the manufacturer that produces product code 67890?
-- What is the average revenue of all manufacturers?
-- What is the name of the founder of the manufacturer that produces product code 54321?
-- What are the names of all products that cost more than 500.00?
------------------------------------------------------------------------------------------
database_id: debate
database schema :
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.District ( text | values: New York 1, New York 2 ), people.Name ( text | values: Luther C. Carter, James Humphrey ), people.Party ( text | values: Republican, Democratic ), people.Age ( real | values: 35, 38 ) ]
table debate, columns = [ debate.Debate_ID ( integer | primary key | values: 1, 2 ), debate.Date ( text | values: October 21, 2011, December 17, 2014 ), debate.Venue ( text | values: Manama , Bahrain, Doha , Qatar ), debate.Num_of_Audience ( real | values: 342, 134 ) ]
table debate_people, columns = [ debate_people.Debate_ID ( integer | primary key | values: 1, 3 ), debate_people.Affirmative ( integer | values: 1, 4 ), debate_people.Negative ( integer | values: 10, 7 ), debate_people.If_Affirmative_Win ( text | values: F, T ) ]
foreign keys:
debate_people.Negative = people.People_ID
debate_people.Affirmative = people.People_ID
debate_people.Debate_ID = debate.Debate_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many people were present at the debate on 20/03/2005?
-- What is the average age of people who were present at the debate?
-- What is the name of the person who was present at the debate on 20/03/2005 and is 25 years old?
-- What is the number of people who were present at the debate and are from the "City Hall" district?
-- What is the total number of people who were present at the debate on 20/03/2005, and are from the "City Hall" district, and are part of the "Green" party?
------------------------------------------------------------------------------------------
database_id: network_2
database schema :
table Person, columns = [ Person.name ( text | primary key | values: Alice, Bob ), Person.age ( real | values: 25, 35 ), Person.city ( text | values: new york city, salt lake city ), Person.gender ( text | values: female, male ), Person.job ( text | values: student, engineer ) ]
table PersonFriend, columns = [ PersonFriend.name ( text | values: Alice, Zach ), PersonFriend.friend ( text | values: Bob, Dan ), PersonFriend.year ( real | values: 10, 12 ) ]
foreign keys:
PersonFriend.friend = Person.name
PersonFriend.name = Person.name

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of all people in the database?
-- How many people have friends in the city of "New York"?
-- What are the names of people in the city of "Los Angeles" who are friends with people from "Chicago"?
-- How many jobs are there in the database, and what are the names of people with each job?
-- What are the names of people who are friends with people from the city of "Chicago" and are also from "Chicago"?  SELECT name FROM Person WHERE name IN ( SELECT name FROM Person WHERE city = "Chicago" ) AND name IN ( SELECT friend FROM PersonFriend WHERE year = ( SELECT MAX(year) FROM PersonFriend ) );  SELECT name FROM Person WHERE name IN ( SELECT name FROM PersonFriend WHERE friend = ( SELECT name FROM Person WHERE city = "Chicago" ) );  SELECT name FROM Person WHERE name IN ( SELECT name FROM PersonFriend WHERE friend = ( SELECT name FROM Person WHERE city = "Chicago" ) ) AND name IN ( SELECT name FROM PersonFriend WHERE friend = ( SELECT name FROM Person WHERE city = "Chicago" ) );  SELECT name FROM Person WHERE name IN ( SELECT name FROM PersonFriend WHERE friend = (
------------------------------------------------------------------------------------------
database_id: local_govt_in_alabama
database schema :
table Services, columns = [ Services.Service_ID ( integer | primary key | values: 2, 5 ), Services.Service_Type_Code ( text | values: Marriage, Death Proof ) ]
table Participants, columns = [ Participants.Participant_ID ( integer | primary key | values: 9, 26 ), Participants.Participant_Type_Code ( text | values: Organizer, Participant ), Participants.Participant_Details ( text | values: Karlee Batz, Vilma Schinner ) ]
table Events, columns = [ Events.Event_ID ( integer | primary key | values: 3, 8 ), Events.Service_ID ( integer | values: 5, 8 ), Events.Event_Details ( text | values: Success, Fail ) ]
table Participants_in_Events, columns = [ Participants_in_Events.Event_ID ( integer | primary key | values: 3, 8 ), Participants_in_Events.Participant_ID ( integer | values: 26, 66 ) ]
foreign keys:
Events.Service_ID = Services.Service_ID
Participants_in_Events.Event_ID = Events.Event_ID
Participants_in_Events.Participant_ID = Participants.Participant_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the Service with the highest Service_ID?
-- Which Participants have a Participant_ID greater than 1 and are in Events that have a Service_ID equal to 1?
-- What percentage of Services with a Service Type Code of 'A' have a corresponding Event with at least one Participant of Type 'C'?
-- What is the average number of Participants of Type 'B' per Event that has at least one Participant of Type 'B' and at least one Participant of Type 'C'?
-- What is the total number of Events with a Service ID that has a Service Type Code of 'B' and at least one Participant of Type 'C'?
------------------------------------------------------------------------------------------
database_id: climbing
database schema :
table mountain, columns = [ mountain.Mountain_ID ( integer | primary key | values: 1, 2 ), mountain.Name ( text | values: Kibo (Uhuru Pk), Mount Kenya (Batian) ), mountain.Height ( real | values: 5895.0, 5199.0 ), mountain.Prominence ( real | values: 5885.0, 3825.0 ), mountain.Range ( text | values: Kilimanjaro, Mount Kenya ), mountain.Country ( text | values: Tanzania, Kenya ) ]
table climber, columns = [ climber.Climber_ID ( integer | primary key | values: 1, 2 ), climber.Name ( text | values: Klaus Enders, Siegfried Schauzu ), climber.Country ( text | values: West Germany, Switzerland ), climber.Time ( text | values: 1:13.05.6, 1:14.56.4 ), climber.Points ( real | values: 15.0, 12.0 ), climber.Mountain_ID ( integer | values: 1, 2 ) ]
foreign keys:
climber.Mountain_ID = mountain.Mountain_ID

# Here are some example questions that CAN be answered by the schema below:
-- Which mountains have more than 2000 points?
-- How many climbers from the United States are there, and how many mountains have they climbed?
-- What is the average height of mountains climbed by climbers from Japan?
-- Which mountains are located in the "European Alps" range and have a height greater than 3500 meters?
-- What is the highest mountain in the United States and how many climbers have ascended it?
------------------------------------------------------------------------------------------
database_id: e_learning
database schema :
table Course_Authors_and_Tutors, columns = [ Course_Authors_and_Tutors.author_id ( integer | primary key | values: 1, 2 ), Course_Authors_and_Tutors.author_tutor_ATB ( text | values: 331, 975 ), Course_Authors_and_Tutors.login_name ( text | values: jmckenzie, heidenreich.ara ), Course_Authors_and_Tutors.password ( text | values: c40fa148bdd0d2d45cd6e9ec1e685750fe07f81b, 24b0ee84063c3b017ab1839e01b7280f47f7c7c2 ), Course_Authors_and_Tutors.personal_name ( text | values: Cathrine, Retha ), Course_Authors_and_Tutors.middle_name ( text | values: Ruthie, Corene ), Course_Authors_and_Tutors.family_name ( text | values: Grant, Armstrong ), Course_Authors_and_Tutors.gender_mf ( text | values: 0, 1 ), Course_Authors_and_Tutors.address_line_1 ( text | values: 756 Monahan Mews
Spinkashire, NJ 64230-5098, 98623 Huels Manor
Jasttown, DE 31611 ) ]
table Students, columns = [ Students.student_id ( integer | primary key | values: 1, 2 ), Students.date_of_registration ( datetime | values: 2015-07-22 13:32:35, 2015-07-02 00:21:42 ), Students.date_of_latest_logon ( datetime | values: 2017-10-17 22:52:26, 2017-06-24 22:16:27 ), Students.login_name ( text | values: annamae.hoppe, wmiller ), Students.password ( text | values: db8765bb6f, 35faf8182a ), Students.personal_name ( text | values: Wilson, Karson ), Students.middle_name ( text | values: Aubrey, Luella ), Students.family_name ( text | values: Ward, Jaskolski ) ]
table Subjects, columns = [ Subjects.subject_id ( integer | primary key | values: 1, 2 ), Subjects.subject_name ( text | values: Computer Science, Arts ) ]
table Courses, columns = [ Courses.course_id ( integer | primary key | values: 1, 2 ), Courses.author_id ( integer | values: 8, 6 ), Courses.subject_id ( integer | values: 1, 2 ), Courses.course_name ( text | values: database, advanced database ), Courses.course_description ( text | values: database, advanced database ) ]
table Student_Course_Enrolment, columns = [ Student_Course_Enrolment.registration_id ( integer | primary key | values: 1, 2 ), Student_Course_Enrolment.student_id ( integer | values: 11, 15 ), Student_Course_Enrolment.course_id ( integer | values: 2, 4 ), Student_Course_Enrolment.date_of_enrolment ( datetime | values: 2017-10-09 07:09:02, 2017-11-13 12:49:33 ), Student_Course_Enrolment.date_of_completion ( datetime | values: 2018-02-26 07:48:52, 2018-03-04 01:24:56 ) ]
table Student_Tests_Taken, columns = [ Student_Tests_Taken.registration_id ( integer | values: 12, 10 ), Student_Tests_Taken.date_test_taken ( datetime | values: 2018-03-25 03:27:16, 2018-03-25 21:50:22 ), Student_Tests_Taken.test_result ( text | values: Fail, Pass ) ]
foreign keys:
Courses.subject_id = Subjects.subject_id
Courses.author_id = Course_Authors_and_Tutors.author_id
Student_Course_Enrolment.student_id = Students.student_id
Student_Course_Enrolment.course_id = Courses.course_id
Student_Tests_Taken.registration_id = Student_Course_Enrolment.registration_id

# Here are some example questions that CAN be answered by the schema below:
-- How many students are enrolled in courses with a subject name 'Mathematics'?
-- What is the average date of registration of students who are enrolled in courses taught by authors with family name 'Smith'?
-- Which student with family name 'Johnson' is enrolled in a course with course name 'Algebra'?
-- What is the number of students who have completed a course with a subject name starting with 'E'? (Include only students who completed the course after the year 2000)  # This one is a bit tricky as the date_of_completion is of TIME type, so it may require some extra logic. # I assume that the completed year is the first two digits of the date_of_completion. # You may need to convert this to DATE type first. # Please, correct me if I am wrong. # (Hint: You may need to use some date functions) # Note: I used the first two digits of the date_of_completion to filter the year, assuming that the date_of_completion is in the format 'YYYY-MM-DD HH:MM:SS'. If your database uses a different format, please, correct me. # This is a complex query that requires filtering and joining multiple tables. #
-- What is the name of the course that was created by the author with id 12345?
------------------------------------------------------------------------------------------
database_id: scientist_1
database schema :
table Scientists, columns = [ Scientists.SSN ( integer | primary key | values: 123234877, 152934485 ), Scientists.Name ( text | values: Michael Rogers, Anand Manikutty ) ]
table Projects, columns = [ Projects.Code ( text | primary key | values: AeH1, AeH2 ), Projects.Name ( text | values: Winds: Studying Bernoullis Principle, Aerodynamics and Bridge Design ), Projects.Hours ( real | values: 156, 189 ) ]
table AssignedTo, columns = [ AssignedTo.Scientist ( integer | primary key | values: 123234877, 152934485 ), AssignedTo.Project ( text | values: AeH1, AeH3 ) ]
foreign keys:
AssignedTo.Project = Projects.Code
AssignedTo.Scientist = Scientists.SSN

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of hours worked on projects led by scientists from the United States?
-- How many scientists are working on projects with more than 100 hours?
-- What is the name of the project with the code "P001"?
-- Which projects are led by scientists born before 1960?
-- What is the name of the scientist with SSN "1234567890"?  (Note: this SSN is fictional and not present in the schema)  (This one is a bit tricky)  (Hint: this one is a bit of a trick question)  (Hint: not all information is always present in a database)  (Hint: some information may be missing or not available)  (Note: this question is a bit of a trick question because it is asking for a value that may not exist in the database)  (Note: it is asking for a value that may not be present in the database)  (Hint: you may not get the answer you are looking for)  (Hint: be careful what you wish for)  (Hint: the answer may not be what you expect)  (Note: the answer may not be what you
------------------------------------------------------------------------------------------
database_id: ship_1
database schema :
table captain, columns = [ captain.Captain_ID ( integer | primary key | values: 1, 2 ), captain.Name ( text | values: Captain Sir Henry Langford, Captain Beves Conway ), captain.Ship_ID ( integer | values: 1, 2 ), captain.age ( text | values: 40, 54 ), captain.Class ( text | values: Third-rate ship of the line, Cutter ), captain.Rank ( text | values: Midshipman, Lieutenant ) ]
table Ship, columns = [ Ship.Ship_ID ( integer | primary key | values: 1, 2 ), Ship.Name ( text | values: HMS Manxman, HMS Gorgon ), Ship.Type ( text | values: Panamax ), Ship.Built_Year ( real | values: 1997.0, 1998.0 ), Ship.Class ( text | values: KR, GL ), Ship.Flag ( text | values: Panama, Malta ) ]
foreign keys:
captain.Ship_ID = Ship.Ship_ID

# Here are some example questions that CAN be answered by the schema below:
-- SELECT SUM(COUNT(Captain_ID)) FROM captain WHERE age = 'Old';
-- SELECT s.Name FROM Ship AS s JOIN captain AS c ON s.Ship_ID = c.Ship_ID WHERE c.Rank = 'Lieutenant';
-- SELECT s.Type FROM Ship AS s JOIN captain AS c ON s.Ship_ID = c.Ship_ID WHERE c.Name LIKE '%Jack%';
-- SELECT COUNT(c.Captain_ID) FROM captain c JOIN ship s ON c.Ship_ID = s.Ship_ID WHERE s.Built_Year > 1960;
-- SELECT c.Name FROM captain c WHERE c.age LIKE 'Young' AND c.Class = 'A';  --  class = 'A' AND age = 'Young'  -- Young AND Class = 'A'  --  Young AND A  --  Young AND A  -- Young AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A
------------------------------------------------------------------------------------------
database_id: entertainment_awards
database schema :
table festival_detail, columns = [ festival_detail.Festival_ID ( integer | primary key | values: 1, 2 ), festival_detail.Festival_Name ( text | values: Panasonic Awards, Flower Awards ), festival_detail.Chair_Name ( text | values: Raymond Floyd, Charles Coody ), festival_detail.Location ( text | values: United States ), festival_detail.Year ( real | values: 2006, 2007 ), festival_detail.Num_of_Audience ( real | values: 152, 155 ) ]
table artwork, columns = [ artwork.Artwork_ID ( integer | primary key | values: 1, 2 ), artwork.Type ( text | values: Program Music/Variety Show, Presenter Music/Variety Show ), artwork.Name ( text | values: Indonesian Idol, I Know ) ]
table nomination, columns = [ nomination.Artwork_ID ( integer | primary key | values: 1, 2 ), nomination.Festival_ID ( integer | values: 2, 1 ), nomination.Result ( text | values: Nominated, Won ) ]
foreign keys:
nomination.Festival_ID = festival_detail.Festival_ID
nomination.Artwork_ID = artwork.Artwork_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of festival details in the festival_detail table?
-- What is the festival name of the festival with the highest number of audience in the festival_detail table?
-- How many artworks were nominated in the festival with festival ID 1?
-- What is the name of the artwork with the highest number of nominations that was nominated in the festival with festival ID 1?
-- What is the average number of audience for the festivals held in the year 2015?  (Note: year is in the integer format)
------------------------------------------------------------------------------------------
database_id: allergy_1
database schema :
table Allergy_Type, columns = [ Allergy_Type.Allergy ( text | primary key | values: Anchovies, Bee Stings ), Allergy_Type.AllergyType ( text | values: food, environmental ) ]
table Has_Allergy, columns = [ Has_Allergy.StuID ( integer | values: 1001, 1002 ), Has_Allergy.Allergy ( text | values: Cat, Shellfish ) ]
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
foreign keys:
Has_Allergy.Allergy = Allergy_Type.Allergy
Has_Allergy.StuID = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM Student WHERE Age > 20;
-- SELECT * FROM Student WHERE Major = 1;
-- SELECT T2.Allergy FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = 'Smith';
-- SELECT T1.Lname, T1.Fname, T1.Age, T2.Allergy FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID WHERE T1.Age > 18 AND T2.Allergy = 'Shellfish';
-- SELECT COUNT(DISTINCT T1.Lname) FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID WHERE T2.Allergy = 'Peanuts' AND T1.Age BETWEEN 17 AND 25; Answer the questions based on the provided schema.  ]]>
------------------------------------------------------------------------------------------
database_id: imdb
database schema :
table actor, columns = [ actor.aid ( integer | primary key | values: N/A ), actor.gender ( text | values: N/A ), actor.name ( text | values: N/A ), actor.nationality ( text | values: N/A ), actor.birth_city ( text | values: N/A ), actor.birth_year ( real | values: N/A ) ]
table copyright, columns = [ copyright.id ( integer | primary key | values: N/A ), copyright.msid ( real | values: N/A ), copyright.cid ( real | values: N/A ) ]
table cast, columns = [ cast.id ( integer | primary key | values: N/A ), cast.msid ( integer | values: N/A ), cast.aid ( integer | values: N/A ), cast.role ( real | values: N/A ) ]
table genre, columns = [ genre.gid ( integer | primary key | values: N/A ), genre.genre ( text | values: N/A ) ]
table classification, columns = [ classification.id ( integer | primary key | values: N/A ), classification.msid ( integer | values: N/A ), classification.gid ( integer | values: N/A ) ]
table company, columns = [ company.id ( integer | primary key | values: N/A ), company.name ( text | values: N/A ), company.country_code ( text | values: N/A ) ]
table director, columns = [ director.did ( integer | primary key | values: N/A ), director.gender ( text | values: N/A ), director.name ( text | values: N/A ), director.nationality ( text | values: N/A ), director.birth_city ( text | values: N/A ), director.birth_year ( real | values: N/A ) ]
table producer, columns = [ producer.pid ( integer | primary key | values: N/A ), producer.gender ( text | values: N/A ), producer.name ( text | values: N/A ), producer.nationality ( text | values: N/A ), producer.birth_city ( text | values: N/A ), producer.birth_year ( real | values: N/A ) ]
table directed_by, columns = [ directed_by.id ( integer | primary key | values: N/A ), directed_by.msid ( integer | values: N/A ), directed_by.did ( integer | values: N/A ) ]
table keyword, columns = [ keyword.id ( integer | primary key | values: N/A ), keyword.keyword ( text | values: N/A ) ]
table made_by, columns = [ made_by.id ( integer | primary key | values: N/A ), made_by.msid ( integer | values: N/A ), made_by.pid ( integer | values: N/A ) ]
table movie, columns = [ movie.mid ( integer | primary key | values: N/A ), movie.title ( text | values: N/A ), movie.release_year ( real | values: N/A ), movie.title_aka ( text | values: N/A ), movie.budget ( text | values: N/A ) ]
table tags, columns = [ tags.id ( integer | primary key | values: N/A ), tags.msid ( integer | values: N/A ), tags.kid ( real | values: N/A ) ]
table tv_series, columns = [ tv_series.sid ( integer | primary key | values: N/A ), tv_series.title ( text | values: N/A ), tv_series.release_year ( real | values: N/A ), tv_series.num_of_seasons ( real | values: N/A ), tv_series.num_of_episodes ( real | values: N/A ), tv_series.title_aka ( text | values: N/A ), tv_series.budget ( text | values: N/A ) ]
table writer, columns = [ writer.wid ( integer | primary key | values: N/A ), writer.gender ( text | values: N/A ), writer.name ( real | values: N/A ), writer.nationality ( real | values: N/A ), writer.num_of_episodes ( real | values: N/A ), writer.birth_city ( text | values: N/A ), writer.birth_year ( real | values: N/A ) ]
table written_by, columns = [ written_by.id ( real | values: N/A ), written_by.msid ( integer | values: N/A ), written_by.wid ( integer | values: N/A ) ]
foreign keys:
cast.msid = copyright.msid
cast.aid = actor.aid
classification.msid = copyright.msid
classification.gid = genre.gid
directed_by.did = director.did
directed_by.msid = copyright.msid
made_by.pid = producer.pid
made_by.msid = copyright.msid
tags.msid = copyright.msid
written_by.wid = writer.wid
written_by.msid = copyright.msid

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM cast WHERE role = 2 AND aid IN ( SELECT aid FROM actor WHERE gender  = 'male' AND birth_city  =  'Los Angeles' );
-- Here are 5 diverse, high-quality, natural language questions that can be answered using the provided database schema:
-- What are the names of all actors who have played in movies with a budget of more than $100 million?
------------------------------------------------------------------------------------------
database_id: products_for_hire
database schema :
table Discount_Coupons, columns = [ Discount_Coupons.coupon_id ( integer | primary key | values: 1, 2 ), Discount_Coupons.date_issued ( datetime | values: 2017-09-06 01:33:27, 2018-02-20 09:40:56 ), Discount_Coupons.coupon_amount ( real | values: 500, 686.25 ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.coupon_id ( integer | values: 12, 14 ), Customers.good_or_bad_customer ( text | values: good, bad ), Customers.first_name ( text | values: Geovany, Jailyn ), Customers.last_name ( text | values: Homenick, Gerlach ), Customers.gender_mf ( text | values: 0, 1 ), Customers.date_became_customer ( datetime | values: 2017-10-20 12:13:17, 2015-04-06 21:18:37 ), Customers.date_last_hire ( datetime | values: 2018-02-27 18:55:26, 2018-01-30 04:47:13 ) ]
table Bookings, columns = [ Bookings.booking_id ( integer | primary key | values: 1, 2 ), Bookings.customer_id ( integer | values: 7, 15 ), Bookings.booking_status_code ( text | values: Provisional, Confirmed ), Bookings.returned_damaged_yn ( text | values: 1, 0 ), Bookings.booking_start_date ( datetime | values: 2016-12-07 23:39:17, 2017-06-16 11:42:31 ), Bookings.booking_end_date ( datetime | values: 2018-02-01 16:39:13, 2018-02-19 21:53:31 ), Bookings.count_hired ( text | values: 298, 331 ), Bookings.amount_payable ( real | values: 214.39, 386.92 ), Bookings.amount_of_discount ( real | values: 71.45, 83.82 ), Bookings.amount_outstanding ( real | values: 28.22, 57.62 ), Bookings.amount_of_refund ( real | values: 179.14, 183.68 ) ]
table Products_for_Hire, columns = [ Products_for_Hire.product_id ( integer | primary key | values: 1, 2 ), Products_for_Hire.product_type_code ( text | values: Cutlery, Din_Plates ), Products_for_Hire.daily_hire_cost ( real | values: 26.15, 15.62 ), Products_for_Hire.product_name ( text | values: Book collection C, Book collection B ), Products_for_Hire.product_description ( text | values: Anna Karenina, War and Peace ) ]
table Payments, columns = [ Payments.payment_id ( integer | primary key | values: 1, 2 ), Payments.booking_id ( integer | values: 6, 9 ), Payments.customer_id ( integer | values: 15, 12 ), Payments.payment_type_code ( text | values: Check, Cash ), Payments.amount_paid_in_full_yn ( text | values: 1, 0 ), Payments.payment_date ( datetime | values: 2018-03-09 16:28:00, 2018-03-03 13:39:44 ), Payments.amount_due ( real | values: 369.52, 278.6 ), Payments.amount_paid ( real | values: 206.27, 666.45 ) ]
table Products_Booked, columns = [ Products_Booked.booking_id ( integer | primary key | values: 1, 2 ), Products_Booked.product_id ( integer | values: 2, 4 ), Products_Booked.returned_yn ( text | values: 1 ), Products_Booked.returned_late_yn ( text | values: 1, 0 ), Products_Booked.booked_count ( real | values: 5, 3 ), Products_Booked.booked_amount ( real | values: 309.73, 102.76 ) ]
table View_Product_Availability, columns = [ View_Product_Availability.product_id ( integer | values: 1, 2 ), View_Product_Availability.booking_id ( integer | values: 5, 11 ), View_Product_Availability.status_date ( datetime | primary key | values: 2018-03-18 05:25:55, 2018-03-21 15:20:32 ), View_Product_Availability.available_yn ( text | values: 1, 0 ) ]
foreign keys:
Customers.coupon_id = Discount_Coupons.coupon_id
Bookings.customer_id = Customers.customer_id
Payments.customer_id = Customers.customer_id
Payments.booking_id = Bookings.booking_id
Products_Booked.product_id = Products_for_Hire.product_id
Products_Booked.booking_id = Bookings.booking_id
View_Product_Availability.product_id = Products_for_Hire.product_id
View_Product_Availability.booking_id = Bookings.booking_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the total amount of outstanding payments made by customers who are good customers, and who have a coupon amount of at least $50?
-- How many bookings were made by customers who are bad customers, and who have a product type code of 'E'?
-- What is the average amount of refund made by customers who hired a product for at least 5 days?
-- What is the total count of customers who became customers after 2020-01-01, and who have made a payment of $100 or more in full?  and also, what is the total amount of coupons issued before 2020-01-01?  and also, what is the total amount of coupons issued before 2020-01-01, and the count of bookings made by customers who have a gender of 'M'?  and also, what is the count of products booked by customers who have a first name of 'John'?  and also, what is the average amount of discount made by customers who are good customers?  and also, what is the total amount of outstanding payments made by customers who have a coupon amount of at least $50, and who are good customers?  and also, what
-- What is the average amount of discount given to customers who have made more than one booking?
------------------------------------------------------------------------------------------
database_id: candidate_poll
database schema :
table candidate, columns = [ candidate.Candidate_ID ( integer | primary key | values: 1, 2 ), candidate.People_ID ( integer | values: 1, 3 ), candidate.Poll_Source ( text | values: WNBC/Marist Poll, FOX News/Opinion Dynamics Poll ), candidate.Date ( text | values: Feb 12–15, 2007, Feb 13–14, 2007 ), candidate.Support_rate ( real | values: 0.25, 0.17 ), candidate.Consider_rate ( real | values: 0.3, 0.42 ), candidate.Oppose_rate ( real | values: 0.43, 0.32 ), candidate.Unsure_rate ( real | values: 0.2, 0.9 ) ]
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Sex ( text | values: M, F ), people.Name ( text | values: Hubert Henno, Dominique Daquin ), people.Date_of_Birth ( text | values: 06.10.1976, 10.11.1972 ), people.Height ( real | values: 188.0, 197.0 ), people.Weight ( real | values: 83.0, 85.0 ) ]
foreign keys:
candidate.People_ID = people.People_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average height of people who support Donald Trump?
-- How many people consider voting for Hillary Clinton in the 2016 election?
-- What is the percentage of people who are unsure about voting for Bernie Sanders?
-- What is the average weight of people who support Hillary Clinton but do not consider voting for Donald Trump?
-- How many people who are male and voted in the 2016 election support voting for both Donald Trump and Hillary Clinton?
------------------------------------------------------------------------------------------
database_id: chinook_1
database schema :
table Album, columns = [ Album.AlbumId ( integer | primary key | values: 1, 4 ), Album.Title ( text | values: For Those About To Rock We Salute You, Balls to the Wall ), Album.ArtistId ( integer | values: 1, 2 ) ]
table Artist, columns = [ Artist.ArtistId ( integer | primary key | values: 1, 2 ), Artist.Name ( text | values: AC/DC, Accept ) ]
table Customer, columns = [ Customer.CustomerId ( integer | primary key | values: 1, 3 ), Customer.FirstName ( text | values: Luís, Leonie ), Customer.LastName ( text | values: Gonçalves, Köhler ), Customer.Company ( text | values: Embraer - Empresa Brasileira de Aeronáutica S.A., JetBrains s.r.o. ), Customer.Address ( text | values: Av. Brigadeiro Faria Lima, 2170, Theodor-Heuss-Straße 34 ), Customer.City ( text | values: São José dos Campos, Stuttgart ), Customer.State ( text | values: SP, QC ), Customer.Country ( text | values: Brazil, Germany ), Customer.PostalCode ( text | values: 12227-000, 70174 ), Customer.Phone ( text | values: +55 (12) 3923-5555, +49 0711 2842222 ), Customer.Fax ( text | values: +55 (12) 3923-5566, +420 2 4172 5555 ), Customer.Email ( text | values: luisg@embraer.com.br, leonekohler@surfeu.de ), Customer.SupportRepId ( integer | values: 3, 4 ) ]
table Employee, columns = [ Employee.EmployeeId ( integer | primary key | values: 1, 2 ), Employee.LastName ( text | values: Adams, Edwards ), Employee.FirstName ( text | values: Andrew, Nancy ), Employee.Title ( text | values: General Manager, Sales Manager ), Employee.ReportsTo ( integer | values: 1, 2 ), Employee.BirthDate ( datetime | values: 1962-02-18 00:00:00, 1958-12-08 00:00:00 ), Employee.HireDate ( datetime | values: 2002-08-14 00:00:00, 2002-05-01 00:00:00 ), Employee.Address ( text | values: 11120 Jasper Ave NW, 825 8 Ave SW ), Employee.City ( text | values: Edmonton, Calgary ), Employee.State ( text | values: AB ), Employee.Country ( text | values: Canada ), Employee.PostalCode ( text | values: T5K 2N1, T2P 2T3 ), Employee.Phone ( text | values: +1 (780) 428-9482, +1 (403) 262-3443 ), Employee.Fax ( text | values: +1 (780) 428-3457, +1 (403) 262-3322 ), Employee.Email ( text | values: andrew@chinookcorp.com, nancy@chinookcorp.com ) ]
table Genre, columns = [ Genre.GenreId ( integer | primary key | values: 1, 2 ), Genre.Name ( text | values: Rock, Jazz ) ]
table Invoice, columns = [ Invoice.InvoiceId ( integer | primary key | values: 98, 121 ), Invoice.CustomerId ( integer | values: 1, 2 ), Invoice.InvoiceDate ( datetime | values: 2009-01-01 00:00:00, 2009-01-02 00:00:00 ), Invoice.BillingAddress ( text | values: Theodor-Heuss-Straße 34, Ullevålsveien 14 ), Invoice.BillingCity ( text | values: Stuttgart, Oslo ), Invoice.BillingState ( text | values: AB, MA ), Invoice.BillingCountry ( text | values: Germany, Norway ), Invoice.BillingPostalCode ( text | values: 70174, 0171 ), Invoice.Total ( real | values: 1.98, 3.96 ) ]
table InvoiceLine, columns = [ InvoiceLine.InvoiceLineId ( integer | primary key | values: 579, 1 ), InvoiceLine.InvoiceId ( integer | values: 1, 2 ), InvoiceLine.TrackId ( integer | values: 1, 2 ), InvoiceLine.UnitPrice ( real | values: 0.99, 1.99 ), InvoiceLine.Quantity ( real | values: 1 ) ]
table MediaType, columns = [ MediaType.MediaTypeId ( integer | primary key | values: 1, 2 ), MediaType.Name ( text | values: MPEG audio file, Protected AAC audio file ) ]
table Playlist, columns = [ Playlist.PlaylistId ( integer | primary key | values: 1, 2 ), Playlist.Name ( text | values: Music, Movies ) ]
table PlaylistTrack, columns = [ PlaylistTrack.PlaylistId ( integer | primary key | values: 1, 3 ), PlaylistTrack.TrackId ( integer | values: 1, 2 ) ]
table Track, columns = [ Track.TrackId ( integer | primary key | values: 1, 6 ), Track.Name ( text | values: For Those About To Rock (We Salute You), Balls to the Wall ), Track.AlbumId ( integer | values: 1, 2 ), Track.MediaTypeId ( integer | values: 1, 2 ), Track.GenreId ( integer | values: 1, 2 ), Track.Composer ( text | values: Angus Young, Malcolm Young, Brian Johnson, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman ), Track.Milliseconds ( real | values: 343719, 342562 ), Track.Bytes ( real | values: 11170334, 5510424 ), Track.UnitPrice ( real | values: 0.99, 1.99 ) ]
foreign keys:
Album.ArtistId = Artist.ArtistId
Customer.SupportRepId = Employee.EmployeeId
Employee.ReportsTo = Employee.EmployeeId
Invoice.CustomerId = Customer.CustomerId
InvoiceLine.TrackId = Track.TrackId
InvoiceLine.InvoiceId = Invoice.InvoiceId
PlaylistTrack.TrackId = Track.TrackId
PlaylistTrack.PlaylistId = Playlist.PlaylistId
Track.MediaTypeId = MediaType.MediaTypeId
Track.GenreId = Genre.GenreId
Track.AlbumId = Album.AlbumId

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM Artist
-- SELECT AVG(UnitPrice)
-- SELECT T1.Title, T1.ArtistId
-- SELECT COUNT(DISTINCT T1.CustomerId)
-- SELECT T1.Name, COUNT(T2.TrackId)
------------------------------------------------------------------------------------------
database_id: flight_4
database schema :
table routes, columns = [ routes.rid ( integer | primary key | values: 37, 38 ), routes.dst_apid ( integer | values: 2990, 2962 ), routes.dst_ap ( text | values: KZ, MRV ), routes.src_apid ( integer | values: 2965, 2966 ), routes.src_ap ( text | values: AER, ASF ), routes.alid ( integer | values: 410, 1654 ), routes.airline ( text | values: 2B, 2G ), routes.codeshare ( text | values: Y ) ]
table airports, columns = [ airports.apid ( integer | primary key | values: 1, 2 ), airports.name ( text | values: Goroka Airport, Madang Airport ), airports.city ( text | values: Goroka, Madang ), airports.country ( text | values: Papua New Guinea, Greenland ), airports.x ( real | values: 145.391998291, 145.789001465 ), airports.y ( real | values: -6.081689834590001, -5.20707988739 ), airports.elevation ( real | values: 5282, 20 ), airports.iata ( text | values: GKA, MAG ), airports.icao ( text | values: AYGA, AYMD ) ]
table airlines, columns = [ airlines.alid ( integer | primary key | values: -1, 1 ), airlines.name ( text | values: Unknown, Private flight ), airlines.iata ( text | values: -,  ), airlines.icao ( text | values: N/A, GNL ), airlines.callsign ( text | values: , GENERAL ), airlines.country ( text | values: , United States ), airlines.active ( text | values: Y, N ) ]
foreign keys:
routes.alid = airlines.alid
routes.src_apid = airports.apid
routes.dst_apid = airports.apid

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of routes operated by each airline?
-- What are the names of all airports in Japan?
-- How many routes start from airport 'SFO'?
-- What is the average elevation of all airports in the United States?
-- Which airlines operate flights to 'Los Angeles International Airport' (LAX)?  # Answer with the names of the airlines. #  Show distinct names only. #  Do not include duplicate airline names in the result. #  #  Assume that the airport name LAX is a valid IATA code for Los Angeles International Airport. #  #  Assume that the airport name LAX is a valid IATA code for Los Angeles International Airport. #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
------------------------------------------------------------------------------------------
database_id: pets_1
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Has_Pet, columns = [ Has_Pet.StuID ( integer | values: 1001, 1002 ), Has_Pet.PetID ( integer | values: 2001, 2002 ) ]
table Pets, columns = [ Pets.PetID ( integer | primary key | values: 2001, 2002 ), Pets.PetType ( text | values: cat, dog ), Pets.pet_age ( real | values: 3, 2 ), Pets.weight ( real | values: 12.0, 13.4 ) ]
foreign keys:
Has_Pet.StuID = Student.StuID
Has_Pet.PetID = Pets.PetID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of students who are majoring in "Computer Science"?
-- How many students are taking "Computer Science" as their major and are living in the city with code "TX"?
-- What is the average weight of pets belonging to students who are majoring in "Engineering"?
-- How many students who are majoring in "Mathematics" have an advisor whose name starts with "D"?
-- What is the average age of pets belonging to students who are majoring in "Biology" and have a pet that is a dog?
------------------------------------------------------------------------------------------
database_id: dorm_1
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Dorm, columns = [ Dorm.dormid ( real | values: 100, 110 ), Dorm.dorm_name ( text | values: Smith Hall, Bud Jones Hall ), Dorm.student_capacity ( real | values: 85, 116 ), Dorm.gender ( text | values: X, M ) ]
table Dorm_amenity, columns = [ Dorm_amenity.amenid ( real | values: 900, 901 ), Dorm_amenity.amenity_name ( text | values: TV Lounge, Study Room ) ]
table Has_amenity, columns = [ Has_amenity.dormid ( integer | values: 109, 104 ), Has_amenity.amenid ( integer | values: 900, 901 ) ]
table Lives_in, columns = [ Lives_in.stuid ( integer | values: 1001, 1002 ), Lives_in.dormid ( integer | values: 109, 100 ), Lives_in.room_number ( real | values: 105, 112 ) ]
foreign keys:
Has_amenity.amenid = Dorm_amenity.amenid
Has_amenity.dormid = Dorm.dormid
Lives_in.dormid = Dorm.dormid
Lives_in.stuid = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of students in the dorm named "Dorm2"?
-- How many students live in the dorm with gender "M"?
-- What is the name of the advisor of the student with LName "Smith"?
-- What is the most common major among students living in the dorm with the name "Dorm1"?
-- What is the name of the dorm where student with StuID 5 lives?
------------------------------------------------------------------------------------------
database_id: journal_committee
database schema :
table journal, columns = [ journal.Journal_ID ( integer | primary key | values: 1, 2 ), journal.Date ( text | values: September 9, 2001, September 23, 2001 ), journal.Theme ( text | values: Miami Dolphins, at Jacksonville Jaguars ), journal.Sales ( real | values: 798, 994 ) ]
table editor, columns = [ editor.Editor_ID ( integer | primary key | values: 1, 2 ), editor.Name ( text | values: Kamila Porczyk, Anna Powierza ), editor.Age ( real | values: 34.0, 35.0 ) ]
table journal_committee, columns = [ journal_committee.Editor_ID ( integer | primary key | values: 1, 3 ), journal_committee.Journal_ID ( integer | values: 13, 6 ), journal_committee.Work_Type ( text | values: Photo, Article ) ]
foreign keys:
journal_committee.Journal_ID = journal.Journal_ID
journal_committee.Editor_ID = editor.Editor_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of editors who work on journals with a sales revenue above $100,000?
-- What is the total number of journals published by editors who are above 30 years old?
-- What is the total sales revenue of all journals published by editors who are below 25 years old?
-- Which editor has published the most journals?
-- What is the number of journals with a sales revenue between $50,000 and $100,000? and what is the average sales revenue of these journals?
------------------------------------------------------------------------------------------
database_id: flight_1
database schema :
table flight, columns = [ flight.flno ( integer | primary key | values: 2, 7 ), flight.origin ( text | values: Los Angeles, Chicago ), flight.destination ( text | values: Washington D.C., Chicago ), flight.distance ( real | values: 2308, 1749 ), flight.departure_date ( datetime | values: 04/12/2005 09:30, 04/12/2005 08:45 ), flight.arrival_date ( datetime | values: 04/12/2005 09:40, 04/12/2005 08:45 ), flight.price ( real | values: 235.98, 220.98 ), flight.aid ( integer | values: 1, 3 ) ]
table aircraft, columns = [ aircraft.aid ( integer | primary key | values: 1, 2 ), aircraft.name ( text | values: Boeing 747-400, Boeing 737-800 ), aircraft.distance ( real | values: 8430, 3383 ) ]
table employee, columns = [ employee.eid ( integer | primary key | values: 11564812, 15645489 ), employee.name ( text | values: James Smith, Mary Johnson ), employee.salary ( real | values: 120433, 178345 ) ]
table certificate, columns = [ certificate.eid ( integer | primary key | values: 11564812, 90873519 ), certificate.aid ( integer | values: 2, 10 ) ]
foreign keys:
flight.aid = aircraft.aid
certificate.aid = aircraft.aid
certificate.eid = employee.eid

# Here are some example questions that CAN be answered by the schema below:
-- What is the average salary of employees who have a certificate for an aircraft that flies to a destination with a distance greater than 3000 miles?
-- How many flights have a departure date on or after 2022-01-01 and a price greater than $500?
-- What is the total distance flown by all aircraft that have been involved in at least one flight with a price greater than $1000?
-- How many employees have a certificate for an aircraft that is named 'Airbus A320'?
-- What is the maximum price of flights that have a departure date on or after 2022-01-01 and are operated by aircraft that have a distance greater than 2000 miles?
------------------------------------------------------------------------------------------
database_id: medicine_enzyme_interaction
database schema :
table medicine, columns = [ medicine.id ( integer | primary key | values: 1, 2 ), medicine.name ( text | values: Amisulpride, Aripiprazole ), medicine.Trade_Name ( text | values: Solian, Abilify ), medicine.FDA_approved ( text | values: No, Yes ) ]
table enzyme, columns = [ enzyme.id ( integer | primary key | values: 1, 2 ), enzyme.name ( text | values: ALA synthase, ALA dehydratase ), enzyme.Location ( text | values: Mitochondrion, Cytosol ), enzyme.Product ( text | values: δ-Aminolevulinic acid, Porphobilinogen ), enzyme.Chromosome ( text | values: 3p21.1, 9q34 ), enzyme.OMIM ( real | values: 125290, 125270 ), enzyme.Porphyria ( text | values: none, ALA-Dehydratase deficiency ) ]
table medicine_enzyme_interaction, columns = [ medicine_enzyme_interaction.enzyme_id ( integer | primary key | values: 1, 2 ), medicine_enzyme_interaction.medicine_id ( integer | values: 1, 2 ), medicine_enzyme_interaction.interaction_type ( text | values: inhibitor, activitor ) ]
foreign keys:
medicine_enzyme_interaction.medicine_id = medicine.id
medicine_enzyme_interaction.enzyme_id = enzyme.id

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the medicine with the trade name "Paracetamol"?
-- What is the name of the enzyme with location "Mitochondria"?
-- How many medicines have interactions with an enzyme located in "Nucleus"?
-- What is the name of the medicine with FDA approval "Approved" and trade name "Aspirin"?
-- What is the name of the enzyme with the highest OMIM value?
------------------------------------------------------------------------------------------
database_id: local_govt_and_lot
database schema :
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 4, 5 ), Customers.customer_details ( text | values: Mr. Raul Prosacco, Esteban Senger ) ]
table Properties, columns = [ Properties.property_id ( integer | primary key | values: 24, 107 ), Properties.property_type_code ( text | values: apartment, house ), Properties.property_address ( text | values: 85456 Annie Lodge Suite 449, 2580 Yundt Plains ), Properties.other_details ( text | values: USA ) ]
table Residents, columns = [ Residents.resident_id ( integer | primary key | values: 6, 10 ), Residents.property_id ( integer | values: 954, 605 ), Residents.date_moved_in ( datetime | values: 2017-06-17 15:43:33, 2015-03-27 12:00:00 ), Residents.date_moved_out ( datetime | values: 2017-12-18 03:46:04, 2018-03-17 07:48:09 ), Residents.other_details ( text | values: Anderson Batz, Miss Naomie Osinski ) ]
table Organizations, columns = [ Organizations.organization_id ( integer | primary key | values: 7, 8 ), Organizations.parent_organization_id ( real | values: 7, 8 ), Organizations.organization_details ( text | values: Reinger, Hudson and Nolan Group, Denesik and Sons Party ) ]
table Services, columns = [ Services.service_id ( integer | primary key | values: 10, 11 ), Services.organization_id ( integer | values: 10, 7 ), Services.service_type_code ( text | values: Cleanning, Check ), Services.service_details ( text | values: Satisfied, Unsatisfied ) ]
table Residents_Services, columns = [ Residents_Services.resident_id ( integer | primary key | values: 6, 23 ), Residents_Services.service_id ( integer | values: 49, 41 ), Residents_Services.date_moved_in ( datetime | values: 2017-06-17 15:43:33, 2015-03-27 12:00:00 ), Residents_Services.property_id ( integer | values: 954, 879 ), Residents_Services.date_requested ( datetime | values: 2016-07-25 01:32:23, 2016-10-10 21:42:21 ), Residents_Services.date_provided ( datetime | values: 2018-02-26 00:27:11, 2017-08-21 06:23:06 ), Residents_Services.other_details ( text | values: Satisfied, Unsatisfied ) ]
table Things, columns = [ Things.thing_id ( integer | primary key | values: 1, 2 ), Things.organization_id ( integer | values: 8, 10 ), Things.Type_of_Thing_Code ( text | values: Electronics, Commen ), Things.service_type_code ( text | values: Check, Cleanning ), Things.service_details ( text | values: Unsatisfied, Satisfied ) ]
table Customer_Events, columns = [ Customer_Events.Customer_Event_ID ( integer | primary key | values: 70, 160 ), Customer_Events.customer_id ( integer | values: 19, 5 ), Customer_Events.date_moved_in ( datetime | values: 2015-03-27 12:00:00, 2016-09-27 12:00:00 ), Customer_Events.property_id ( integer | values: 605, 879 ), Customer_Events.resident_id ( integer | values: 10, 23 ), Customer_Events.thing_id ( integer | values: 1, 80 ) ]
table Customer_Event_Notes, columns = [ Customer_Event_Notes.Customer_Event_Note_ID ( integer | primary key | values: 18, 21 ), Customer_Event_Notes.Customer_Event_ID ( integer | values: 70, 428 ), Customer_Event_Notes.service_type_code ( text | values: Cleanning, Check ), Customer_Event_Notes.resident_id ( real | values: 58, 87 ), Customer_Event_Notes.property_id ( real | values: 107, 445 ), Customer_Event_Notes.date_moved_in ( datetime | values: 2016-08-04 01:06:05, 2016-12-11 01:05:14 ) ]
table Timed_Status_of_Things, columns = [ Timed_Status_of_Things.thing_id ( integer | primary key | values: 2, 10 ), Timed_Status_of_Things.Date_and_Date ( datetime | values: 2016-05-27 23:33:34, 2016-07-17 08:35:27 ), Timed_Status_of_Things.Status_of_Thing_Code ( text | values: Open, Close ) ]
table Timed_Locations_of_Things, columns = [ Timed_Locations_of_Things.thing_id ( integer | primary key | values: 2, 10 ), Timed_Locations_of_Things.Date_and_Time ( datetime | values: 2016-10-12 12:03:07, 2016-12-29 00:39:19 ), Timed_Locations_of_Things.Location_Code ( text | values: 064 Charles Mou, 288 Lang Ferry ) ]
foreign keys:
Residents.property_id = Properties.property_id
Services.organization_id = Organizations.organization_id
Residents_Services.resident_id = Residents.resident_id
Residents_Services.property_id = Residents.property_id
Residents_Services.date_moved_in = Residents.date_moved_in
Residents_Services.service_id = Services.service_id
Things.organization_id = Organizations.organization_id
Customer_Events.resident_id = Residents.resident_id
Customer_Events.property_id = Residents.property_id
Customer_Events.date_moved_in = Residents.date_moved_in
Customer_Events.customer_id = Customers.customer_id
Customer_Events.thing_id = Things.thing_id
Customer_Event_Notes.Customer_Event_ID = Customer_Events.Customer_Event_ID
Timed_Status_of_Things.thing_id = Things.thing_id
Timed_Locations_of_Things.thing_id = Things.thing_id

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT ( T1.customer_id ) FROM Customers AS T1 JOIN Residents AS T2 ON T1.customer_id  =  T2.customer_id;
-- SELECT T1.property_id, T1.property_type_code FROM Properties AS T1 JOIN Residents AS T2 ON T1.property_id  =  T2.property_id WHERE T2.date_moved_out  =  '2022-01-01';
-- What is the average number of services provided per resident in the year 2020?
-- What is the average number of residents per property that moved out in the year 2020?
-- What is the average number of services requested per resident in the year 2020?
------------------------------------------------------------------------------------------
database_id: station_weather
database schema :
table train, columns = [ train.id ( integer | primary key | values: 1, 2 ), train.train_number ( real | values: 16724, 16127 ), train.name ( text | values: Ananthapuri Express, Guruvayur Express ), train.origin ( text | values: Trivandrum, Chennai ), train.destination ( text | values: Chennai, Guruvayur ), train.time ( text | values: 17:15, 22:10 ), train.interval ( text | values: Daily ) ]
table station, columns = [ station.id ( integer | primary key | values: 1, 2 ), station.network_name ( text | values: Amersham, Bushey ), station.services ( text | values: Metropolitan line and Chiltern Railways, London Overground and London Midland ), station.local_authority ( text | values: Chiltern, Watford ) ]
table route, columns = [ route.train_id ( integer | primary key | values: 1, 2 ), route.station_id ( integer | values: 1, 2 ) ]
table weekly_weather, columns = [ weekly_weather.station_id ( integer | primary key | values: 1, 2 ), weekly_weather.day_of_week ( text | values: Friday, Monday ), weekly_weather.high_temperature ( real | values: 59, 66 ), weekly_weather.low_temperature ( real | values: 54, 55 ), weekly_weather.precipitation ( real | values: 90.0, 20.0 ), weekly_weather.wind_speed_mph ( real | values: 13, 12 ) ]
foreign keys:
route.station_id = station.id
route.train_id = train.id
weekly_weather.station_id = station.id

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the train with train number 12345? SELECT name FROM train WHERE train_number = 12345;
-- How many trains are there in total, and how many of them have an interval of 'hourly'? SELECT COUNT(*) FROM train WHERE interval = 'hourly';
-- What are the names of the stations that are part of the 'Network Rail' network? SELECT name FROM station WHERE network_name = 'Network Rail';
-- What is the average high temperature at stations that are part of the 'Transport for London' network on Monday? SELECT AVG(high_temperature) FROM weekly_weather AS ww JOIN station AS s ON ww.station_id = s.id WHERE s.network_name = 'Transport for London' AND ww.day_of_week = 'Monday';
-- What is the number of trains that travel to 'London Bridge' and have an interval of 'hourly' or 'peak hours'? SELECT COUNT(*) FROM train AS t JOIN route AS r ON t.id = r.train_id JOIN station AS s ON r.station_id = s.id WHERE s.name = 'London Bridge' AND (t.interval = 'hourly' OR t.interval = 'peak hours');  SELECT COUNT(*) FROM train
------------------------------------------------------------------------------------------
database_id: shop_membership
database schema :
table member, columns = [ member.Member_ID ( integer | primary key | values: 1, 2 ), member.Card_Number ( text | values: LE99, LT98 ), member.Name ( text | values: Jeremy Jarmon, Myron Pryor ), member.Hometown ( text | values: Collierville, Tennessee, Louisville, Kentucky ), member.Level ( real | values: 6, 4 ) ]
table branch, columns = [ branch.Branch_ID ( integer | primary key | values: 1, 2 ), branch.Name ( text | values: Alexandre, Popert ), branch.Open_year ( text | values: 2001, 2009 ), branch.Address_road ( text | values: Valleys Place, Oaks Crescent ), branch.City ( text | values: London, Oxford ), branch.membership_amount ( text | values: 112, 11 ) ]
table membership_register_branch, columns = [ membership_register_branch.Member_ID ( integer | primary key | values: 1, 2 ), membership_register_branch.Branch_ID ( text | values: 1, 4 ), membership_register_branch.Register_Year ( text | values: 2016, 2017 ) ]
table purchase, columns = [ purchase.Member_ID ( integer | primary key | values: 1, 2 ), purchase.Branch_ID ( text | values: 3, 2 ), purchase.Year ( text | values: 2018, 2017 ), purchase.Total_pounds ( real | values: 2013.32, 321.13 ) ]
foreign keys:
membership_register_branch.Branch_ID = branch.Branch_ID
membership_register_branch.Member_ID = member.Member_ID
purchase.Branch_ID = branch.Branch_ID
purchase.Member_ID = member.Member_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many members have their card number in the format XXXXXXXXXX (8 digits long)?
-- What is the average total pounds bought by members from each branch in 2010?
-- Which branch has the highest membership amount and has a member with a card number starting with '98'?
-- What is the name of the city where the branch with the highest membership amount is located?
-- How many members from the branch with the highest membership amount are registered in the year 2010?
------------------------------------------------------------------------------------------
database_id: driving_school
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.line_1_number_building ( text | values: 3904 Stroman Passage, 053 Quigley Island ), Addresses.city ( text | values: Port Melyssa, Hagenesfurt ), Addresses.zip_postcode ( text | values: 14445, 22194 ), Addresses.state_province_county ( text | values: Georgia, Kentucky ), Addresses.country ( text | values: USA ) ]
table Staff, columns = [ Staff.staff_id ( integer | primary key | values: 1, 2 ), Staff.staff_address_id ( integer | values: 14, 3 ), Staff.nickname ( text | values: thompson.constantin, santos45 ), Staff.first_name ( text | values: Janessa, Camylle ), Staff.middle_name ( text | values: Amara, Icie ), Staff.last_name ( text | values: Sawayn, Weissnat ), Staff.date_of_birth ( datetime | values: 2010-12-08 16:55:14, 2015-08-01 13:22:43 ), Staff.date_joined_staff ( datetime | values: 2017-04-27 03:21:26, 2016-06-06 08:54:28 ), Staff.date_left_staff ( datetime | values: 2018-03-23 22:53:12, 2018-03-10 15:25:00 ) ]
table Vehicles, columns = [ Vehicles.vehicle_id ( integer | primary key | values: 1, 2 ), Vehicles.vehicle_details ( text | values: Van, Truck ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.customer_address_id ( integer | values: 13, 10 ), Customers.customer_status_code ( text | values: Bad Customer, Good Customer ), Customers.date_became_customer ( datetime | values: 2016-05-11 17:03:48, 2015-11-16 22:52:14 ), Customers.date_of_birth ( datetime | values: 1998-12-15 13:24:40, 1995-07-17 12:13:16 ), Customers.first_name ( text | values: Carole, Genevieve ), Customers.last_name ( text | values: Bernhard, Terry ), Customers.amount_outstanding ( real | values: 255.0, 7256.0 ), Customers.email_address ( text | values: everette.goyette@example.org, huel.jana@example.org ), Customers.phone_number ( text | values: 07278206718, +14(5)2351480248 ), Customers.cell_mobile_phone_number ( text | values: 861-638-9797, 578-518-4785x612 ) ]
table Customer_Payments, columns = [ Customer_Payments.customer_id ( integer | primary key | values: 1, 2 ), Customer_Payments.datetime_payment ( datetime | values: 2018-03-18 13:48:13, 2018-02-24 10:07:05 ), Customer_Payments.payment_method_code ( text | values: Direct Debit, Credit Card ), Customer_Payments.amount_payment ( real | values: 9570.93, 8180.26 ) ]
table Lessons, columns = [ Lessons.lesson_id ( integer | primary key | values: 1, 2 ), Lessons.customer_id ( integer | values: 6, 8 ), Lessons.lesson_status_code ( text | values: Cancelled, Completed ), Lessons.staff_id ( integer | values: 8, 14 ), Lessons.vehicle_id ( integer | values: 3, 2 ), Lessons.lesson_date ( datetime | values: 2018-02-28 10:55:36, 2018-03-07 16:12:36 ), Lessons.lesson_time ( text | values: 5, 6 ), Lessons.price ( real | values: 199.0, 167.0 ) ]
foreign keys:
Staff.staff_address_id = Addresses.address_id
Customers.customer_address_id = Addresses.address_id
Customer_Payments.customer_id = Customers.customer_id
Lessons.customer_id = Customers.customer_id
Lessons.staff_id = Staff.staff_id
Lessons.vehicle_id = Vehicles.vehicle_id

# Here are some example questions that CAN be answered by the schema below:
-- How many customers have outstanding amounts greater than $1000?
-- What is the average price of all lessons given by staff with the nickname 'John'?
-- What is the total number of lessons given to customers from the city 'New York'?
-- What is the number of staff members who have been with the company for more than 5 years?
-- What is the number of customers who have taken lessons on a vehicle with a vehicle details containing the string 'Speedster'?
------------------------------------------------------------------------------------------
database_id: concert_singer
database schema :
table stadium, columns = [ stadium.Stadium_ID ( integer | primary key | values: 1, 2 ), stadium.Location ( text | values: Raith Rovers, Ayr United ), stadium.Name ( text | values: Stark's Park, Somerset Park ), stadium.Capacity ( real | values: 10104, 11998 ), stadium.Highest ( real | values: 4812, 2363 ), stadium.Lowest ( real | values: 1294, 1057 ), stadium.Average ( real | values: 2106, 1477 ) ]
table singer, columns = [ singer.Singer_ID ( integer | primary key | values: 1, 2 ), singer.Name ( text | values: Joe Sharp, Timbaland ), singer.Country ( text | values: Netherlands, United States ), singer.Song_Name ( text | values: You, Dangerous ), singer.Song_release_year ( text | values: 1992, 2008 ), singer.Age ( real | values: 52, 32 ), singer.Is_male ( text | values: F, T ) ]
table concert, columns = [ concert.concert_ID ( integer | primary key | values: 1, 2 ), concert.concert_Name ( text | values: Auditions, Super bootcamp ), concert.Theme ( text | values: Free choice, Free choice 2 ), concert.Stadium_ID ( text | values: 1, 2 ), concert.Year ( text | values: 2014, 2015 ) ]
table singer_in_concert, columns = [ singer_in_concert.concert_ID ( integer | primary key | values: 1, 2 ), singer_in_concert.Singer_ID ( text | values: 2, 3 ) ]
foreign keys:
concert.Stadium_ID = stadium.Stadium_ID
singer_in_concert.Singer_ID = singer.Singer_ID
singer_in_concert.concert_ID = concert.concert_ID

# Here are some example questions that CAN be answered by the schema below:
-- Which singer has performed at the most concerts?
-- What is the average age of male singers who have performed at the most concerts?
-- 2.
-- 4.
-- Here are five questions that can be answered using the provided database schema:
------------------------------------------------------------------------------------------
database_id: music_2
database schema :
table Songs, columns = [ Songs.SongId ( integer | primary key | values: N/A ), Songs.Title ( text | values: N/A ) ]
table Albums, columns = [ Albums.AId ( integer | primary key | values: N/A ), Albums.Title ( text | values: N/A ), Albums.Year ( real | values: N/A ), Albums.Label ( text | values: N/A ), Albums.Type ( text | values: N/A ) ]
table Band, columns = [ Band.Id ( integer | primary key | values: N/A ), Band.Firstname ( text | values: N/A ), Band.Lastname ( text | values: N/A ) ]
table Instruments, columns = [ Instruments.SongId ( integer | primary key | values: N/A ), Instruments.BandmateId ( integer | values: N/A ), Instruments.Instrument ( text | values: N/A ) ]
table Performance, columns = [ Performance.SongId ( integer | primary key | values: N/A ), Performance.Bandmate ( integer | values: N/A ), Performance.StagePosition ( text | values: N/A ) ]
table Tracklists, columns = [ Tracklists.AlbumId ( integer | primary key | values: N/A ), Tracklists.Position ( real | values: N/A ), Tracklists.SongId ( integer | values: N/A ) ]
table Vocals, columns = [ Vocals.SongId ( integer | primary key | values: N/A ), Vocals.Bandmate ( integer | values: N/A ), Vocals.Type ( text | values: N/A ) ]
foreign keys:
Instruments.BandmateId = Band.Id
Instruments.SongId = Songs.SongId
Performance.Bandmate = Band.Id
Performance.SongId = Songs.SongId
Tracklists.AlbumId = Albums.AId
Tracklists.SongId = Songs.SongId
Vocals.Bandmate = Band.Id
Vocals.SongId = Songs.SongId

# Here are some example questions that CAN be answered by the schema below:
-- How many songs were released by the band that released the album "1984"?
-- What are the names of the bandmates who played instruments on the song "Happiness"?
-- What are the song titles that have no vocals in the 'Thriller' album?
-- What is the genre of the album 'Hotel California'?
-- Which bandmate played the instrument 'bass' in the song 'Hotel California'?
------------------------------------------------------------------------------------------
database_id: sports_competition
database schema :
table club, columns = [ club.Club_ID ( integer | primary key | values: 1, 2 ), club.name ( text | values: AIB, BK Slide ), club.Region ( text | values: USA, UK ), club.Start_year ( text | values: 2009, 1998 ) ]
table club_rank, columns = [ club_rank.Rank ( integer | primary key | values: 1.0, 2.0 ), club_rank.Club_ID ( integer | values: 2, 3 ), club_rank.Gold ( real | values: 11.0, 8.0 ), club_rank.Silver ( real | values: 11.0, 7.0 ), club_rank.Bronze ( real | values: 9.0, 6.0 ), club_rank.Total ( real | values: 31.0, 21.0 ) ]
table player, columns = [ player.Player_ID ( integer | primary key | values: 1, 2 ), player.name ( text | values: Michael Platt, Dave Halley ), player.Position ( text | values: Full Back, Right Wing ), player.Club_ID ( integer | values: 1, 2 ), player.Apps ( real | values: 20.0, 23.0 ), player.Tries ( real | values: 5.0, 9.0 ), player.Goals ( text | values: 0, 50/60 ), player.Points ( real | values: 20.0, 36.0 ) ]
table competition, columns = [ competition.Competition_ID ( integer | primary key | values: 1, 2 ), competition.Year ( real | values: 2006.0, 2007.0 ), competition.Competition_type ( text | values: Friendly, Tournament ), competition.Country ( text | values: Italy, Spain ) ]
table competition_result, columns = [ competition_result.Competition_ID ( integer | primary key | values: 1, 2 ), competition_result.Club_ID_1 ( integer | values: 1, 3 ), competition_result.Club_ID_2 ( integer | values: 2, 4 ), competition_result.Score ( text | values: 11:10, 25:2 ) ]
foreign keys:
club_rank.Club_ID = club.Club_ID
player.Club_ID = club.Club_ID
competition_result.Competition_ID = competition.Competition_ID
competition_result.Club_ID_2 = club.Club_ID
competition_result.Club_ID_1 = club.Club_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of tries scored by players from clubs that have won at least one gold medal in the club_rank table?
-- How many clubs are there in the club table that have a name starting with the letter "A"?
-- What is the average number of points scored by players who have played in competitions that have the competition type "Championship"?
-- How many clubs have won the championship in the year 2015?
-- How many players are from the club "Barbarians" and are position "Forward"?
------------------------------------------------------------------------------------------
database_id: railway
database schema :
table railway, columns = [ railway.Railway_ID ( integer | primary key | values: 1, 2 ), railway.Railway ( text | values: SECR, MR ), railway.Builder ( text | values: SECR Ashford, MR Derby ), railway.Built ( text | values: 1901, 1902 Midland Railway 1000 was rebuilt in 1914. ), railway.Wheels ( text | values: 4-4-0, 4-4-2 ), railway.Location ( text | values: York, Bo'ness ), railway.ObjectNumber ( text | values: 1975-7006, 1975-7018 ) ]
table train, columns = [ train.Train_ID ( integer | primary key | values: 1, 2 ), train.Train_Num ( text | values: 51195, 12139 ), train.Name ( text | values: Wardha-Ballarshah Pass, Sewagram Exp ), train.From ( text | values: Wardha, Mumbai CST ), train.Arrival ( text | values: 08:54, 09:08 ), train.Railway_ID ( integer | values: 1, 2 ) ]
table manager, columns = [ manager.Manager_ID ( integer | primary key | values: 1, 2 ), manager.Name ( text | values: Ben Curtis, Todd Hamilton ), manager.Country ( text | values: United States, Scotland ), manager.Working_year_starts ( text | values: 2003, 2004 ), manager.Age ( real | values: 45, 55 ), manager.Level ( real | values: 5, 7 ) ]
table railway_manage, columns = [ railway_manage.Railway_ID ( integer | primary key | values: 2, 7 ), railway_manage.Manager_ID ( integer | values: 4, 3 ), railway_manage.From_Year ( text | values: 2010, 2011 ) ]
foreign keys:
train.Railway_ID = railway.Railway_ID
railway_manage.Railway_ID = railway.Railway_ID
railway_manage.Manager_ID = manager.Manager_ID

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM train WHERE Arrival = '2024-03-16';
-- SELECT T2.Name FROM manager AS T1 INNER JOIN railway_manage AS T2 ON T1.Manager_ID = T2.Manager_ID WHERE T2.Railway_ID = 3;
-- SELECT T1.Railway FROM railway AS T1 INNER JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.From = 'Paris';
-- SELECT COUNT(DISTINCT T2.Name) FROM manager AS T1 INNER JOIN railway_manage AS T2 ON T1.Manager_ID = T2.Manager_ID WHERE T2.From_Year = '2020';
-- SELECT T1.Railway FROM railway AS T1 INNER JOIN railway_manage AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Manager_ID = 4 AND T1.Built = '2010-01-01';  --> invalid because there is no T2.Manager_ID = 4;  corrected question: SELECT T1.Railway FROM railway AS T1 INNER JOIN railway_manage AS T2 ON T1.Railway_ID = T2.Railway
------------------------------------------------------------------------------------------
database_id: inn_1
database schema :
table Rooms, columns = [ Rooms.RoomId ( text | primary key | values: AOB, CAS ), Rooms.roomName ( text | values: Recluse and defiance, Interim but salutary ), Rooms.beds ( real | values: 1, 2 ), Rooms.bedType ( text | values: King, Queen ), Rooms.maxOccupancy ( real | values: 2, 4 ), Rooms.basePrice ( real | values: 150, 175 ), Rooms.decor ( text | values: modern, traditional ) ]
table Reservations, columns = [ Reservations.Code ( integer | primary key | values: 10105, 10183 ), Reservations.Room ( text | values: HBB, IBD ), Reservations.CheckIn ( text | values: 23-OCT-10, 19-SEP-10 ), Reservations.CheckOut ( text | values: 25-OCT-10, 20-SEP-10 ), Reservations.Rate ( real | values: 100.0, 150.0 ), Reservations.LastName ( text | values: SELBIG, GABLER ), Reservations.FirstName ( text | values: CONRAD, DOLLIE ), Reservations.Adults ( real | values: 1, 2 ), Reservations.Kids ( real | values: 0, 1 ) ]
foreign keys:
Reservations.Room = Rooms.RoomId

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of beds in rooms with more than 2 beds?
-- How many rooms have a base price greater than $500 and are decorated with 'Modern'?
-- What are the names of all the rooms that have a bed type 'King'?
-- How many guests (adults + kids) were in rooms with 'Luxury' decor and check-in date between '2022-01-01' and '2022-01-31'?
-- What is the total number of nights reserved in rooms with 'Deluxe' decor and a base price less than $200?  Show the result only for rooms with 'Deluxe' decor.  (Note: this will likely require a subquery)  ALSO, only consider reservations made between '2021-01-01' and '2021-01-31'.
------------------------------------------------------------------------------------------
database_id: museum_visit
database schema :
table museum, columns = [ museum.Museum_ID ( integer | primary key | values: 1, 2 ), museum.Name ( text | values: Plaza Museum, Capital Plaza Museum ), museum.Num_of_Staff ( real | values: 62, 25 ), museum.Open_Year ( text | values: 2000, 2012 ) ]
table visitor, columns = [ visitor.ID ( integer | primary key | values: 1, 2 ), visitor.Name ( text | values: Gonzalo Higuaín , Guti Midfielder ), visitor.Level_of_membership ( real | values: 8, 5 ), visitor.Age ( real | values: 35, 28 ) ]
table visit, columns = [ visit.Museum_ID ( integer | primary key | values: 1, 2 ), visit.visitor_ID ( text | values: 5, 3 ), visit.Num_of_Ticket ( real | values: 20, 4 ), visit.Total_spent ( real | values: 320.14, 89.98 ) ]
foreign keys:
visit.visitor_ID = visitor.ID
visit.Museum_ID = museum.Museum_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of museums that have more than 50 staff members?
-- How many visitors have visited the museum with the name "National Museum" in the year 2015?
-- What is the average age of visitors who have visited the museum with the name "National Museum"?
-- What is the number of museums that have both a museum with the name "National Museum" and a museum with the name "Local Museum"?
-- What is the average amount spent by visitors who have visited the museum with the name "Local Museum"? AND what is the number of visitors who have visited the museum with the name "Local Museum"? AND what is the number of staff members in the museum with the name "Local Museum"? AND what is the number of visitors who have visited the museum with the name "National Museum"? AND what is the average age of visitors who have visited the museum with the name "National Museum"? AND what is the number of staff members in the museum with the name "National Museum"?  (Note: This question is asking for multiple results)  AND what is the name of the museum with the most number of staff members?  AND what is the average age of visitors who have visited
------------------------------------------------------------------------------------------
database_id: browser_web
database schema :
table Web_client_accelerator, columns = [ Web_client_accelerator.id ( integer | primary key | values: 1, 2 ), Web_client_accelerator.name ( text | values: CACHEbox, CProxy ), Web_client_accelerator.Operating_system ( text | values: Appliance (Linux), Windows ), Web_client_accelerator.Client ( text | values: End user, ISP, user ), Web_client_accelerator.Connection ( text | values: Broadband, Satellite, Wireless, Fiber, DSL, up to 756kbit/s ) ]
table browser, columns = [ browser.id ( integer | primary key | values: 1, 2 ), browser.name ( text | values: Internet Explorer, Firefox ), browser.market_share ( real | values: 28.96, 18.11 ) ]
table accelerator_compatible_browser, columns = [ accelerator_compatible_browser.accelerator_id ( integer | primary key | values: 1, 2 ), accelerator_compatible_browser.browser_id ( integer | values: 1, 2 ), accelerator_compatible_browser.compatible_since_year ( real | values: 1995, 1996 ) ]
foreign keys:
accelerator_compatible_browser.browser_id = browser.id
accelerator_compatible_browser.accelerator_id = Web_client_accelerator.id

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of accelerators for the "Google Chrome" browser?
-- What is the name of the accelerator that has the highest market share among the "Firefox" browser accelerators?
-- What is the connection speed of the accelerator that has the highest market share among the "Safari" browser accelerators?
-- What is the name of the operating system used by the accelerator that
-- What is the name of the web client accelerator with id 2?
------------------------------------------------------------------------------------------
database_id: baseball_1
database schema :
table all_star, columns = [ all_star.player_id ( text | values: gomezle01, ferreri01 ), all_star.year ( real | values: 1933, 1934 ), all_star.game_num ( real | values: 0, 2 ), all_star.game_id ( text | values: ALS193307060, NLS193407100 ), all_star.team_id ( text | values: NYA, BOS ), all_star.league_id ( text | values: AL, NL ), all_star.gp ( real | values: 1, 0 ), all_star.starting_pos ( real | values: 1, 2 ) ]
table appearances, columns = [ appearances.year ( real | values: 1871, 1872 ), appearances.team_id ( text | values: BS1, CH1 ), appearances.league_id ( text | values: , NL ), appearances.player_id ( text | values: barnero01, barrofr01 ), appearances.g_all ( real | values: 31, 18 ), appearances.gs ( real | values: , 89 ), appearances.g_batting ( real | values: 31, 18 ), appearances.g_defense ( real | values: 31, 18 ), appearances.g_p ( real | values: 0, 31 ), appearances.g_c ( real | values: 0, 7 ), appearances.g_1b ( real | values: 0, 30 ), appearances.g_2b ( real | values: 16, 1 ), appearances.g_3b ( real | values: 0, 1 ), appearances.g_ss ( real | values: 15, 0 ), appearances.g_lf ( real | values: 0, 13 ), appearances.g_cf ( real | values: 0, 1 ), appearances.g_rf ( real | values: 0, 4 ), appearances.g_of ( real | values: 0, 17 ), appearances.g_dh ( real | values: , 0 ), appearances.g_ph ( real | values: , 23 ), appearances.g_pr ( real | values: , 0 ) ]
table manager_award, columns = [ manager_award.player_id ( text | values: larusto01, lasorto01 ), manager_award.award_id ( text | values: BBWAA Manager of the year, TSN Manager of the Year ), manager_award.year ( real | values: 1983, 1984 ), manager_award.league_id ( text | values: AL, NL ), manager_award.tie ( text | values: , Y ), manager_award.notes ( real | values:  ) ]
table player_award, columns = [ player_award.player_id ( text | values: bondto01, hinespa01 ), player_award.award_id ( text | values: Pitching Triple Crown, Triple Crown ), player_award.year ( real | values: 1877, 1878 ), player_award.league_id ( text | values: NL, AA ), player_award.tie ( text | values: , Y ), player_award.notes ( text | values: , 1B ) ]
table manager_award_vote, columns = [ manager_award_vote.award_id ( text | values: Mgr of the year, Mgr of the Year ), manager_award_vote.year ( real | values: 1983, 1984 ), manager_award_vote.league_id ( text | values: AL, NL ), manager_award_vote.player_id ( text | values: altobjo01, coxbo01 ), manager_award_vote.points_won ( real | values: 7, 4 ), manager_award_vote.points_max ( real | values: 28, 24 ), manager_award_vote.votes_first ( real | values: 7, 4 ) ]
table player_award_vote, columns = [ player_award_vote.award_id ( text | values: Cy Young, MVP ), player_award_vote.year ( real | values: 1956, 1957 ), player_award_vote.league_id ( text | values: ML, AL ), player_award_vote.player_id ( text | values: fordwh01, maglisa01 ), player_award_vote.points_won ( real | values: 1, 4 ), player_award_vote.points_max ( real | values: 16, 18 ), player_award_vote.votes_first ( real | values: 1, 4 ) ]
table batting, columns = [ batting.player_id ( text | values: abercda01, addybo01 ), batting.year ( real | values: 1871, 1872 ), batting.stint ( real | values: 1, 2 ), batting.team_id ( text | values: TRO, RC1 ), batting.league_id ( text | values: , NL ), batting.g ( real | values: 1, 25 ), batting.ab ( real | values: 4, 118 ), batting.r ( real | values: 0, 30 ), batting.h ( real | values: 0, 32 ), batting.double ( real | values: 0, 6 ), batting.triple ( real | values: 0, 5 ), batting.hr ( real | values: 0, 2 ), batting.rbi ( real | values: 0, 13 ), batting.sb ( real | values: 0, 8 ), batting.cs ( real | values: 0, 1 ), batting.bb ( real | values: 0, 4 ), batting.so ( real | values: 0, 5 ), batting.ibb ( real | values: , 0 ), batting.hbp ( real | values: , 0 ), batting.sh ( real | values: , 0 ), batting.sf ( real | values: , 0 ), batting.g_idp ( real | values: , 0 ) ]
table batting_postseason, columns = [ batting_postseason.year ( real | values: 1884, 1885 ), batting_postseason.round ( text | values: WS, CS ), batting_postseason.player_id ( text | values: becanbu01, bradyst01 ), batting_postseason.team_id ( text | values: NY4, PRO ), batting_postseason.league_id ( text | values: AA, NL ), batting_postseason.g ( real | values: 1, 3 ), batting_postseason.ab ( real | values: 2, 10 ), batting_postseason.r ( real | values: 0, 1 ), batting_postseason.h ( real | values: 1, 0 ), batting_postseason.double ( real | values: 0, 1 ), batting_postseason.triple ( real | values: 0, 1 ), batting_postseason.hr ( real | values: 0, 1 ), batting_postseason.rbi ( real | values: 0, 1 ), batting_postseason.sb ( real | values: 0, 1 ), batting_postseason.cs ( real | values: , 0 ), batting_postseason.bb ( real | values: 0, 1 ), batting_postseason.so ( real | values: 0, 1 ), batting_postseason.ibb ( real | values: 0, 1 ), batting_postseason.hbp ( real | values: , 0 ), batting_postseason.sh ( real | values: , 0 ), batting_postseason.sf ( real | values: , 0 ), batting_postseason.g_idp ( real | values: , 1 ) ]
table player_college, columns = [ player_college.player_id ( text | values: aardsda01, abadan01 ), player_college.college_id ( text | values: pennst, rice ), player_college.year ( real | values: 2001, 2002 ) ]
table fielding, columns = [ fielding.player_id ( text | values: abercda01, addybo01 ), fielding.year ( real | values: 1871, 1872 ), fielding.stint ( real | values: 1, 2 ), fielding.team_id ( text | values: TRO, RC1 ), fielding.league_id ( text | values: , NL ), fielding.pos ( text | values: SS, 2B ), fielding.g ( real | values: 1, 22 ), fielding.gs ( real | values: , 102 ), fielding.inn_outs ( real | values: , 2773 ), fielding.po ( real | values: 1, 67 ), fielding.a ( real | values: 3, 72 ), fielding.e ( real | values: 2, 42 ), fielding.dp ( real | values: 0, 5 ), fielding.pb ( real | values: , 0 ), fielding.wp ( real | values: , 19 ), fielding.sb ( real | values: , 23 ), fielding.cs ( real | values: , 16 ), fielding.zr ( real | values: , 5 ) ]
table fielding_outfield, columns = [ fielding_outfield.player_id ( text | values: allisar01, ansonca01 ), fielding_outfield.year ( real | values: 1871, 1872 ), fielding_outfield.stint ( real | values: 1, 2 ), fielding_outfield.glf ( real | values: 0, 1 ), fielding_outfield.gcf ( real | values: 29, 0 ), fielding_outfield.grf ( real | values: 0, 1 ) ]
table fielding_postseason, columns = [ fielding_postseason.player_id ( text | values: colliji01, crigelo01 ), fielding_postseason.year ( real | values: 1903, 1905 ), fielding_postseason.team_id ( text | values: BOS, PIT ), fielding_postseason.league_id ( text | values: AL, NL ), fielding_postseason.round ( text | values: WS, ALCS ), fielding_postseason.pos ( text | values: 3B, C ), fielding_postseason.g ( real | values: 8, 4 ), fielding_postseason.gs ( real | values: 8, 4 ), fielding_postseason.inn_outs ( real | values: 213, 105 ), fielding_postseason.po ( real | values: 9, 54 ), fielding_postseason.a ( real | values: 18, 7 ), fielding_postseason.e ( real | values: 1, 3 ), fielding_postseason.dp ( real | values: 1, 2 ), fielding_postseason.tp ( real | values: 0, 1 ), fielding_postseason.pb ( real | values: , 0 ), fielding_postseason.sb ( real | values: , 9 ), fielding_postseason.cs ( real | values: , 3 ) ]
table hall_of_fame, columns = [ hall_of_fame.player_id ( text | values: cobbty01, ruthba01 ), hall_of_fame.yearid ( real | values: 1936, 1937 ), hall_of_fame.votedby ( text | values: BBWAA, Veterans ), hall_of_fame.ballots ( real | values: 226, 78 ), hall_of_fame.needed ( real | values: 170, 59 ), hall_of_fame.votes ( real | values: 222, 215 ), hall_of_fame.inducted ( text | values: Y, N ), hall_of_fame.category ( text | values: Player, Manager ), hall_of_fame.needed_note ( text | values: , Top 20 ) ]
table home_game, columns = [ home_game.year ( real | values: 1871, 1872 ), home_game.league_id ( text | values: , NL ), home_game.team_id ( text | values: BS1, CH1 ), home_game.park_id ( text | values: BOS01, NYC01 ), home_game.span_first ( text | values: 1871-05-16, 1871-05-27 ), home_game.span_last ( text | values: 1871-10-07, 1871-05-27 ), home_game.games ( real | values: 16, 1 ), home_game.openings ( real | values: 16, 1 ), home_game.attendance ( real | values: 32600, 3000 ) ]
table manager, columns = [ manager.player_id ( text | values: wrighha01, woodji01 ), manager.year ( real | values: 1871, 1872 ), manager.team_id ( text | values: BS1, CH1 ), manager.league_id ( text | values: , NL ), manager.inseason ( real | values: 1, 2 ), manager.g ( real | values: 31, 28 ), manager.w ( real | values: 20, 19 ), manager.l ( real | values: 10, 9 ), manager.rank ( real | values: 3, 2 ), manager.plyr_mgr ( text | values: Y, N ) ]
table manager_half, columns = [ manager_half.player_id ( text | values: hanlone01, vanhage01 ), manager_half.year ( real | values: 1892, 1981 ), manager_half.team_id ( text | values: BLN, BRO ), manager_half.league_id ( text | values: NL, AL ), manager_half.inseason ( real | values: 3, 1 ), manager_half.half ( real | values: 1, 2 ), manager_half.g ( real | values: 56, 77 ), manager_half.w ( real | values: 17, 26 ), manager_half.l ( real | values: 39, 46 ), manager_half.rank ( real | values: 12, 10 ) ]
table player, columns = [ player.player_id ( text | values: aardsda01, aaronha01 ), player.birth_year ( real | values: 1981, 1934 ), player.birth_month ( real | values: 12, 2 ), player.birth_day ( real | values: 27, 5 ), player.birth_country ( text | values: USA, D.R. ), player.birth_state ( text | values: CO, AL ), player.birth_city ( text | values: Denver, Mobile ), player.death_year ( real | values: , 1984 ), player.death_month ( real | values: , 8 ), player.death_day ( real | values: , 16 ), player.death_country ( text | values: , USA ), player.death_state ( text | values: , GA ), player.death_city ( text | values: , Atlanta ), player.name_first ( text | values: David, Hank ), player.name_last ( text | values: Aardsma, Aaron ), player.name_given ( text | values: David Allan, Henry Louis ), player.weight ( real | values: 220, 180 ), player.height ( real | values: 75, 72 ), player.bats ( text | values: R, L ), player.throws ( text | values: R, L ), player.debut ( text | values: 2004-04-06, 1954-04-13 ), player.final_game ( text | values: 2015-08-23, 1976-10-03 ), player.retro_id ( text | values: aardd001, aaroh101 ), player.bbref_id ( text | values: aardsda01, aaronha01 ) ]
table park, columns = [ park.park_id ( text | values: ALB01, ALT01 ), park.park_name ( text | values: Riverside Park, Columbia Park ), park.park_alias ( text | values: , Edison Field; Anaheim Stadium ), park.city ( text | values: Albany, Altoona ), park.state ( text | values: NY, PA ), park.country ( text | values: US, MX ) ]
table pitching, columns = [ pitching.player_id ( text | values: bechtge01, brainas01 ), pitching.year ( real | values: 1871, 1872 ), pitching.stint ( real | values: 1, 2 ), pitching.team_id ( text | values: PH1, WS3 ), pitching.league_id ( text | values: , NL ), pitching.w ( real | values: 1, 12 ), pitching.l ( real | values: 2, 15 ), pitching.g ( real | values: 3, 30 ), pitching.gs ( real | values: 3, 30 ), pitching.cg ( real | values: 2, 30 ), pitching.sho ( real | values: 0, 1 ), pitching.sv ( real | values: 0, 1 ), pitching.ipouts ( real | values: 78, 792 ), pitching.h ( real | values: 43, 361 ), pitching.er ( real | values: 23, 132 ), pitching.hr ( real | values: 0, 4 ), pitching.bb ( real | values: 11, 37 ), pitching.so ( real | values: 1, 13 ), pitching.baopp ( real | values: , 0.53 ), pitching.era ( real | values: 7.96, 4.5 ), pitching.ibb ( real | values: , 1 ), pitching.wp ( real | values: , 0 ), pitching.hbp ( real | values: , 0 ), pitching.bk ( real | values: 0, 2 ), pitching.bfp ( real | values: , 13 ), pitching.gf ( real | values: , 0 ), pitching.r ( real | values: 42, 292 ), pitching.sh ( real | values: , 1 ), pitching.sf ( real | values: , 4 ), pitching.g_idp ( real | values: , 6 ) ]
table pitching_postseason, columns = [ pitching_postseason.player_id ( text | values: becanbu01, keefeti01 ), pitching_postseason.year ( real | values: 1884, 1885 ), pitching_postseason.round ( text | values: WS, CS ), pitching_postseason.team_id ( text | values: NY4, PRO ), pitching_postseason.league_id ( text | values: AA, NL ), pitching_postseason.w ( real | values: 0, 3 ), pitching_postseason.l ( real | values: 1, 2 ), pitching_postseason.g ( real | values: 1, 2 ), pitching_postseason.gs ( real | values: 1, 2 ), pitching_postseason.cg ( real | values: 1, 2 ), pitching_postseason.sho ( real | values: 0, 1 ), pitching_postseason.sv ( real | values: 0, 1 ), pitching_postseason.ipouts ( real | values: 18, 45 ), pitching_postseason.h ( real | values: 9, 10 ), pitching_postseason.er ( real | values: 7, 6 ), pitching_postseason.hr ( real | values: 0, 1 ), pitching_postseason.bb ( real | values: 2, 3 ), pitching_postseason.so ( real | values: 1, 12 ), pitching_postseason.baopp ( text | values: , 0.23 ), pitching_postseason.era ( real | values: 10.5, 3.6 ), pitching_postseason.ibb ( real | values: , 0 ), pitching_postseason.wp ( real | values: , 0 ), pitching_postseason.hbp ( real | values: , 0 ), pitching_postseason.bk ( real | values: , 0 ), pitching_postseason.bfp ( real | values: , 134 ), pitching_postseason.gf ( real | values: 0, 1 ), pitching_postseason.r ( real | values: 12, 9 ), pitching_postseason.sh ( real | values: , 0 ), pitching_postseason.sf ( real | values: , 0 ), pitching_postseason.g_idp ( real | values: , 0 ) ]
table salary, columns = [ salary.year ( real | values: 1985, 1986 ), salary.team_id ( text | values: ATL, BAL ), salary.league_id ( text | values: NL, AL ), salary.player_id ( text | values: barkele01, bedrost01 ), salary.salary ( real | values: 870000, 550000 ) ]
table college, columns = [ college.college_id ( text | values: abilchrist, adelphi ), college.name_full ( text | values: Abilene Christian University, Adelphi University ), college.city ( text | values: Abilene, Garden City ), college.state ( text | values: TX, NY ), college.country ( text | values: USA ) ]
table postseason, columns = [ postseason.year ( real | values: 1884, 1885 ), postseason.round ( text | values: WS, CS ), postseason.team_id_winner ( text | values: PRO, CHC ), postseason.league_id_winner ( text | values: NL, AA ), postseason.team_id_loser ( text | values: NYP, STL ), postseason.league_id_loser ( text | values: AA, NL ), postseason.wins ( real | values: 3, 4 ), postseason.losses ( real | values: 0, 3 ), postseason.ties ( real | values: 0, 1 ) ]
table team, columns = [ team.year ( real | values: 1871, 1872 ), team.league_id ( text | values: , NL ), team.team_id ( text | values: BS1, CH1 ), team.franchise_id ( text | values: BNA, CNA ), team.div_id ( text | values: , W ), team.rank ( real | values: 3, 2 ), team.g ( real | values: 31, 28 ), team.ghome ( real | values: , 66 ), team.w ( real | values: 20, 19 ), team.l ( real | values: 10, 9 ), team.div_win ( text | values: , Y ), team.wc_win ( text | values: , N ), team.lg_win ( text | values: N, Y ), team.ws_win ( text | values: , N ), team.r ( real | values: 401, 302 ), team.ab ( real | values: 1372, 1196 ), team.h ( real | values: 426, 323 ), team.double ( real | values: 70, 52 ), team.triple ( real | values: 37, 21 ), team.hr ( real | values: 3, 10 ), team.bb ( real | values: 60, 26 ), team.so ( real | values: 19, 22 ), team.sb ( real | values: 73, 69 ), team.cs ( real | values: , 15 ), team.hbp ( real | values: , 47 ), team.sf ( real | values: , 43 ), team.ra ( real | values: 303, 241 ), team.er ( real | values: 109, 77 ), team.era ( real | values: 3.55, 2.76 ), team.cg ( real | values: 22, 25 ), team.sho ( real | values: 1, 0 ), team.sv ( real | values: 3, 1 ), team.ipouts ( real | values: 828, 753 ), team.ha ( real | values: 367, 308 ), team.hra ( real | values: 2, 6 ), team.bba ( real | values: 42, 28 ), team.soa ( real | values: 23, 22 ), team.e ( real | values: 225, 218 ), team.dp ( real | values: , 42 ), team.fp ( real | values: 0.83, 0.82 ), team.name ( text | values: Boston Red Stockings, Chicago White Stockings ), team.park ( text | values: South End Grounds I, Union Base-Ball Grounds ), team.attendance ( real | values: , 121412 ), team.bpf ( real | values: 103, 104 ), team.ppf ( real | values: 98, 102 ), team.team_id_br ( text | values: BOS, CHI ), team.team_id_lahman45 ( text | values: BS1, CH1 ), team.team_id_retro ( text | values: BS1, CH1 ) ]
table team_franchise, columns = [ team_franchise.franchise_id ( text | values: ALT, ANA ), team_franchise.franchise_name ( text | values: Altoona Mountain City, Los Angeles Angels of Anaheim ), team_franchise.active ( text | values: N, Y ), team_franchise.na_assoc ( text | values: , PNA ) ]
table team_half, columns = [ team_half.year ( real | values: 1981 ), team_half.league_id ( text | values: NL, AL ), team_half.team_id ( text | values: ATL, BAL ), team_half.half ( real | values: 1, 2 ), team_half.div_id ( text | values: W, E ), team_half.div_win ( text | values: N ), team_half.rank ( real | values: 4, 5 ), team_half.g ( real | values: 54, 52 ), team_half.w ( real | values: 25, 31 ), team_half.l ( real | values: 29, 27 ) ]
foreign keys:
all_star.player_id = player.player_id
appearances.player_id = player.player_id
appearances.team_id = team.team_id
manager_award.player_id = player.player_id
player_award.player_id = player.player_id
player_award_vote.player_id = player.player_id
batting.player_id = player.player_id
batting_postseason.team_id = team.team_id
batting_postseason.player_id = player.player_id
player_college.college_id = college.college_id
player_college.player_id = player.player_id
fielding.player_id = player.player_id
fielding_outfield.player_id = player.player_id
fielding_postseason.player_id = player.player_id
hall_of_fame.player_id = player.player_id
home_game.park_id = park.park_id
home_game.team_id = team.team_id
manager.team_id = team.team_id
manager_half.team_id = team.team_id

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM ( SELECT DISTINCT T1.team_id FROM all_star AS T1 INNER JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T2.year = 1990 )
-- SELECT COUNT(*) FROM ( SELECT DISTINCT T1.player_id FROM player_award AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_last = 'Gonzalez' )  WHERE award_id = 'HOF' 7.  SELECT COUNT(*) FROM ( SELECT DISTINCT T1.player_id FROM player_award AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_last = 'Gonzalez' )  WHERE award_id = 'MVP' 8.  SELECT COUNT(*) FROM ( SELECT DISTINCT T1.player_id FROM player_award AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_last = 'Gonzalez' )  WHERE award_id = 'CY' 9.  SELECT COUNT(*) FROM ( SELECT DISTINCT T1.player_id FROM player_award AS
-- What is the average number of games played by players who have played in the postseason in the year 2022?
-- What are the top 5 teams with the highest attendance in the year 2015?
-- What is the total number of home games played by the team with franchise id 'SLA' in the year 2018?
------------------------------------------------------------------------------------------
database_id: architecture
database schema :
table architect, columns = [ architect.id ( text | primary key | values: 1, 2 ), architect.name ( text | values: Frank Lloyd Wright, Frank Gehry ), architect.nationality ( text | values: American, Canadian ), architect.gender ( text | values: male, female ) ]
table bridge, columns = [ bridge.architect_id ( integer | values: 1, 2 ), bridge.id ( integer | primary key | values: 1, 2 ), bridge.name ( text | values: Xian Ren Qiao (Fairy Bridge), Landscape Arch ), bridge.location ( text | values: Guangxi , China, Arches National Park , Utah , USA ), bridge.length_meters ( real | values: 121.0, 88.0 ), bridge.length_feet ( real | values: 400.0, 290.0 ) ]
table mill, columns = [ mill.architect_id ( integer | values: 1, 2 ), mill.id ( integer | primary key | values: 1, 2 ), mill.location ( text | values: Coswarem, Donceel ), mill.name ( text | values: Le Vieux Molen, Moulin Bertrand ), mill.type ( text | values: Grondzeiler, Bergmolen ), mill.built_year ( real | values: 1840, 1890 ), mill.notes ( text | values: Molenechos (Dutch) ) ]
foreign keys:
bridge.architect_id = architect.id
mill.architect_id = architect.id

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the architect who designed the longest bridge?
-- What is the name of the bridge with the longest length in feet?
-- Which architect(s) designed more than one bridge?
-- How many architects designed bridges in both Europe and Asia?
-- What is the name of the architect who designed the most bridges?
------------------------------------------------------------------------------------------
database_id: csu_1
database schema :
table Campuses, columns = [ Campuses.Id ( integer | primary key | values: 1, 2 ), Campuses.Campus ( text | values: California State University-Bakersfield, California State University-Channel Islands ), Campuses.Location ( text | values: Bakersfield, Camarillo ), Campuses.County ( text | values: Kern, Ventura ), Campuses.Year ( real | values: 1965, 2002 ) ]
table csu_fees, columns = [ csu_fees.Campus ( integer | primary key | values: 1, 2 ), csu_fees.Year ( real | values: 1996, 2003 ), csu_fees.CampusFee ( real | values: 1951, 1868 ) ]
table degrees, columns = [ degrees.Year ( integer | primary key | values: 1990, 1991 ), degrees.Campus ( integer | values: 1, 3 ), degrees.Degrees ( real | values: 701, 681 ) ]
table discipline_enrollments, columns = [ discipline_enrollments.Campus ( integer | primary key | values: 1, 2 ), discipline_enrollments.Discipline ( real | values: 4, 5 ), discipline_enrollments.Year ( real | values: 2004 ), discipline_enrollments.Undergraduate ( real | values: 248, 811 ), discipline_enrollments.Graduate ( real | values: 0, 73 ) ]
table enrollments, columns = [ enrollments.Campus ( integer | primary key | values: 1, 2 ), enrollments.Year ( real | values: 1956, 1957 ), enrollments.TotalEnrollment_AY ( real | values: 384, 432 ), enrollments.FTE_AY ( real | values: 123, 151 ) ]
table faculty, columns = [ faculty.Campus ( integer | values: 1, 2 ), faculty.Year ( real | values: 2002, 2003 ), faculty.Faculty ( real | values: 357.1, 48.4 ) ]
foreign keys:
csu_fees.Campus = Campuses.Id
degrees.Campus = Campuses.Id
discipline_enrollments.Campus = Campuses.Id
enrollments.Campus = Campuses.Id
faculty.Campus = Campuses.Id

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of degrees awarded per campus across all years?
-- What is the campus with the highest total enrollment across all years?
-- How many disciplines are enrolled in at the campus with the highest FTE enrollment?
-- What is the average campus fee for csu campuses across all years?
-- What is the total number of faculties hired in 2010 at the campus located in "Alameda"?  SELECT COUNT(T1.Faculty) FROM faculty AS T1 JOIN campuses AS T2 ON T1.Campus = T2.Id WHERE T2.Location = "Alameda" AND T1.Year = 2010;  -- Do not use this query in your question  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --
------------------------------------------------------------------------------------------
database_id: tracking_orders
database schema :
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.customer_name ( text | values: Savannah, George ), Customers.customer_details ( text | values: rerum, est ) ]
table Invoices, columns = [ Invoices.invoice_number ( integer | primary key | values: 1, 2 ), Invoices.invoice_date ( datetime | values: 1989-09-03 16:03:05, 1989-12-11 16:40:57 ), Invoices.invoice_details ( text | values: vitae, magnam ) ]
table Orders, columns = [ Orders.order_id ( integer | primary key | values: 1, 2 ), Orders.customer_id ( integer | values: 2, 11 ), Orders.order_status ( text | values: Shipped, Packing ), Orders.date_order_placed ( datetime | values: 2009-02-21 15:26:19, 1974-06-24 22:10:26 ), Orders.order_details ( text | values: N/A ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.product_name ( text | values: food, book ), Products.product_details ( text | values: N/A ) ]
table Order_Items, columns = [ Order_Items.order_item_id ( integer | primary key | values: 1, 2 ), Order_Items.product_id ( integer | values: 4, 15 ), Order_Items.order_id ( integer | values: 6, 15 ), Order_Items.order_item_status ( text | values: Finish, Payed ), Order_Items.order_item_details ( text | values: N/A ) ]
table Shipments, columns = [ Shipments.shipment_id ( integer | primary key | values: 1, 2 ), Shipments.order_id ( integer | values: 5, 7 ), Shipments.invoice_number ( integer | values: 13, 2 ), Shipments.shipment_tracking_number ( text | values: 3452, 0114 ), Shipments.shipment_date ( datetime | values: 1983-08-13 22:34:11, 1977-11-10 12:11:25 ), Shipments.other_shipment_details ( text | values: N/A ) ]
table Shipment_Items, columns = [ Shipment_Items.shipment_id ( integer | values: 11, 10 ), Shipment_Items.order_item_id ( integer | values: 12, 15 ) ]
foreign keys:
Orders.customer_id = Customers.customer_id
Order_Items.product_id = Products.product_id
Order_Items.order_id = Orders.order_id
Shipments.invoice_number = Invoices.invoice_number
Shipments.order_id = Orders.order_id
Shipment_Items.shipment_id = Shipments.shipment_id
Shipment_Items.order_item_id = Order_Items.order_item_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of invoices that have been shipped?
-- How many customers have placed an order on January 1st, 2022, and what are their customer names?
-- What is the product name of the order item with order item ID 123?
-- What are the shipment tracking numbers for the shipments made on January 1st, 2022?
-- What is the count of distinct customer names among the customers who have placed an order on the same day they placed it (i.e., when order_status is 'placed')?  You should return the count of such customers.  And what is the date they placed the order.  Include all other columns from the Orders table.  You should return the full Orders table.  But you should only return rows where the date they placed the order is January 1st, 2022.  And you should return the date they placed the order as the date_order_placed, and the customer name as the customer_name.  But you should not return the customer_id.  You should return the count of such customers.  And the full Orders table where date_order_placed is January 1st, 2022
------------------------------------------------------------------------------------------
database_id: insurance_policies
database schema :
table Customers, columns = [ Customers.Customer_ID ( integer | primary key | values: 1, 2 ), Customers.Customer_Details ( text | values: America Jaskolski, Ellsworth Paucek ) ]
table Customer_Policies, columns = [ Customer_Policies.Policy_ID ( integer | primary key | values: 119, 141 ), Customer_Policies.Customer_ID ( integer | values: 1, 2 ), Customer_Policies.Policy_Type_Code ( text | values: Car, Life ), Customer_Policies.Start_Date ( datetime | values: 2018-01-21, 2017-08-21 ), Customer_Policies.End_Date ( datetime | values: 2017-12-15, 2017-09-29 ) ]
table Claims, columns = [ Claims.Claim_ID ( integer | primary key | values: 143, 423 ), Claims.Policy_ID ( integer | values: 744, 552 ), Claims.Date_Claim_Made ( datetime | values: 2017-03-11, 2016-08-12 ), Claims.Date_Claim_Settled ( datetime | values: 2017-11-03, 2018-01-27 ), Claims.Amount_Claimed ( real | values: 43884, 79134 ), Claims.Amount_Settled ( real | values: 1085, 1724 ) ]
table Settlements, columns = [ Settlements.Settlement_ID ( integer | primary key | values: 357, 412 ), Settlements.Claim_ID ( integer | values: 486, 621 ), Settlements.Date_Claim_Made ( datetime | values: 2018-08-07, 2017-08-27 ), Settlements.Date_Claim_Settled ( datetime | values: 2018-01-16, 2018-02-04 ), Settlements.Amount_Claimed ( real | values: 38543, 57669 ), Settlements.Amount_Settled ( real | values: 1181, 1427 ), Settlements.Customer_Policy_ID ( real | values: 515, 617 ) ]
table Payments, columns = [ Payments.Payment_ID ( integer | primary key | values: 384, 435 ), Payments.Settlement_ID ( integer | values: 516, 476 ), Payments.Payment_Method_Code ( text | values: MasterCard, Discover Card ), Payments.Date_Payment_Made ( datetime | values: 2018-02-16, 2017-05-28 ), Payments.Amount_Payment ( real | values: 241730, 448613 ) ]
foreign keys:
Customer_Policies.Customer_ID = Customers.Customer_ID
Claims.Policy_ID = Customer_Policies.Policy_ID
Settlements.Claim_ID = Claims.Claim_ID
Payments.Settlement_ID = Settlements.Settlement_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of payments made per customer?
-- Which policy types are associated with more than 50 settlements?
-- What is the total amount of payments made for policies with a policy type code of "H1"?
-- What is the total amount claimed for all policies with a policy type code of "health"?
-- What is the average amount claimed for all claims made by customers in the city of "Sydney"?
------------------------------------------------------------------------------------------
database_id: gas_company
database schema :
table company, columns = [ company.Company_ID ( integer | primary key | values: 1, 2 ), company.Rank ( real | values: 1, 3 ), company.Company ( text | values: ExxonMobil, General Electric ), company.Headquarters ( text | values: USA, Netherlands ), company.Main_Industry ( text | values: Oil and gas, Conglomerate ), company.Sales_billion ( real | values: 433.5, 147.3 ), company.Profits_billion ( real | values: 41.1, 14.2 ), company.Assets_billion ( real | values: 331.1, 717.2 ), company.Market_Value ( real | values: 407.4, 213.7 ) ]
table gas_station, columns = [ gas_station.Station_ID ( integer | primary key | values: 1, 2 ), gas_station.Open_Year ( real | values: 1998, 1999 ), gas_station.Location ( text | values: Herne Hill, Channel Hill ), gas_station.Manager_Name ( text | values: BrianWingrave, SimonMarloe ), gas_station.Vice_Manager_Name ( text | values: Russell Denman, Russell Brown ), gas_station.Representative_Name ( text | values: Clive Burr, Rob Jefferies  ) ]
table station_company, columns = [ station_company.Station_ID ( integer | primary key | values: 1, 4 ), station_company.Company_ID ( integer | values: 3, 1 ), station_company.Rank_of_the_Year ( real | values: 1, 2 ) ]
foreign keys:
station_company.Company_ID = company.Company_ID
station_company.Station_ID = gas_station.Station_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of employees in the company with Company ID = 3?
-- What is the total sales of companies in the Main Industry = "Agriculture"?
-- What are the names of gas stations that have a manager name containing the letter 'E'?
-- What is the number of gas stations operated by the company with Company ID = 1 and their corresponding sales in billion?
-- What are the names of companies with more than 100 billion dollars in sales that are located in Asia?  #include the company ID and sales  #include the company ID and sales
------------------------------------------------------------------------------------------
database_id: e_government
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.line_1_number_building ( text | values: 25518 Ortiz Centers, 033 Stracke Parkways ), Addresses.town_city ( text | values: West Stacy, Lake Meaghan ), Addresses.zip_postcode ( text | values: 193, 227 ), Addresses.state_province_county ( text | values: NorthCarolina, Colorado ), Addresses.country ( text | values: USA ) ]
table Services, columns = [ Services.service_id ( integer | primary key | values: 1, 2 ), Services.service_type_code ( text | values: Education, Welfare ), Services.service_name ( text | values: Education, Health ), Services.service_descriptio ( text | values: Education, Welfare ) ]
table Forms, columns = [ Forms.form_id ( integer | primary key | values: 1, 2 ), Forms.form_type_code ( text | values: Basic, Complex ), Forms.service_id ( integer | values: 13, 9 ), Forms.form_number ( text | values: 8069, 2675 ), Forms.form_name ( text | values: SSN Application, Marriage Certificate ), Forms.form_description ( text | values: Form for SSN Application, Marriage Certificate ) ]
table Individuals, columns = [ Individuals.individual_id ( integer | primary key | values: 1, 2 ), Individuals.individual_first_name ( text | values: Oscar, Geovanny ), Individuals.individual_middle_name ( text | values: Hosea, Antonia ), Individuals.inidividual_phone ( text | values: 1-925-696-5232, 075.012.6775x409 ), Individuals.individual_email ( text | values: amie.okuneva@example.org, jamey.effertz@example.net ), Individuals.individual_address ( text | values: 6956 Lia Plaza, 69578 Baylee Prairie ), Individuals.individual_last_name ( text | values: Maggio, Kerluke ) ]
table Organizations, columns = [ Organizations.organization_id ( integer | primary key | values: 1, 2 ), Organizations.date_formed ( datetime | values: 2016-08-24 23:52:48, 2016-10-01 12:42:01 ), Organizations.organization_name ( text | values: Labour Party, Plaid Cymru ), Organizations.uk_vat_number ( text | values: 2157, 7459 ) ]
table Parties, columns = [ Parties.party_id ( integer | primary key | values: 1, 2 ), Parties.payment_method_code ( text | values: Cheque, Credit Card ), Parties.party_phone ( text | values: 05374656172, 1-525-947-7867x51521 ), Parties.party_email ( text | values: enrico09@example.com, brakus.aliya@example.com ) ]
table Organization_Contact_Individuals, columns = [ Organization_Contact_Individuals.individual_id ( integer | primary key | values: 5, 6 ), Organization_Contact_Individuals.organization_id ( integer | values: 4, 3 ), Organization_Contact_Individuals.date_contact_from ( datetime | values: 2016-08-16 22:09:11, 2017-03-02 00:00:16 ), Organization_Contact_Individuals.date_contact_to ( datetime | values: 2018-03-25 10:27:18, 2018-03-06 05:39:43 ) ]
table Party_Addresses, columns = [ Party_Addresses.party_id ( integer | primary key | values: 3, 4 ), Party_Addresses.address_id ( integer | values: 2, 4 ), Party_Addresses.date_address_from ( datetime | values: 2016-04-08 22:40:02, 2016-05-20 23:22:06 ), Party_Addresses.address_type_code ( text | values: Residence, Billing ), Party_Addresses.date_address_to ( datetime | values: 2018-02-28 23:14:41, 2018-01-29 16:48:01 ) ]
table Party_Forms, columns = [ Party_Forms.party_id ( integer | primary key | values: 2, 5 ), Party_Forms.form_id ( integer | values: 4, 5 ), Party_Forms.date_completion_started ( datetime | values: 2017-12-17 11:29:47, 2017-12-16 15:25:48 ), Party_Forms.form_status_code ( text | values: Completed, Partially Completed ), Party_Forms.date_fully_completed ( datetime | values: 2018-02-11 16:46:10, 2018-02-18 16:09:04 ) ]
table Party_Services, columns = [ Party_Services.booking_id ( real | values: 1, 2 ), Party_Services.customer_id ( integer | values: 10, 14 ), Party_Services.service_id ( integer | values: 12, 11 ), Party_Services.service_datetime ( datetime | values: 2018-03-10 22:43:12, 2018-03-05 15:06:23 ), Party_Services.booking_made_date ( datetime | values: 2018-03-23 23:56:51, 2018-03-25 11:08:29 ) ]
foreign keys:
Forms.service_id = Services.service_id
Organization_Contact_Individuals.individual_id = Individuals.individual_id
Organization_Contact_Individuals.organization_id = Organizations.organization_id
Party_Addresses.party_id = Parties.party_id
Party_Addresses.address_id = Addresses.address_id
Party_Forms.form_id = Forms.form_id
Party_Forms.party_id = Parties.party_id
Party_Services.customer_id = Parties.party_id
Party_Services.service_id = Services.service_id

# Here are some example questions that CAN be answered by the schema below:
-- Select the name of the service and the number of individuals who have booked it.
-- 2.
-- 4.
-- **Note:** Each question must be accompanied by a brief explanation of the question and why it is relevant to the provided database schema.
-- What is the average number of services booked per customer, grouped by the type of service?
------------------------------------------------------------------------------------------
database_id: school_bus
database schema :
table driver, columns = [ driver.Driver_ID ( integer | primary key | values: 1, 2 ), driver.Name ( text | values: Matthew Ritter, Dan Carter ), driver.Party ( text | values: Dem, Rep ), driver.Home_city ( text | values: Hartford, Bethel ), driver.Age ( real | values: 40, 30 ) ]
table school, columns = [ school.School_ID ( integer | primary key | values: 1, 2 ), school.Grade ( text | values: Kindergarten, 1st-3rd grade ), school.School ( text | values: Noelani Elementary School, St. Francis Assisi ), school.Location ( text | values: Honolulu, Hawaii, Jakarta, Indonesia ), school.Type ( text | values: Public, Private Catholic ) ]
table school_bus, columns = [ school_bus.School_ID ( integer | primary key | values: 1, 3 ), school_bus.Driver_ID ( integer | values: 10, 4 ), school_bus.Years_Working ( real | values: 10, 8 ), school_bus.If_full_time ( text | values: F, T ) ]
foreign keys:
school_bus.Driver_ID = driver.Driver_ID
school_bus.School_ID = school.School_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of all the drivers who are working full-time in the school bus service?
-- What is the number of school buses with full-time drivers that are currently operating in the school district, where the drivers have been working for more than 10 years?
-- What are the names of the drivers who are responsible for driving the school buses in the school district that are operating in the city of "Los Angeles"?
-- How many school buses are currently operating in the school district that have a driver with a party affiliation of "Republican"?
-- What is the total number of school buses operating in the school district that have a driver who is more than 50 years old and has been working in the school bus service for less than 5 years?  (Note: The years of working is not the age of the driver.)  (Note: The years of working is not the age of the driver.)  (Note: The years of working is not the age of the driver.)
------------------------------------------------------------------------------------------
database_id: machine_repair
database schema :
table repair, columns = [ repair.repair_ID ( integer | primary key | values: 1, 2 ), repair.name ( text | values: Discoverer, Discoverer 1 ), repair.Launch_Date ( text | values: 21 Jan 2009, 28 Feb 2009 ), repair.Notes ( text | values: repair Failed. Failed to achieve orbit, First object in polar orbit ) ]
table machine, columns = [ machine.Machine_ID ( integer | primary key | values: 1, 2 ), machine.Making_Year ( real | values: 1991, 1992 ), machine.Class ( text | values: 125cc ), machine.Team ( text | values: Hero Sports TS- Honda, Marlboro Pileri - Honda ), machine.Machine_series ( text | values: RS125 ), machine.value_points ( real | values: 105.0, 57.0 ), machine.quality_rank ( real | values: 2, 1 ) ]
table technician, columns = [ technician.technician_id ( integer | primary key | values: 1.0, 2.0 ), technician.Name ( text | values: Joe Sewell, John Brown ), technician.Team ( text | values: NYY, CLE ), technician.Starting_Year ( real | values: 2012.0, 2013.0 ), technician.Age ( real | values: 37, 36 ) ]
table repair_assignment, columns = [ repair_assignment.technician_id ( integer | primary key | values: 1, 2 ), repair_assignment.repair_ID ( integer | values: 1, 2 ), repair_assignment.Machine_ID ( integer | values: 1, 2 ) ]
foreign keys:
repair_assignment.Machine_ID = machine.Machine_ID
repair_assignment.repair_ID = repair.repair_ID
repair_assignment.technician_id = technician.technician_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of all technicians in the "RED" team?
-- Which machines have a quality rank above 5 and a machine series equal to "Ferrari"?
-- How many repairs were made by technicians in the "BLUE" team in the year 2010?
-- What is the name of the repair with the repair ID 12345?
-- Which technicians made repairs in 2011 and have a name starting with the letter "J"?
------------------------------------------------------------------------------------------
database_id: theme_gallery
database schema :
table artist, columns = [ artist.Artist_ID ( integer | primary key | values: 1, 2 ), artist.Name ( text | values: Vijay Singh, John Daly ), artist.Country ( text | values: Fiji, United States ), artist.Year_Join ( real | values: 1998, 1991 ), artist.Age ( real | values: 45, 46 ) ]
table exhibition, columns = [ exhibition.Exhibition_ID ( integer | primary key | values: 1, 2 ), exhibition.Year ( real | values: 2004, 2005 ), exhibition.Theme ( text | values: Santa Claus, Christmas stocking ), exhibition.Artist_ID ( integer | values: 1, 2 ), exhibition.Ticket_Price ( real | values: 19.95, 14.95 ) ]
table exhibition_record, columns = [ exhibition_record.Exhibition_ID ( integer | primary key | values: 1, 2 ), exhibition_record.Date ( text | values: December 2, December 5 ), exhibition_record.Attendance ( real | values: 965, 1098 ) ]
foreign keys:
exhibition.Artist_ID = artist.Artist_ID
exhibition_record.Exhibition_ID = exhibition.Exhibition_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of artists from the United States that participated in exhibitions held in the year 2015?
-- Which artists participated in at least one exhibition that had a ticket price higher than the average ticket price across all exhibitions?
-- What is the total number of exhibitions held in 2010 and 2015?
-- What is the average attendance at exhibitions held by artists from the United States in the year 2010?
-- List the names of artists that have participated in exhibitions held in the year 2015 along with the number of exhibitions they participated in.
------------------------------------------------------------------------------------------
database_id: film_rank
database schema :
table film, columns = [ film.Film_ID ( integer | primary key | values: 1, 2 ), film.Title ( text | values: ET the Extra-Terrestrial, Tootsie ), film.Studio ( text | values: Universal, Columbia ), film.Director ( text | values: Steven Spielberg, Sydney Pollack ), film.Gross_in_dollar ( real | values: 435110554, 177200000 ) ]
table market, columns = [ market.Market_ID ( integer | primary key | values: 1, 2 ), market.Country ( text | values: Japan, China ), market.Number_cities ( real | values: 209, 540 ) ]
table film_market_estimation, columns = [ film_market_estimation.Estimation_ID ( integer | primary key | values: 1, 2 ), film_market_estimation.Low_Estimate ( real | values: 80000.0, 8000.0 ), film_market_estimation.High_Estimate ( real | values: 80400.0, 8000.0 ), film_market_estimation.Film_ID ( integer | values: 1, 2 ), film_market_estimation.Type ( text | values: Mass suicide murder, Mass suicide ), film_market_estimation.Market_ID ( integer | values: 1, 2 ), film_market_estimation.Year ( real | values: 1945, 1944 ) ]
foreign keys:
film_market_estimation.Market_ID = market.Market_ID
film_market_estimation.Film_ID = film.Film_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the title of the film with the highest gross in dollar from the studio 'Pixar'?
-- Which market has the most number of cities?
-- What is the average low estimation of 'Comedy' type films in the year 2010?
-- How many 'Comedy' type films were released in the market 'USA' in the year 2015?
-- What is the total gross in dollar of all films directed by 'Christopher Nolan'?
------------------------------------------------------------------------------------------
database_id: party_people
database schema :
table region, columns = [ region.Region_ID ( integer | primary key | values: 1, 2 ), region.Region_name ( text | values: United Kingdom, Japan ), region.Date ( text | values: 1 July 2002, 3 July 2002 ), region.Label ( text | values: Parlophone, Toshiba-EMI ), region.Format ( text | values: CD, 2× LP ), region.Catalogue ( text | values: 540 3622, 539 9821 ) ]
table party, columns = [ party.Party_ID ( integer | primary key | values: 1, 2 ), party.Minister ( text | values: Dr. Kwame Nkrumah (MP), Kojo Botsio (MP) ), party.Took_office ( text | values: 1957, 1958 ), party.Left_office ( text | values: 1958, 1959 ), party.Region_ID ( integer | values: 1, 2 ), party.Party_name ( text | values: Convention Peoples Party, Progress Party ) ]
table member, columns = [ member.Member_ID ( integer | primary key | values: 1, 2 ), member.Member_Name ( text | values: Hon Tony Abbott, Hon Dick Adams ), member.Party_ID ( text | values: 3, 2 ), member.In_office ( text | values: 1994–present, 1993–2013 ) ]
table party_events, columns = [ party_events.Event_ID ( integer | primary key | values: 1, 2 ), party_events.Event_Name ( text | values: Annaual Meeting, Conference ), party_events.Party_ID ( integer | values: 1, 2 ), party_events.Member_in_charge_ID ( integer | values: 4, 12 ) ]
foreign keys:
party.Region_ID = region.Region_ID
member.Party_ID = party.Party_ID
party_events.Member_in_charge_ID = member.Member_ID
party_events.Party_ID = party.Party_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of regions in the database?
-- What is the name of the party with the most members?
-- What is the average age of all members in the database?
-- What is the name of the region with the most events?
-- What is the name of the party with the member who took office in 2020?  SELECT T2.Party_name FROM member AS T1 JOIN party AS T2 ON T1.Party_ID  =  T2.Party_ID WHERE T1.In_office  =  '2020' LIMIT 1;  SELECT T1.Region_name FROM region AS T1 JOIN party_events AS T2 ON T1.Region_ID  =  T2.Party_ID WHERE T2.Event_ID  =  ( SELECT MAX(Event_ID) FROM party_events AS T3 JOIN region AS T4 ON T3.Party_ID  =  T4.Region_ID );  SELECT T1.Minister FROM party AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Label  =  'label' AND T1.Took_office  =  '2020' LIMIT 1;  SELECT
------------------------------------------------------------------------------------------
database_id: hospital_1
database schema :
table Physician, columns = [ Physician.EmployeeID ( integer | primary key | values: 1, 2 ), Physician.Name ( text | values: John Dorian, Elliot Reid ), Physician.Position ( text | values: Staff Internist, Attending Physician ), Physician.SSN ( real | values: 111111111, 222222222 ) ]
table Department, columns = [ Department.DepartmentID ( integer | primary key | values: 1, 2 ), Department.Name ( text | values: General Medicine, Surgery ), Department.Head ( integer | values: 4, 7 ) ]
table Affiliated_With, columns = [ Affiliated_With.Physician ( integer | primary key | values: 1, 2 ), Affiliated_With.Department ( integer | values: 1, 2 ), Affiliated_With.PrimaryAffiliation ( boolean | values: 1, 0 ) ]
table Procedures, columns = [ Procedures.Code ( integer | primary key | values: 1, 2 ), Procedures.Name ( text | values: Reverse Rhinopodoplasty, Obtuse Pyloric Recombobulation ), Procedures.Cost ( real | values: 1500.0, 3750.0 ) ]
table Trained_In, columns = [ Trained_In.Physician ( integer | primary key | values: 3, 6 ), Trained_In.Treatment ( integer | values: 1, 2 ), Trained_In.CertificationDate ( datetime | values: 2008-01-01, 2007-01-01 ), Trained_In.CertificationExpires ( datetime | values: 2008-12-31, 2007-12-31 ) ]
table Patient, columns = [ Patient.SSN ( integer | primary key | values: 100000001, 100000002 ), Patient.Name ( text | values: John Smith, Grace Ritchie ), Patient.Address ( text | values: 42 Foobar Lane, 37 Snafu Drive ), Patient.Phone ( text | values: 555-0256, 555-0512 ), Patient.InsuranceID ( real | values: 68476213, 36546321 ), Patient.PCP ( integer | values: 1, 2 ) ]
table Nurse, columns = [ Nurse.EmployeeID ( integer | primary key | values: 101, 102 ), Nurse.Name ( text | values: Carla Espinosa, Laverne Roberts ), Nurse.Position ( text | values: Head Nurse, Nurse ), Nurse.Registered ( boolean | values: 1, 0 ), Nurse.SSN ( real | values: 111111110, 222222220 ) ]
table Appointment, columns = [ Appointment.AppointmentID ( integer | primary key | values: 13216584, 26548913 ), Appointment.Patient ( integer | values: 100000001, 100000002 ), Appointment.PrepNurse ( integer | values: 101, 102 ), Appointment.Physician ( integer | values: 1, 2 ), Appointment.Start ( datetime | values: 2008-04-24 10:00, 2008-04-25 10:00 ), Appointment.End ( datetime | values: 2008-04-24 11:00, 2008-04-25 11:00 ), Appointment.ExaminationRoom ( text | values: A, B ) ]
table Medication, columns = [ Medication.Code ( integer | primary key | values: 1, 2 ), Medication.Name ( text | values: Procrastin-X, Thesisin ), Medication.Brand ( text | values: X, Foo Labs ), Medication.Description ( text | values: N/A ) ]
table Prescribes, columns = [ Prescribes.Physician ( integer | primary key | values: 1, 9 ), Prescribes.Patient ( integer | values: 100000001, 100000004 ), Prescribes.Medication ( integer | values: 1, 2 ), Prescribes.Date ( datetime | values: 2008-04-24 10:47, 2008-04-27 10:53 ), Prescribes.Appointment ( integer | values: 13216584, 86213939 ), Prescribes.Dose ( text | values: 5, 10 ) ]
table Block, columns = [ Block.BlockFloor ( integer | primary key | values: 1, 2 ), Block.BlockCode ( real | values: 1, 2 ) ]
table Room, columns = [ Room.RoomNumber ( integer | primary key | values: 101, 102 ), Room.RoomType ( text | values: Single ), Room.BlockFloor ( integer | values: 1, 2 ), Room.BlockCode ( integer | values: 1, 2 ), Room.Unavailable ( boolean | values: 0, 1 ) ]
table On_Call, columns = [ On_Call.Nurse ( integer | primary key | values: 101, 102 ), On_Call.BlockFloor ( integer | values: 1 ), On_Call.BlockCode ( integer | values: 1, 2 ), On_Call.OnCallStart ( datetime | values: 2008-11-04 11:00, 2008-11-04 19:00 ), On_Call.OnCallEnd ( datetime | values: 2008-11-04 19:00, 2008-11-05 03:00 ) ]
table Stay, columns = [ Stay.StayID ( integer | primary key | values: 3215, 3216 ), Stay.Patient ( integer | values: 100000001, 100000003 ), Stay.Room ( integer | values: 111, 123 ), Stay.StayStart ( datetime | values: 2008-05-01, 2008-05-03 ), Stay.StayEnd ( datetime | values: 2008-05-04, 2008-05-14 ) ]
table Undergoes, columns = [ Undergoes.Patient ( integer | primary key | values: 100000001, 100000004 ), Undergoes.Procedures ( integer | values: 2, 6 ), Undergoes.Stay ( integer | values: 3215, 3217 ), Undergoes.DateUndergoes ( datetime | values: 2008-05-03, 2008-05-02 ), Undergoes.Physician ( integer | values: 3, 7 ), Undergoes.AssistingNurse ( integer | values: 101, 102 ) ]
foreign keys:
Department.Head = Physician.EmployeeID
Affiliated_With.Department = Department.DepartmentID
Affiliated_With.Physician = Physician.EmployeeID
Trained_In.Treatment = Procedures.Code
Trained_In.Physician = Physician.EmployeeID
Patient.PCP = Physician.EmployeeID
Appointment.Physician = Physician.EmployeeID
Appointment.PrepNurse = Nurse.EmployeeID
Appointment.Patient = Patient.SSN
Prescribes.Appointment = Appointment.AppointmentID
Prescribes.Medication = Medication.Code
Prescribes.Patient = Patient.SSN
Prescribes.Physician = Physician.EmployeeID
Room.BlockFloor = Block.BlockFloor
Room.BlockCode = Block.BlockCode
On_Call.BlockFloor = Block.BlockFloor
On_Call.BlockCode = Block.BlockCode
On_Call.Nurse = Nurse.EmployeeID
Stay.Room = Room.RoomNumber
Stay.Patient = Patient.SSN
Undergoes.AssistingNurse = Nurse.EmployeeID
Undergoes.Physician = Physician.EmployeeID
Undergoes.Stay = Stay.StayID
Undergoes.Procedures = Procedures.Code
Undergoes.Patient = Patient.SSN

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of procedures that each physician has been trained in?
-- What is the name of the department with the department ID 2?
-- How many patients are there who are affiliated with the department with department ID 3?
-- What is the name of the physician with employee ID 4?
-- Which physician has the highest number of patients who are affiliated with the department with department ID 1? 1
------------------------------------------------------------------------------------------
database_id: customers_campaigns_ecommerce
database schema :
table Premises, columns = [ Premises.premise_id ( integer | primary key | values: 1, 2 ), Premises.premises_type ( text | values: Warehouse, Residence ), Premises.premise_details ( text | values: 036 Lueilwitz Harbor, 676 Kelly Spur ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.product_category ( text | values: Food, Electronics ), Products.product_name ( text | values: Coffee Bean, Keyboard ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.payment_method ( text | values: Credit Card, Direct Debit ), Customers.customer_name ( text | values: Wendell, Gage ), Customers.customer_phone ( text | values: (773)971-9411x759, (402)890-2603x6005 ), Customers.customer_email ( text | values: rodriguez.nathanael@example.net, stark.elna@example.net ), Customers.customer_address ( text | values: 618 Webster Stream Apt. 161, 0260 Walker Trace ), Customers.customer_login ( text | values: N/A ), Customers.customer_password ( text | values: b4459ad261, 7905d7f1b1 ) ]
table Mailshot_Campaigns, columns = [ Mailshot_Campaigns.mailshot_id ( integer | primary key | values: 1, 2 ), Mailshot_Campaigns.product_category ( text | values: food, clothes ), Mailshot_Campaigns.mailshot_name ( text | values: US, FED ), Mailshot_Campaigns.mailshot_start_date ( datetime | values: 2018-02-15 09:52:17, 2017-09-14 12:05:30 ), Mailshot_Campaigns.mailshot_end_date ( datetime | values: 2018-03-08 14:40:20, 2018-03-15 01:06:16 ) ]
table Customer_Addresses, columns = [ Customer_Addresses.customer_id ( integer | values: 15, 2 ), Customer_Addresses.premise_id ( integer | values: 1, 2 ), Customer_Addresses.date_address_from ( datetime | values: 1992-08-23 21:17:38, 2010-02-23 02:49:50 ), Customer_Addresses.address_type_code ( text | values: Billing, Shipping ), Customer_Addresses.date_address_to ( datetime | values: 2018-02-28 20:54:58, 2018-03-15 18:34:41 ) ]
table Customer_Orders, columns = [ Customer_Orders.order_id ( integer | primary key | values: 1, 2 ), Customer_Orders.customer_id ( integer | values: 2, 8 ), Customer_Orders.order_status_code ( text | values: Cancelled, Delivered ), Customer_Orders.shipping_method_code ( text | values: Unspecified, FedEx ), Customer_Orders.order_placed_datetime ( datetime | values: 2015-06-15 18:19:26, 2009-07-05 20:02:55 ), Customer_Orders.order_delivered_datetime ( datetime | values: 2018-03-20 12:00:00 ), Customer_Orders.order_shipping_charges ( text | values: 85.79, 98.4 ) ]
table Mailshot_Customers, columns = [ Mailshot_Customers.mailshot_id ( integer | values: 4, 10 ), Mailshot_Customers.customer_id ( integer | values: 3, 1 ), Mailshot_Customers.outcome_code ( text | values: Order, No Response ), Mailshot_Customers.mailshot_customer_date ( datetime | values: 2018-03-15 15:43:14, 2018-03-04 13:06:55 ) ]
table Order_Items, columns = [ Order_Items.item_id ( real | values: 1, 2 ), Order_Items.order_item_status_code ( text | values: Delivered, Paid ), Order_Items.order_id ( integer | values: 10, 6 ), Order_Items.product_id ( integer | values: 13, 7 ), Order_Items.item_status_code ( text | values: good ), Order_Items.item_delivered_datetime ( datetime | values: 2018-02-25 18:22:10, 2018-02-27 18:04:55 ), Order_Items.item_order_quantity ( text | values: 6, 7 ) ]
foreign keys:
Customer_Addresses.customer_id = Customers.customer_id
Customer_Addresses.premise_id = Premises.premise_id
Customer_Orders.customer_id = Customers.customer_id
Mailshot_Customers.mailshot_id = Mailshot_Campaigns.mailshot_id
Mailshot_Customers.customer_id = Customers.customer_id
Order_Items.order_id = Customer_Orders.order_id
Order_Items.product_id = Products.product_id

# Here are some example questions that CAN be answered by the schema below:
-- How many customers have an order with a shipping method code of "Standard"?
-- What is the total number of products ordered by customers from the premises with a premises type of "Store"?
-- 2.
-- 4.
-- 1. What percentage of customers have placed an order with a shipping method code of 'Standard Shipping'?
------------------------------------------------------------------------------------------
database_id: gymnast
database schema :
table gymnast, columns = [ gymnast.Gymnast_ID ( integer | primary key | values: 1, 2 ), gymnast.Floor_Exercise_Points ( real | values: 9.725, 9.7 ), gymnast.Pommel_Horse_Points ( real | values: 9.737, 9.625 ), gymnast.Rings_Points ( real | values: 9.512, 9.625 ), gymnast.Vault_Points ( real | values: 9.575, 9.65 ), gymnast.Parallel_Bars_Points ( real | values: 9.762, 9.587 ), gymnast.Horizontal_Bar_Points ( real | values: 9.75, 9.737 ), gymnast.Total_Points ( real | values: 58.061, 57.924 ) ]
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Name ( text | values: Paul Hamm, Lorraine Súarez Carmona ), people.Age ( real | values: 24.0, 21.0 ), people.Height ( real | values: 1.71, 1.75 ), people.Hometown ( text | values: Santo Domingo, Bonao ) ]
foreign keys:
gymnast.Gymnast_ID = people.People_ID

# Here are some example questions that CAN be answered by the schema below:
-- Please create the questions based on the given schema.
-- What is the average age of gymnasts who participated in the floor exercise?
-- Which gymnast has the highest total points in the gymnastics competition?
-- What is the average age of gymnasts in the USA?
-- What is the average age of gymnasts who have participated in the Olympics?
------------------------------------------------------------------------------------------
database_id: restaurants
database schema :
table GEOGRAPHIC, columns = [ GEOGRAPHIC.CITY_NAME ( text | primary key | values: N/A ), GEOGRAPHIC.COUNTY ( text | values: N/A ), GEOGRAPHIC.REGION ( text | values: N/A ) ]
table RESTAURANT, columns = [ RESTAURANT.ID ( integer | primary key | values: N/A ), RESTAURANT.NAME ( text | values: N/A ), RESTAURANT.FOOD_TYPE ( text | values: N/A ), RESTAURANT.CITY_NAME ( text | values: N/A ), RESTAURANT.RATING ( real | values: N/A ) ]
table LOCATION, columns = [ LOCATION.RESTAURANT_ID ( integer | primary key | values: N/A ), LOCATION.HOUSE_NUMBER ( real | values: N/A ), LOCATION.STREET_NAME ( text | values: N/A ), LOCATION.CITY_NAME ( text | values: N/A ) ]
foreign keys:
RESTAURANT.CITY_NAME = GEOGRAPHIC.CITY_NAME
LOCATION.CITY_NAME = GEOGRAPHIC.CITY_NAME

# Here are some example questions that CAN be answered by the schema below:
-- I'll wait for your response!
-- What percentage of restaurants are in the city of New York?
-- What is the average rating of all restaurants in the city of Los Angeles?
-- What is the name of the restaurant in the city of New York that has the highest rating?
-- What is the percentage of restaurants in the city of San Francisco that serve Italian food?
------------------------------------------------------------------------------------------
database_id: mountain_photos
database schema :
table mountain, columns = [ mountain.id ( integer | primary key | values: 1, 2 ), mountain.name ( text | values: Abune Yosef / Guliba Amba, Ioll / Yoll ), mountain.Height ( real | values: 4260.0, 4220.0 ), mountain.Prominence ( real | values: 1909.0, 350.0 ), mountain.Range ( text | values: Lasta Massif, Kollo Massif ), mountain.Country ( text | values: Ethiopia, Morocco ) ]
table camera_lens, columns = [ camera_lens.id ( integer | primary key | values: 1, 2 ), camera_lens.brand ( text | values: Olympus, Panasonic ), camera_lens.name ( text | values: Olympus 15mm f/8.0 Body Cap, Olympus M.Zuiko Digital ED 45mm f/1.8 ), camera_lens.focal_length_mm ( real | values: 15.0, 45.0 ), camera_lens.max_aperture ( real | values: 8.0, 1.8 ) ]
table photos, columns = [ photos.id ( integer | primary key | values: 1, 2 ), photos.camera_lens_id ( integer | values: 1, 10 ), photos.mountain_id ( integer | values: 20, 2 ), photos.color ( text | values: RBG, Black/White ), photos.name ( text | values: monkey, rabbits ) ]
foreign keys:
photos.mountain_id = mountain.id
photos.camera_lens_id = camera_lens.id

# Here are some example questions that CAN be answered by the schema below:
-- How many mountains have a height above 1000 meters?
-- What is the most prominent mountain in the 'Appalachian Mountains' range?
-- What is the brand of the camera lens used to take the photo with the name 'Mountain Sunrise'?
-- How many photos were taken with a lens that has a focal length of more than 500mm?
-- What is the name of the mountain with id 123? SELECT name FROM mountain WHERE id = 123;  -- This is the answer we are looking for.  -- Note the id 123 is not present in the table, but let's pretend it is.  -- We can't use the 'id' value to answer this question, so we need to use a different approach.  -- We can use a subquery or join to find the name of the mountain.  -- This is an example of a complex question that requires a little more thought to answer.  -- The question itself doesn't require a complex answer, but the process of answering it does.  -- We can't just ask "What is the name of the mountain with id 123?" because the answer is not present in the table.  -- We
------------------------------------------------------------------------------------------
database_id: battle_death
database schema :
table battle, columns = [ battle.id ( integer | primary key | values: 1, 2 ), battle.name ( text | values: Battle of Adrianople, Battle of Serres ), battle.date ( text | values: 14 April 1205, June 1205 ), battle.bulgarian_commander ( text | values: Kaloyan, Unknown ), battle.latin_commander ( text | values: Baldwin I, Unknown ), battle.result ( text | values: Bulgarian victory, Latin victory ) ]
table ship, columns = [ ship.lost_in_battle ( integer | values: 8, 7 ), ship.id ( integer | primary key | values: 1, 2 ), ship.name ( text | values: Lettice, Bon Accord ), ship.tonnage ( text | values: t, 391 ), ship.ship_type ( text | values: Brig, 18-gun Brig ), ship.location ( text | values: English Channel, SW Approaches ), ship.disposition_of_ship ( text | values: Captured, Wrecked ) ]
table death, columns = [ death.caused_by_ship_id ( integer | values: 1, 2 ), death.id ( integer | primary key | values: 1, 2 ), death.note ( text | values: Dantewada, Chhattisgarh, Erraboru, Chhattisgarh ), death.killed ( real | values: 8, 3 ), death.injured ( real | values: 0, 9 ) ]
foreign keys:
ship.lost_in_battle = battle.id
death.caused_by_ship_id = ship.id

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the battle where the ship "Roma" was lost?
-- What is the total number of ships lost in the battle where the result was "victory"?
-- How many ships were lost in the battle where the Bulgarian commander was "Ivancho"?
-- What is the total number of people killed in the battle where the Latin commander was "Marcus Antonius"?
-- What is the name of the ship that was the cause of the death of 100 people, and what was its tonnage?  (You should join the ship table with the death table to get the result.)  (Answer should be the name of the ship and its tonnage)  (Hint: use the death table to filter the result, then join the ship table to get the name and tonnage of the ship)  (Answer should be a string like "ship_name, tonnage")  (You should use a subquery to get the result)  (You should use the subquery to get the id of the ship that caused the death of 100 people, then join the ship table to get the result)  (The result should be a string like "ship
------------------------------------------------------------------------------------------
database_id: cre_Doc_Control_Systems
database schema :
table Ref_Document_Types, columns = [ Ref_Document_Types.document_type_code ( text | primary key | values: CD, Hard Drive ), Ref_Document_Types.document_type_description ( text | values: b, u ) ]
table Roles, columns = [ Roles.role_code ( text | primary key | values: ED, MG ), Roles.role_description ( text | values: Editor, Photo ) ]
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 0, 1 ), Addresses.address_details ( text | values: IT, MX ) ]
table Ref_Document_Status, columns = [ Ref_Document_Status.document_status_code ( text | primary key | values: done, overdue ), Ref_Document_Status.document_status_description ( text | values: currently working on, mailed ) ]
table Ref_Shipping_Agents, columns = [ Ref_Shipping_Agents.shipping_agent_code ( text | primary key | values: AL, FE ), Ref_Shipping_Agents.shipping_agent_name ( text | values: UPS, USPS ), Ref_Shipping_Agents.shipping_agent_description ( text | values: g, q ) ]
table Documents, columns = [ Documents.document_id ( integer | primary key | values: 1, 2 ), Documents.document_status_code ( text | values: working, done ), Documents.document_type_code ( text | values: CD, Paper ), Documents.shipping_agent_code ( text | values: UP, US ), Documents.receipt_date ( datetime | values: 2008-04-21 20:42:25, 1974-05-08 00:00:46 ), Documents.receipt_number ( text | values: 19, 34 ), Documents.other_details ( text | values: z, h ) ]
table Employees, columns = [ Employees.employee_id ( integer | primary key | values: 1, 2 ), Employees.role_code ( text | values: ED, PR ), Employees.employee_name ( text | values: Koby, Kenyon ), Employees.other_details ( text | values: h, f ) ]
table Document_Drafts, columns = [ Document_Drafts.document_id ( integer | primary key | values: 1, 2 ), Document_Drafts.draft_number ( real | values: 0, 2 ), Document_Drafts.draft_details ( text | values: e, k ) ]
table Draft_Copies, columns = [ Draft_Copies.document_id ( integer | primary key | values: 1, 2 ), Draft_Copies.draft_number ( integer | values: 8, 9 ), Draft_Copies.copy_number ( real | values: 5, 6 ) ]
table Circulation_History, columns = [ Circulation_History.document_id ( integer | primary key | values: 1, 2 ), Circulation_History.draft_number ( integer | values: 17, 2 ), Circulation_History.copy_number ( integer | values: 15, 5 ), Circulation_History.employee_id ( integer | values: 8, 1 ) ]
table Documents_Mailed, columns = [ Documents_Mailed.document_id ( integer | primary key | values: 2, 4 ), Documents_Mailed.mailed_to_address_id ( integer | values: 8, 3 ), Documents_Mailed.mailing_date ( datetime | values: 1977-04-01 17:03:50, 1992-11-07 15:03:41 ) ]
foreign keys:
Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code
Documents.document_status_code = Ref_Document_Status.document_status_code
Documents.document_type_code = Ref_Document_Types.document_type_code
Employees.role_code = Roles.role_code
Document_Drafts.document_id = Documents.document_id
Draft_Copies.document_id = Document_Drafts.document_id
Draft_Copies.draft_number = Document_Drafts.draft_number
Circulation_History.employee_id = Employees.employee_id
Circulation_History.document_id = Draft_Copies.document_id
Circulation_History.draft_number = Draft_Copies.draft_number
Circulation_History.copy_number = Draft_Copies.copy_number
Documents_Mailed.mailed_to_address_id = Addresses.address_id
Documents_Mailed.document_id = Documents.document_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the shipping agent code used in documents with a document type code 'TR'?
-- What is the count of documents with a document status code 'IN' and a shipping agent code 'SA001'?
-- What is the list of addresses that have been mailed to, sorted by mailing date in descending order?
-- What is the average number of drafts per document for documents with a shipping agent code 'SA001'?
-- What is the list of employee names who have circulated drafts of documents with a document status code 'IN', sorted by employee name in ascending order?    ]
------------------------------------------------------------------------------------------
database_id: tracking_share_transactions
database schema :
table Investors, columns = [ Investors.investor_id ( integer | primary key | values: 1, 2 ), Investors.Investor_details ( text | values: z, d ) ]
table Lots, columns = [ Lots.lot_id ( integer | primary key | values: 1, 2 ), Lots.investor_id ( integer | values: 13, 16 ), Lots.lot_details ( text | values: r, z ) ]
table Ref_Transaction_Types, columns = [ Ref_Transaction_Types.transaction_type_code ( text | primary key | values: PUR, SALE ), Ref_Transaction_Types.transaction_type_description ( text | values: Sale, Purchase ) ]
table Transactions, columns = [ Transactions.transaction_id ( integer | primary key | values: 1, 2 ), Transactions.investor_id ( integer | values: 6, 18 ), Transactions.transaction_type_code ( text | values: SALE, PUR ), Transactions.date_of_transaction ( datetime | values: 1988-09-16 19:02:51, 1982-06-06 17:19:00 ), Transactions.amount_of_transaction ( real | values: 302507.6996, 27.257 ), Transactions.share_count ( text | values: 8718572, 9 ), Transactions.other_details ( text | values: N/A ) ]
table Sales, columns = [ Sales.sales_transaction_id ( integer | primary key | values: 1, 2 ), Sales.sales_details ( text | values: x, o ) ]
table Purchases, columns = [ Purchases.purchase_transaction_id ( integer | values: 1, 2 ), Purchases.purchase_details ( text | values: c, y ) ]
table Transactions_Lots, columns = [ Transactions_Lots.transaction_id ( integer | values: 3, 2 ), Transactions_Lots.lot_id ( integer | values: 11, 8 ) ]
foreign keys:
Lots.investor_id = Investors.investor_id
Transactions.transaction_type_code = Ref_Transaction_Types.transaction_type_code
Transactions.investor_id = Investors.investor_id
Sales.sales_transaction_id = Transactions.transaction_id
Purchases.purchase_transaction_id = Transactions.transaction_id
Transactions_Lots.transaction_id = Transactions.transaction_id
Transactions_Lots.lot_id = Lots.lot_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of lots bought by investors who bought lots with the description 'House'?
-- How many transactions were made on '2022-01-01 00:00:00'?
-- What is the total number of lots bought by investors who bought lots with the description 'Car' and who are located in the 'UK'?
-- What is the average number of shares counted in all transactions with a transaction type code 'Sell'?
-- How many investors have invested in lots that have been sold?  What are their investor IDs?  How many lots have they bought?  What are the details of these lots?  What is the total amount invested by these investors?  What is the description of the transaction type code for these transactions?  What is the description of the transaction type code for the sales??  What is the total amount of shares of the lots they bought?  What is the description of the lots they bought?  What is the date of the sales?  What is the details of the sales?  What is the number of shares of the lots they bought?  What is the number of lots they bought?  What is the investor_id
------------------------------------------------------------------------------------------
database_id: apartment_rentals
database schema :
table Apartment_Buildings, columns = [ Apartment_Buildings.building_id ( integer | primary key | values: 133, 153 ), Apartment_Buildings.building_short_name ( text | values: Normandie Court, Mercedes House ), Apartment_Buildings.building_full_name ( text | values: Normandie Court, Mercedes House ), Apartment_Buildings.building_description ( text | values: Studio, Flat ), Apartment_Buildings.building_address ( text | values: 7950 Casper Vista Apt. 176
Marquiseberg, CA 70496, 354 Otto Villages
Charliefort, VT 71664 ), Apartment_Buildings.building_manager ( text | values: Emma, Brenden ), Apartment_Buildings.building_phone ( text | values: (948)040-1064x387, 915-617-2408x832 ) ]
table Apartments, columns = [ Apartments.apt_id ( integer | primary key | values: 1, 2 ), Apartments.building_id ( integer | values: 808, 624 ), Apartments.apt_type_code ( text | values: Flat, Studio ), Apartments.apt_number ( text | values: Suite 645, Apt. 585 ), Apartments.bathroom_count ( real | values: 1, 2 ), Apartments.bedroom_count ( real | values: 3, 4 ), Apartments.room_count ( text | values: 7, 5 ) ]
table Apartment_Facilities, columns = [ Apartment_Facilities.apt_id ( integer | primary key | values: 1, 2 ), Apartment_Facilities.facility_code ( text | values: Boardband, Gym ) ]
table Guests, columns = [ Guests.guest_id ( integer | primary key | values: 1, 2 ), Guests.gender_code ( text | values: Male, Unknown ), Guests.guest_first_name ( text | values: Kip, Rebeca ), Guests.guest_last_name ( text | values: DuBuque, Runolfsdottir ), Guests.date_of_birth ( datetime | values: 1995-11-04 07:09:57, 1974-05-12 21:53:58 ) ]
table Apartment_Bookings, columns = [ Apartment_Bookings.apt_booking_id ( integer | primary key | values: 258, 279 ), Apartment_Bookings.apt_id ( integer | values: 10, 15 ), Apartment_Bookings.guest_id ( integer | values: 2, 15 ), Apartment_Bookings.booking_status_code ( text | values: Provisional, Confirmed ), Apartment_Bookings.booking_start_date ( datetime | values: 2016-09-26 17:13:49, 2016-04-01 06:28:08 ), Apartment_Bookings.booking_end_date ( datetime | values: 2017-10-07 11:38:48, 2017-10-25 11:08:42 ) ]
table View_Unit_Status, columns = [ View_Unit_Status.apt_id ( integer | values: 11, 15 ), View_Unit_Status.apt_booking_id ( integer | values: 920, 575 ), View_Unit_Status.status_date ( datetime | primary key | values: 1970-09-28 10:24:29, 1972-03-23 22:55:53 ), View_Unit_Status.available_yn ( text | values: 1, 0 ) ]
foreign keys:
Apartments.building_id = Apartment_Buildings.building_id
Apartment_Facilities.apt_id = Apartments.apt_id
Apartment_Bookings.guest_id = Guests.guest_id
Apartment_Bookings.apt_id = Apartments.apt_id
View_Unit_Status.apt_booking_id = Apartment_Bookings.apt_booking_id
View_Unit_Status.apt_id = Apartments.apt_id

# Here are some example questions that CAN be answered by the schema below:
-- How many apartment buildings are there in the database?
-- What is the average number of bedrooms in apartments that have a bathroom count greater than 1?
-- Which buildings are managed by a person named "John Smith"?
-- What is the average number of bedrooms in all apartments?
-- What are the top 5 most frequently occurring 'facility_code's in the 'Apartment_Facilities' table?
------------------------------------------------------------------------------------------
database_id: student_transcripts_tracking
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.line_1 ( text | values: 2294 Grant Square Apt. 235, 3999 Aufderhar Ways Suite 593 ), Addresses.line_2 ( text | values: Apt. 370, Apt. 388 ), Addresses.line_3 ( text | values: N/A ), Addresses.city ( text | values: Port Chelsea, Lake Laishafurt ), Addresses.zip_postcode ( text | values: 148, 943 ), Addresses.state_province_county ( text | values: Virginia, Kentucky ), Addresses.country ( text | values: Iceland, Burundi ), Addresses.other_address_details ( text | values: N/A ) ]
table Courses, columns = [ Courses.course_id ( integer | primary key | values: 1, 2 ), Courses.course_name ( text | values: ds, math ), Courses.course_description ( text | values: p, q ), Courses.other_details ( text | values: N/A ) ]
table Departments, columns = [ Departments.department_id ( integer | primary key | values: 1, 2 ), Departments.department_name ( text | values: computer science, history ), Departments.department_description ( text | values: error, nostrum ), Departments.other_details ( text | values: N/A ) ]
table Degree_Programs, columns = [ Degree_Programs.degree_program_id ( integer | primary key | values: 1, 2 ), Degree_Programs.department_id ( integer | values: 13, 2 ), Degree_Programs.degree_summary_name ( text | values: Master, Bachelor ), Degree_Programs.degree_summary_description ( text | values: architecto, cumque ), Degree_Programs.other_details ( text | values: N/A ) ]
table Sections, columns = [ Sections.section_id ( integer | primary key | values: 1, 2 ), Sections.course_id ( integer | values: 9, 2 ), Sections.section_name ( text | values: a, b ), Sections.section_description ( text | values: non, voluptatem ), Sections.other_details ( text | values: N/A ) ]
table Semesters, columns = [ Semesters.semester_id ( integer | primary key | values: 1, 2 ), Semesters.semester_name ( text | values: spring 2010, summer 2010 ), Semesters.semester_description ( text | values: x, g ), Semesters.other_details ( text | values: N/A ) ]
table Students, columns = [ Students.student_id ( integer | primary key | values: 1, 2 ), Students.current_address_id ( integer | values: 10, 12 ), Students.permanent_address_id ( integer | values: 15, 5 ), Students.first_name ( text | values: Timmothy, Hobart ), Students.middle_name ( text | values: Anna, Lorenz ), Students.last_name ( text | values: Ward, Balistreri ), Students.cell_mobile_number ( text | values: (096)889-8954x524, 1-009-710-5151 ), Students.email_address ( text | values: erwin.zboncak@example.com, swift.kolby@example.com ), Students.ssn ( text | values: 965, 304246 ), Students.date_first_registered ( datetime | values: 1971-02-05 07:28:23, 1976-10-26 02:33:06 ), Students.date_left ( datetime | values: 1971-05-17 19:28:49, 2013-10-05 17:41:28 ), Students.other_student_details ( text | values: quia, autem ) ]
table Student_Enrolment, columns = [ Student_Enrolment.student_enrolment_id ( integer | primary key | values: 1, 2 ), Student_Enrolment.degree_program_id ( integer | values: 12, 4 ), Student_Enrolment.semester_id ( integer | values: 13, 2 ), Student_Enrolment.student_id ( integer | values: 14, 9 ), Student_Enrolment.other_details ( text | values: N/A ) ]
table Student_Enrolment_Courses, columns = [ Student_Enrolment_Courses.student_course_id ( integer | primary key | values: 0, 1 ), Student_Enrolment_Courses.course_id ( integer | values: 6, 14 ), Student_Enrolment_Courses.student_enrolment_id ( integer | values: 2, 8 ) ]
table Transcripts, columns = [ Transcripts.transcript_id ( integer | primary key | values: 1, 2 ), Transcripts.transcript_date ( datetime | values: 1988-04-30 01:19:47, 1975-10-28 15:16:51 ), Transcripts.other_details ( text | values: N/A ) ]
table Transcript_Contents, columns = [ Transcript_Contents.student_course_id ( integer | values: 0, 96 ), Transcript_Contents.transcript_id ( integer | values: 2, 8 ) ]
foreign keys:
Degree_Programs.department_id = Departments.department_id
Sections.course_id = Courses.course_id
Students.permanent_address_id = Addresses.address_id
Students.current_address_id = Addresses.address_id
Student_Enrolment.student_id = Students.student_id
Student_Enrolment.semester_id = Semesters.semester_id
Student_Enrolment.degree_program_id = Degree_Programs.degree_program_id
Student_Enrolment_Courses.student_enrolment_id = Student_Enrolment.student_enrolment_id
Student_Enrolment_Courses.course_id = Courses.course_id
Transcript_Contents.transcript_id = Transcripts.transcript_id
Transcript_Contents.student_course_id = Student_Enrolment_Courses.student_course_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of courses per student enrolled in the Fall 2019 semester?
-- What are the names of all departments offering a degree program in Computer Science?
-- What is the address of the student with student ID 12345?
-- What is the total number of students who enrolled in at least one course that was taught in the Section 3 of the course with course ID 67890?
-- What are the names of all students who have a permanent address in the city of New York?    ]
------------------------------------------------------------------------------------------
database_id: cre_Docs_and_Epenses
database schema :
table Ref_Document_Types, columns = [ Ref_Document_Types.Document_Type_Code ( text | primary key | values: BK, CV ), Ref_Document_Types.Document_Type_Name ( text | values: Book, CV ), Ref_Document_Types.Document_Type_Description ( text | values: excellent, very good ) ]
table Ref_Budget_Codes, columns = [ Ref_Budget_Codes.Budget_Type_Code ( text | primary key | values: GV, ORG ), Ref_Budget_Codes.Budget_Type_Description ( text | values: Government, Organisation ) ]
table Projects, columns = [ Projects.Project_ID ( integer | primary key | values: 30, 35 ), Projects.Project_Details ( text | values: Society Research project, Internet of Things project ) ]
table Documents, columns = [ Documents.Document_ID ( integer | primary key | values: 29, 42 ), Documents.Document_Type_Code ( text | values: CV, BK ), Documents.Project_ID ( integer | values: 30, 105 ), Documents.Document_Date ( datetime | values: 2004-08-28 06:59:19, 2012-12-27 19:09:18 ), Documents.Document_Name ( text | values: Review on UK files, Review on Canadian files ), Documents.Document_Description ( text | values: N/A ), Documents.Other_Details ( text | values: N/A ) ]
table Statements, columns = [ Statements.Statement_ID ( integer | primary key | values: 57, 192 ), Statements.Statement_Details ( text | values: Open Project, Private Project ) ]
table Documents_with_Expenses, columns = [ Documents_with_Expenses.Document_ID ( integer | primary key | values: 57, 192 ), Documents_with_Expenses.Budget_Type_Code ( text | values: GV, SF ), Documents_with_Expenses.Document_Details ( text | values: government, safety ) ]
table Accounts, columns = [ Accounts.Account_ID ( integer | primary key | values: 7, 61 ), Accounts.Statement_ID ( integer | values: 57, 192 ), Accounts.Account_Details ( text | values: 495.063, 930.14 ) ]
foreign keys:
Documents.Project_ID = Projects.Project_ID
Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code
Statements.Statement_ID = Documents.Document_ID
Documents_with_Expenses.Document_ID = Documents.Document_ID
Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code
Accounts.Statement_ID = Statements.Statement_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of Projects?
-- What is the Document_Name of the Document with Document_ID = 1?
-- What is the average number of projects with documents created in the year 2020?
-- What is the most common document type in the projects with documents created in the year 2020?
------------------------------------------------------------------------------------------
database_id: ship_mission
database schema :
table mission, columns = [ mission.Mission_ID ( integer | primary key | values: 1, 2 ), mission.Ship_ID ( integer | values: 1, 2 ), mission.Code ( text | values: VMV-1, VMV-2 ), mission.Launched_Year ( real | values: 1930, 1916 ), mission.Location ( text | values: Germany, Helsinki , Finland ), mission.Speed_knots ( real | values: 25, 23 ), mission.Fate ( text | values: Decommissioned 1950, Lost (burned) 1931 ) ]
table ship, columns = [ ship.Ship_ID ( integer | primary key | values: 1, 2 ), ship.Name ( text | values: Corbridge, Farringford ), ship.Type ( text | values: Cargo ship, Battle ship ), ship.Nationality ( text | values: United Kingdom, United States ), ship.Tonnage ( real | values: 3687, 3146 ) ]
foreign keys:
mission.Ship_ID = ship.Ship_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average speed of ships that were involved in missions where the mission code is "success"?
-- What is the name of the ship that was involved in the mission with the highest speed?
-- How many ships are there that are owned by the nationality "USA"?
-- What is the number of missions where the launched year is between 2000 and 2010, and the ship involved has a tonnage of more than 10000 tons?
-- What is the average speed of ships that were involved in missions where the ship's nationality is "Japan"?  SELECT AVG ( speed_knots ) FROM mission AS T1 JOIN ship AS T2 ON T1. ship_id = T2. ship_id WHERE T2. nationality = 'Japan' ;  ;  -- this query does not work as is, but I am trying to make it work.
------------------------------------------------------------------------------------------
database_id: company_office
database schema :
table buildings, columns = [ buildings.id ( integer | primary key | values: 1, 2 ), buildings.name ( text | values: Torre KOI, Torre Mitikah ), buildings.City ( text | values: Monterrey, Mexico City ), buildings.Height ( real | values: 220, 210 ), buildings.Stories ( real | values: 67, 60 ), buildings.Status ( text | values: under construction, proposed ) ]
table Companies, columns = [ Companies.id ( integer | primary key | values: 1, 2 ), Companies.name ( text | values: JPMorgan Chase, HSBC ), Companies.Headquarters ( text | values: USA, UK ), Companies.Industry ( text | values: Banking, Conglomerate ), Companies.Sales_billion ( real | values: 115.5, 103.3 ), Companies.Profits_billion ( real | values: 17.4, 13.3 ), Companies.Assets_billion ( real | values: 2117.6, 2467.9 ), Companies.Market_Value_billion ( text | values: 182.2, 186.5 ) ]
table Office_locations, columns = [ Office_locations.building_id ( integer | primary key | values: 1, 2 ), Office_locations.company_id ( integer | values: 1, 2 ), Office_locations.move_in_year ( real | values: 2021, 2022 ) ]
foreign keys:
Office_locations.company_id = Companies.id
Office_locations.building_id = buildings.id

# Here are some example questions that CAN be answered by the schema below:
-- What is the average height of buildings in cities with more than one building?
-- How many companies are housed in buildings taller than 200 meters?
-- What is the average number of stories in buildings that are completed?
-- Which companies have their headquarters in cities with more than one building?
-- What is the average market value of billion-dollar companies housed in buildings taller than 200 meters?  (This question is not possible to answer with the given schema because it asks for an average value of a non-numeric field and there is no direct relation between the table with the field and the table with the numeric value that can be used for the average.)  Replace this question with another one.
------------------------------------------------------------------------------------------
database_id: tracking_software_problems
database schema :
table Problem_Category_Codes, columns = [ Problem_Category_Codes.problem_category_code ( text | primary key | values: Datatabase, GUI ), Problem_Category_Codes.problem_category_description ( text | values: Database design or contents., User Interface. ) ]
table Problem_Log, columns = [ Problem_Log.problem_log_id ( integer | primary key | values: 1, 2 ), Problem_Log.assigned_to_staff_id ( integer | values: 11, 12 ), Problem_Log.problem_id ( integer | values: 11, 8 ), Problem_Log.problem_category_code ( text | values: Middleware, GUI ), Problem_Log.problem_status_code ( text | values: Solved, Reported ), Problem_Log.log_entry_date ( datetime | values: 2011-03-13 13:11:57, 1976-03-31 14:03:02 ), Problem_Log.log_entry_description ( text | values: t, a ), Problem_Log.log_entry_fix ( text | values: k, j ), Problem_Log.other_log_details ( text | values: p, s ) ]
table Problem_Status_Codes, columns = [ Problem_Status_Codes.problem_status_code ( text | primary key | values: Reported, Solved ), Problem_Status_Codes.problem_status_description ( text | values: Reported, Solved ) ]
table Product, columns = [ Product.product_id ( integer | primary key | values: 1, 2 ), Product.product_name ( text | values: rose, yellow ), Product.product_details ( text | values: k, q ) ]
table Staff, columns = [ Staff.staff_id ( integer | primary key | values: 1, 2 ), Staff.staff_first_name ( text | values: Lacey, Dameon ), Staff.staff_last_name ( text | values: Bosco, Frami ), Staff.other_staff_details ( text | values: m, x ) ]
table Problems, columns = [ Problems.problem_id ( integer | primary key | values: 1, 2 ), Problems.product_id ( integer | values: 4, 8 ), Problems.closure_authorised_by_staff_id ( integer | values: 4, 3 ), Problems.reported_by_staff_id ( integer | values: 2, 10 ), Problems.date_problem_reported ( datetime | values: 1978-06-26 19:10:17, 1988-11-07 16:09:31 ), Problems.date_problem_closed ( datetime | values: 2012-07-22 19:24:26, 1973-06-07 04:13:51 ), Problems.problem_description ( text | values: x, w ), Problems.other_problem_details ( text | values: p, i ) ]
foreign keys:
Problem_Log.problem_status_code = Problem_Status_Codes.problem_status_code
Problem_Log.problem_id = Problems.problem_id
Problem_Log.assigned_to_staff_id = Staff.staff_id
Problem_Log.problem_category_code = Problem_Category_Codes.problem_category_code
Problems.reported_by_staff_id = Staff.staff_id
Problems.product_id = Product.product_id
Problems.closure_authorised_by_staff_id = Staff.staff_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of staff that reported problems in the Product category?
-- What are the staff names and dates when a problem in the 'Software' product was reported?
-- What is the total number of problems reported in the 'Software' product in the month of January?
-- What are the staff names of staff who have reported more than 5 problems in the month of January?
-- What are the product names of products that have had a problem reported by a staff member who has also reported problems in the 'Software' product?
------------------------------------------------------------------------------------------
database_id: products_gen_characteristics
database schema :
table Ref_Characteristic_Types, columns = [ Ref_Characteristic_Types.characteristic_type_code ( text | primary key | values: Grade, Purity ), Ref_Characteristic_Types.characteristic_type_description ( text | values: Grade, Purity ) ]
table Ref_Colors, columns = [ Ref_Colors.color_code ( text | primary key | values: 1, 2 ), Ref_Colors.color_description ( text | values: red, green ) ]
table Ref_Product_Categories, columns = [ Ref_Product_Categories.product_category_code ( text | primary key | values: Herbs, Seeds ), Ref_Product_Categories.product_category_description ( text | values: Herbs, Seeds ), Ref_Product_Categories.unit_of_measure ( text | values: Handful             , Weight - pound,kilo. ) ]
table Characteristics, columns = [ Characteristics.characteristic_id ( integer | primary key | values: 1, 2 ), Characteristics.characteristic_type_code ( text | values: Grade, Purity ), Characteristics.characteristic_data_type ( text | values: numquam, doloribus ), Characteristics.characteristic_name ( text | values: slow, fast ), Characteristics.other_characteristic_details ( text | values: N/A ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.color_code ( text | values: 4, 2 ), Products.product_category_code ( text | values: Spices, Herbs ), Products.product_name ( text | values: cumin, peper ), Products.typical_buying_price ( text | values: , 352447.2874677 ), Products.typical_selling_price ( text | values: 2878.3, 1892070.2803543 ), Products.product_description ( text | values: et, rerum ), Products.other_product_details ( text | values: N/A ) ]
table Product_Characteristics, columns = [ Product_Characteristics.product_id ( integer | values: 13, 11 ), Product_Characteristics.characteristic_id ( integer | values: 13, 2 ), Product_Characteristics.product_characteristic_value ( text | values: low, medium ) ]
foreign keys:
Characteristics.characteristic_type_code = Ref_Characteristic_Types.characteristic_type_code
Products.color_code = Ref_Colors.color_code
Products.product_category_code = Ref_Product_Categories.product_category_code
Product_Characteristics.product_id = Products.product_id
Product_Characteristics.characteristic_id = Characteristics.characteristic_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of distinct characteristic type codes used for characteristics with a characteristic name that contains the word 'length'?
-- How many products have a color code that corresponds to a color description containing the word'red'?
-- What is the product name of products that have a product category code that corresponds to a unit of measure equal to 'kg'?
------------------------------------------------------------------------------------------
database_id: coffee_shop
database schema :
table shop, columns = [ shop.Shop_ID ( integer | primary key | values: 1, 2 ), shop.Address ( text | values: 1200 Main Street, 1111 Main Street ), shop.Num_of_staff ( text | values: 13, 19 ), shop.Score ( real | values: 42.0, 38.0 ), shop.Open_Year ( text | values: 2010, 2008 ) ]
table member, columns = [ member.Member_ID ( integer | primary key | values: 1, 2 ), member.Name ( text | values: Ashby, Lazale, Breton, Robert ), member.Membership_card ( text | values: Black, White ), member.Age ( real | values: 29, 67 ), member.Time_of_purchase ( real | values: 18, 41 ), member.Level_of_membership ( real | values: 5, 4 ), member.Address ( text | values: Hartford, Waterbury ) ]
table happy_hour, columns = [ happy_hour.HH_ID ( integer | primary key | values: 1, 2 ), happy_hour.Shop_ID ( integer | values: 1, 10 ), happy_hour.Month ( text | values: May, April ), happy_hour.Num_of_shaff_in_charge ( real | values: 10, 12 ) ]
table happy_hour_member, columns = [ happy_hour_member.HH_ID ( integer | primary key | values: 1, 2 ), happy_hour_member.Member_ID ( integer | values: 3, 5 ), happy_hour_member.Total_amount ( real | values: 20.9, 20.92 ) ]
foreign keys:
happy_hour.Shop_ID = shop.Shop_ID
happy_hour_member.Member_ID = member.Member_ID

# Here are some example questions that CAN be answered by the schema below:
-- SELECT SUM(T1.Score) FROM shop AS T1 INNER JOIN happy_hour AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Num_of_shaff_in_charge = 2 AND T2.Month = 'June' GROUP BY T2.Shop_ID;
-- What is the average number of staff in all the shops that have a score above 8 and are located in the city of Tokyo?
-- What is the average age of all members who are members of the 'Silver' level and are located in the city of Osaka?
-- How many members are members of the 'Gold' level and are also members of the 'Platinum' level?
-- What is the average number of members who joined the happy hour in the month of January in the shop with shop ID 10?
------------------------------------------------------------------------------------------
database_id: riding_club
database schema :
table player, columns = [ player.Player_ID ( integer | primary key | values: 1, 2 ), player.Sponsor_name ( text | values: Brandon—Souris, Charleswood—St. James—Assiniboia ), player.Player_name ( text | values: Jean Luc Bouché, Fiona Shiells ), player.Gender ( text | values: M, F ), player.Residence ( text | values: Brandon, Winnipeg ), player.Occupation ( text | values: Locomotive Engineer, Ministerial Assistant ), player.Votes ( real | values: 6055, 7190 ), player.Rank ( text | values: 2nd, 3rd ) ]
table club, columns = [ club.Club_ID ( integer | primary key | values: 1, 2 ), club.Club_name ( text | values: AIK, BK Häcken ), club.Region ( text | values: USA, UK ), club.Start_year ( real | values: 2009, 1998 ) ]
table coach, columns = [ coach.Coach_ID ( integer | primary key | values: 1, 2 ), coach.Coach_name ( text | values: Jameson Tomas, Joe Fabbri ), coach.Gender ( text | values: M, F ), coach.Club_ID ( integer | values: 1, 3 ), coach.Rank ( real | values: 1, 2 ) ]
table player_coach, columns = [ player_coach.Player_ID ( integer | primary key | values: 1, 2 ), player_coach.Coach_ID ( integer | values: 1, 2 ), player_coach.Starting_year ( real | values: 2010, 2011 ) ]
table match_result, columns = [ match_result.Rank ( integer | primary key | values: 1, 2 ), match_result.Club_ID ( integer | values: 1, 2 ), match_result.Gold ( real | values: 20, 13 ), match_result.Big_Silver ( real | values: 14, 11 ), match_result.Small_Silver ( real | values: 9, 16 ), match_result.Bronze ( real | values: 8, 9 ), match_result.Points ( real | values: 168, 139 ) ]
foreign keys:
coach.Club_ID = club.Club_ID
player_coach.Coach_ID = coach.Coach_ID
player_coach.Player_ID = player.Player_ID
match_result.Club_ID = club.Club_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many players are there in total?
-- What is the name of the club that the player with the highest number of votes is associated with?
-- What is the name of the coach that coached the player with the name "John Doe"?
-- What is the average number of votes received by players from the "Male" gender?
-- How many clubs have won at least one gold medal in the Olympic Games?  How many of these clubs are based in the region "Asia"?  Please display both the count of clubs that won at least one gold and the count of clubs based in "Asia" separately.  For clubs that won at least one gold, please also display their respective regions.  For clubs based in "Asia", please also display the number of gold medals they won.  Please use the match_result table for this question.  Do not include any clubs that did not win at least one gold medal.  Sort the results by region.  Please use the following format: "Region: Count, Gold Medals Won" or "Region: Count".  If a club won no gold medals, do not display the gold medals won.  Do not include any duplicate results.  Please
------------------------------------------------------------------------------------------
database_id: customers_card_transactions
database schema :
table Accounts, columns = [ Accounts.account_id ( integer | primary key | values: 1, 2 ), Accounts.customer_id ( real | values: 6, 14 ), Accounts.account_name ( text | values: 338, 562 ), Accounts.other_account_details ( text | values: Regular, VIP ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.customer_first_name ( text | values: Aniyah, Susie ), Customers.customer_last_name ( text | values: Feest, Wiza ), Customers.customer_address ( text | values: 55975 Theodore Estates
Lake Brody, VT 57078, 6478 Moen Isle Suite 910
Schimmelmouth, VT 96364-4898 ), Customers.customer_phone ( text | values: (673)872-5338, 679-845-8645x94312 ), Customers.customer_email ( text | values: fahey.dorian@example.com, idickinson@example.com ), Customers.other_customer_details ( text | values: N/A ) ]
table Customers_Cards, columns = [ Customers_Cards.card_id ( integer | primary key | values: 1, 2 ), Customers_Cards.customer_id ( real | values: 14, 9 ), Customers_Cards.card_type_code ( text | values: Credit, Debit ), Customers_Cards.card_number ( text | values: 4560596484842, 4859448397570735 ), Customers_Cards.date_valid_from ( datetime | values: 2011-04-17 09:05:28, 2012-05-22 02:05:41 ), Customers_Cards.date_valid_to ( datetime | values: 2018-03-07 17:06:19, 2018-02-25 15:43:32 ), Customers_Cards.other_card_details ( text | values: 5567915676420343, 4539333582760 ) ]
table Financial_Transactions, columns = [ Financial_Transactions.transaction_id ( real | values: 1, 2 ), Financial_Transactions.previous_transaction_id ( real | values: 925, 494 ), Financial_Transactions.account_id ( integer | values: 15, 3 ), Financial_Transactions.card_id ( integer | values: 1, 2 ), Financial_Transactions.transaction_type ( text | values: Payment, Refund ), Financial_Transactions.transaction_date ( datetime | values: 2018-03-24 06:41:41, 2018-03-24 12:08:55 ), Financial_Transactions.transaction_amount ( real | values: 1701.23, 1931.76 ), Financial_Transactions.transaction_comment ( text | values: N/A ), Financial_Transactions.other_transaction_details ( text | values: N/A ) ]
foreign keys:
Financial_Transactions.account_id = Accounts.account_id
Financial_Transactions.card_id = Customers_Cards.card_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the count of customers that have at least one active card?
-- What is the number of accounts opened by customers from the address '123 Main St'?
-- What is the count of financial transactions with a transaction type of 'withdrawal' and a transaction amount of $100 or more, by the customer with customer ID 1?
-- What is the name of the account with the account ID 1, and what is its account name?
-- What is the count of customers that have exactly one active card, and what is the count of customers that have no active cards?
------------------------------------------------------------------------------------------
database_id: county_public_safety
database schema :
table county_public_safety, columns = [ county_public_safety.County_ID ( integer | primary key | values: 1, 2 ), county_public_safety.Name ( text | values: Abbotsford, Burnaby ), county_public_safety.Population ( real | values: 128165, 204320 ), county_public_safety.Police_officers ( real | values: 187, 253 ), county_public_safety.Residents_per_officer ( real | values: 685, 808 ), county_public_safety.Case_burden ( real | values: 81, 100 ), county_public_safety.Crime_rate ( real | values: 118.0, 123.0 ), county_public_safety.Police_force ( text | values: Abbotsford Police Department, RCMP ), county_public_safety.Location ( text | values: East, West ) ]
table city, columns = [ city.City_ID ( integer | primary key | values: 1, 2 ), city.County_ID ( integer | values: 1, 2 ), city.Name ( text | values: Adjuntas, Aguada ), city.White ( real | values: 93.1, 86.6 ), city.Black ( real | values: 3.1, 5.3 ), city.Amerindian ( real | values: 0.3, 0.6 ), city.Asian ( real | values: 0.0, 0.1 ), city.Multiracial ( real | values: 3.4, 7.7 ), city.Hispanic ( real | values: 99.6, 99.4 ) ]
foreign keys:
city.County_ID = county_public_safety.County_ID

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM county_public_safety;
-- What is the average number of police officers per county, and what is the total population of the counties with more than 200 police officers?
-- What is the average number of residents per police officer in the counties with a population of more than 50,000?
-- What is the average crime rate in the counties with a police force that is primarily a county police force?
-- What is the average number of residents per police officer in the counties with a crime rate of more than 1,000?
------------------------------------------------------------------------------------------
database_id: performance_attendance
database schema :
table member, columns = [ member.Member_ID ( text | primary key | values: 1, 10 ), member.Name ( text | values: Wilfredo Ruiz, Luis González ), member.Nationality ( text | values: Uruguay, Argentina ), member.Role ( text | values: Prime Violin, Violin ) ]
table performance, columns = [ performance.Performance_ID ( integer | primary key | values: 1.0, 2.0 ), performance.Date ( text | values: February 2, February 4 ), performance.Host ( text | values: Boston Bruins, New York Rangers ), performance.Location ( text | values: TD Garden, Madison Square Garden ), performance.Attendance ( real | values: 165, 1820 ) ]
table member_attendance, columns = [ member_attendance.Member_ID ( integer | primary key | values: 1, 2 ), member_attendance.Performance_ID ( integer | values: 4, 1 ), member_attendance.Num_of_Pieces ( real | values: 2, 3 ) ]
foreign keys:
member_attendance.Performance_ID = performance.Performance_ID
member_attendance.Member_ID = member.Member_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of unique nationalities of the members who attended the performance on '2024-03-01'?
-- What is the average number of pieces presented by the members from the 'USA'?
-- How many members have attended a performance in the location 'Tokyo'?
-- What are the names of the members who have a role 'Principal' and have attended a performance in '2024'?
-- What is the total number of members who have attended more than 1 performance in the same location as the performance on '2024-02-01' and are from the nationality 'Japan'?
------------------------------------------------------------------------------------------
database_id: club_1
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Club, columns = [ Club.ClubID ( integer | primary key | values: 1, 2 ), Club.ClubName ( text | values: Bootup Baltimore, Hopkins Student Enterprises ), Club.ClubDesc ( text | values: Refurbish computers; teach kids and adults about computer basics., Venture capital fund for student business. ), Club.ClubLocation ( text | values: AKW, HHH ) ]
table Member_of_club, columns = [ Member_of_club.StuID ( integer | values: 1001, 1007 ), Member_of_club.ClubID ( integer | values: 1, 4 ), Member_of_club.Position ( text | values: President, Vice-President ) ]
foreign keys:
Member_of_club.ClubID = Club.ClubID
Member_of_club.StuID = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of students in the "Computer Science" major?
-- Which clubs are located in the city of "New York"?
-- How many students who are members of the "Computer Science" club are there in the city with code "Boulder"?
-- What is the average age of students who are members of the "Computer Science" club and are living in the city with code "Boulder"?
-- What is the name of the student who is the president of the "Computer Science" club in the city with code "Boulder"?
------------------------------------------------------------------------------------------
database_id: singer
database schema :
table singer, columns = [ singer.Singer_ID ( integer | primary key | values: 1, 2 ), singer.Name ( text | values: Liliane Bettencourt, Christy Walton ), singer.Birth_Year ( real | values: 1944.0, 1948.0 ), singer.Net_Worth_Millions ( real | values: 30.0, 28.8 ), singer.Citizenship ( text | values: France, United States ) ]
table song, columns = [ song.Song_ID ( integer | primary key | values: 1, 2 ), song.Title ( text | values: Do They Know It's Christmas, F**k It (I Don't Want You Back) ), song.Singer_ID ( integer | values: 1, 2 ), song.Sales ( real | values: 1094000.0, 552407.0 ), song.Highest_Position ( real | values: 1.0, 3.0 ) ]
foreign keys:
song.Singer_ID = singer.Singer_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average net worth of singers born in the year 1975?
-- What are the names of the top 3 singers in terms of the total sales of their songs?
-- Which song with a highest position of 1 in the charts has a singer from the United States?
-- How many singers have a net worth of more than 100 million dollars?
-- What are the titles of songs performed by singers from the United Kingdom?
------------------------------------------------------------------------------------------
database_id: culture_company
database schema :
table book_club, columns = [ book_club.book_club_id ( integer | primary key | values: 1, 2 ), book_club.Year ( real | values: 1989, 1990 ), book_club.Author_or_Editor ( text | values: Michael Nava, Donald Ward ), book_club.Book_Title ( text | values: Goldenboy, Death Takes the Stage ), book_club.Publisher ( text | values: Alyson, St. Martin's Press ), book_club.Category ( text | values: Gay M/SF, Lesb. M/SF ), book_club.Result ( text | values: Won [A ], Nom ) ]
table movie, columns = [ movie.movie_id ( integer | primary key | values: 1, 2 ), movie.Title ( text | values: The Boondock Saints, The Big Kahuna ), movie.Year ( real | values: 1999, 2000 ), movie.Director ( text | values: Troy Duffy, John Swanbeck ), movie.Budget_million ( real | values: 6.0, 7.0 ), movie.Gross_worldwide ( real | values: 30471, 3728888 ) ]
table culture_company, columns = [ culture_company.Company_name ( text | primary key | values: Cathay Pacific Culture, Cathay Pacific Culture Services (HK) Limited ), culture_company.Type ( text | values: Corporate, Joint Venture ), culture_company.Incorporated_in ( text | values: China, Hong Kong ), culture_company.Group_Equity_Shareholding ( real | values: 18.77, 49.0 ), culture_company.book_club_id ( text | values: 1, 2 ), culture_company.movie_id ( text | values: 2, 3 ) ]
foreign keys:
culture_company.movie_id = movie.movie_id
culture_company.book_club_id = book_club.book_club_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of movie titles that have a budget of more than 100 million dollars, released in the year 2000?
-- How many book clubs exist which are published by 'McGraw-Hill'?
-- What is the average budget of all movies released in the year 2010?
-- Which book club, published by 'Penguin', has the highest result?
-- What is the number of movies directed by 'Christopher Nolan', sorted in descending order by their gross worldwide revenue?  Show only the top 3 results.  Also, show only the results for movies with a budget of more than 100 million dollars.  Finally, show only the results for movies released in the year 2010.   Display the results as a list.  (Note: You should use the movie table for this question.)   [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]
------------------------------------------------------------------------------------------
database_id: cre_Doc_Template_Mgt
database schema :
table Ref_Template_Types, columns = [ Ref_Template_Types.Template_Type_Code ( text | primary key | values: AD, BK ), Ref_Template_Types.Template_Type_Description ( text | values: Presentation, CV ) ]
table Templates, columns = [ Templates.Template_ID ( integer | primary key | values: 0, 1 ), Templates.Version_Number ( real | values: 5, 9 ), Templates.Template_Type_Code ( text | values: PP, BK ), Templates.Date_Effective_From ( datetime | values: 2005-11-12 07:09:48, 2010-09-24 01:15:11 ), Templates.Date_Effective_To ( datetime | values: 2008-01-05 14:19:28, 1999-07-08 03:31:04 ), Templates.Template_Details ( text | values:  ) ]
table Documents, columns = [ Documents.Document_ID ( integer | primary key | values: 0, 1 ), Documents.Template_ID ( integer | values: 7, 25 ), Documents.Document_Name ( text | values: Introduction of OS, Understanding DB ), Documents.Document_Description ( text | values: n, y ), Documents.Other_Details ( text | values: N/A ) ]
table Paragraphs, columns = [ Paragraphs.Paragraph_ID ( integer | primary key | values: 7, 9 ), Paragraphs.Document_ID ( integer | values: 2394, 3 ), Paragraphs.Paragraph_Text ( text | values: Korea, Somalia ), Paragraphs.Other_Details ( text | values: N/A ) ]
foreign keys:
Templates.Template_Type_Code = Ref_Template_Types.Template_Type_Code
Documents.Template_ID = Templates.Template_ID
Paragraphs.Document_ID = Documents.Document_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of documents that were created using a template with the code 'tt0001'?
-- What is the template type description for the template type code 'tt0002'?
-- How many unique documents were created by each template type code?
-- What are the documents created using a template with a version number greater than 2 and a template type code 'tt0001'?
-- What is the total number of paragraphs in all documents created by a template type code 'tt0002' and the document name contains 'example'?  (Note: this question may not be answerable based on the schema)  (Note: this question may not be answerable based on the schema)  (Note: this question may not be answerable based on the schema)  (Note: this question may not be answerable based on the schema)  (Note: this question may not be answerable based on the schema)  (Note: this question may not be answerable based on the schema)  (Note: this question may not be answerable based from the schema)  (Note: this question may not be answerable based from the schema)  (Note
------------------------------------------------------------------------------------------
database_id: musical
database schema :
table musical, columns = [ musical.Musical_ID ( integer | primary key | values: 1, 2 ), musical.Name ( text | values: The Phantom of the Opera, Les Misérables ), musical.Year ( real | values: 1986 ), musical.Award ( text | values: Tony Award, Drama Desk Award ), musical.Category ( text | values: Best Book of a Musical, Best Performance by a Leading Actor in a Musical ), musical.Nominee ( text | values: Bob Fosse, Cleavant Derricks ), musical.Result ( text | values: Nominated, Won ) ]
table actor, columns = [ actor.Actor_ID ( integer | primary key | values: 1, 2 ), actor.Name ( text | values: Ray Meagher, Tom Oliver ), actor.Musical_ID ( integer | values: 1, 2 ), actor.Character ( text | values: Alf Stewart, Lou Carpenter ), actor.Duration ( text | values: 1988—, 1988, 1992— ), actor.age ( real | values: 26, 22 ) ]
foreign keys:
actor.Musical_ID = actor.Actor_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many actors participated in the musical "Rent"?
-- What were the categories in which "Hamilton" won awards in 2016?
-- What are the names of the actors who were nominated in the musical "The Phantom of the Opera" in the year 1987?
-- What is the total number of actors in the musical "The Phantom of the Opera" who have won awards?
-- What are the names of the actors who have acted in both "The Phantom of the Opera" and "Rent"?  ```
------------------------------------------------------------------------------------------
database_id: world_1
database schema :
table city, columns = [ city.ID ( integer | primary key | values: 129, 1 ), city.Name ( text | values: Kabul, Qandahar ), city.CountryCode ( text | values: ABW, AFG ), city.District ( text | values: Kabol, Qandahar ), city.Population ( real | values: 1780000, 237500 ) ]
table sqlite_sequence, columns = [ sqlite_sequence.name ( text | values: city ), sqlite_sequence.seq ( text | values: 4079 ) ]
table country, columns = [ country.Code ( text | primary key | values: ABW, AFG ), country.Name ( text | values: Aruba, Afghanistan ), country.Continent ( text | values: North America, Asia ), country.Region ( text | values: Caribbean, Southern and Central Asia ), country.SurfaceArea ( real | values: 193.0, 652090.0 ), country.IndepYear ( real | values: 1919, 1975 ), country.Population ( real | values: 103000, 22720000 ), country.LifeExpectancy ( real | values: 78.4, 45.9 ), country.GNP ( real | values: 828.0, 5976.0 ), country.GNPOld ( real | values: 793.0, 7984.0 ), country.LocalName ( text | values: Aruba, Afganistan/Afqanestan ), country.GovernmentForm ( text | values: Nonmetropolitan Territory of The Netherlands, Islamic Emirate ), country.HeadOfState ( text | values: Beatrix, Mohammad Omar ), country.Capital ( real | values: 129, 1 ), country.Code2 ( text | values: AW, AF ) ]
table countrylanguage, columns = [ countrylanguage.CountryCode ( text | primary key | values: ABW, AFG ), countrylanguage.Language ( text | values: Dutch, English ), countrylanguage.IsOfficial ( text | values: T, F ), countrylanguage.Percentage ( real | values: 5.3, 9.5 ) ]
foreign keys:
city.CountryCode = country.Code
countrylanguage.CountryCode = country.Code

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the country with the highest population?
-- What is the average population of countries in the region "North America"?
-- How many cities are in the country with the code "USA"?
-- What is the name of the city with the highest population in the district "New York"?
-- What is the number of countries where English is an official language?
------------------------------------------------------------------------------------------
database_id: device
database schema :
table device, columns = [ device.Device_ID ( integer | primary key | values: 1, 2 ), device.Device ( text | values: BlackBerry Storm 9530, Apple ), device.Carrier ( text | values: MTS Mobility, Verizon Wireless ), device.Package_Version ( text | values: 5.0.0.808, 5.0.0.328 ), device.Applications ( text | values: 5.0.0.419, 5.0.0.328 ), device.Software_Platform ( text | values: Android, iOS ) ]
table shop, columns = [ shop.Shop_ID ( integer | primary key | values: 1, 2 ), shop.Shop_Name ( text | values: Dinas Device, Best Buy ), shop.Location ( text | values: Dinas, Cymmer ), shop.Open_Date ( text | values: 1 January, 15 July ), shop.Open_Year ( real | values: 2014, 2006 ) ]
table stock, columns = [ stock.Shop_ID ( integer | primary key | values: 1, 2 ), stock.Device_ID ( integer | values: 4, 6 ), stock.Quantity ( real | values: 100, 110 ) ]
foreign keys:
stock.Device_ID = device.Device_ID
stock.Shop_ID = shop.Shop_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many devices are there in the database?
-- What is the average number of devices per shop?
-- What is the device ID of the device "iPhone 11"?
-- What are the names of all the shops where the quantity of "iPhone 11" is greater than 100?
-- What is the total number of shops where the shop name contains "store" and the open year is 2019?
------------------------------------------------------------------------------------------
database_id: tracking_grants_for_research
database schema :
table Document_Types, columns = [ Document_Types.document_type_code ( text | primary key | values: APP, REG ), Document_Types.document_description ( text | values: Initial Application, Regular ) ]
table Documents, columns = [ Documents.document_id ( integer | primary key | values: 1, 2 ), Documents.document_type_code ( text | values: APP, REG ), Documents.grant_id ( integer | values: 5, 13 ), Documents.sent_date ( datetime | values: 1986-11-30 07:56:35, 2004-01-23 11:57:08 ), Documents.response_received_date ( datetime | values: 1977-12-01 02:18:53, 1979-12-08 10:38:07 ), Documents.other_details ( text | values:  ) ]
table Grants, columns = [ Grants.grant_id ( integer | primary key | values: 1, 2 ), Grants.organisation_id ( integer | values: 10, 3 ), Grants.grant_amount ( real | values: 4094.542, 281.2446 ), Grants.grant_start_date ( datetime | values: 2016-11-20 00:18:51, 1985-10-09 20:08:49 ), Grants.grant_end_date ( datetime | values: 2004-10-24 09:09:39, 1985-06-08 00:22:07 ), Grants.other_details ( text | values: et, occaecati ) ]
table Organisation_Types, columns = [ Organisation_Types.organisation_type ( text | primary key | values: RES, SPON ), Organisation_Types.organisation_type_description ( text | values: Research, Sponsor ) ]
table Organisations, columns = [ Organisations.organisation_id ( integer | primary key | values: 1, 2 ), Organisations.organisation_type ( text | values: RES, SPON ), Organisations.organisation_details ( text | values: et, eius ) ]
table Project_Outcomes, columns = [ Project_Outcomes.project_id ( integer | values: 4, 3 ), Project_Outcomes.outcome_code ( text | values: Paper, Patent ), Project_Outcomes.outcome_details ( text | values: N/A ) ]
table Project_Staff, columns = [ Project_Staff.staff_id ( integer | primary key | values: 0.0, 3.0 ), Project_Staff.project_id ( integer | values: 2, 5 ), Project_Staff.role_code ( text | values: leader, researcher ), Project_Staff.date_from ( datetime | values: 1981-10-04 22:44:50, 2003-04-19 15:06:20 ), Project_Staff.date_to ( datetime | values: 1985-05-30 22:26:30, 2010-12-08 11:55:36 ), Project_Staff.other_details ( text | values: N/A ) ]
table Projects, columns = [ Projects.project_id ( integer | primary key | values: 1, 2 ), Projects.organisation_id ( integer | values: 15, 11 ), Projects.project_details ( text | values: porro, et ) ]
table Research_Outcomes, columns = [ Research_Outcomes.outcome_code ( text | primary key | values: Paper, Patent ), Research_Outcomes.outcome_description ( text | values: Published Research Paper, Research Patent ) ]
table Research_Staff, columns = [ Research_Staff.staff_id ( integer | primary key | values: 1, 2 ), Research_Staff.employer_organisation_id ( integer | values: 1, 4 ), Research_Staff.staff_details ( text | values: quo, est ) ]
table Staff_Roles, columns = [ Staff_Roles.role_code ( text | primary key | values: leader, researcher ), Staff_Roles.role_description ( text | values: Project Leader, Project Researcher ) ]
table Tasks, columns = [ Tasks.task_id ( integer | primary key | values: 1, 2 ), Tasks.project_id ( integer | values: 1, 2 ), Tasks.task_details ( text | values: a, b ), Tasks.eg Agree Objectives ( text | values: N/A ) ]
foreign keys:
Documents.grant_id = Grants.grant_id
Documents.document_type_code = Document_Types.document_type_code
Grants.organisation_id = Organisations.organisation_id
Organisations.organisation_type = Organisation_Types.organisation_type
Project_Outcomes.outcome_code = Research_Outcomes.outcome_code
Project_Outcomes.project_id = Projects.project_id
Project_Staff.role_code = Staff_Roles.role_code
Project_Staff.project_id = Projects.project_id
Projects.organisation_id = Organisations.organisation_id
Research_Staff.employer_organisation_id = Organisations.organisation_id
Tasks.project_id = Projects.project_id

# Here are some example questions that CAN be answered by the schema below:
-- Select all documents with the document_type_code 'APPROVAL' and the sent_date between '2014-01-01' and '2016-01-01', and which were received after the document with document_id = 1.
-- What is the document_type_code of the document with document_id = 1?  Join the Documents and Document_Types tables on document_type_code to answer this question.
-- What is the average grant amount for the projects that were completed before 31/12/2020?
-- Which organisation type has the highest average grant amount?
-- What is the average duration of research staff employment in the organisation type 'University'?
------------------------------------------------------------------------------------------
database_id: employee_hire_evaluation
database schema :
table employee, columns = [ employee.Employee_ID ( integer | primary key | values: 1, 2 ), employee.Name ( text | values: George Chuter, Lee Mears ), employee.Age ( real | values: 23, 29 ), employee.City ( text | values: Bristol, Bath ) ]
table shop, columns = [ shop.Shop_ID ( integer | primary key | values: 1, 2 ), shop.Name ( text | values: FC Haka, HJK ), shop.Location ( text | values: Valkeakoski, Helsinki ), shop.District ( text | values: Tehtaan kenttä, Finnair Stadium ), shop.Number_products ( real | values: 3516, 10770 ), shop.Manager_name ( text | values: Olli Huttunen, Antti Muurinen ) ]
table hiring, columns = [ hiring.Shop_ID ( integer | values: 1, 8 ), hiring.Employee_ID ( integer | primary key | values: 1, 2 ), hiring.Start_from ( text | values: 2009, 2003 ), hiring.Is_full_time ( text | values: T, F ) ]
table evaluation, columns = [ evaluation.Employee_ID ( text | primary key | values: 1, 10 ), evaluation.Year_awarded ( text | values: 2011, 2016 ), evaluation.Bonus ( real | values: 3000.0, 3200.0 ) ]
foreign keys:
hiring.Employee_ID = employee.Employee_ID
hiring.Shop_ID = shop.Shop_ID
evaluation.Employee_ID = employee.Employee_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of employees working in shops that have a manager named "John"?
-- How many employees are there in total, who have received a bonus?
-- What is the name of the shop located in the district "Downtown", that has more than 50 products?
-- Which city has the most employees working in it, and how many employees work there?
-- What is the name of the shop with the highest number of products, and how many employees work there?  - That shop's manager's name is "John"?  - Also, get the average age of employees working in that shop.  - Finally, get the bonus of the employee with the highest bonus.  - And, finally, get the total number of shops in the district "Downtown".  - AND, the number of employees who work in the district "Downtown" with the name "John".  - (All these sub-questions should be part of the main question)  - Also, the sub-questions should be in the correct order as per the question above.  - Also, the sub-questions should be separated by commas.  - Please, also, make sure that the
------------------------------------------------------------------------------------------
database_id: movie_1
database schema :
table Movie, columns = [ Movie.mID ( integer | primary key | values: 101, 102 ), Movie.title ( text | values: Gone with the Wind, Star Wars ), Movie.year ( real | values: 1939, 1977 ), Movie.director ( text | values: Victor Fleming, George Lucas ) ]
table Reviewer, columns = [ Reviewer.rID ( integer | primary key | values: 201, 202 ), Reviewer.name ( text | values: Sarah Martinez, Daniel Lewis ) ]
table Rating, columns = [ Rating.rID ( integer | values: 201, 202 ), Rating.mID ( integer | values: 101, 106 ), Rating.stars ( real | values: 2, 4 ), Rating.ratingDate ( datetime | values: 2011-01-22, 2011-01-27 ) ]
foreign keys:
Rating.rID = Reviewer.rID
Rating.mID = Movie.mID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of ratings for movies released before 1990?
-- Which movie directors have a movie that was released in the year 2000?
-- What is the total number of movies rated by reviewers from the USA?
-- Which movies have a rating of 4 stars and were released after the year 2000?
-- How many reviewers have rated a movie that has a rating of 3 stars?  ]]]]
------------------------------------------------------------------------------------------
database_id: network_1
database schema :
table Highschooler, columns = [ Highschooler.ID ( integer | primary key | values: 1025, 1101 ), Highschooler.name ( text | values: Jordan, Gabriel ), Highschooler.grade ( real | values: 9, 10 ) ]
table Friend, columns = [ Friend.student_id ( integer | primary key | values: 1101, 1247 ), Friend.friend_id ( integer | values: 1381, 1689 ) ]
table Likes, columns = [ Likes.student_id ( integer | primary key | values: 1025, 1247 ), Likes.liked_id ( integer | values: 1709, 1689 ) ]
foreign keys:
Friend.friend_id = Highschooler.ID
Friend.student_id = Highschooler.ID
Likes.student_id = Highschooler.ID
Likes.liked_id = Highschooler.ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average grade of all students who have at least one friend?
-- What is the grade of the student whose name is "Alice"?
-- How many students like at least one student who has a grade of 12?
-- What is the ID of the student who is friends with the student who has the highest grade?
-- How many students have at least one friend whose name starts with the letter "S"?  ```sql
------------------------------------------------------------------------------------------
database_id: poker_player
database schema :
table poker_player, columns = [ poker_player.Poker_Player_ID ( integer | primary key | values: 1, 2 ), poker_player.People_ID ( integer | values: 1, 2 ), poker_player.Final_Table_Made ( real | values: 42.0, 10.0 ), poker_player.Best_Finish ( real | values: 1.0, 2.0 ), poker_player.Money_Rank ( real | values: 68.0, 141.0 ), poker_player.Earnings ( real | values: 476090.0, 189233.0 ) ]
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Nationality ( text | values: Russia, Bulgaria ), people.Name ( text | values: Aleksey Ostapenko, Teodor Salparov ), people.Birth_Date ( text | values: May 26, 1986, August 16, 1982 ), people.Height ( real | values: 207.0, 182.0 ) ]
foreign keys:
poker_player.People_ID = people.People_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average height of the people that made it to the final table in the poker tournament?
-- What is the highest earnings of a poker player who is American and has a height of 180 cm or more?
-- What is the average earnings of the people who made it to the final table in the poker tournament and are from the UK?
-- How many poker players are from the UK and have an earnings of more than $100,000?
-- What is the name of the poker player with the highest earnings among the people who were born before 1990?  ```sql
------------------------------------------------------------------------------------------
database_id: program_share
database schema :
table program, columns = [ program.Program_ID ( integer | primary key | values: 1, 2 ), program.Name ( text | values: Aniworld, Kaku ), program.Origin ( text | values: Hunan, Beijing ), program.Launch ( real | values: 2005.0, 2004.0 ), program.Owner ( text | values: Hunan Broadcasting System (HBS), Beijing Television (BTV) ) ]
table channel, columns = [ channel.Channel_ID ( integer | primary key | values: 1, 2 ), channel.Name ( text | values: CCTV-1, Hunan Satellite TV ), channel.Owner ( text | values: CCTV, HBS ), channel.Share_in_percent ( real | values: 4.9, 4.81 ), channel.Rating_in_percent ( real | values: 0.54, 0.53 ) ]
table broadcast, columns = [ broadcast.Channel_ID ( integer | primary key | values: 1, 2 ), broadcast.Program_ID ( integer | values: 1, 2 ), broadcast.Time_of_day ( text | values: Morning, Night ) ]
table broadcast_share, columns = [ broadcast_share.Channel_ID ( integer | primary key | values: 1, 2 ), broadcast_share.Program_ID ( integer | values: 1, 2 ), broadcast_share.Date ( text | values: 01,May, 02,May ), broadcast_share.Share_in_percent ( real | values: 3.1, 1.8 ) ]
foreign keys:
broadcast.Program_ID = program.Program_ID
broadcast.Channel_ID = channel.Channel_ID
broadcast_share.Program_ID = program.Program_ID
broadcast_share.Channel_ID = channel.Channel_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average share of a program on all channels for each program, ordered by average share in descending order?
-- How many channels are there in total?
-- What is the number of broadcasts on all channels for each day of the week?
-- What is the average share of a channel for each program, ordered by average share in descending order?
-- What is the number of programs on a channel that has a rating of 80% or higher?  ]]>0.6
------------------------------------------------------------------------------------------
database_id: aircraft
database schema :
table pilot, columns = [ pilot.Pilot_Id ( integer | primary key | values: 1, 2 ), pilot.Name ( text | values: Prof. Zackery Collins, Katheryn Gorczany IV ), pilot.Age ( real | values: 23, 20 ) ]
table aircraft, columns = [ aircraft.Aircraft_ID ( integer | primary key | values: 1, 2 ), aircraft.Aircraft ( text | values: Robinson R-22, Bell 206B3 JetRanger ), aircraft.Description ( text | values: Light utility helicopter, Turboshaft utility helicopter ), aircraft.Max_Gross_Weight ( text | values: 1,370 lb (635 kg), 3,200 lb (1,451 kg) ), aircraft.Total_disk_area ( text | values: 497 ft² (46.2 m²), 872 ft² (81.1 m²) ), aircraft.Max_disk_Loading ( text | values: 2.6 lb/ft² (14 kg/m²), 3.7 lb/ft² (18 kg/m²) ) ]
table match, columns = [ match.Round ( integer | primary key | values: 1.0, 2.0 ), match.Location ( text | values: Mina' Zayid , Abu Dhabi, Swan River , Perth ), match.Country ( text | values: United Arab Emirates, Australia ), match.Date ( text | values: March 26–27, April 17–18 ), match.Fastest_Qualifying ( text | values: Hannes Arch, Paul Bonhomme ), match.Winning_Pilot ( text | values: 1, 4 ), match.Winning_Aircraft ( text | values: 1, 2 ) ]
table airport, columns = [ airport.Airport_ID ( integer | primary key | values: 1, 2 ), airport.Airport_Name ( text | values: London Heathrow, London Gatwick ), airport.Total_Passengers ( real | values: 67054745.0, 34205887.0 ), airport.%_Change_2007 ( text | values: 1.5%, 2.9% ), airport.International_Passengers ( real | values: 61344438.0, 30431051.0 ), airport.Domestic_Passengers ( real | values: 5562516.0, 3730963.0 ), airport.Transit_Passengers ( real | values: 147791.0, 43873.0 ), airport.Aircraft_Movements ( real | values: 478693.0, 263653.0 ), airport.Freight_Metric_Tonnes ( real | values: 1397054.0, 107702.0 ) ]
table airport_aircraft, columns = [ airport_aircraft.ID ( real | values: 1, 2 ), airport_aircraft.Airport_ID ( integer | primary key | values: 1, 2 ), airport_aircraft.Aircraft_ID ( integer | values: 2, 1 ) ]
foreign keys:
match.Winning_Pilot = pilot.Pilot_Id
match.Winning_Aircraft = aircraft.Aircraft_ID
airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID
airport_aircraft.Airport_ID = airport.Airport_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of all pilots?
-- What is the total number of aircraft that have been used to win matches?
-- Which airport has the highest number of transit passengers?
-- What is the average Max Gross Weight of all aircraft that have been used to win matches?
-- What is the name of the pilot who won the match at round 5 and used an aircraft with a Max Disk Loading of 15?  (Hint: You will need to use a subquery or a join to answer this question.)
------------------------------------------------------------------------------------------
database_id: restaurant_1
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Restaurant, columns = [ Restaurant.ResID ( integer | primary key | values: 1, 2 ), Restaurant.ResName ( text | values: Subway, Honeygrow ), Restaurant.Address ( text | values: 3233 St Paul St, Baltimore, MD 21218, 3212 St Paul St, Baltimore, MD 21218 ), Restaurant.Rating ( real | values: 3, 4 ) ]
table Type_Of_Restaurant, columns = [ Type_Of_Restaurant.ResID ( integer | values: 1, 2 ), Type_Of_Restaurant.ResTypeID ( integer | values: 1, 2 ) ]
table Restaurant_Type, columns = [ Restaurant_Type.ResTypeID ( integer | primary key | values: 1, 2 ), Restaurant_Type.ResTypeName ( text | values: Sandwich, Stir-fry ), Restaurant_Type.ResTypeDescription ( text | values: Simplest there is., Classic Chinese cooking. ) ]
table Visits_Restaurant, columns = [ Visits_Restaurant.StuID ( integer | values: 1001, 1032 ), Visits_Restaurant.ResID ( integer | values: 1, 2 ), Visits_Restaurant.Time ( datetime | values: 2017-10-09 18:15:00, 2017-10-08 13:00:30 ), Visits_Restaurant.Spent ( real | values: 6.53, 13.2 ) ]
foreign keys:
Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID
Type_Of_Restaurant.ResID = Restaurant.ResID
Visits_Restaurant.ResID = Restaurant.ResID
Visits_Restaurant.StuID = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- Insert your questions in the above format.
-- 2.
-- 4.
-- **Hint:** Use the relationships between the tables to create your questions. You can use SQL to answer the questions, but you must provide the SQL query that supports your answer.**
-- What is the average age of female students who have visited a restaurant in the city of "New York"?
------------------------------------------------------------------------------------------
database_id: customers_and_invoices
database schema :
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.customer_first_name ( text | values: Dee, Brennon ), Customers.customer_middle_initial ( text | values: A, H ), Customers.customer_last_name ( text | values: Larkin, Weimann ), Customers.gender ( text | values: 1, 0 ), Customers.email_address ( text | values: thora.torphy@example.org, roosevelt.collier@example.org ), Customers.login_name ( text | values: xhartmann, shayne.lesch ), Customers.login_password ( text | values: 77789d292604ea04406f, ce97a3e4539347daab96 ), Customers.phone_number ( text | values: 241.796.1219x37862, (943)219-4234x415 ), Customers.town_city ( text | values: North Nellie, South Isabell ), Customers.state_county_province ( text | values: WestVirginia, Oklahoma ), Customers.country ( text | values: USA ) ]
table Orders, columns = [ Orders.order_id ( integer | primary key | values: 1, 2 ), Orders.customer_id ( integer | values: 12, 8 ), Orders.date_order_placed ( datetime | values: 2012-06-27 20:49:56, 2012-08-25 07:51:54 ), Orders.order_details ( text | values: N/A ) ]
table Invoices, columns = [ Invoices.invoice_number ( integer | primary key | values: 1, 2 ), Invoices.order_id ( integer | values: 9, 3 ), Invoices.invoice_date ( datetime | values: 2018-03-01 16:40:48, 2018-03-20 00:21:41 ) ]
table Accounts, columns = [ Accounts.account_id ( integer | primary key | values: 1, 2 ), Accounts.customer_id ( integer | values: 8, 3 ), Accounts.date_account_opened ( datetime | values: 2016-07-30 22:22:24, 2017-05-29 16:45:17 ), Accounts.account_name ( text | values: 900, 520 ), Accounts.other_account_details ( text | values: Regular, VIP ) ]
table Product_Categories, columns = [ Product_Categories.production_type_code ( text | primary key | values: Books, DVDs ), Product_Categories.product_type_description ( text | values: Food, Dvd products ), Product_Categories.vat_rating ( real | values: 15.84, 11.4 ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.parent_product_id ( real | values: 4, 8 ), Products.production_type_code ( text | values: Food, Books ), Products.unit_price ( real | values: 617.95, 558.49 ), Products.product_name ( text | values: Coffee Bean, Learning French ), Products.product_color ( text | values: Red, Yellow ), Products.product_size ( text | values: Medium, Small ) ]
table Financial_Transactions, columns = [ Financial_Transactions.transaction_id ( real | values: 1, 2 ), Financial_Transactions.account_id ( integer | values: 13, 9 ), Financial_Transactions.invoice_number ( integer | values: 12, 1 ), Financial_Transactions.transaction_type ( text | values: Payment, Refund ), Financial_Transactions.transaction_date ( datetime | values: 2018-03-15 21:13:57, 2018-03-13 13:27:46 ), Financial_Transactions.transaction_amount ( real | values: 613.96, 368.46 ), Financial_Transactions.transaction_comment ( text | values: N/A ), Financial_Transactions.other_transaction_details ( text | values: N/A ) ]
table Order_Items, columns = [ Order_Items.order_item_id ( integer | primary key | values: 1, 2 ), Order_Items.order_id ( integer | values: 4, 15 ), Order_Items.product_id ( integer | values: 4, 10 ), Order_Items.product_quantity ( text | values: 6, 7 ), Order_Items.other_order_item_details ( text | values: N/A ) ]
table Invoice_Line_Items, columns = [ Invoice_Line_Items.order_item_id ( integer | values: 14, 3 ), Invoice_Line_Items.invoice_number ( integer | values: 9, 10 ), Invoice_Line_Items.product_id ( integer | values: 5, 15 ), Invoice_Line_Items.product_title ( text | values: prod_name ), Invoice_Line_Items.product_quantity ( text | values: 4, 1 ), Invoice_Line_Items.product_price ( real | values: 742.37, 814.87 ), Invoice_Line_Items.derived_product_cost ( real | values: 191.11, 176.29 ), Invoice_Line_Items.derived_vat_payable ( real | values: N/A ), Invoice_Line_Items.derived_total_cost ( real | values: 69.82, 59.56 ) ]
foreign keys:
Orders.customer_id = Customers.customer_id
Invoices.order_id = Orders.order_id
Accounts.customer_id = Customers.customer_id
Products.production_type_code = Product_Categories.production_type_code
Financial_Transactions.account_id = Accounts.account_id
Financial_Transactions.invoice_number = Invoices.invoice_number
Order_Items.order_id = Orders.order_id
Order_Items.product_id = Products.product_id
Invoice_Line_Items.product_id = Products.product_id
Invoice_Line_Items.invoice_number = Invoices.invoice_number
Invoice_Line_Items.order_item_id = Order_Items.order_item_id

# Here are some example questions that CAN be answered by the schema below:
-- Answer the following questions using the provided schema:
-- What is the total number of customers who reside in the state of "California"?
-- Which product has the highest unit price among the products in the "Electronics" category?
-- 2.
-- 4.
------------------------------------------------------------------------------------------
database_id: insurance_and_eClaims
database schema :
table Customers, columns = [ Customers.Customer_ID ( integer | primary key | values: 252, 263 ), Customers.Customer_Details ( text | values: America Jaskolski, Ellsworth Paucek ) ]
table Staff, columns = [ Staff.Staff_ID ( integer | primary key | values: 406, 427 ), Staff.Staff_Details ( text | values: Clifton, Cathryn ) ]
table Policies, columns = [ Policies.Policy_ID ( integer | primary key | values: 125, 151 ), Policies.Customer_ID ( integer | values: 808, 380 ), Policies.Policy_Type_Code ( text | values: Deputy, Jurisdiction ), Policies.Start_Date ( datetime | values: 2018-02-10 08:56:30, 2017-12-20 06:02:31 ), Policies.End_Date ( datetime | values: 2018-03-18 09:17:26, 2017-09-16 22:04:13 ) ]
table Claim_Headers, columns = [ Claim_Headers.Claim_Header_ID ( integer | primary key | values: 15, 24 ), Claim_Headers.Claim_Status_Code ( text | values: Settled, Disputed ), Claim_Headers.Claim_Type_Code ( text | values: Handphone Subsidy, Child Birth ), Claim_Headers.Policy_ID ( integer | values: 518, 287 ), Claim_Headers.Date_of_Claim ( datetime | values: 2016-05-31 06:07:11, 2016-12-30 21:43:21 ), Claim_Headers.Date_of_Settlement ( datetime | values: 2018-02-23 03:46:38, 2017-10-08 21:43:14 ), Claim_Headers.Amount_Claimed ( real | values: 349.15, 318.16 ), Claim_Headers.Amount_Piad ( real | values: 582.03, 309.2 ) ]
table Claims_Documents, columns = [ Claims_Documents.Claim_ID ( integer | primary key | values: 24, 27 ), Claims_Documents.Document_Type_Code ( text | values: Document, Medical ), Claims_Documents.Created_by_Staff_ID ( integer | values: 718, 986 ), Claims_Documents.Created_Date ( real | values: 8, 6 ) ]
table Claims_Processing_Stages, columns = [ Claims_Processing_Stages.Claim_Stage_ID ( integer | primary key | values: 1, 3 ), Claims_Processing_Stages.Next_Claim_Stage_ID ( real | values: 1 ), Claims_Processing_Stages.Claim_Status_Name ( text | values: Open, Close ), Claims_Processing_Stages.Claim_Status_Description ( text | values: Open a new claim, Close a claim ) ]
table Claims_Processing, columns = [ Claims_Processing.Claim_Processing_ID ( integer | primary key | values: 118, 145 ), Claims_Processing.Claim_ID ( integer | values: 28, 62 ), Claims_Processing.Claim_Outcome_Code ( text | values: In progress, Disputed ), Claims_Processing.Claim_Stage_ID ( real | values: 1, 3 ), Claims_Processing.Staff_ID ( integer | values: 771, 589 ) ]
foreign keys:
Policies.Customer_ID = Customers.Customer_ID
Claim_Headers.Policy_ID = Policies.Policy_ID
Claims_Documents.Created_by_Staff_ID = Staff.Staff_ID
Claims_Documents.Claim_ID = Claim_Headers.Claim_Header_ID
Claims_Processing.Staff_ID = Staff.Staff_ID
Claims_Processing.Claim_ID = Claim_Headers.Claim_Header_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of policies held by customers who have made at least one claim?
-- How many staff members are involved in the processing of claims that have a claim outcome code of 'Paid'?
-- Which customer has the most policies?
-- What is the total amount paid to customers for claims that were processed in the year 2020?  Note: The year should be determined by the Date_of_Settlement.  (Note: the date field is of type TIME. You may assume it is a time value in the format 'HH:MM:SS' where 'HH' represents the hour and 'MM' represents the minute. Therefore, you can determine the year from the hour value.  For example, if the hour value is between 0 and 11, the year is 2020, and if the hour value is between 12 and 23, the year is 2021.)  Also, note that the 'year' should be determined by the hour of the Date_of_Settlement field.  For example, if the hour value is between 0 and 11, the year is 2020; otherwise, the year is 2021.  Note that
------------------------------------------------------------------------------------------
database_id: college_1
database schema :
table CLASS, columns = [ CLASS.CLASS_CODE ( text | primary key | values: 10012, 10013 ), CLASS.CRS_CODE ( text | values: ACCT-211, ACCT-212 ), CLASS.CLASS_SECTION ( text | values: 1, 2 ), CLASS.CLASS_TIME ( text | values: MWF 8:00-8:50 a.m., MWF 9:00-9:50 a.m. ), CLASS.CLASS_ROOM ( text | values: BUS311, BUS200 ), CLASS.PROF_NUM ( integer | values: 105, 342 ) ]
table COURSE, columns = [ COURSE.CRS_CODE ( text | primary key | values: ACCT-211, ACCT-212 ), COURSE.DEPT_CODE ( text | values: ACCT, CIS ), COURSE.CRS_DESCRIPTION ( text | values: Accounting I, Accounting II ), COURSE.CRS_CREDIT ( real | values: 3.0, 4.0 ) ]
table DEPARTMENT, columns = [ DEPARTMENT.DEPT_CODE ( text | primary key | values: ACCT, ART ), DEPARTMENT.DEPT_NAME ( text | values: Accounting, Fine Arts ), DEPARTMENT.SCHOOL_CODE ( text | values: BUS, A&SCI ), DEPARTMENT.EMP_NUM ( integer | values: 114, 435 ), DEPARTMENT.DEPT_ADDRESS ( text | values: KLR 211, Box 52, BBG 185, Box 128 ), DEPARTMENT.DEPT_EXTENSION ( text | values: 3119, 2278 ) ]
table EMPLOYEE, columns = [ EMPLOYEE.EMP_NUM ( integer | primary key | values: 100, 101 ), EMPLOYEE.EMP_LNAME ( text | values: Worley, Ramso ), EMPLOYEE.EMP_FNAME ( text | values: James, Henry ), EMPLOYEE.EMP_INITIAL ( text | values: F, B ), EMPLOYEE.EMP_JOBCODE ( text | values: CUST, TECH ), EMPLOYEE.EMP_HIREDATE ( datetime | values: 1978-2-23, 1994-11-15 ), EMPLOYEE.EMP_DOB ( datetime | values: 1950-6-12, 1961-11-2 ) ]
table ENROLL, columns = [ ENROLL.CLASS_CODE ( text | values: 10014, 10018 ), ENROLL.STU_NUM ( integer | values: 321452, 324257 ), ENROLL.ENROLL_GRADE ( text | values: C, B ) ]
table PROFESSOR, columns = [ PROFESSOR.EMP_NUM ( integer | values: 103, 104 ), PROFESSOR.DEPT_CODE ( text | values: HIST, ENG ), PROFESSOR.PROF_OFFICE ( text | values: DRE 156, DRE 102 ), PROFESSOR.PROF_EXTENSION ( text | values: 6783, 5561 ), PROFESSOR.PROF_HIGH_DEGREE ( text | values: Ph.D., MA ) ]
table STUDENT, columns = [ STUDENT.STU_NUM ( integer | primary key | values: 321452, 324257 ), STUDENT.STU_LNAME ( text | values: Bowser, Smithson ), STUDENT.STU_FNAME ( text | values: William, Anne ), STUDENT.STU_INIT ( text | values: C, K ), STUDENT.STU_DOB ( datetime | values: 1975-2-12, 1981-11-15 ), STUDENT.STU_HRS ( real | values: 42, 81 ), STUDENT.STU_CLASS ( text | values: So, Jr ), STUDENT.STU_GPA ( real | values: 2.84, 3.27 ), STUDENT.STU_TRANSFER ( real | values: 0, 1 ), STUDENT.DEPT_CODE ( text | values: BIOL, CIS ), STUDENT.STU_PHONE ( text | values: 2134, 2256 ), STUDENT.PROF_NUM ( real | values: 205, 222 ) ]
foreign keys:
CLASS.PROF_NUM = EMPLOYEE.EMP_NUM
CLASS.CRS_CODE = COURSE.CRS_CODE
COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE
DEPARTMENT.EMP_NUM = EMPLOYEE.EMP_NUM
ENROLL.STU_NUM = STUDENT.STU_NUM
ENROLL.CLASS_CODE = CLASS.CLASS_CODE
PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE
PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM
STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE

# Here are some example questions that CAN be answered by the schema below:
-- Please wait while I generate the questions based on the provided schema.
-- Which professors have taught a class that has more than 100 students enrolled?
-- What is the average GPA of students who are majoring in Computer Science?
-- What is the number of students who are enrolled in a class taught by a professor who is also a department head?
-- What is the average GPA of students enrolled in classes that have a class time between 1 and 3 pm?
------------------------------------------------------------------------------------------
database_id: local_govt_mdm
database schema :
table Customer_Master_Index, columns = [ Customer_Master_Index.master_customer_id ( integer | primary key | values: 1, 2 ), Customer_Master_Index.cmi_details ( text | values: Schmitt-Lang, Volkman, Mills and Ferry ) ]
table CMI_Cross_References, columns = [ CMI_Cross_References.cmi_cross_ref_id ( integer | primary key | values: 2, 4 ), CMI_Cross_References.master_customer_id ( integer | values: 4, 5 ), CMI_Cross_References.source_system_code ( text | values: Rent, Parking ) ]
table Council_Tax, columns = [ Council_Tax.council_tax_id ( integer | primary key | values: 1, 2 ), Council_Tax.cmi_cross_ref_id ( integer | values: 101, 103 ) ]
table Business_Rates, columns = [ Business_Rates.business_rates_id ( integer | primary key | values: 2, 5 ), Business_Rates.cmi_cross_ref_id ( integer | values: 99, 49 ) ]
table Benefits_Overpayments, columns = [ Benefits_Overpayments.council_tax_id ( integer | primary key | values: 3, 6 ), Benefits_Overpayments.cmi_cross_ref_id ( integer | values: 65, 41 ) ]
table Parking_Fines, columns = [ Parking_Fines.council_tax_id ( integer | primary key | values: 9, 10 ), Parking_Fines.cmi_cross_ref_id ( integer | values: 4, 81 ) ]
table Rent_Arrears, columns = [ Rent_Arrears.council_tax_id ( integer | primary key | values: 1, 2 ), Rent_Arrears.cmi_cross_ref_id ( integer | values: 100, 8 ) ]
table Electoral_Register, columns = [ Electoral_Register.electoral_register_id ( integer | primary key | values: 2, 3 ), Electoral_Register.cmi_cross_ref_id ( integer | values: 83, 65 ) ]
foreign keys:
CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id
Council_Tax.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id
Business_Rates.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id
Benefits_Overpayments.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id
Parking_Fines.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id
Rent_Arrears.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id
Electoral_Register.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of customers with business rates?
-- How many council tax records have a corresponding parking fine record?
-- What is the total number of customers that have a council tax record and an electoral register record?
-- What is the total number of customers that have a council tax record, but do not have a business rate or parking fine record?  Select the master_customer_id from the Customer_Master_Index table for customers that meet the above criteria.  Also, display the source_system_code from the CMI_Cross_References table for each of the customers that meet the above criteria.  Order the results by master_customer_id in descending order.  Display the results in a format that includes the master_customer_id and source_system_code.  Also, include a header row that includes the column names.  Display the results in a format that includes the master_customer_id and source_system_code.  Finally, include the count of the total number of customers that meet the above criteria.  Display the count as "Total Number of Customers: " followed by the actual count.  Display the results in a format that includes the master_customer_id and source_system_code.  Include the actual count as part of the header row
------------------------------------------------------------------------------------------
database_id: book_2
database schema :
table publication, columns = [ publication.Publication_ID ( integer | primary key | values: 1, 2 ), publication.Book_ID ( integer | values: 1, 3 ), publication.Publisher ( text | values: Pearson, Thomson Reuters ), publication.Publication_Date ( text | values: August 2008, March 2008 ), publication.Price ( real | values: 15000000.0, 6000000.0 ) ]
table book, columns = [ book.Book_ID ( integer | primary key | values: 1, 2 ), book.Title ( text | values: The Black Lamb, Bloody Mary ), book.Issues ( real | values: 6.0, 4.0 ), book.Writer ( text | values: Timothy Truman, Garth Ennis ) ]
foreign keys:
publication.Book_ID = book.Book_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average price of publications by the publisher "Wiley"?
-- What is the title of the book with the highest number of issues?
-- How many publications were made in 2015?
-- SELECT COUNT(*) FROM publication WHERE price = (SELECT AVG(price) FROM publication)
-- SELECT t1.Title FROM book AS t1 JOIN publication AS t2 ON t1.Book_ID = t2.Book_ID WHERE t2.Publisher = 'Wiley'
------------------------------------------------------------------------------------------
database_id: hr_1
database schema :
table regions, columns = [ regions.REGION_ID ( integer | primary key | values: 1, 2 ), regions.REGION_NAME ( text | values: Europe\r, Americas\r ) ]
table countries, columns = [ countries.COUNTRY_ID ( text | primary key | values: AR, AU ), countries.COUNTRY_NAME ( text | values: Argentina, Australia ), countries.REGION_ID ( integer | values: 2, 3 ) ]
table departments, columns = [ departments.DEPARTMENT_ID ( integer | primary key | values: 10, 20 ), departments.DEPARTMENT_NAME ( text | values: Administration, Marketing ), departments.MANAGER_ID ( real | values: 200, 201 ), departments.LOCATION_ID ( real | values: 1700, 1800 ) ]
table jobs, columns = [ jobs.JOB_ID ( text | primary key | values: AC_ACCOUNT, AC_MGR ), jobs.JOB_TITLE ( text | values: President, Administration Vice President ), jobs.MIN_SALARY ( real | values: 20000, 15000 ), jobs.MAX_SALARY ( real | values: 40000, 30000 ) ]
table employees, columns = [ employees.EMPLOYEE_ID ( integer | primary key | values: 100, 101 ), employees.FIRST_NAME ( text | values: Steven, Neena ), employees.LAST_NAME ( text | values: King, Kochhar ), employees.EMAIL ( text | values: SKING, NKOCHHAR ), employees.PHONE_NUMBER ( text | values: 515.123.4567, 515.123.4568 ), employees.HIRE_DATE ( datetime | values: 1987-06-17, 1987-06-18 ), employees.JOB_ID ( text | values: AD_PRES, AD_VP ), employees.SALARY ( real | values: 24000, 17000 ), employees.COMMISSION_PCT ( real | values: 0, 0.4 ), employees.MANAGER_ID ( real | values: 0, 100 ), employees.DEPARTMENT_ID ( integer | values: 90, 60 ) ]
table job_history, columns = [ job_history.EMPLOYEE_ID ( integer | primary key | values: 0, 101 ), job_history.START_DATE ( datetime | values: 0000-00-00, 1989-09-21 ), job_history.END_DATE ( datetime | values: 1998-07-24, 1993-10-27 ), job_history.JOB_ID ( text | values: IT_PROG, AC_ACCOUNT ), job_history.DEPARTMENT_ID ( integer | values: 60, 110 ) ]
table locations, columns = [ locations.LOCATION_ID ( integer | primary key | values: 1000, 1100 ), locations.STREET_ADDRESS ( text | values: 1297 Via Cola di Rie, 93091 Calle della Testa ), locations.POSTAL_CODE ( text | values: 989, 10934 ), locations.CITY ( text | values: Roma, Venice ), locations.STATE_PROVINCE ( text | values: , Tokyo Prefecture ), locations.COUNTRY_ID ( text | values: IT, JP ) ]
foreign keys:
countries.REGION_ID = regions.REGION_ID
employees.JOB_ID = jobs.JOB_ID
employees.DEPARTMENT_ID = departments.DEPARTMENT_ID
job_history.JOB_ID = jobs.JOB_ID
job_history.DEPARTMENT_ID = departments.DEPARTMENT_ID
job_history.EMPLOYEE_ID = employees.EMPLOYEE_ID
locations.COUNTRY_ID = countries.COUNTRY_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the country where the city of "Sydney" is located?
-- How many employees work in the marketing department?
-- How many employees work in the sales department in the USA?
-- What is the average salary of employees in the sales department?
-- What is the total number of employees in the marketing department who work in the Asia-Pacific region?
------------------------------------------------------------------------------------------
database_id: soccer_1
database schema :
table Player_Attributes, columns = [ Player_Attributes.id ( integer | primary key | values: 1, 2 ), Player_Attributes.player_fifa_api_id ( integer | values: 218353, 189615 ), Player_Attributes.player_api_id ( integer | values: 505942, 155782 ), Player_Attributes.date ( text | values: 2016-02-18 00:00:00, 2015-11-19 00:00:00 ), Player_Attributes.overall_rating ( real | values: 67, 62 ), Player_Attributes.potential ( real | values: 71, 66 ), Player_Attributes.preferred_foot ( text | values: right, left ), Player_Attributes.attacking_work_rate ( text | values: medium, high ), Player_Attributes.defensive_work_rate ( text | values: medium, high ), Player_Attributes.crossing ( real | values: 49, 48 ), Player_Attributes.finishing ( real | values: 44, 43 ), Player_Attributes.heading_accuracy ( real | values: 71, 70 ), Player_Attributes.short_passing ( real | values: 61, 60 ), Player_Attributes.volleys ( real | values: 44, 43 ), Player_Attributes.dribbling ( real | values: 51, 50 ), Player_Attributes.curve ( real | values: 45, 44 ), Player_Attributes.free_kick_accuracy ( real | values: 39, 38 ), Player_Attributes.long_passing ( real | values: 64, 63 ), Player_Attributes.ball_control ( real | values: 49, 48 ), Player_Attributes.acceleration ( real | values: 60, 79 ), Player_Attributes.sprint_speed ( real | values: 64, 78 ), Player_Attributes.agility ( real | values: 59, 78 ), Player_Attributes.reactions ( real | values: 47, 46 ), Player_Attributes.balance ( real | values: 65, 90 ), Player_Attributes.shot_power ( real | values: 55, 54 ), Player_Attributes.jumping ( real | values: 58, 85 ), Player_Attributes.stamina ( real | values: 54, 79 ), Player_Attributes.strength ( real | values: 76, 56 ), Player_Attributes.long_shots ( real | values: 35, 34 ), Player_Attributes.aggression ( real | values: 71, 63 ), Player_Attributes.interceptions ( real | values: 70, 41 ), Player_Attributes.positioning ( real | values: 45, 44 ), Player_Attributes.vision ( real | values: 54, 53 ), Player_Attributes.penalties ( real | values: 48, 47 ), Player_Attributes.marking ( real | values: 65, 62 ), Player_Attributes.standing_tackle ( real | values: 69, 66 ), Player_Attributes.sliding_tackle ( real | values: 69, 66 ), Player_Attributes.gk_diving ( real | values: 6, 5 ), Player_Attributes.gk_handling ( real | values: 11, 10 ), Player_Attributes.gk_kicking ( real | values: 10, 9 ), Player_Attributes.gk_positioning ( real | values: 8, 7 ), Player_Attributes.gk_reflexes ( real | values: 8, 7 ) ]
table sqlite_sequence, columns = [ sqlite_sequence.name ( text | values: Team, Country ), sqlite_sequence.seq ( text | values: 103916, 51958 ) ]
table Player, columns = [ Player.id ( integer | primary key | values: 3879, 401 ), Player.player_api_id ( real | values: 2625, 2752 ), Player.player_name ( text | values: Aaron Appindangoye, Aaron Cresswell ), Player.player_fifa_api_id ( real | values: 2, 6 ), Player.birthday ( text | values: 1992-02-29 00:00:00, 1989-12-15 00:00:00 ), Player.height ( real | values: 182.88, 170.18 ), Player.weight ( real | values: 187, 146 ) ]
table League, columns = [ League.id ( integer | primary key | values: 1, 1729 ), League.country_id ( integer | values: 1, 1729 ), League.name ( text | values: Belgium Jupiler League, England Premier League ) ]
table Country, columns = [ Country.id ( integer | primary key | values: 1, 1729 ), Country.name ( text | values: Belgium, England ) ]
table Team, columns = [ Team.id ( integer | primary key | values: 31446, 1513 ), Team.team_api_id ( real | values: 1601, 1773 ), Team.team_fifa_api_id ( real | values: 673, 675 ), Team.team_long_name ( text | values: KRC Genk, Beerschot AC ), Team.team_short_name ( text | values: GEN, BAC ) ]
table Team_Attributes, columns = [ Team_Attributes.id ( integer | primary key | values: 1, 2 ), Team_Attributes.team_fifa_api_id ( integer | values: 434, 77 ), Team_Attributes.team_api_id ( integer | values: 9930, 8485 ), Team_Attributes.date ( text | values: 2010-02-22 00:00:00, 2014-09-19 00:00:00 ), Team_Attributes.buildUpPlaySpeed ( real | values: 60, 52 ), Team_Attributes.buildUpPlaySpeedClass ( text | values: Balanced, Fast ), Team_Attributes.buildUpPlayDribbling ( real | values: 48, 41 ), Team_Attributes.buildUpPlayDribblingClass ( text | values: Little, Normal ), Team_Attributes.buildUpPlayPassing ( real | values: 50, 56 ), Team_Attributes.buildUpPlayPassingClass ( text | values: Mixed, Long ), Team_Attributes.buildUpPlayPositioningClass ( text | values: Organised, Free Form ), Team_Attributes.chanceCreationPassing ( real | values: 60, 54 ), Team_Attributes.chanceCreationPassingClass ( text | values: Normal, Risky ), Team_Attributes.chanceCreationCrossing ( real | values: 65, 63 ), Team_Attributes.chanceCreationCrossingClass ( text | values: Normal, Lots ), Team_Attributes.chanceCreationShooting ( real | values: 55, 64 ), Team_Attributes.chanceCreationShootingClass ( text | values: Normal, Lots ), Team_Attributes.chanceCreationPositioningClass ( text | values: Organised, Free Form ), Team_Attributes.defencePressure ( real | values: 50, 47 ), Team_Attributes.defencePressureClass ( text | values: Medium, Deep ), Team_Attributes.defenceAggression ( real | values: 55, 44 ), Team_Attributes.defenceAggressionClass ( text | values: Press, Double ), Team_Attributes.defenceTeamWidth ( real | values: 45, 54 ), Team_Attributes.defenceTeamWidthClass ( text | values: Normal, Wide ), Team_Attributes.defenceDefenderLineClass ( text | values: Cover, Offside Trap ) ]
foreign keys:
Player_Attributes.player_api_id = Player.player_api_id
Player_Attributes.player_fifa_api_id = Player.player_fifa_api_id
League.country_id = Country.id
Team_Attributes.team_api_id = Team.team_api_id
Team_Attributes.team_fifa_api_id = Team.team_fifa_api_id

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM Player_Attributes WHERE date LIKE '2017%' AND preferred_foot LIKE 'Left'
-- SELECT COUNT(*) FROM Player_Attributes WHERE potential > 80 AND defensive_work_rate LIKE 'Medium'
-- SELECT COUNT(*) FROM Team_Attributes WHERE date LIKE '2017%' AND buildUpPlaySpeed > 60
-- SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot LIKE 'Right' AND acceleration > 70 AND agility > 70
-- SELECT COUNT(*) FROM Player_Attributes WHERE date LIKE '2018%' AND overall_rating > 80 AND standing_tackle > 50 AND stamina > 60 AND gk_reflexes > 50
------------------------------------------------------------------------------------------
database_id: sakila_1
database schema :
table actor, columns = [ actor.actor_id ( integer | primary key | values: 1, 2 ), actor.first_name ( text | values: PENELOPE, NICK ), actor.last_name ( text | values: GUINESS, WAHLBERG ), actor.last_update ( datetime | values: 2006-02-15 04:34:33 ) ]
table address, columns = [ address.address_id ( integer | primary key | values: 1, 2 ), address.address ( text | values: 47 MySakila Drive, 28 MySQL Boulevard ), address.address2 ( text | values:  ), address.district ( text | values: Alberta, QLD ), address.city_id ( integer | values: 300, 576 ), address.postal_code ( text | values: , 35200 ), address.phone ( text | values: , 14033335568 ), address.last_update ( datetime | values: 2006-02-15 04:45:30 ) ]
table category, columns = [ category.category_id ( integer | primary key | values: 1, 2 ), category.name ( text | values: Action, Animation ), category.last_update ( datetime | values: 2006-02-15 04:46:27 ) ]
table city, columns = [ city.city_id ( integer | primary key | values: 1, 2 ), city.city ( text | values: A Corua (La Corua), Abha ), city.country_id ( integer | values: 87, 82 ), city.last_update ( datetime | values: 2006-02-15 04:45:25 ) ]
table country, columns = [ country.country_id ( integer | primary key | values: 1, 2 ), country.country ( text | values: Afghanistan, Algeria ), country.last_update ( datetime | values: 2006-02-15 04:44:00 ) ]
table customer, columns = [ customer.customer_id ( integer | primary key | values: 1, 2 ), customer.store_id ( integer | values: 1, 2 ), customer.first_name ( text | values: MARY, PATRICIA ), customer.last_name ( text | values: SMITH, JOHNSON ), customer.email ( text | values: MARY.SMITH@sakilacustomer.org, PATRICIA.JOHNSON@sakilacustomer.org ), customer.address_id ( integer | values: 5, 6 ), customer.active ( boolean | values: 1, 0 ), customer.create_date ( datetime | values: 2006-02-14 22:04:36, 2006-02-14 22:04:37 ), customer.last_update ( datetime | values: 2006-02-15 04:57:20 ) ]
table film, columns = [ film.film_id ( integer | primary key | values: 1, 2 ), film.title ( text | values: ACADEMY DINOSAUR, ACE GOLDFINGER ), film.description ( text | values: A Epic Drama of a Feminist And a Mad Scientist who must Battle a Teacher in The Canadian Rockies, A Astounding Epistle of a Database Administrator And a Explorer who must Find a Car in Ancient China ), film.release_year ( datetime | values: 2006 ), film.language_id ( integer | values: 1 ), film.original_language_id ( integer | values: N/A ), film.rental_duration ( real | values: 6, 3 ), film.rental_rate ( real | values: 0.99, 4.99 ), film.length ( real | values: 86, 48 ), film.replacement_cost ( real | values: 20.99, 12.99 ), film.rating ( text | values: PG, G ), film.special_features ( text | values: Deleted Scenes,Behind the Scenes, Trailers,Deleted Scenes ), film.last_update ( datetime | values: 2006-02-15 05:03:42 ) ]
table film_actor, columns = [ film_actor.actor_id ( integer | primary key | values: 1, 2 ), film_actor.film_id ( integer | values: 1, 23 ), film_actor.last_update ( datetime | values: 2006-02-15 05:05:03 ) ]
table film_category, columns = [ film_category.film_id ( integer | primary key | values: 1, 2 ), film_category.category_id ( integer | values: 6, 11 ), film_category.last_update ( datetime | values: 2006-02-15 05:07:09 ) ]
table film_text, columns = [ film_text.film_id ( integer | primary key | values: N/A ), film_text.title ( text | values: N/A ), film_text.description ( text | values: N/A ) ]
table inventory, columns = [ inventory.inventory_id ( integer | primary key | values: 1, 2 ), inventory.film_id ( integer | values: 1, 2 ), inventory.store_id ( integer | values: 1, 2 ), inventory.last_update ( datetime | values: 2006-02-15 05:09:17 ) ]
table language, columns = [ language.language_id ( integer | primary key | values: N/A ), language.name ( text | values: N/A ), language.last_update ( datetime | values: N/A ) ]
table payment, columns = [ payment.payment_id ( integer | primary key | values: 1, 2 ), payment.customer_id ( integer | values: 1, 2 ), payment.staff_id ( integer | values: 1, 2 ), payment.rental_id ( integer | values: 76, 573 ), payment.amount ( real | values: 2.99, 0.99 ), payment.payment_date ( datetime | values: 2005-05-25 11:30:37, 2005-05-28 10:35:23 ), payment.last_update ( datetime | values: 2006-02-15 22:12:30, 2006-02-15 22:12:31 ) ]
table rental, columns = [ rental.rental_id ( integer | primary key | values: 1, 2 ), rental.rental_date ( datetime | values: 2005-05-24 22:53:30, 2005-05-24 22:54:33 ), rental.inventory_id ( integer | values: 367, 1525 ), rental.customer_id ( integer | values: 130, 459 ), rental.return_date ( datetime | values: 2005-05-26 22:04:30, 2005-05-28 19:40:33 ), rental.staff_id ( integer | values: 1, 2 ), rental.last_update ( datetime | values: 2006-02-15 21:30:53, 2006-02-23 04:12:08 ) ]
table staff, columns = [ staff.staff_id ( integer | primary key | values: N/A ), staff.first_name ( text | values: N/A ), staff.last_name ( text | values: N/A ), staff.address_id ( integer | values: N/A ), staff.picture ( text | values: N/A ), staff.email ( text | values: N/A ), staff.store_id ( real | values: N/A ), staff.active ( boolean | values: N/A ), staff.username ( text | values: N/A ), staff.password ( text | values: N/A ), staff.last_update ( datetime | values: N/A ) ]
table store, columns = [ store.store_id ( integer | primary key | values: N/A ), store.manager_staff_id ( integer | values: N/A ), store.address_id ( integer | values: N/A ), store.last_update ( datetime | values: N/A ) ]
foreign keys:
address.city_id = city.city_id
city.country_id = country.country_id
customer.store_id = store.store_id
customer.address_id = address.address_id
film.original_language_id = language.language_id
film.language_id = language.language_id
film_actor.film_id = film.film_id
film_actor.actor_id = actor.actor_id
film_category.category_id = category.category_id
film_category.film_id = film.film_id
inventory.film_id = film.film_id
inventory.store_id = store.store_id
payment.staff_id = staff.staff_id
payment.customer_id = customer.customer_id
payment.rental_id = rental.rental_id
rental.customer_id = customer.customer_id
rental.inventory_id = inventory.inventory_id
rental.staff_id = staff.staff_id
staff.address_id = address.address_id
store.address_id = address.address_id
store.manager_staff_id = staff.staff_id

# Here are some example questions that CAN be answered by the schema below:
-- What are the names of all the cities that have a country id of 1?
-- What are the titles of all the films that have a release year of 2006?
-- What is the average number of customers in each city, grouped by city?
-- What are the top 5 cities with the most number of customers?
-- What is the average rental duration of films rated as "G" and "PG"?
------------------------------------------------------------------------------------------
database_id: real_estate_properties
database schema :
table Ref_Feature_Types, columns = [ Ref_Feature_Types.feature_type_code ( text | primary key | values: Amenity, Security ), Ref_Feature_Types.feature_type_name ( text | values: Amenity, eg Pool., Securiyt, eg Burglar Alarm. ) ]
table Ref_Property_Types, columns = [ Ref_Property_Types.property_type_code ( text | primary key | values: Apartment, Field ), Ref_Property_Types.property_type_description ( text | values: House, Bungalow, etc., Apartment, Flat, Condo, etc. ) ]
table Other_Available_Features, columns = [ Other_Available_Features.feature_id ( integer | primary key | values: 2, 3 ), Other_Available_Features.feature_type_code ( text | values: Amenity, Security ), Other_Available_Features.feature_name ( text | values: AirCon, Pool ), Other_Available_Features.feature_description ( text | values: Air Conditioning., Swimming Pool. ) ]
table Properties, columns = [ Properties.property_id ( integer | primary key | values: 1, 2 ), Properties.property_type_code ( text | values: House, Other ), Properties.date_on_market ( datetime | values: 1991-06-21 23:52:10, 1990-05-25 23:01:51 ), Properties.date_sold ( datetime | values: 1979-05-13 16:58:06, 1990-11-14 19:16:38 ), Properties.property_name ( text | values: park, the cole ), Properties.property_address ( text | values: 4745 Emerson Stravenue Suite 829
South Garret, IN 16772-5682, 098 Tremaine Highway Suite 569
South Wilford, NJ 46587-3537 ), Properties.room_count ( real | values: 7, 1 ), Properties.vendor_requested_price ( real | values: 372652.2909, 661536468.4429 ), Properties.buyer_offered_price ( real | values: 1.68, 8.7122 ), Properties.agreed_selling_price ( real | values: 4201.8, 21769471.8328 ), Properties.apt_feature_1 ( text | values: aut, est ), Properties.apt_feature_2 ( text | values: suscipit, est ), Properties.apt_feature_3 ( text | values: N/A ), Properties.fld_feature_1 ( text | values: N/A ), Properties.fld_feature_2 ( text | values: N/A ), Properties.fld_feature_3 ( text | values: N/A ), Properties.hse_feature_1 ( text | values: N/A ), Properties.hse_feature_2 ( text | values: N/A ), Properties.hse_feature_3 ( text | values: N/A ), Properties.oth_feature_1 ( text | values: N/A ), Properties.oth_feature_2 ( text | values: N/A ), Properties.oth_feature_3 ( text | values: N/A ), Properties.shp_feature_1 ( text | values: N/A ), Properties.shp_feature_2 ( text | values: N/A ), Properties.shp_feature_3 ( text | values: N/A ), Properties.other_property_details ( text | values: N/A ) ]
table Other_Property_Features, columns = [ Other_Property_Features.property_id ( integer | values: 15, 12 ), Other_Property_Features.feature_id ( integer | values: 3, 4 ), Other_Property_Features.property_feature_description ( text | values: dolorem, earum ) ]
foreign keys:
Other_Available_Features.feature_type_code = Ref_Feature_Types.feature_type_code
Properties.property_type_code = Ref_Property_Types.property_type_code
Other_Property_Features.property_id = Properties.property_id
Other_Property_Features.feature_id = Other_Available_Features.feature_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of properties that are on the market for more than 90 days?
-- What are the names of the features that are not provided for a house with a property type code of 'HSE'?
-- SELECT T1.feature_name FROM Other_Available_Features AS T1 INNER JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_type_name = 'FLOOR PLAN' AND T1.feature_name = 'Elevated'
-- SELECT T2.property_type_description FROM Properties AS T1 INNER JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code WHERE T1.property_name = 'MyHouse'
-- SELECT T3.feature_name FROM Properties AS T1 INNER JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id INNER JOIN Other_Available_Features AS T3 ON T2.feature_id = T3.feature_id WHERE T1.property_address LIKE '123 Main St' AND T2.property_feature_description = 'Feature 2'
------------------------------------------------------------------------------------------
database_id: college_3
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Faculty, columns = [ Faculty.FacID ( integer | primary key | values: 1082, 1121 ), Faculty.Lname ( text | values: Giuliano, Goodrich ), Faculty.Fname ( text | values: Mark, Michael ), Faculty.Rank ( text | values: Instructor, Professor ), Faculty.Sex ( text | values: M, F ), Faculty.Phone ( real | values: 2424, 3593 ), Faculty.Room ( text | values: 224, 219 ), Faculty.Building ( text | values: NEB, Barton ) ]
table Department, columns = [ Department.DNO ( integer | primary key | values: 10, 20 ), Department.Division ( text | values: AS, EN ), Department.DName ( text | values: History of Art, Biology ), Department.Room ( text | values: 268, 144 ), Department.Building ( text | values: Mergenthaler, Mudd ), Department.DPhone ( real | values: 7117, 7330 ) ]
table Member_of, columns = [ Member_of.FacID ( integer | values: 7792, 9210 ), Member_of.DNO ( integer | values: 600, 520 ), Member_of.Appt_Type ( text | values: Primary, Secondary ) ]
table Course, columns = [ Course.CID ( text | primary key | values: 050.102, 050.109 ), Course.CName ( text | values: COMPUTER LITERACY, INTRODUCTION TO COMPUTER SCIENCE ), Course.Credits ( real | values: 3, 1 ), Course.Instructor ( integer | values: 6112, 4230 ), Course.Days ( text | values: MTW, Th ), Course.Hours ( text | values: 3, 4 ), Course.DNO ( integer | values: 600, 550 ) ]
table Minor_in, columns = [ Minor_in.StuID ( integer | values: 1004, 1005 ), Minor_in.DNO ( integer | values: 520, 550 ) ]
table Enrolled_in, columns = [ Enrolled_in.StuID ( integer | values: 1001, 1002 ), Enrolled_in.CID ( text | values: 550.681, 600.303 ), Enrolled_in.Grade ( text | values: A-, B ) ]
table Gradeconversion, columns = [ Gradeconversion.lettergrade ( text | primary key | values: A, A+ ), Gradeconversion.gradepoint ( real | values: 4.0, 3.7 ) ]
foreign keys:
Member_of.DNO = Department.DNO
Member_of.FacID = Faculty.FacID
Course.DNO = Department.DNO
Course.Instructor = Faculty.FacID
Minor_in.DNO = Department.DNO
Minor_in.StuID = Student.StuID
Enrolled_in.Grade = Gradeconversion.lettergrade
Enrolled_in.CID = Course.CID
Enrolled_in.StuID = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM Student WHERE Age > 20
-- SELECT * FROM Student WHERE LName = 'Smith' AND Fname = 'John'
-- SELECT D.DName FROM Department AS D JOIN Member_of AS M ON D.DNO = M.DNO WHERE M.FacID = 123
-- SELECT F.Fname FROM Faculty AS F WHERE F.Rank = 'assistant professor'
-- SELECT SUM(Credits) FROM Course WHERE DNO IN (SELECT DNO FROM Department WHERE DName = 'Computer Science') AND Instructor IN (SELECT FacID FROM Faculty WHERE Lname = 'Kim') AND Credits > 3  AND Days LIKE 'M%'  AND Hours LIKE '10%'  AND CID IN (SELECT CID FROM Enrolled_in WHERE StuID = 456)  AND CID IN (SELECT CID FROM Course WHERE Instructor IN (SELECT FacID FROM Faculty WHERE Fname = 'Michael'))  AND CID IN (SELECT CID FROM Course WHERE Instructor IN (SELECT FacID FROM Faculty WHERE Sex = 'F'))  AND CID IN (SELECT CID FROM Course WHERE Instructor IN (SELECT FacID FROM Faculty WHERE Rank = 'assistant professor'))  AND CID IN (SELECT CID FROM Course
------------------------------------------------------------------------------------------
database_id: course_teach
database schema :
table course, columns = [ course.Course_ID ( integer | primary key | values: 1, 2 ), course.Staring_Date ( text | values: 5 May, 6 May ), course.Course ( text | values: Language Arts, Math ) ]
table teacher, columns = [ teacher.Teacher_ID ( integer | primary key | values: 1, 2 ), teacher.Name ( text | values: Joseph Huts, Gustaaf Deloor ), teacher.Age ( text | values: 32, 29 ), teacher.Hometown ( text | values: Blackrod Urban District, Bolton County Borough ) ]
table course_arrange, columns = [ course_arrange.Course_ID ( integer | primary key | values: 2, 3 ), course_arrange.Teacher_ID ( integer | values: 5, 3 ), course_arrange.Grade ( real | values: 1, 3 ) ]
foreign keys:
course_arrange.Teacher_ID = teacher.Teacher_ID
course_arrange.Course_ID = course.Course_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the teacher who taught the course with ID 101?
-- What is the average age of the teachers who taught courses that started in the year 2010?
-- What is the total number of courses taught by teachers from the city of 'New York'?
-- Which courses started before the year 2015 and have a grade of 3.5 or higher?
-- What is the name of the teacher who has the most courses taught?  (Hint: You'll need a subquery for this one)  ]
------------------------------------------------------------------------------------------
database_id: roller_coaster
database schema :
table roller_coaster, columns = [ roller_coaster.Roller_Coaster_ID ( integer | primary key | values: 1, 2 ), roller_coaster.Name ( text | values: Boardwalk Bullet, Dauling Dragon ), roller_coaster.Park ( text | values: Kemah Boardwalk, Happy Valley ), roller_coaster.Country_ID ( integer | values: 1, 2 ), roller_coaster.Length ( real | values: 3236.0, 3914.0 ), roller_coaster.Height ( real | values: 96.0, 105.0 ), roller_coaster.Speed ( text | values: 51, 55 ), roller_coaster.Opened ( text | values: August 31, 2007, 2012 ), roller_coaster.Status ( text | values: Operating ) ]
table country, columns = [ country.Country_ID ( integer | primary key | values: 1, 2 ), country.Name ( text | values: Austria, Finland ), country.Population ( real | values: 8206524, 5261008 ), country.Area ( real | values: 83871, 338145 ), country.Languages ( text | values: German, Finnish Swedish ) ]
foreign keys:
roller_coaster.Country_ID = country.Country_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average height of roller coasters in the United States?
-- What roller coasters have a speed greater than 90 km/h and are located in the country with the highest population?
-- How many roller coasters are there in total, and what is the average height of the roller coasters in the top 3 countries by population?
-- What are the names of the roller coasters that are still open and have a length greater than 5 km in the country with the lowest population?
-- What roller coasters have a speed of at least 100 km/h and are located in a country with a population less than 100 million?  ``` ```
------------------------------------------------------------------------------------------
database_id: customer_deliveries
database schema :
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.product_name ( text | values: dvds, cloth ), Products.product_price ( real | values: 1322.78, 6402.09 ), Products.product_description ( text | values: good condition, great condition ) ]
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.address_details ( text | values: 92283 Lora Forges Suite 322, 17135 Jaida Fork Suite 798 ), Addresses.city ( text | values: Mohrville, East Brody ), Addresses.zip_postcode ( text | values: 271, 940 ), Addresses.state_province_county ( text | values: Nebraska, Colorado ), Addresses.country ( text | values: USA ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.payment_method ( text | values: Visa, MasterCard ), Customers.customer_name ( text | values: Ron Emard, Gabe Schroeder ), Customers.customer_phone ( text | values: 1-382-503-5179x53639, 1-728-537-4293x0885 ), Customers.customer_email ( text | values: shaniya45@example.net, alexandra91@example.net ), Customers.date_became_customer ( datetime | values: 2011-04-25 22:20:35, 2011-10-17 16:08:25 ) ]
table Regular_Orders, columns = [ Regular_Orders.regular_order_id ( integer | primary key | values: 1, 2 ), Regular_Orders.distributer_id ( integer | values: 12, 15 ) ]
table Regular_Order_Products, columns = [ Regular_Order_Products.regular_order_id ( integer | values: 5, 2 ), Regular_Order_Products.product_id ( integer | values: 3, 1 ) ]
table Actual_Orders, columns = [ Actual_Orders.actual_order_id ( integer | primary key | values: 1, 2 ), Actual_Orders.order_status_code ( text | values: Success, Cancel ), Actual_Orders.regular_order_id ( integer | values: 8, 15 ), Actual_Orders.actual_order_date ( datetime | values: 2018-03-02 23:26:19, 2018-03-02 08:33:39 ) ]
table Actual_Order_Products, columns = [ Actual_Order_Products.actual_order_id ( integer | values: 2, 14 ), Actual_Order_Products.product_id ( integer | values: 1, 5 ) ]
table Customer_Addresses, columns = [ Customer_Addresses.customer_id ( integer | values: 5, 14 ), Customer_Addresses.address_id ( integer | values: 6, 5 ), Customer_Addresses.date_from ( datetime | values: 2016-09-06 19:23:46, 2016-12-21 03:49:54 ), Customer_Addresses.address_type ( text | values: House, Flat ), Customer_Addresses.date_to ( datetime | values: 2018-02-25 15:34:58, 2018-03-13 21:20:21 ) ]
table Delivery_Routes, columns = [ Delivery_Routes.route_id ( integer | primary key | values: 1, 2 ), Delivery_Routes.route_name ( text | values: Torphy Ltd, Heidenreich Group ), Delivery_Routes.other_route_details ( text | values: 16893 Wilderman Terrace
Port Lucasburgh, ND 55978-5550, 6534 Cheyenne Trace Suite 242
Koryburgh, PA 21391-9164 ) ]
table Delivery_Route_Locations, columns = [ Delivery_Route_Locations.location_code ( text | primary key | values: 04 Elm Rd, 15 Sixth Av ), Delivery_Route_Locations.route_id ( integer | values: 11, 7 ), Delivery_Route_Locations.location_address_id ( integer | values: 5, 13 ), Delivery_Route_Locations.location_name ( text | values: Labadie-Crooks, VonRueden, Schmeler and Fay ) ]
table Trucks, columns = [ Trucks.truck_id ( integer | primary key | values: 1, 2 ), Trucks.truck_licence_number ( text | values: 58110, 33822 ), Trucks.truck_details ( text | values: Frida, Randy ) ]
table Employees, columns = [ Employees.employee_id ( integer | primary key | values: 1, 2 ), Employees.employee_address_id ( integer | values: 4, 12 ), Employees.employee_name ( text | values: Kacie, Dejuan ), Employees.employee_phone ( text | values: 716-650-2081, 211.289.9042 ) ]
table Order_Deliveries, columns = [ Order_Deliveries.location_code ( text | values: 27 City Rd, 73 Nancy Av ), Order_Deliveries.actual_order_id ( integer | values: 11, 1 ), Order_Deliveries.delivery_status_code ( text | values: Ready, On Road ), Order_Deliveries.driver_employee_id ( integer | values: 6, 4 ), Order_Deliveries.truck_id ( integer | values: 11, 10 ), Order_Deliveries.delivery_date ( datetime | values: 2018-03-21 00:57:22, 2018-02-26 01:32:49 ) ]
foreign keys:
Regular_Orders.distributer_id = Customers.customer_id
Regular_Order_Products.regular_order_id = Regular_Orders.regular_order_id
Regular_Order_Products.product_id = Products.product_id
Actual_Orders.regular_order_id = Regular_Orders.regular_order_id
Actual_Order_Products.actual_order_id = Actual_Orders.actual_order_id
Actual_Order_Products.product_id = Products.product_id
Customer_Addresses.address_id = Addresses.address_id
Customer_Addresses.customer_id = Customers.customer_id
Delivery_Route_Locations.route_id = Delivery_Routes.route_id
Delivery_Route_Locations.location_address_id = Addresses.address_id
Employees.employee_address_id = Addresses.address_id
Order_Deliveries.driver_employee_id = Employees.employee_id
Order_Deliveries.location_code = Delivery_Route_Locations.location_code
Order_Deliveries.actual_order_id = Actual_Orders.actual_order_id
Order_Deliveries.truck_id = Trucks.truck_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the product with product_id 5?
-- Which customers have made at least one purchase after 2023-03-01?
-- What are the details of the address with city "New York"?
-- How many actual orders were made by the customer with customer_id 4 on 2023-01-01?
-- What is the name of the truck with truck_id 5?    ]
------------------------------------------------------------------------------------------
database_id: game_injury
database schema :
table stadium, columns = [ stadium.id ( integer | primary key | values: 1, 2 ), stadium.name ( text | values: Cowboys Stadium, FedExField ), stadium.Home_Games ( real | values: 8 ), stadium.Average_Attendance ( real | values: 87047.0, 83172.0 ), stadium.Total_Attendance ( real | values: 696377.0, 665380.0 ), stadium.Capacity_Percentage ( real | values: 108.8, 90.7 ) ]
table game, columns = [ game.stadium_id ( integer | values: 1, 2 ), game.id ( integer | primary key | values: 1, 2 ), game.Season ( real | values: 2007, 2008 ), game.Date ( text | values: 18 May 2007, 22 September 2007 ), game.Home_team ( text | values: Quruvchi, Pakhtakor ), game.Away_team ( text | values: Pakhtakor, Quruvchi ), game.Score ( text | values: 1–1, 0–0 ), game.Competition ( text | values: League, Cup ) ]
table injury_accident, columns = [ injury_accident.game_id ( integer | values: 1, 2 ), injury_accident.id ( integer | primary key | values: 1, 2 ), injury_accident.Player ( text | values: Davide Santon, Maicon ), injury_accident.Injury ( text | values: Clean-up surgery on his right knee, Knee problem ), injury_accident.Number_of_matches ( text | values: 12, 2 ), injury_accident.Source ( text | values: inter.it ) ]
foreign keys:
game.stadium_id = stadium.id
injury_accident.game_id = game.id

# Here are some example questions that CAN be answered by the schema below:
-- How many games has a stadium with average attendance more than 15000?
-- What is the name of the stadium with the highest total attendance?
-- What is the number of games where a player named 'John' was injured?
-- Which stadium has the most home games with a competition of 'Premier League'?
-- What is the average attendance of stadiums with a capacity percentage greater than 70%?  Select the result rounded to the nearest whole number.  Join the table `stadium` with the `game` table to answer this question.  Exclude stadiums with no home games.  Only include games played in the 2015 season.  Use a subquery or join.  Use the AVG aggregation function.  Make sure to handle division by zero.  Group by the result of the AVG function to ensure that the result is rounded to the nearest whole number.  Include the stadium id in the result.  Order the result by the average attendance in descending order.  Exclude any stadiums with no games played in the 2015 season.  Exclude any stadiums with no home games.  Exclude any games played in the 2015 season.  Exclude any stadiums with no home
------------------------------------------------------------------------------------------
database_id: school_finance
database schema :
table School, columns = [ School.School_id ( text | primary key | values: 1, 2 ), School.School_name ( text | values: Bremen, Culver Community ), School.Location ( text | values: Bremen, Culver ), School.Mascot ( text | values: Lions, Cavaliers ), School.Enrollment ( real | values: 495, 287 ), School.IHSAA_Class ( text | values: AA, A ), School.IHSAA_Football_Class ( text | values: AA, A ), School.County ( text | values: 50 Marshall, 71 St. Joseph ) ]
table budget, columns = [ budget.School_id ( integer | primary key | values: 1, 2 ), budget.Year ( real | values: 2003, 1999 ), budget.Budgeted ( real | values: 4979, 3666 ), budget.total_budget_percent_budgeted ( real | values: 2.0, 2.4 ), budget.Invested ( real | values: 2134, 5840 ), budget.total_budget_percent_invested ( real | values: 2.0, 2.2 ), budget.Budget_invested_percent ( text | values: 42.9, 159.3 ) ]
table endowment, columns = [ endowment.endowment_id ( integer | primary key | values: 1, 2 ), endowment.School_id ( integer | values: 1, 2 ), endowment.donator_name ( text | values: Monte Plata, San José de Ocoa ), endowment.amount ( real | values: 9.51, 9.83 ) ]
foreign keys:
budget.School_id = School.School_id
endowment.School_id = School.School_id

# Here are some example questions that CAN be answered by the schema below:
-- How many schools have a football IHSAA Class of A?
-- What is the total number of schools in the database?
-- What is the average budget invested percentage for schools in IHSAA Class A?
-- How many schools have an endowment with a donator name starting with the letter 'A'?
-- What is the total budget for a school with an enrollment of 500 in the year 2020?  SELECT t2.Budgeted FROM budget AS t2  JOIN School AS t1 ON t2.School_id = t1.School_id WHERE t1.Enrollment = 500 AND t2.Year = 2020
------------------------------------------------------------------------------------------
database_id: scholar
database schema :
table venue, columns = [ venue.venueId ( integer | primary key | values: N/A ), venue.venueName ( text | values: N/A ) ]
table author, columns = [ author.authorId ( integer | primary key | values: N/A ), author.authorName ( text | values: N/A ) ]
table dataset, columns = [ dataset.datasetId ( integer | primary key | values: N/A ), dataset.datasetName ( text | values: N/A ) ]
table journal, columns = [ journal.journalId ( integer | primary key | values: N/A ), journal.journalName ( text | values: N/A ) ]
table keyphrase, columns = [ keyphrase.keyphraseId ( integer | primary key | values: N/A ), keyphrase.keyphraseName ( text | values: N/A ) ]
table paper, columns = [ paper.paperId ( integer | primary key | values: N/A ), paper.title ( text | values: N/A ), paper.venueId ( integer | values: N/A ), paper.year ( real | values: N/A ), paper.numCiting ( real | values: N/A ), paper.numCitedBy ( real | values: N/A ), paper.journalId ( integer | values: N/A ) ]
table cite, columns = [ cite.citingPaperId ( integer | primary key | values: N/A ), cite.citedPaperId ( integer | values: N/A ) ]
table paperDataset, columns = [ paperDataset.paperId ( real | values: N/A ), paperDataset.datasetId ( integer | primary key | values: N/A ) ]
table paperKeyphrase, columns = [ paperKeyphrase.paperId ( integer | values: N/A ), paperKeyphrase.keyphraseId ( integer | primary key | values: N/A ) ]
table writes, columns = [ writes.paperId ( integer | primary key | values: N/A ), writes.authorId ( integer | values: N/A ) ]
foreign keys:
paper.venueId = venue.venueId
paper.journalId = journal.journalId
cite.citingPaperId = paper.paperId
cite.citedPaperId = paper.paperId
paperKeyphrase.keyphraseId = keyphrase.keyphraseId
paperKeyphrase.paperId = paper.paperId
writes.authorId = author.authorId
writes.paperId = paper.paperId

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(T1.paperId) FROM writes AS T1 INNER JOIN paper AS T2 ON T1.paperId = T2.paperId WHERE T2.journalId = 4 AND T2.venueId = 3 AND T1.authorId = 6;
-- SELECT t2.authorName FROM writes AS t1 JOIN author AS t2 ON t1.authorId  =  t2.authorId WHERE t1.paperId  =  ( SELECT paperId FROM paper WHERE title  =  "A Study on the Impact of Climate Change on Biodiversity" );
-- SELECT t2.journalName FROM writes AS t1 JOIN journal AS t2 ON t1.paperId  =  t2.journalId WHERE t1.authorId  =  ( SELECT authorId FROM author WHERE authorName  =  "John Doe" );
-- SELECT COUNT ( DISTINCT t2.paperId ) FROM writes AS t1 JOIN paper AS t2 ON t1.paperId  =  t2.paperId WHERE t2.year  =  2010 AND t1.authorId  =  ( SELECT authorId FROM author WHERE authorName  =  "Jane Smith" );
-- SELECT t3.keyphraseName FROM writes AS t1 JOIN paper AS t2 ON t1.paperId  =  t2.paperId JOIN paperKeyphrase AS t3 ON t2.paperId  =  t3.paperId WHERE t2.title  =  "A Study on the Impact
------------------------------------------------------------------------------------------
database_id: voter_1
database schema :
table AREA_CODE_STATE, columns = [ AREA_CODE_STATE.area_code ( integer | primary key | values: 201, 202 ), AREA_CODE_STATE.state ( text | values: NJ, DC ) ]
table CONTESTANTS, columns = [ CONTESTANTS.contestant_number ( integer | primary key | values: 1, 2 ), CONTESTANTS.contestant_name ( text | values: Edwina Burnam, Tabatha Gehling ) ]
table VOTES, columns = [ VOTES.vote_id ( integer | primary key | values: 5, 3 ), VOTES.phone_number ( real | values: 5112677315, 6209222712 ), VOTES.state ( text | values: NY, CA ), VOTES.contestant_number ( integer | values: 2, 3 ), VOTES.created ( datetime | values: 2018-03-09 19:03:21, 2018-03-09 19:03:36 ) ]
foreign keys:
VOTES.contestant_number = CONTESTANTS.contestant_number
VOTES.state = AREA_CODE_STATE.state

# Here are some example questions that CAN be answered by the schema below:
-- How many votes were cast for contestants in the state of California?
-- What are the names of the top 3 contestants with the most votes?
-- In what year were the most votes cast for contestants in the state of Florida?
-- What is the name of the contestant who received the most votes in the state of New York?
-- How many different states have contestants with more than 100 votes?
------------------------------------------------------------------------------------------
database_id: match_season
database schema :
table country, columns = [ country.Country_id ( integer | primary key | values: 1, 2 ), country.Country_name ( text | values: Indonesia, Iran ), country.Capital ( text | values: Jakarta, Tehran ), country.Official_native_language ( text | values: Bahasa Indonesia, Persian ( Arabic script ) ) ]
table team, columns = [ team.Team_id ( integer | primary key | values: 1, 2 ), team.Name ( text | values: Columbus Crew, Evalyn Feil ) ]
table match_season, columns = [ match_season.Season ( integer | primary key | values: 1996.0, 1997.0 ), match_season.Player ( text | values: Steve Ralston Category:Articles with hCards, Mike Duhaney Category:Articles with hCards ), match_season.Position ( text | values: Midfielder, Defender ), match_season.Country ( integer | values: 6, 4 ), match_season.Team ( integer | values: 1, 2 ), match_season.Draft_Pick_Number ( real | values: 18, 87 ), match_season.Draft_Class ( text | values: 1996 MLS College Draft, 1996 MLS Inaugural Player Draft ), match_season.College ( text | values: Florida International, UNLV ) ]
table player, columns = [ player.Player_ID ( integer | primary key | values: 1, 2 ), player.Player ( text | values: Cho Soong-Jae (630), Chung Hong (717) ), player.Years_Played ( text | values: 1 (2011), 8 (2003–2005, 2007–2011) ), player.Total_WL ( text | values: 2–0, 0–0 ), player.Singles_WL ( text | values: 1–0, 0–0 ), player.Doubles_WL ( text | values: 1–0, 0–0 ), player.Team ( integer | values: 1, 2 ) ]
foreign keys:
match_season.Team = team.Team_id
match_season.Country = country.Country_id
player.Team = team.Team_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of players from the United States?
-- What is the average number of years played by tennis players who have played for the New York Red Bulls and have a winning record in singles?
-- What is the name of the team that played against 'Team A' in the 2015 season?
-- What is the total number of players from country 'Australia' that played in the 2015 season?
------------------------------------------------------------------------------------------
database_id: small_bank_1
database schema :
table ACCOUNTS, columns = [ ACCOUNTS.custid ( integer | primary key | values: 1, 2 ), ACCOUNTS.name ( text | values: Brown, Wang ) ]
table SAVINGS, columns = [ SAVINGS.custid ( integer | primary key | values: 1, 2 ), SAVINGS.balance ( real | values: 200000.0, 999999999.0 ) ]
table CHECKING, columns = [ CHECKING.custid ( integer | primary key | values: 1, 2 ), CHECKING.balance ( real | values: 10000.0, 2000.0 ) ]
foreign keys:
SAVINGS.custid = ACCOUNTS.custid
CHECKING.custid = ACCOUNTS.custid

# Here are some example questions that CAN be answered by the schema below:
-- How many customers have accounts in both savings and checking?
-- What is the average balance of customers with more than $1000 in savings?
-- What is the name of the customer with the highest balance in checking?
-- How many customers have a savings balance greater than $500 and a checking balance less than $200?
-- What is the total balance of all savings accounts for customers who have both savings and checking accounts?
------------------------------------------------------------------------------------------
database_id: wta_1
database schema :
table players, columns = [ players.player_id ( integer | primary key | values: 200001, 200002 ), players.first_name ( text | values: Martina, Mirjana ), players.last_name ( text | values: Hingis, Lucic ), players.hand ( text | values: R, L ), players.birth_date ( datetime | values: 19800930, 19820309 ), players.country_code ( text | values: SUI, CRO ) ]
table matches, columns = [ matches.best_of ( real | values: 3 ), matches.draw_size ( real | values: 4, 32 ), matches.loser_age ( real | values: 24.626967830300003, 23.6221765914 ), matches.loser_entry ( text | values:  ), matches.loser_hand ( text | values: R, L ), matches.loser_ht ( real | values: 170, 183 ), matches.loser_id ( integer | values: 201474, 201520 ), matches.loser_ioc ( text | values: POL, CZE ), matches.loser_name ( text | values: Agnieszka Radwanska, Petra Kvitova ), matches.loser_rank ( real | values: 4, 6 ), matches.loser_rank_points ( real | values: 5890, 4370 ), matches.loser_seed ( real | values: 3, 5 ), matches.match_num ( real | values: 297, 296 ), matches.minutes ( real | values: 82, 72 ), matches.round ( text | values: RR, SF ), matches.score ( text | values: 6-2 6-4, 6-2 6-3 ), matches.surface ( text | values: Hard, Clay ), matches.tourney_date ( datetime | values: 20131021, 20160104 ), matches.tourney_id ( text | values: 2013-W-WT-TUR-01A-2013, 2016-1049 ), matches.tourney_level ( text | values: W, I ), matches.tourney_name ( text | values: WTA Championships, Auckland ), matches.winner_age ( real | values: 32.0684462697, 23.6221765914 ), matches.winner_entry ( text | values:  ), matches.winner_hand ( text | values: R, L ), matches.winner_ht ( real | values: 175, 183 ), matches.winner_id ( integer | values: 200033, 201520 ), matches.winner_ioc ( text | values: USA, CZE ), matches.winner_name ( text | values: Serena Williams, Petra Kvitova ), matches.winner_rank ( real | values: 1, 6 ), matches.winner_rank_points ( real | values: 12040, 4370 ), matches.winner_seed ( real | values: 1, 5 ), matches.year ( real | values: 2013, 2016 ) ]
table rankings, columns = [ rankings.ranking_date ( datetime | values: 20000101, 20000103 ), rankings.ranking ( real | values: 3, 4 ), rankings.player_id ( integer | values: 200748, 200033 ), rankings.ranking_points ( real | values: 4378, 3021 ), rankings.tours ( real | values: 13, 15 ) ]
foreign keys:
matches.winner_id = players.player_id
matches.loser_id = players.player_id
rankings.player_id = players.player_id

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM players WHERE hand = 'right';
-- SELECT COUNT(DISTINCT winner_name) FROM matches WHERE winner_rank = 1;
-- SELECT COUNT(*) FROM players AS p
-- SELECT COUNT(*) FROM rankings AS r
-- SELECT COUNT(DISTINCT loser_name) FROM matches WHERE loser_hand = 'left' AND tourney_name LIKE '%Grand%';
------------------------------------------------------------------------------------------
database_id: yelp
database schema :
table business, columns = [ business.bid ( integer | primary key | values: N/A ), business.business_id ( text | values: N/A ), business.name ( text | values: N/A ), business.full_address ( text | values: N/A ), business.city ( text | values: N/A ), business.latitude ( text | values: N/A ), business.longitude ( text | values: N/A ), business.review_count ( real | values: N/A ), business.is_open ( real | values: N/A ), business.rating ( real | values: N/A ), business.state ( text | values: N/A ) ]
table category, columns = [ category.id ( integer | primary key | values: N/A ), category.business_id ( text | values: N/A ), category.category_name ( text | values: N/A ) ]
table user, columns = [ user.uid ( integer | primary key | values: N/A ), user.user_id ( text | values: N/A ), user.name ( text | values: N/A ) ]
table checkin, columns = [ checkin.cid ( integer | primary key | values: N/A ), checkin.business_id ( text | values: N/A ), checkin.count ( real | values: N/A ), checkin.day ( text | values: N/A ) ]
table neighbourhood, columns = [ neighbourhood.id ( integer | primary key | values: N/A ), neighbourhood.business_id ( text | values: N/A ), neighbourhood.neighbourhood_name ( text | values: N/A ) ]
table review, columns = [ review.rid ( integer | primary key | values: N/A ), review.business_id ( text | values: N/A ), review.user_id ( text | values: N/A ), review.rating ( real | values: N/A ), review.text ( text | values: N/A ), review.year ( real | values: N/A ), review.month ( text | values: N/A ) ]
table tip, columns = [ tip.tip_id ( integer | primary key | values: N/A ), tip.business_id ( text | values: N/A ), tip.text ( text | values: N/A ), tip.user_id ( text | values: N/A ), tip.likes ( real | values: N/A ), tip.year ( real | values: N/A ), tip.month ( text | values: N/A ) ]
foreign keys:
category.business_id = business.business_id
checkin.business_id = business.business_id
neighbourhood.business_id = business.business_id
review.user_id = user.user_id
review.business_id = business.business_id
tip.user_id = user.user_id
tip.business_id = business.business_id

# Here are some example questions that CAN be answered by the schema below:
-- How many businesses in the city of 'San Francisco' have a rating higher than 3?
-- What is the average rating of all the businesses that have been reviewed by users from 'New York'?
-- How many businesses in the city of 'Los Angeles' have at least 100 check-ins?
-- Which category has the most businesses in the city of 'Chicago'?
-- What is the total number of reviews written by users who have given a rating of 5 to at least one business in the city of 'Boston'?  ```sql
------------------------------------------------------------------------------------------
database_id: student_1
database schema :
table list, columns = [ list.LastName ( text | primary key | values: AMY, AREHART ), list.FirstName ( text | values:  PATRINA,  VERTIE ), list.Grade ( real | values: 2, 6 ), list.Classroom ( real | values: 101, 112 ) ]
table teachers, columns = [ teachers.LastName ( text | primary key | values: COVIN, KAWA ), teachers.FirstName ( text | values:  JEROME,  GORDON ), teachers.Classroom ( real | values: 101, 102 ) ]

# Here are some example questions that CAN be answered by the schema below:
-- What is the average grade of students in classroom 5?
-- How many students are in the same classroom as Mr. Smith?
-- What is the number of unique classrooms taught by teachers?
-- What is the number of students with the last name 'Johnson' and a grade of 8?
-- Which teachers have more than one classroom assigned to them?  SELECT T1.LastName, T2.Classroom FROM teachers AS T1 INNER JOIN list AS T2 ON T1.Classroom = T2.Classroom GROUP BY T1.LastName HAVING COUNT(T2.Classroom) > 1;  -- SQL Answer
------------------------------------------------------------------------------------------
database_id: manufacturer
database schema :
table manufacturer, columns = [ manufacturer.Manufacturer_ID ( integer | primary key | values: 1, 2 ), manufacturer.Open_Year ( real | values: 1980.0, 1990.0 ), manufacturer.Name ( text | values: Chevrolet House, IKEA ), manufacturer.Num_of_Factories ( real | values: 36, 21 ), manufacturer.Num_of_Shops ( real | values: 8, 19 ) ]
table furniture, columns = [ furniture.Furniture_ID ( integer | primary key | values: 1, 2 ), furniture.Name ( text | values: Billiard table, Chabudai ), furniture.Num_of_Component ( real | values: 14, 4 ), furniture.Market_Rate ( real | values: 52.5, 40.0 ) ]
table furniture_manufacte, columns = [ furniture_manufacte.Manufacturer_ID ( integer | primary key | values: 1, 4 ), furniture_manufacte.Furniture_ID ( integer | values: 3, 2 ), furniture_manufacte.Price_in_Dollar ( real | values: 239.0, 450.0 ) ]
foreign keys:
furniture_manufacte.Furniture_ID = furniture.Furniture_ID
furniture_manufacte.Manufacturer_ID = manufacturer.Manufacturer_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average market rate of all the furniture manufactured by the companies that have more than 2 factories?
-- What is the total number of shops in all the factories of companies that have more than one factory?
-- SELECT name FROM manufacturer WHERE num_of_factories > 0 AND num_of_shops = 0 AND open_year < 1990;
-- SELECT name FROM manufacturer WHERE num_of_factories > 0 AND num_of_shops > 0 AND num_of_factories > num_of_shops;
-- SELECT name FROM manufacturer WHERE num_of_factories > 0 AND num_of_factories < 20 AND num_of_shops < 0;
------------------------------------------------------------------------------------------
database_id: store_1
database schema :
table artists, columns = [ artists.id ( integer | primary key | values: 1, 2 ), artists.name ( text | values: AC/DC, Accept ) ]
table sqlite_sequence, columns = [ sqlite_sequence.name ( text | values: genres, media_types ), sqlite_sequence.seq ( text | values: 25, 5 ) ]
table albums, columns = [ albums.id ( integer | primary key | values: 1, 4 ), albums.title ( text | values: For Those About To Rock We Salute You, Balls to the Wall ), albums.artist_id ( integer | values: 1, 2 ) ]
table employees, columns = [ employees.id ( integer | primary key | values: 1, 2 ), employees.last_name ( text | values: Adams, Edwards ), employees.first_name ( text | values: Andrew, Nancy ), employees.title ( text | values: General Manager, Sales Manager ), employees.reports_to ( integer | values: 1, 2 ), employees.birth_date ( datetime | values: 1962-02-18 00:00:00, 1958-12-08 00:00:00 ), employees.hire_date ( datetime | values: 2002-08-14 00:00:00, 2002-05-01 00:00:00 ), employees.address ( text | values: 11120 Jasper Ave NW, 825 8 Ave SW ), employees.city ( text | values: Edmonton, Calgary ), employees.state ( text | values: AB ), employees.country ( text | values: Canada ), employees.postal_code ( text | values: T5K 2N1, T2P 2T3 ), employees.phone ( text | values: +1 (780) 428-9482, +1 (403) 262-3443 ), employees.fax ( text | values: +1 (780) 428-3457, +1 (403) 262-3322 ), employees.email ( text | values: andrew@chinookcorp.com, nancy@chinookcorp.com ) ]
table customers, columns = [ customers.id ( integer | primary key | values: 1, 3 ), customers.first_name ( text | values: Luís, Leonie ), customers.last_name ( text | values: Gonçalves, Köhler ), customers.company ( text | values: Embraer - Empresa Brasileira de Aeronáutica S.A., JetBrains s.r.o. ), customers.address ( text | values: Av. Brigadeiro Faria Lima, 2170, Theodor-Heuss-Straße 34 ), customers.city ( text | values: São José dos Campos, Stuttgart ), customers.state ( text | values: SP, QC ), customers.country ( text | values: Brazil, Germany ), customers.postal_code ( text | values: 12227-000, 70174 ), customers.phone ( text | values: +55 (12) 3923-5555, +49 0711 2842222 ), customers.fax ( text | values: +55 (12) 3923-5566, +420 2 4172 5555 ), customers.email ( text | values: luisg@embraer.com.br, leonekohler@surfeu.de ), customers.support_rep_id ( integer | values: 3, 4 ) ]
table genres, columns = [ genres.id ( integer | primary key | values: 1, 2 ), genres.name ( text | values: Rock, Jazz ) ]
table invoices, columns = [ invoices.id ( integer | primary key | values: 98, 121 ), invoices.customer_id ( integer | values: 1, 2 ), invoices.invoice_date ( datetime | values: 2007-01-01 00:00:00, 2007-01-02 00:00:00 ), invoices.billing_address ( text | values: Theodor-Heuss-Straße 34, Ullevålsveien 14 ), invoices.billing_city ( text | values: Stuttgart, Oslo ), invoices.billing_state ( text | values: AB, MA ), invoices.billing_country ( text | values: Germany, Norway ), invoices.billing_postal_code ( text | values: 70174, 0171 ), invoices.total ( real | values: 1.98, 3.96 ) ]
table media_types, columns = [ media_types.id ( integer | primary key | values: 1, 2 ), media_types.name ( text | values: MPEG audio file, Protected AAC audio file ) ]
table tracks, columns = [ tracks.id ( integer | primary key | values: 1, 6 ), tracks.name ( text | values: For Those About To Rock (We Salute You), Balls to the Wall ), tracks.album_id ( integer | values: 1, 2 ), tracks.media_type_id ( integer | values: 1, 2 ), tracks.genre_id ( integer | values: 1, 2 ), tracks.composer ( text | values: Angus Young, Malcolm Young, Brian Johnson, F. Baltes, S. Kaufman, U. Dirkscneider & W. Hoffman ), tracks.milliseconds ( real | values: 343719, 342562 ), tracks.bytes ( real | values: 11170334, 5510424 ), tracks.unit_price ( real | values: 0.99, 1.99 ) ]
table invoice_lines, columns = [ invoice_lines.id ( integer | primary key | values: 579, 1 ), invoice_lines.invoice_id ( integer | values: 1, 2 ), invoice_lines.track_id ( integer | values: 1, 2 ), invoice_lines.unit_price ( real | values: 0.99, 1.99 ), invoice_lines.quantity ( real | values: 1 ) ]
table playlists, columns = [ playlists.id ( integer | primary key | values: 1, 2 ), playlists.name ( text | values: Music, Movies ) ]
table playlist_tracks, columns = [ playlist_tracks.playlist_id ( integer | primary key | values: 1, 3 ), playlist_tracks.track_id ( integer | values: 1, 2 ) ]
foreign keys:
albums.artist_id = artists.id
employees.reports_to = employees.id
customers.support_rep_id = employees.id
invoices.customer_id = customers.id
tracks.media_type_id = media_types.id
tracks.genre_id = genres.id
tracks.album_id = albums.id
invoice_lines.track_id = tracks.id
invoice_lines.invoice_id = invoices.id
playlist_tracks.track_id = tracks.id
playlist_tracks.playlist_id = playlists.id

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(T1.name) FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T1.title LIKE '%Sales%' AND T2.country = 'USA' AND T1.hire_date > '1990-01-01';
-- SELECT COUNT(T1.name) FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T1.title LIKE '%Sales%' AND T2.country = 'USA' AND T1.hire_date > '1990-01-01' AND T1.first_name LIKE 'J%' AND T1.last_name LIKE 'Smith';  SELECT COUNT(T1.id) FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T1.title LIKE '%Sales%' AND T2.country = 'USA' AND T1.hire_date > '1990-01-01' AND T1.first_name LIKE 'J%' AND T1.last_name LIKE 'Smith';  SELECT COUNT(T1.id) FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id
------------------------------------------------------------------------------------------
database_id: train_station
database schema :
table station, columns = [ station.Station_ID ( integer | primary key | values: 1, 2 ), station.Name ( text | values: London Waterloo, London Victoria ), station.Annual_entry_exit ( real | values: 94.046, 76.231 ), station.Annual_interchanges ( real | values: 9.489, 9.157 ), station.Total_Passengers ( real | values: 103.534, 85.38 ), station.Location ( text | values: London, Birmingham ), station.Main_Services ( text | values: South Western Main Line West of England Main Line, Brighton Main Line Chatham Main Line ), station.Number_of_Platforms ( real | values: 19, 12 ) ]
table train, columns = [ train.Train_ID ( integer | primary key | values: 1, 2 ), train.Name ( text | values: Ananthapuri Express, Guruvayur Express ), train.Time ( text | values: 17:15, 22:10 ), train.Service ( text | values: Daily ) ]
table train_station, columns = [ train_station.Train_ID ( integer | primary key | values: 1, 2 ), train_station.Station_ID ( integer | values: 1, 2 ) ]
foreign keys:
train_station.Station_ID = station.Station_ID
train_station.Train_ID = train.Train_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of total passengers for stations in London?
-- How many stations have more than 500 interchanges and more than 200,000 passengers?
-- What is the number of trains that stop at least 3 stations in London?
-- What is the number of stations that have a total number of platforms less than 10?
-- What is the average annual entry-exit number for stations that have a total number of passengers less than 100,000?  1
------------------------------------------------------------------------------------------
database_id: document_management
database schema :
table Roles, columns = [ Roles.role_code ( text | primary key | values: DBA, PROJ-MGR ), Roles.role_description ( text | values: Database Administrator, Project Manager ) ]
table Users, columns = [ Users.user_id ( integer | primary key | values: 1, 2 ), Users.role_code ( text | values: PROJ-MGR, DBA ), Users.user_name ( text | values: dickens.elta, tremblay.raheem ), Users.user_login ( text | values: 0, 1 ), Users.password ( text | values: e72b5a2d50b39a8760764a5f7a9d68ca2f076877, 9bc25a040d5647ced5ec32e1a455e90fafc10bcb ) ]
table Document_Structures, columns = [ Document_Structures.document_structure_code ( text | primary key | values: 1, 5 ), Document_Structures.parent_document_structure_code ( text | values: 1, 6 ), Document_Structures.document_structure_description ( text | values: Header, Main section ) ]
table Functional_Areas, columns = [ Functional_Areas.functional_area_code ( text | primary key | values: 1, 8 ), Functional_Areas.parent_functional_area_code ( text | values: 8 ), Functional_Areas.functional_area_description ( text | values: Signature, Acknowledgement ) ]
table Images, columns = [ Images.image_id ( integer | primary key | values: 1, 2 ), Images.image_alt_text ( text | values: Lea, Arden ), Images.image_name ( text | values: top1, top2 ), Images.image_url ( text | values: http://www.rempelnader.com/1.jpg, http://connellykertzmann.org/1.jpg ) ]
table Documents, columns = [ Documents.document_code ( text | primary key | values: 217, 349 ), Documents.document_structure_code ( text | values: 8, 1 ), Documents.document_type_code ( text | values: Book, Paper ), Documents.access_count ( real | values: 1864, 8208 ), Documents.document_name ( text | values: Learning English, Research about Art history ) ]
table Document_Functional_Areas, columns = [ Document_Functional_Areas.document_code ( text | values: 675, 930 ), Document_Functional_Areas.functional_area_code ( text | values: 9, 1 ) ]
table Document_Sections, columns = [ Document_Sections.section_id ( integer | primary key | values: 12, 15 ), Document_Sections.document_code ( text | values: 714, 217 ), Document_Sections.section_sequence ( real | values: 6072, 4510 ), Document_Sections.section_code ( text | values: 70, 14 ), Document_Sections.section_title ( text | values: after, before ) ]
table Document_Sections_Images, columns = [ Document_Sections_Images.section_id ( integer | primary key | values: 12, 15 ), Document_Sections_Images.image_id ( integer | values: 6, 2 ) ]
foreign keys:
Users.role_code = Roles.role_code
Documents.document_structure_code = Document_Structures.document_structure_code
Document_Functional_Areas.functional_area_code = Functional_Areas.functional_area_code
Document_Functional_Areas.document_code = Documents.document_code
Document_Sections.document_code = Documents.document_code
Document_Sections_Images.image_id = Images.image_id
Document_Sections_Images.section_id = Document_Sections.section_id

# Here are some example questions that CAN be answered by the schema below:
-- SELECT T1.document_name FROM Documents AS T1 INNER JOIN Document_Structures AS T2 ON T1.document_structure_code  =  T2.document_structure_code WHERE T2.document_structure_code  = 'main';
-- SELECT T1.role_description FROM Roles AS T1 INNER JOIN Users AS T2 ON T1.role_code  =  T2.role_code WHERE T2.user_name  =  'John' AND T2.role_code  =  'admin';  SELECT T1.document_structure_code FROM Document_Structures AS T1 WHERE T1.document_structure_description  =  'Main Document Structure';  SELECT T1.document_structure_code FROM Document_Structures AS T1 WHERE T1.document_structure_description  =  'Main Document Structure';  SELECT T1.document_structure_code FROM Document_Structures AS T1 WHERE T1.document_structure_description  =  'Main Document Structure';  SELECT T1.document_structure_code FROM Document_Structures AS T1 WHERE T1.document_structure_description  =  'Main Document Structure';  SELECT T1.document_structure_code FROM Document_Structures AS T1 WHERE T1.document_structure_description  =  'Main Document Structure';
------------------------------------------------------------------------------------------
database_id: formula_1
database schema :
table circuits, columns = [ circuits.circuitId ( integer | primary key | values: 1, 2 ), circuits.circuitRef ( text | values: albert_park, sepang ), circuits.name ( text | values: Albert Park Grand Prix Circuit, Sepang International Circuit ), circuits.location ( text | values: Melbourne, Kuala Lumpur ), circuits.country ( text | values: Australia, Malaysia ), circuits.lat ( real | values: -37.8497, 2.76083 ), circuits.lng ( real | values: 144.968, 101.738 ), circuits.alt ( real | values: 10,  ), circuits.url ( text | values: http://en.wikipedia.org/wiki/Melbourne_Grand_Prix_Circuit, http://en.wikipedia.org/wiki/Sepang_International_Circuit ) ]
table races, columns = [ races.raceId ( integer | primary key | values: 1, 2 ), races.year ( real | values: 2009, 2008 ), races.round ( real | values: 1, 2 ), races.circuitId ( integer | values: 1, 2 ), races.name ( text | values: Australian Grand Prix, Malaysian Grand Prix ), races.date ( text | values: 2009-03-29, 2009-04-05 ), races.time ( text | values: 06:00:00, 09:00:00 ), races.url ( text | values: http://en.wikipedia.org/wiki/2009_Australian_Grand_Prix, http://en.wikipedia.org/wiki/2009_Malaysian_Grand_Prix ) ]
table drivers, columns = [ drivers.driverId ( integer | primary key | values: 1, 2 ), drivers.driverRef ( text | values: hamilton, heidfeld ), drivers.number ( real | values: 44,  ), drivers.code ( text | values: HAM, HEI ), drivers.forename ( text | values: Lewis, Nick ), drivers.surname ( text | values: Hamilton, Heidfeld ), drivers.dob ( text | values: 07/01/1985, 10/05/1977 ), drivers.nationality ( text | values: British, German ), drivers.url ( text | values: http://en.wikipedia.org/wiki/Lewis_Hamilton, http://en.wikipedia.org/wiki/Nick_Heidfeld ) ]
table status, columns = [ status.statusId ( integer | primary key | values: 1, 2 ), status.status ( text | values: Finished, Disqualified ) ]
table seasons, columns = [ seasons.year ( integer | primary key | values: 1950, 1951 ), seasons.url ( text | values: http://en.wikipedia.org/wiki/1950_Formula_One_season, http://en.wikipedia.org/wiki/1951_Formula_One_season ) ]
table constructors, columns = [ constructors.constructorId ( integer | primary key | values: 1, 2 ), constructors.constructorRef ( text | values: mclaren, bmw_sauber ), constructors.name ( text | values: McLaren, BMW Sauber ), constructors.nationality ( text | values: British, German ), constructors.url ( text | values: http://en.wikipedia.org/wiki/McLaren, http://en.wikipedia.org/wiki/BMW_Sauber ) ]
table constructorStandings, columns = [ constructorStandings.constructorStandingsId ( integer | primary key | values: 1, 2 ), constructorStandings.raceId ( integer | values: 18, 19 ), constructorStandings.constructorId ( integer | values: 1, 2 ), constructorStandings.points ( real | values: 14.0, 8.0 ), constructorStandings.position ( real | values: 1, 3 ), constructorStandings.positionText ( text | values: 1, 3 ), constructorStandings.wins ( real | values: 1, 0 ) ]
table results, columns = [ results.resultId ( integer | primary key | values: 1, 2 ), results.raceId ( integer | values: 18, 19 ), results.driverId ( integer | values: 1, 2 ), results.constructorId ( integer | values: 1, 2 ), results.number ( real | values: 22, 3 ), results.grid ( real | values: 1, 5 ), results.position ( real | values: 1, 2 ), results.positionText ( text | values: 1, 2 ), results.positionOrder ( real | values: 1, 2 ), results.points ( real | values: 10.0, 8.0 ), results.laps ( real | values: 58, 57 ), results.time ( text | values: 34:50.6, 5.478 ), results.milliseconds ( real | values: 5690616, 5696094 ), results.fastestLap ( real | values: 39, 41 ), results.rank ( real | values: 2, 3 ), results.fastestLapTime ( text | values: 01:27.5, 01:27.7 ), results.fastestLapSpeed ( text | values: 218.3, 217.586 ), results.statusId ( real | values: 1, 11 ) ]
table driverStandings, columns = [ driverStandings.driverStandingsId ( integer | primary key | values: 1, 2 ), driverStandings.raceId ( integer | values: 18, 19 ), driverStandings.driverId ( integer | values: 1, 2 ), driverStandings.points ( real | values: 10.0, 8.0 ), driverStandings.position ( real | values: 1, 2 ), driverStandings.positionText ( text | values: 1, 2 ), driverStandings.wins ( real | values: 1, 0 ) ]
table constructorResults, columns = [ constructorResults.constructorResultsId ( integer | primary key | values: 1, 2 ), constructorResults.raceId ( integer | values: 18, 19 ), constructorResults.constructorId ( integer | values: 1, 2 ), constructorResults.points ( real | values: 14.0, 8.0 ), constructorResults.status ( real | values: NULL, D ) ]
table qualifying, columns = [ qualifying.qualifyId ( integer | primary key | values: 1, 2 ), qualifying.raceId ( integer | values: 18, 19 ), qualifying.driverId ( integer | values: 1, 9 ), qualifying.constructorId ( integer | values: 1, 2 ), qualifying.number ( real | values: 22, 4 ), qualifying.position ( real | values: 1, 2 ), qualifying.q1 ( text | values: 1:26.572, 1:26.103 ), qualifying.q2 ( text | values: 1:25.187, 1:25.315 ), qualifying.q3 ( text | values: 1:26.714, 1:26.869 ) ]
table pitStops, columns = [ pitStops.raceId ( integer | primary key | values: N/A ), pitStops.driverId ( integer | values: N/A ), pitStops.stop ( real | values: N/A ), pitStops.lap ( real | values: N/A ), pitStops.time ( text | values: N/A ), pitStops.duration ( text | values: N/A ), pitStops.milliseconds ( real | values: N/A ) ]
table lapTimes, columns = [ lapTimes.raceId ( integer | primary key | values: N/A ), lapTimes.driverId ( integer | values: N/A ), lapTimes.lap ( real | values: N/A ), lapTimes.position ( real | values: N/A ), lapTimes.time ( text | values: N/A ), lapTimes.milliseconds ( real | values: N/A ) ]
foreign keys:
races.circuitId = circuits.circuitId
constructorStandings.raceId = races.raceId
constructorStandings.constructorId = constructors.constructorId
results.driverId = drivers.driverId
results.raceId = races.raceId
results.constructorId = constructors.constructorId
driverStandings.driverId = drivers.driverId
driverStandings.raceId = races.raceId
constructorResults.raceId = races.raceId
constructorResults.constructorId = constructors.constructorId
qualifying.driverId = drivers.driverId
qualifying.raceId = races.raceId
qualifying.constructorId = constructors.constructorId
pitStops.driverId = drivers.driverId
pitStops.raceId = races.raceId
lapTimes.driverId = drivers.driverId
lapTimes.raceId = races.raceId

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of laps driven by each driver in the 2022 season?
-- What are the names of the drivers who have won the championship in the 2019 season?
-- How many constructors have won at least one race in the 2021 season?
-- What is the name of the circuit with the highest altitude?
-- What are the names of the drivers who have completed all laps in the fastest lap in the 2020 season?
------------------------------------------------------------------------------------------
database_id: game_1
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Video_Games, columns = [ Video_Games.GameID ( integer | primary key | values: 1, 2 ), Video_Games.GName ( text | values: RNG Stone, The Vanishing of Eric Calder ), Video_Games.GType ( text | values: Collectible card game, Walking Simulator ) ]
table Plays_Games, columns = [ Plays_Games.StuID ( integer | values: 1001, 1007 ), Plays_Games.GameID ( integer | values: 1, 2 ), Plays_Games.Hours_Played ( real | values: 35, 15 ) ]
table SportsInfo, columns = [ SportsInfo.StuID ( integer | values: 1001, 1002 ), SportsInfo.SportName ( text | values: Athletics, Football ), SportsInfo.HoursPerWeek ( real | values: 2, 7 ), SportsInfo.GamesPlayed ( real | values: 5, 20 ), SportsInfo.OnScholarship ( text | values: N, Y ) ]
foreign keys:
Plays_Games.StuID = Student.StuID
Plays_Games.GameID = Video_Games.GameID
SportsInfo.StuID = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of students who are female and are majoring in computer science? (Assume computer science is major 1.)
-- What are the average hours played by students who have played at least one game in the sports category?
-- What are the names of the students who have played sports and also have a advisor whose name starts with 'A'?
-- What is the number of games played by students who are from the city of 'New York'?
-- What is the name of the game with the highest average hours played across all students?  (If there are multiple games with the same average, any one of them is acceptable.)  Also, please provide the average hours played for this game.  (Note: The average hours played should be an integer.)  (Assume at least one game has been played.)  (Assume at least one student has played at least one game.)  (Assume at least one game has been played by more than one student.)  (Assume at least one student has played more than one game.)  (Assume at least one student has played more than one game in the same sport.)  (Assume at least one
------------------------------------------------------------------------------------------
database_id: loan_1
database schema :
table bank, columns = [ bank.branch_ID ( integer | primary key | values: 1, 2 ), bank.bname ( text | values: morningside, downtown ), bank.no_of_customers ( real | values: 203, 123 ), bank.city ( text | values: New York City, Salt Lake City ), bank.state ( text | values: New York, Utah ) ]
table customer, columns = [ customer.cust_ID ( text | primary key | values: 1, 2 ), customer.cust_name ( text | values: Mary, Jack ), customer.acc_type ( text | values: saving, checking ), customer.acc_bal ( real | values: 2000, 1000 ), customer.no_of_loans ( real | values: 2, 1 ), customer.credit_score ( real | values: 30, 20 ), customer.branch_ID ( integer | values: 2, 1 ), customer.state ( text | values: Utah, Texas ) ]
table loan, columns = [ loan.loan_ID ( text | primary key | values: 1, 2 ), loan.loan_type ( text | values: Mortgages, Auto ), loan.cust_ID ( text | values: 1, 3 ), loan.branch_ID ( text | values: 1, 2 ), loan.amount ( real | values: 2050, 3000 ) ]
foreign keys:
customer.branch_ID = bank.branch_ID
loan.branch_ID = bank.branch_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average credit score of customers in the city of New York, who have a credit score greater than 700?
-- How many customers have a credit score between 650 and 700, who are from the state of California, and have a loan?
-- What is the total number of loans given by the branch in the city of New York, who have more than 500 customers?
-- What is the number of customers with a credit score greater than 600, who have a loan from the branch in the city of Los Angeles?
-- What is the average account balance of customers in the state of Texas, who have a loan and a credit score greater than 750?
------------------------------------------------------------------------------------------
database_id: bike_1
database schema :
table station, columns = [ station.id ( integer | primary key | values: 2, 3 ), station.name ( text | values: San Jose Diridon Caltrain Station, San Jose Civic Center ), station.lat ( real | values: 37.329732, 37.330698 ), station.long ( real | values: -121.90178200000001, -121.888979 ), station.dock_count ( real | values: 27, 15 ), station.city ( text | values: San Jose, Redwood City ), station.installation_date ( text | values: 8/6/2013, 8/5/2013 ) ]
table status, columns = [ status.station_id ( integer | values: 3, 4 ), status.bikes_available ( real | values: 12, 6 ), status.docks_available ( real | values: 3, 5 ), status.time ( text | values: 2015-06-02 12:46:02, 2015-06-02 12:47:02 ) ]
table trip, columns = [ trip.id ( integer | primary key | values: 900504, 900505 ), trip.duration ( real | values: 384, 588 ), trip.start_date ( text | values: 8/21/2015 17:03, 8/21/2015 17:04 ), trip.start_station_name ( text | values: Howard at 2nd, South Van Ness at Market ), trip.start_station_id ( real | values: 63, 66 ), trip.end_date ( text | values: 8/21/2015 17:10, 8/21/2015 17:13 ), trip.end_station_name ( text | values: San Francisco Caltrain 2 (330 Townsend), Harry Bridges Plaza (Ferry Building) ), trip.end_station_id ( real | values: 69, 50 ), trip.bike_id ( real | values: 454, 574 ), trip.subscription_type ( text | values: Subscriber, Customer ), trip.zip_code ( real | values: 94041, 95119 ) ]
table weather, columns = [ weather.date ( text | values: 8/29/2013, 8/30/2013 ), weather.max_temperature_f ( real | values: 74, 78 ), weather.mean_temperature_f ( real | values: 68, 69 ), weather.min_temperature_f ( real | values: 61, 60 ), weather.max_dew_point_f ( real | values: 61, 57 ), weather.mean_dew_point_f ( real | values: 58, 56 ), weather.min_dew_point_f ( real | values: 56, 54 ), weather.max_humidity ( real | values: 93, 90 ), weather.mean_humidity ( real | values: 75, 70 ), weather.min_humidity ( real | values: 57, 50 ), weather.max_sea_level_pressure_inches ( real | values: 30.07, 30.05 ), weather.mean_sea_level_pressure_inches ( real | values: 30.02, 30 ), weather.min_sea_level_pressure_inches ( real | values: 29.97, 29.93 ), weather.max_visibility_miles ( real | values: 10, 9 ), weather.mean_visibility_miles ( real | values: 10, 9 ), weather.min_visibility_miles ( real | values: 10, 7 ), weather.max_wind_Speed_mph ( real | values: 23, 29 ), weather.mean_wind_speed_mph ( real | values: 11, 13 ), weather.max_gust_speed_mph ( real | values: 28, 35 ), weather.precipitation_inches ( real | values: 0, 0.23 ), weather.cloud_cover ( real | values: 4, 2 ), weather.events ( text | values: , Fog ), weather.wind_dir_degrees ( real | values: 286, 291 ), weather.zip_code ( real | values: 94107, 94063 ) ]
foreign keys:
status.station_id = station.id

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of bikes available at stations in San Francisco that have more than 50 docks?
-- What is the average duration of bike trips on Wednesdays?
-- What is the average temperature in San Francisco on days with precipitation?
-- What are the top 3 cities with the most number of stations installed in 2010?
-- What is the average number of bikes available at stations with a name containing the word "Central"?
------------------------------------------------------------------------------------------
database_id: entrepreneur
database schema :
table entrepreneur, columns = [ entrepreneur.Entrepreneur_ID ( integer | primary key | values: 1, 2 ), entrepreneur.People_ID ( integer | values: 1, 2 ), entrepreneur.Company ( text | values: Umbrolly, Grails Ltd ), entrepreneur.Money_Requested ( real | values: 150000.0, 120000.0 ), entrepreneur.Investor ( text | values: Duncan Bannatyne, Doug Richard ) ]
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Name ( text | values: Francesco Postiglione, Leonardo Binchi ), people.Height ( real | values: 1.9, 1.86 ), people.Weight ( real | values: 80.0, 57.0 ), people.Date_of_Birth ( text | values: 1972-04-29, 1975-08-27 ) ]
foreign keys:
entrepreneur.People_ID = people.People_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average height of people who are investors?
-- What is the name of the person who is the entrepreneur with the highest money requested?
-- What is the total amount of money requested by all entrepreneurs who are over 170cm tall?
-- What is the company of the entrepreneur who requested the 3rd highest amount of money?
-- What is the name of the entrepreneur with the highest height among all entrepreneurs who are investors in "Google"?  or 'Microsoft'? or 'Facebook'? or 'Apple'? or 'Amazon'? or 'Netflix'? or 'Tesla'? or 'Spotify'? or 'Uber'? or 'NVIDIA'? or 'Caterpillar'? or 'Procter & Gamble'? or '3M'? or 'HP'? or 'Volkswagen'? or 'L'Oréal'? or 'Roche'? or 'SAP'? or 'ExxonMobil'? or 'Dell'? or 'Cisco'? or 'Pfizer'? or 'Danaher'? or 'McDonald's'? or 'AstraZeneca'? or 'Merck'? or 'Intel'? or 'Novartis'? or 'Qualcomm'? or 'Lyond
------------------------------------------------------------------------------------------
database_id: orchestra
database schema :
table conductor, columns = [ conductor.Conductor_ID ( integer | primary key | values: 1, 2 ), conductor.Name ( text | values: Antal Doráti, Igor Stravinsky ), conductor.Age ( real | values: 40, 41 ), conductor.Nationality ( text | values: USA, UK ), conductor.Year_of_Work ( real | values: 10, 11 ) ]
table orchestra, columns = [ orchestra.Orchestra_ID ( integer | primary key | values: 1, 2 ), orchestra.Orchestra ( text | values: London Symphony Orchestra, Columbia Symphony Orchestra ), orchestra.Conductor_ID ( integer | values: 1, 2 ), orchestra.Record_Company ( text | values: Mercury Records, Columbia Masterworks ), orchestra.Year_of_Founded ( real | values: 2003.0, 2009.0 ), orchestra.Major_Record_Format ( text | values: CD, CD / LP ) ]
table performance, columns = [ performance.Performance_ID ( integer | primary key | values: 1, 2 ), performance.Orchestra_ID ( integer | values: 1, 2 ), performance.Type ( text | values: Auditions 1, Auditions 2 ), performance.Date ( text | values: 9 June, 10 June ), performance.Official_ratings_(millions) ( real | values: 5.2, 6.73 ), performance.Weekly_rank ( text | values: 12, 8 ), performance.Share ( text | values: 22.7%, 28.0% ) ]
table show, columns = [ show.Show_ID ( real | values: 1, 2 ), show.Performance_ID ( integer | values: 1, 2 ), show.If_first_show ( text | values: Glebe Park, Fir Park ), show.Result ( text | values: T, F ), show.Attendance ( real | values: 1026.0, 695.0 ) ]
foreign keys:
orchestra.Conductor_ID = conductor.Conductor_ID
performance.Orchestra_ID = orchestra.Orchestra_ID
show.Performance_ID = performance.Performance_ID

# Here are some example questions that CAN be answered by the schema below:
-- Please help me generate the questions.
-- What is the average age of conductors in the database who have been working for more than 20 years?
-- What is the total number of performances by the orchestra with Orchestra ID 1 in the year 2010?
-- What is the name of the conductor with the highest average official ratings (in millions) for the performances conducted in the year 2010?
-- What is the number of performances with an official rating of more than 10 million in the year 2015?
------------------------------------------------------------------------------------------
database_id: cre_Drama_Workshop_Groups
database schema :
table Ref_Payment_Methods, columns = [ Ref_Payment_Methods.payment_method_code ( text | primary key | values: American E, MasterCard ), Ref_Payment_Methods.payment_method_description ( text | values: credit, debit ) ]
table Ref_Service_Types, columns = [ Ref_Service_Types.Service_Type_Code ( text | primary key | values: 1, 2 ), Ref_Service_Types.Parent_Service_Type_Code ( text | values: 1 ), Ref_Service_Types.Service_Type_Description ( text | values: provide photo service, provide dinning service ) ]
table Addresses, columns = [ Addresses.Address_ID ( text | primary key | values: 110, 124 ), Addresses.Line_1 ( text | values: 4753 Dach Highway, 391 Vandervort Fall Apt. 446 ), Addresses.Line_2 ( text | values: Suite 846, Apt. 107 ), Addresses.City_Town ( text | values: Feliciaberg, West Sherwoodstad ), Addresses.State_County ( text | values: Florida, Indiana ), Addresses.Other_Details ( text | values: N/A ) ]
table Products, columns = [ Products.Product_ID ( text | primary key | values: 11, 154 ), Products.Product_Name ( text | values: photo, film ), Products.Product_Price ( real | values: 4448536, 2302 ), Products.Product_Description ( text | values: N/A ), Products.Other_Product_Service_Details ( text | values: N/A ) ]
table Marketing_Regions, columns = [ Marketing_Regions.Marketing_Region_Code ( text | primary key | values: CA, CN ), Marketing_Regions.Marketing_Region_Name ( text | values: Canada, China ), Marketing_Regions.Marketing_Region_Descriptrion ( text | values: Our target market, Our largest market ), Marketing_Regions.Other_Details ( text | values: N/A ) ]
table Clients, columns = [ Clients.Client_ID ( integer | primary key | values: 423, 426 ), Clients.Address_ID ( integer | values: 201, 383 ), Clients.Customer_Email_Address ( text | values: branson94@example.net, alba04@example.com ), Clients.Customer_Name ( text | values: Clifford, Bettye ), Clients.Customer_Phone ( text | values: (042)912-3404x5135, (604)849-0214 ), Clients.Other_Details ( text | values: VIP, Super VIP ) ]
table Drama_Workshop_Groups, columns = [ Drama_Workshop_Groups.Workshop_Group_ID ( integer | primary key | values: 136, 140 ), Drama_Workshop_Groups.Address_ID ( integer | values: 383, 180 ), Drama_Workshop_Groups.Currency_Code ( text | values: EU, USD ), Drama_Workshop_Groups.Marketing_Region_Code ( text | values: FR, DE ), Drama_Workshop_Groups.Store_Name ( text | values: Amely Cafe, Veda Film ), Drama_Workshop_Groups.Store_Phone ( text | values: 122-084-8029, 793-966-9311x5303 ), Drama_Workshop_Groups.Store_Email_Address ( text | values: amely.ruecker@example.com, breitenberg.veda@example.com ), Drama_Workshop_Groups.Other_Details ( text | values: Good, Bad ) ]
table Performers, columns = [ Performers.Performer_ID ( integer | primary key | values: 153, 211 ), Performers.Address_ID ( integer | values: 124, 39 ), Performers.Customer_Name ( text | values: Shawna, Ashley ), Performers.Customer_Phone ( text | values: 664.495.1939, 893-536-8857 ), Performers.Customer_Email_Address ( text | values: krogahn@example.com, preston45@example.net ), Performers.Other_Details ( text | values: Did not pay, Pay good tips ) ]
table Customers, columns = [ Customers.Customer_ID ( text | primary key | values: 240, 267 ), Customers.Address_ID ( integer | values: 286, 98 ), Customers.Customer_Name ( text | values: Harold, Federico ), Customers.Customer_Phone ( text | values: 624-096-7791, 914-915-7483 ), Customers.Customer_Email_Address ( text | values: jerde.harmon@example.com, johnson27@example.com ), Customers.Other_Details ( text | values: VIP ) ]
table Stores, columns = [ Stores.Store_ID ( text | primary key | values: 150, 229 ), Stores.Address_ID ( integer | values: 286, 266 ), Stores.Marketing_Region_Code ( text | values: IN, CA ), Stores.Store_Name ( text | values: FJA Filming, Rob Dinning ), Stores.Store_Phone ( text | values: +65(1)3590790358, 1-327-185-9368 ), Stores.Store_Email_Address ( text | values: fjacobson@example.com, rborer@example.org ), Stores.Other_Details ( text | values: 5 stars, 4 stars ) ]
table Bookings, columns = [ Bookings.Booking_ID ( integer | primary key | values: 1, 2 ), Bookings.Customer_ID ( integer | values: 938, 868 ), Bookings.Workshop_Group_ID ( text | values: 140, 838 ), Bookings.Status_Code ( text | values: good, stop ), Bookings.Store_ID ( real | values: 8, 7 ), Bookings.Order_Date ( datetime | values: 2016-12-12 10:43:01, 1976-08-20 00:33:08 ), Bookings.Planned_Delivery_Date ( datetime | values: 2013-03-10 18:47:05, 2009-07-09 09:18:38 ), Bookings.Actual_Delivery_Date ( datetime | values: 1997-11-21 10:07:40, 1976-01-08 07:19:23 ), Bookings.Other_Order_Details ( text | values: N/A ) ]
table Performers_in_Bookings, columns = [ Performers_in_Bookings.Order_ID ( integer | primary key | values: 1, 2 ), Performers_in_Bookings.Performer_ID ( integer | values: 153, 341 ) ]
table Customer_Orders, columns = [ Customer_Orders.Order_ID ( integer | primary key | values: 1, 2 ), Customer_Orders.Customer_ID ( integer | values: 516, 418 ), Customer_Orders.Store_ID ( integer | values: 231, 229 ), Customer_Orders.Order_Date ( datetime | values: 1994-08-03 12:34:58, 2014-07-10 10:56:01 ), Customer_Orders.Planned_Delivery_Date ( datetime | values: 1977-03-11 03:58:19, 1996-08-26 19:19:59 ), Customer_Orders.Actual_Delivery_Date ( datetime | values: 1992-07-21 22:11:11, 1998-08-22 17:57:32 ), Customer_Orders.Other_Order_Details ( text | values: N/A ) ]
table Order_Items, columns = [ Order_Items.Order_Item_ID ( integer | primary key | values: 1, 2 ), Order_Items.Order_ID ( integer | values: 3, 15 ), Order_Items.Product_ID ( integer | values: 233, 300 ), Order_Items.Order_Quantity ( text | values: 1, 2 ), Order_Items.Other_Item_Details ( text | values: N/A ) ]
table Invoices, columns = [ Invoices.Invoice_ID ( integer | primary key | values: 128, 162 ), Invoices.Order_ID ( integer | values: 14, 13 ), Invoices.payment_method_code ( text | values: MasterCard, Visa ), Invoices.Product_ID ( real | values: 4, 9 ), Invoices.Order_Quantity ( text | values: 2, 1 ), Invoices.Other_Item_Details ( text | values: N/A ), Invoices.Order_Item_ID ( real | values: 1, 9 ) ]
table Services, columns = [ Services.Service_ID ( integer | primary key | values: 191, 219 ), Services.Service_Type_Code ( text | values: 1, 2 ), Services.Workshop_Group_ID ( integer | values: 415, 838 ), Services.Product_Description ( text | values: N/A ), Services.Product_Name ( text | values: film, dinning ), Services.Product_Price ( real | values: 58932775.8822, 2704.4719 ), Services.Other_Product_Service_Details ( text | values: N/A ) ]
table Bookings_Services, columns = [ Bookings_Services.Order_ID ( integer | primary key | values: 1, 4 ), Bookings_Services.Product_ID ( integer | values: 396, 779 ) ]
table Invoice_Items, columns = [ Invoice_Items.Invoice_Item_ID ( integer | primary key | values: 1, 2 ), Invoice_Items.Invoice_ID ( integer | values: 128, 162 ), Invoice_Items.Order_ID ( integer | values: 1, 4 ), Invoice_Items.Order_Item_ID ( integer | values: 5, 6 ), Invoice_Items.Product_ID ( integer | values: 396, 191 ), Invoice_Items.Order_Quantity ( real | values: 2, 6 ), Invoice_Items.Other_Item_Details ( text | values: Good quality ) ]
foreign keys:
Clients.Address_ID = Addresses.Address_ID
Drama_Workshop_Groups.Address_ID = Addresses.Address_ID
Performers.Address_ID = Addresses.Address_ID
Customers.Address_ID = Addresses.Address_ID
Stores.Marketing_Region_Code = Marketing_Regions.Marketing_Region_Code
Stores.Address_ID = Addresses.Address_ID
Bookings.Workshop_Group_ID = Drama_Workshop_Groups.Workshop_Group_ID
Bookings.Customer_ID = Clients.Client_ID
Performers_in_Bookings.Order_ID = Bookings.Booking_ID
Performers_in_Bookings.Performer_ID = Performers.Performer_ID
Customer_Orders.Store_ID = Stores.Store_ID
Customer_Orders.Customer_ID = Customers.Customer_ID
Order_Items.Product_ID = Products.Product_ID
Order_Items.Order_ID = Customer_Orders.Order_ID
Invoices.payment_method_code = Ref_Payment_Methods.payment_method_code
Invoices.Order_ID = Bookings.Booking_ID
Invoices.Order_ID = Customer_Orders.Order_ID
Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code
Services.Workshop_Group_ID = Drama_Workshop_Groups.Workshop_Group_ID
Bookings_Services.Product_ID = Services.Service_ID
Bookings_Services.Order_ID = Bookings.Booking_ID
Invoice_Items.Order_ID = Bookings_Services.Order_ID
Invoice_Items.Product_ID = Bookings_Services.Product_ID
Invoice_Items.Invoice_ID = Invoices.Invoice_ID
Invoice_Items.Order_Item_ID = Order_Items.Order_Item_ID

# Here are some example questions that CAN be answered by the schema below:
-- Select the number of customers who are also performers.
-- What is the average number of bookings per customer, grouped by region?
-- What is the total number of clients who have purchased drama workshop services in each region?
-- What are the most common payment methods used by customers to pay for drama workshop services in each region?
-- What are the average order quantities and total revenue generated per region for drama workshop services?
------------------------------------------------------------------------------------------
database_id: car_1
database schema :
table continents, columns = [ continents.ContId ( integer | primary key | values: 1, 2 ), continents.Continent ( text | values: america, europe ) ]
table countries, columns = [ countries.CountryId ( integer | primary key | values: 1, 2 ), countries.CountryName ( text | values: usa, germany ), countries.Continent ( integer | values: 1, 2 ) ]
table car_makers, columns = [ car_makers.Id ( integer | primary key | values: 1, 2 ), car_makers.Maker ( text | values: amc, volkswagen ), car_makers.FullName ( text | values: American Motor Company, Volkswagen ), car_makers.Country ( text | values: 1, 2 ) ]
table model_list, columns = [ model_list.ModelId ( integer | primary key | values: 1, 2 ), model_list.Maker ( integer | values: 1, 2 ), model_list.Model ( text | values: amc, audi ) ]
table car_names, columns = [ car_names.MakeId ( integer | primary key | values: 1, 2 ), car_names.Model ( text | values: chevrolet, buick ), car_names.Make ( text | values: chevrolet chevelle malibu, buick skylark 320 ) ]
table cars_data, columns = [ cars_data.Id ( integer | primary key | values: 1, 2 ), cars_data.MPG ( text | values: 18, 15 ), cars_data.Cylinders ( real | values: 8, 4 ), cars_data.Edispl ( real | values: 307.0, 350.0 ), cars_data.Horsepower ( text | values: 130, 165 ), cars_data.Weight ( real | values: 3504, 3693 ), cars_data.Accelerate ( real | values: 12.0, 11.5 ), cars_data.Year ( real | values: 1970, 1971 ) ]
foreign keys:
countries.Continent = continents.ContId
car_makers.Country = countries.CountryId
model_list.Maker = car_makers.Id
car_names.Model = model_list.Model
cars_data.Id = car_names.MakeId

# Here are some example questions that CAN be answered by the schema below:
-- How many car models are made in the continent of Asia?
-- What is the average horsepower of all car models made in the country of United States?
-- How many car makers have at least one car model that has a horsepower greater than 250 and weighs less than 3500?
-- What is the average number of cylinders of all car models made by the maker Toyota, in the year 1990?
-- Which country has the highest number of car makers?  Display the name of the country and the number of car makers.  (Note: you can use subqueries or joins to achieve this)
------------------------------------------------------------------------------------------
database_id: geo
database schema :
table state, columns = [ state.state_name ( text | primary key | values: N/A ), state.population ( real | values: N/A ), state.area ( real | values: N/A ), state.country_name ( text | values: N/A ), state.capital ( text | values: N/A ), state.density ( real | values: N/A ) ]
table city, columns = [ city.city_name ( text | primary key | values: N/A ), city.population ( real | values: N/A ), city.country_name ( text | values: N/A ), city.state_name ( text | values: N/A ) ]
table border_info, columns = [ border_info.state_name ( text | values: N/A ), border_info.border ( text | primary key | values: N/A ) ]
table highlow, columns = [ highlow.state_name ( text | primary key | values: N/A ), highlow.highest_elevation ( text | values: N/A ), highlow.lowest_point ( text | values: N/A ), highlow.highest_point ( text | values: N/A ), highlow.lowest_elevation ( text | values: N/A ) ]
table lake, columns = [ lake.lake_name ( text | values: N/A ), lake.area ( real | values: N/A ), lake.country_name ( text | values: N/A ), lake.state_name ( text | values: N/A ) ]
table mountain, columns = [ mountain.mountain_name ( text | primary key | values: N/A ), mountain.mountain_altitude ( real | values: N/A ), mountain.country_name ( text | values: N/A ), mountain.state_name ( text | values: N/A ) ]
table river, columns = [ river.river_name ( text | primary key | values: N/A ), river.length ( real | values: N/A ), river.country_name ( text | values: N/A ), river.traverse ( text | values: N/A ) ]
foreign keys:
city.state_name = state.state_name
border_info.border = state.state_name
border_info.state_name = state.state_name
highlow.state_name = state.state_name
mountain.state_name = state.state_name
river.traverse = state.state_name

# Here are some example questions that CAN be answered by the schema below:
-- What is the average population of all cities in the state of New York?
-- How many states have a population greater than 10 million and a border with the state of Texas?
-- What is the name of the capital city of the state with the highest population density?
-- What is the name of the river that traverses the state of California?
-- What is the total area of all lakes in the state of Oregon?  Join the lake table with the state table to get the state's name and then join it with the state table to get the country name.  Order the results by state name.  Select the state's name, country name, and the total area of the lakes.  Do not show any results where the state's name is null.  Do not show any results where the country name is null.  Use the state table's area column to calculate the total area.  Use the lake table's area column to calculate the total area.  Use the state table's area column to calculate the total area.  Use the state table's area column to calculate the total area.  Use the state table's area column to calculate the total area.  Use the state table
------------------------------------------------------------------------------------------
database_id: behavior_monitoring
database schema :
table Ref_Address_Types, columns = [ Ref_Address_Types.address_type_code ( text | primary key | values: BILL, HOME ), Ref_Address_Types.address_type_description ( text | values: Billing, Home or Residence ) ]
table Ref_Detention_Type, columns = [ Ref_Detention_Type.detention_type_code ( text | primary key | values: AFTER, BREAK  ), Ref_Detention_Type.detention_type_description ( text | values: During Break time, After School ) ]
table Ref_Incident_Type, columns = [ Ref_Incident_Type.incident_type_code ( text | primary key | values: DISTURB, NOISE ), Ref_Incident_Type.incident_type_description ( text | values: Noise, Violence ) ]
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.line_1 ( text | values: 020 Orie Canyon, 1333 Boyle Lane ), Addresses.line_2 ( text | values: N/A ), Addresses.line_3 ( text | values: N/A ), Addresses.city ( text | values: North Loyceville, West Sean ), Addresses.zip_postcode ( text | values: 197, 937 ), Addresses.state_province_county ( text | values: Hawaii, Illinois ), Addresses.country ( text | values: USA ), Addresses.other_address_details ( text | values: N/A ) ]
table Students, columns = [ Students.student_id ( integer | primary key | values: 1, 2 ), Students.address_id ( integer | values: 19, 9 ), Students.first_name ( text | values: Emma, Louvenia ), Students.middle_name ( text | values: Frederic, Fatima ), Students.last_name ( text | values: Rohan, Hansen ), Students.cell_mobile_number ( text | values: 235.899.9744, 1-247-673-8446 ), Students.email_address ( text | values: derrick.jenkins@example.com, rohan.clarabelle@example.org ), Students.date_first_rental ( datetime | values: 2017-12-05 15:20:04, 2017-08-08 22:30:36 ), Students.date_left_university ( datetime | values: 2018-03-03 03:33:05, 2018-02-24 11:12:11 ), Students.other_student_details ( text | values: first honor ) ]
table Teachers, columns = [ Teachers.teacher_id ( integer | primary key | values: 1, 2 ), Teachers.address_id ( integer | values: 15, 7 ), Teachers.first_name ( text | values: Lyla, Sid ), Teachers.middle_name ( text | values: Wilson, Tremayne ), Teachers.last_name ( text | values: Medhurst, Brakus ), Teachers.gender ( text | values: 1, 0 ), Teachers.cell_mobile_number ( text | values: 792.333.7714, 202.626.1698x9242 ), Teachers.email_address ( text | values: ohammes@example.com, deborah37@example.com ), Teachers.other_details ( text | values: Dean ) ]
table Assessment_Notes, columns = [ Assessment_Notes.notes_id ( real | values: 1, 2 ), Assessment_Notes.student_id ( integer | values: 7, 11 ), Assessment_Notes.teacher_id ( integer | values: 3, 10 ), Assessment_Notes.date_of_notes ( datetime | values: 1978-04-15 04:49:18, 2005-06-30 02:48:35 ), Assessment_Notes.text_of_notes ( text | values: N/A ), Assessment_Notes.other_details ( text | values: N/A ) ]
table Behavior_Incident, columns = [ Behavior_Incident.incident_id ( integer | primary key | values: 1, 2 ), Behavior_Incident.incident_type_code ( text | values: NOISE, DISTURB ), Behavior_Incident.student_id ( integer | values: 6, 13 ), Behavior_Incident.date_incident_start ( datetime | values: 2017-07-09 10:04:13, 2018-01-31 10:51:13 ), Behavior_Incident.date_incident_end ( datetime | values: 2018-03-08 14:08:54, 2018-03-18 18:40:05 ), Behavior_Incident.incident_summary ( text | values: N/A ), Behavior_Incident.recommendations ( text | values: Transfer schools ), Behavior_Incident.other_details ( text | values: N/A ) ]
table Detention, columns = [ Detention.detention_id ( integer | primary key | values: 1, 2 ), Detention.detention_type_code ( text | values: AFTER, BREAK  ), Detention.teacher_id ( integer | values: 7, 14 ), Detention.datetime_detention_start ( datetime | values: 2017-09-05 00:38:25, 2018-01-10 08:09:02 ), Detention.datetime_detention_end ( datetime | values: 2018-03-08 02:08:32, 2018-03-07 04:24:48 ), Detention.detention_summary ( text | values: N/A ), Detention.other_details ( text | values: N/A ) ]
table Student_Addresses, columns = [ Student_Addresses.student_id ( integer | values: 6, 3 ), Student_Addresses.address_id ( integer | values: 12, 18 ), Student_Addresses.date_address_from ( datetime | values: 2017-10-16 13:56:34, 2017-06-19 12:39:39 ), Student_Addresses.date_address_to ( datetime | values: 2018-03-15 10:37:19, 2018-03-02 00:19:57 ), Student_Addresses.monthly_rental ( real | values: 826.4319, 1113.0996 ), Student_Addresses.other_details ( text | values: house, apartment ) ]
table Students_in_Detention, columns = [ Students_in_Detention.student_id ( integer | values: 3, 8 ), Students_in_Detention.detention_id ( integer | values: 15, 13 ), Students_in_Detention.incident_id ( integer | values: 1, 3 ) ]
foreign keys:
Students.address_id = Addresses.address_id
Teachers.address_id = Addresses.address_id
Assessment_Notes.teacher_id = Teachers.teacher_id
Assessment_Notes.student_id = Students.student_id
Behavior_Incident.student_id = Students.student_id
Behavior_Incident.incident_type_code = Ref_Incident_Type.incident_type_code
Detention.teacher_id = Teachers.teacher_id
Detention.detention_type_code = Ref_Detention_Type.detention_type_code
Student_Addresses.student_id = Students.student_id
Student_Addresses.address_id = Addresses.address_id
Students_in_Detention.student_id = Students.student_id
Students_in_Detention.detention_id = Detention.detention_id
Students_in_Detention.incident_id = Behavior_Incident.incident_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the average monthly rental amount for students living at addresses with zip codes starting with '7'?
-- What is the total number of students who have been involved in any incident type other than 'Bullying'?
-- What is the list of addresses where students have been detained by teachers with the last name 'Doe', and the detention type is 'Disciplinary Action'?
-- What is the number of teachers with more than one student in detention on the same day?
-- What is the list of students who have been involved in incidents that occurred on the same day as their date of first rental?  ```
------------------------------------------------------------------------------------------
database_id: cre_Doc_Tracking_DB
database schema :
table Ref_Document_Types, columns = [ Ref_Document_Types.Document_Type_Code ( text | primary key | values: BK, CV ), Ref_Document_Types.Document_Type_Name ( text | values: CV, Book ), Ref_Document_Types.Document_Type_Description ( text | values:  ) ]
table Ref_Calendar, columns = [ Ref_Calendar.Calendar_Date ( datetime | primary key | values: 1972-03-31 09:47:22, 1976-06-15 03:40:06 ), Ref_Calendar.Day_Number ( real | values: 5, 7 ) ]
table Ref_Locations, columns = [ Ref_Locations.Location_Code ( text | primary key | values: b, c ), Ref_Locations.Location_Name ( text | values: Brazil, Canada ), Ref_Locations.Location_Description ( text | values:  ) ]
table Roles, columns = [ Roles.Role_Code ( text | primary key | values: ED, HR ), Roles.Role_Name ( text | values: Manager, Editor ), Roles.Role_Description ( text | values: Vero harum corrupti odit ipsa vero et odio. Iste et recusandae temporibus maxime. Magni aspernatur fugit quis explicabo totam esse corrupti., Itaque dolor ut nemo rerum vitae provident. Vel laborum ipsum velit sint. Et est omnis dignissimos. ) ]
table All_Documents, columns = [ All_Documents.Document_ID ( integer | primary key | values: 7, 11 ), All_Documents.Date_Stored ( datetime | values: 1976-06-15 03:40:06, 1986-10-14 17:53:39 ), All_Documents.Document_Type_Code ( text | values: CV, BK ), All_Documents.Document_Name ( text | values: Robin CV, Marry CV ), All_Documents.Document_Description ( text | values: N/A ), All_Documents.Other_Details ( text | values: N/A ) ]
table Employees, columns = [ Employees.Employee_ID ( integer | primary key | values: 25, 30 ), Employees.Role_Code ( text | values: HR, MG ), Employees.Employee_Name ( text | values: Leo, Ebba ), Employees.Gender_MFU ( text | values: , 1 ), Employees.Date_of_Birth ( datetime | values: 1973-02-15 17:16:00, 1979-09-20 12:50:15 ), Employees.Other_Details ( text | values: N/A ) ]
table Document_Locations, columns = [ Document_Locations.Document_ID ( integer | primary key | values: 7, 11 ), Document_Locations.Location_Code ( text | values: e, x ), Document_Locations.Date_in_Location_From ( datetime | values: 2017-01-06 23:17:22, 1972-03-31 09:47:22 ), Document_Locations.Date_in_Locaton_To ( datetime | values: 2008-06-08 12:45:38, 2012-07-03 09:48:46 ) ]
table Documents_to_be_Destroyed, columns = [ Documents_to_be_Destroyed.Document_ID ( integer | primary key | values: 7, 11 ), Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID ( integer | values: 156, 55 ), Documents_to_be_Destroyed.Destroyed_by_Employee_ID ( integer | values: 138, 173 ), Documents_to_be_Destroyed.Planned_Destruction_Date ( datetime | values: 1988-02-01 14:41:52, 2010-11-26 19:22:50 ), Documents_to_be_Destroyed.Actual_Destruction_Date ( datetime | values: 2017-01-06 23:17:22, 1986-10-14 17:53:39 ), Documents_to_be_Destroyed.Other_Details ( text | values: N/A ) ]
foreign keys:
All_Documents.Date_Stored = Ref_Calendar.Calendar_Date
All_Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code
Employees.Role_Code = Roles.Role_Code
Document_Locations.Document_ID = All_Documents.Document_ID
Document_Locations.Date_in_Locaton_To = Ref_Calendar.Calendar_Date
Document_Locations.Date_in_Location_From = Ref_Calendar.Calendar_Date
Document_Locations.Location_Code = Ref_Locations.Location_Code
Documents_to_be_Destroyed.Document_ID = All_Documents.Document_ID
Documents_to_be_Destroyed.Actual_Destruction_Date = Ref_Calendar.Calendar_Date
Documents_to_be_Destroyed.Planned_Destruction_Date = Ref_Calendar.Calendar_Date
Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID = Employees.Employee_ID
Documents_to_be_Destroyed.Destroyed_by_Employee_ID = Employees.Employee_ID

# Here are some example questions that CAN be answered by the schema below:
-- 2. How many employees are there in total?
-- What is the name of the document type that has the description 'Contract'?
-- What is the document name of the document with document id 123456?
-- What is the document type code of documents that are stored in the location with location code 'A1' and were stored before 01:00:00?
-- What is the document name of the document with the highest document id?
------------------------------------------------------------------------------------------
database_id: university_basketball
database schema :
table basketball_match, columns = [ basketball_match.Team_ID ( integer | primary key | values: 1, 2 ), basketball_match.School_ID ( integer | values: 1, 2 ), basketball_match.Team_Name ( text | values: North Carolina, Duke ), basketball_match.ACC_Regular_Season ( text | values: 14–2, 13–3 ), basketball_match.ACC_Percent ( text | values: .875, .813 ), basketball_match.ACC_Home ( text | values: 6–2, 7–1 ), basketball_match.ACC_Road ( text | values: 8–0, 6–2 ), basketball_match.All_Games ( text | values: 35–2, 28–6 ), basketball_match.All_Games_Percent ( real | values: 0.946, 0.824 ), basketball_match.All_Home ( text | values: 14–2, 15–1 ), basketball_match.All_Road ( text | values: 13–0, 8–2 ), basketball_match.All_Neutral ( text | values: 9–1, 5–3 ) ]
table university, columns = [ university.School_ID ( integer | primary key | values: 1, 2 ), university.School ( text | values: University of Delaware, Lebanon Valley College ), university.Location ( text | values: Newark, DE, Annville, PA ), university.Founded ( real | values: 1743.0, 1866.0 ), university.Affiliation ( text | values: Public, Private/Methodist ), university.Enrollment ( real | values: 19067.0, 2100.0 ), university.Nickname ( text | values: Fightin' Blue Hens, Flying Dutchmen ), university.Primary_conference ( text | values: Colonial Athletic Association ( D-I ), MAC Commonwealth Conference ( D-III ) ) ]
foreign keys:
basketball_match.School_ID = university.School_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many teams participated in the ACC regular season in the 2022-2023 season?
-- Which school has the highest number of total games played?
-- Find the number of teams that are members of the Atlantic Coast Conference (ACC) but are not members of the Power Five conferences.
-- What is the average number of games played at home by teams that are members of the Power Five conferences?
-- Which school has the highest number of wins in the ACC regular season in the 2022-2023 season?  (Note: "wins" in this context is the number of games won, not the number of games played)  You should only consider the teams that participated in the 2022-2023 ACC regular season.  (Hint: You may need to use an aggregation function to answer this question.)  (Note: The ACC_Regular_Season field can be used to determine which season a team participated in.)  (Note: If the team participated in the 2022-2023 season, you can assume the team's wins are stored in the ACC_Percent field.)  (Note: The ACC_Percent field stores the win-loss record in the format "x
------------------------------------------------------------------------------------------
database_id: soccer_2
database schema :
table College, columns = [ College.cName ( text | primary key | values: ASU, FSU ), College.state ( text | values: LA, AZ ), College.enr ( real | values: 18000, 12000 ) ]
table Player, columns = [ Player.pID ( integer | primary key | values: 10001, 20002 ), Player.pName ( text | values: Andrew, Blake ), Player.yCard ( text | values: no, yes ), Player.HS ( real | values: 1200, 1600 ) ]
table Tryout, columns = [ Tryout.pID ( integer | primary key | values: 10001, 20002 ), Tryout.cName ( text | values: ASU, LSU ), Tryout.pPos ( text | values: goalie, striker ), Tryout.decision ( text | values: no, yes ) ]
foreign keys:
Tryout.cName = College.cName
Tryout.pID = Player.pID

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of Colleges in the database?
-- What is the average number of enrollments for all Colleges located in the state of California?
-- Which College has the most players that passed the tryout?
-- What is the number of College teams that have more than 10 players?
-- Which College has the most players that are defenders? (pPos = D) and located in the state of California?  ) and the number of players is more than 10?
------------------------------------------------------------------------------------------
database_id: activity_1
database schema :
table Activity, columns = [ Activity.actid ( integer | primary key | values: 770, 771 ), Activity.activity_name ( text | values: Mountain Climbing, Canoeing ) ]
table Participates_in, columns = [ Participates_in.stuid ( integer | values: 1001, 1002 ), Participates_in.actid ( integer | values: 770, 771 ) ]
table Faculty_Participates_in, columns = [ Faculty_Participates_in.FacID ( integer | values: 1082, 1121 ), Faculty_Participates_in.actid ( integer | values: 784, 785 ) ]
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Faculty, columns = [ Faculty.FacID ( integer | primary key | values: 1082, 1121 ), Faculty.Lname ( text | values: Giuliano, Goodrich ), Faculty.Fname ( text | values: Mark, Michael ), Faculty.Rank ( text | values: Instructor, Professor ), Faculty.Sex ( text | values: M, F ), Faculty.Phone ( real | values: 2424, 3593 ), Faculty.Room ( text | values: 224, 219 ), Faculty.Building ( text | values: NEB, Barton ) ]
foreign keys:
Participates_in.actid = Activity.actid
Participates_in.stuid = Student.StuID
Faculty_Participates_in.actid = Activity.actid
Faculty_Participates_in.FacID = Faculty.FacID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of students who participate in the 'Basketball' activity?
-- How many students participate in activities that have a faculty advisor?
-- What is the most common activity that students with a major in 'Computer Science' participate in?
-- SELECT T1.Lname, T2.activity_name
-- SELECT T1.FacID, T2.activity_name
------------------------------------------------------------------------------------------
database_id: cre_Theme_park
database schema :
table Ref_Hotel_Star_Ratings, columns = [ Ref_Hotel_Star_Ratings.star_rating_code ( text | primary key | values: 1, 2 ), Ref_Hotel_Star_Ratings.star_rating_description ( text | values: star ) ]
table Locations, columns = [ Locations.Location_ID ( integer | primary key | values: 333, 368 ), Locations.Location_Name ( text | values: Astro Orbiter, African Animals ), Locations.Address ( text | values: 660 Shea Crescent, 254 Ottilie Junction ), Locations.Other_Details ( text | values: N/A ) ]
table Ref_Attraction_Types, columns = [ Ref_Attraction_Types.Attraction_Type_Code ( text | primary key | values: 2, 3 ), Ref_Attraction_Types.Attraction_Type_Description ( text | values: park, garden ) ]
table Visitors, columns = [ Visitors.Tourist_ID ( integer | primary key | values: 164, 189 ), Visitors.Tourist_Details ( text | values: Toney, Graciela ) ]
table Features, columns = [ Features.Feature_ID ( integer | primary key | values: 523, 528 ), Features.Feature_Details ( text | values: cafe, park ) ]
table Hotels, columns = [ Hotels.hotel_id ( integer | primary key | values: 123, 144 ), Hotels.star_rating_code ( text | values: 5, 4 ), Hotels.pets_allowed_yn ( text | values: 1,  ), Hotels.price_range ( real | values: 2914989.571,  ), Hotels.other_hotel_details ( text | values: N/A ) ]
table Tourist_Attractions, columns = [ Tourist_Attractions.Tourist_Attraction_ID ( integer | primary key | values: 2113, 2701 ), Tourist_Attractions.Attraction_Type_Code ( text | values: 2, 6 ), Tourist_Attractions.Location_ID ( integer | values: 579, 417 ), Tourist_Attractions.How_to_Get_There ( text | values: bus, walk ), Tourist_Attractions.Name ( text | values: art museum, UK gallery ), Tourist_Attractions.Description ( text | values: N/A ), Tourist_Attractions.Opening_Hours ( text | values: N/A ), Tourist_Attractions.Other_Details ( text | values: N/A ) ]
table Street_Markets, columns = [ Street_Markets.Market_ID ( integer | primary key | values: 6852, 7067 ), Street_Markets.Market_Details ( text | values: Broadway, Fish Farm Market ) ]
table Shops, columns = [ Shops.Shop_ID ( integer | primary key | values: 8429, 8449 ), Shops.Shop_Details ( text | values: soup, coffee ) ]
table Museums, columns = [ Museums.Museum_ID ( integer | primary key | values: 2113, 2701 ), Museums.Museum_Details ( text | values: Yale Center for British Art, The Metropolitan Museum of Art ) ]
table Royal_Family, columns = [ Royal_Family.Royal_Family_ID ( integer | primary key | values: 9561, 9919 ), Royal_Family.Royal_Family_Details ( text | values: N/A ) ]
table Theme_Parks, columns = [ Theme_Parks.Theme_Park_ID ( integer | primary key | values: 5265, 6476 ), Theme_Parks.Theme_Park_Details ( text | values: Disney, Sea World ) ]
table Visits, columns = [ Visits.Visit_ID ( integer | primary key | values: 183, 268 ), Visits.Tourist_Attraction_ID ( integer | values: 6653, 5076 ), Visits.Tourist_ID ( integer | values: 377, 204 ), Visits.Visit_Date ( datetime | values: 2004-08-21 03:06:14, 2013-08-06 05:35:51 ), Visits.Visit_Details ( text | values:  ) ]
table Photos, columns = [ Photos.Photo_ID ( integer | primary key | values: 211, 280 ), Photos.Tourist_Attraction_ID ( integer | values: 8449, 7067 ), Photos.Name ( text | values: game1, game2 ), Photos.Description ( text | values: N/A ), Photos.Filename ( text | values: 702, 762 ), Photos.Other_Details ( text | values: N/A ) ]
table Staff, columns = [ Staff.Staff_ID ( integer | primary key | values: 170, 219 ), Staff.Tourist_Attraction_ID ( integer | values: 6476, 7067 ), Staff.Name ( text | values: Whitney, Kaela ), Staff.Other_Details ( text | values: N/A ) ]
table Tourist_Attraction_Features, columns = [ Tourist_Attraction_Features.Tourist_Attraction_ID ( integer | primary key | values: 5076, 5265 ), Tourist_Attraction_Features.Feature_ID ( integer | values: 528, 681 ) ]
foreign keys:
Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code
Tourist_Attractions.Attraction_Type_Code = Ref_Attraction_Types.Attraction_Type_Code
Tourist_Attractions.Location_ID = Locations.Location_ID
Street_Markets.Market_ID = Tourist_Attractions.Tourist_Attraction_ID
Shops.Shop_ID = Tourist_Attractions.Tourist_Attraction_ID
Museums.Museum_ID = Tourist_Attractions.Tourist_Attraction_ID
Royal_Family.Royal_Family_ID = Tourist_Attractions.Tourist_Attraction_ID
Theme_Parks.Theme_Park_ID = Tourist_Attractions.Tourist_Attraction_ID
Visits.Tourist_ID = Visitors.Tourist_ID
Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID
Photos.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID
Staff.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID
Tourist_Attraction_Features.Feature_ID = Features.Feature_ID
Tourist_Attraction_Features.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(Tourist_Attraction_ID)
-- SELECT star_rating_description FROM Ref_Hotel_Star_Ratings WHERE star_rating_code = (SELECT star_rating_code FROM Hotels WHERE pets_allowed_yn = 'Y');
-- SELECT COUNT(Tourist_ID)
-- SELECT DISTINCT Location_Name
-- SELECT T1.star_rating_description, T2.price_range
------------------------------------------------------------------------------------------
database_id: twitter_1
database schema :
table follows, columns = [ follows.f1 ( integer | primary key | values: 1, 2 ), follows.f2 ( integer | values: 2, 3 ) ]
table tweets, columns = [ tweets.id ( integer | primary key | values: 1, 2 ), tweets.uid ( integer | values: 1, 3 ), tweets.text ( text | values: Hello I'm Tony Stark., Today I have went shopping at Laffayette. ), tweets.createdate ( datetime | values: 2018-03-09 20:00:14, 2018-03-09 20:01:02 ) ]
table user_profiles, columns = [ user_profiles.uid ( integer | primary key | values: 1, 2 ), user_profiles.name ( text | values: Iron Man, Mary ), user_profiles.email ( text | values: ts@richest.com, Mary@yale.edu ), user_profiles.partitionid ( real | values: 1, 2 ), user_profiles.followers ( real | values: 6662425, 890 ) ]
foreign keys:
follows.f2 = user_profiles.uid
follows.f1 = user_profiles.uid
tweets.uid = user_profiles.uid

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of followers of all users who have made a tweet?
-- What is the name of the user who has the most followers?
-- How many users have tweeted before 2020-01-01?
-- What is the number of users who follow at least one user who has tweeted?
-- What is the name of the user with the email 'user@example.com' and who has tweeted the most number of times?  If there are multiple users with the same maximum number of tweets, return all their names.  Assume there are no duplicate names.  Assume the email is unique.  Assume the email is present in the database.  Assume the email is present in the user_profiles table.  Assume the email is unique to one user.  Assume there is at least one user with the email.  Assume the email is in the format 'user@domain.com'.  Assume the email is present in the user_profiles table.  Assume the email is not null.  Assume the email is in the user_profiles table.  Assume there is at least one user with the email in the user_profiles table.  Assume the email is not null in the user_profiles table.
------------------------------------------------------------------------------------------
database_id: election_representative
database schema :
table election, columns = [ election.Election_ID ( integer | primary key | values: 1, 2 ), election.Representative_ID ( integer | values: 1, 2 ), election.Date ( text | values: July 1942, October 1942 ), election.Votes ( real | values: 9423.0, 11059.0 ), election.Vote_Percent ( real | values: 16.2, 18.5 ), election.Seats ( real | values: 6.0, 10.0 ), election.Place ( real | values: 3.0, 1.0 ) ]
table representative, columns = [ representative.Representative_ID ( integer | primary key | values: 1, 2 ), representative.Name ( text | values: Dan Quayle, John Quayle ), representative.State ( text | values: Indiana, New York ), representative.Party ( text | values: Republican, Democratic ), representative.Lifespan ( text | values: 1947–, 1868–1930 ) ]
foreign keys:
election.Representative_ID = representative.Representative_ID

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM election WHERE Vote_Percent < 50 AND Date = '2022-01-01';
-- SELECT e.Date, r.Name FROM election e JOIN representative r ON e.Representative_ID = r.Representative_ID WHERE e.Election_ID = 12345;
-- SELECT COUNT(*) FROM representative WHERE State = 'California';
-- SELECT r.Name, e.Date FROM representative r JOIN election e ON r.Representative_ID = e.Representative_ID WHERE e.Votes > 100000 AND e.Date LIKE '2022-%';
-- SELECT COUNT(DISTINCT e.Date) FROM election e JOIN representative r ON e.Representative_ID = r.Representative_ID WHERE r.Party = 'Republican' AND e.Date LIKE '2020-%';  ```
------------------------------------------------------------------------------------------
database_id: voter_2
database schema :
table Student, columns = [ Student.StuID ( integer | primary key | values: 1001, 1002 ), Student.LName ( text | values: Smith, Kim ), Student.Fname ( text | values: Linda, Tracy ), Student.Age ( real | values: 18, 19 ), Student.Sex ( text | values: F, M ), Student.Major ( real | values: 600, 520 ), Student.Advisor ( real | values: 1121, 7712 ), Student.city_code ( text | values: BAL, HKG ) ]
table Voting_record, columns = [ Voting_record.StuID ( integer | values: 1001, 1002 ), Voting_record.Registration_Date ( text | values: 08/30/2015, 08/30/2014 ), Voting_record.Election_Cycle ( text | values: Spring, Fall ), Voting_record.President_Vote ( integer | values: 1004, 1014 ), Voting_record.Vice_President_Vote ( integer | values: 1007, 1017 ), Voting_record.Secretary_Vote ( integer | values: 1010, 1020 ), Voting_record.Treasurer_Vote ( integer | values: 1035, 1025 ), Voting_record.Class_President_Vote ( integer | values: 1001, 1021 ), Voting_record.Class_Senator_Vote ( integer | values: 1028, 1018 ) ]
foreign keys:
Voting_record.Class_Senator_Vote = Student.StuID
Voting_record.Class_President_Vote = Student.StuID
Voting_record.Treasurer_Vote = Student.StuID
Voting_record.Secretary_Vote = Student.StuID
Voting_record.Vice_President_Vote = Student.StuID
Voting_record.President_Vote = Student.StuID
Voting_record.StuID = Student.StuID

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of students in the Student table?
-- What is the name of the student who voted for president in the election cycle 'Spring 2018'?
-- What is the average age of the students who voted for the class president in the election cycle 'Fall 2017'?
-- What is the name of the advisor of the student who voted for the class senator in the election cycle 'Summer 2019'?
-- What is the number of students who voted for the president in the election cycle 'Fall 2018' and have an advisor who is a female? Answer this question by joining the Student table with the Voting_record table.
------------------------------------------------------------------------------------------
database_id: wedding
database schema :
table people, columns = [ people.People_ID ( integer | primary key | values: 1, 2 ), people.Name ( text | values: Mike Weir, Juli Hanson ), people.Country ( text | values: Canada, Sweden ), people.Is_Male ( text | values: T, F ), people.Age ( real | values: 34, 32 ) ]
table church, columns = [ church.Church_ID ( integer | primary key | values: 1, 2 ), church.Name ( text | values: Pure Church of Christ, Independent Church ), church.Organized_by ( text | values: Wycam Clark, – Hoton ), church.Open_Date ( real | values: 1831, 1832 ), church.Continuation_of ( text | values: Church of Christ, Church of the Latter Day Saints ) ]
table wedding, columns = [ wedding.Church_ID ( integer | primary key | values: 1, 3 ), wedding.Male_ID ( integer | values: 1, 3 ), wedding.Female_ID ( integer | values: 2, 4 ), wedding.Year ( real | values: 2014, 2015 ) ]
foreign keys:
wedding.Female_ID = people.People_ID
wedding.Male_ID = people.People_ID
wedding.Church_ID = church.Church_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of males who were married in 2020?
-- How many weddings were performed by the church named "St. Mark's"?
-- What is the age of the person whose name is "Marie" and was married in church "St. Mark's"?
-- Which country has the most people married in the year 2020?
-- What is the name of the church that was organized by "John" and was open in 1990?
------------------------------------------------------------------------------------------
database_id: news_report
database schema :
table event, columns = [ event.Event_ID ( integer | primary key | values: 1, 2 ), event.Date ( text | values: 13 October 2008, 11 October 2007 ), event.Venue ( text | values: Marathon, Victoria ), event.Name ( text | values: Olympia Games Openning, Government Hearing ), event.Event_Attendance ( real | values: 6650, 369 ) ]
table journalist, columns = [ journalist.journalist_ID ( integer | primary key | values: 1, 2 ), journalist.Name ( text | values: Herbert Swindells, Fred Keenor ), journalist.Nationality ( text | values: England, Wales ), journalist.Age ( text | values: 37, 27 ), journalist.Years_working ( real | values: 10, 5 ) ]
table news_report, columns = [ news_report.journalist_ID ( integer | primary key | values: 1, 4 ), news_report.Event_ID ( integer | values: 3, 1 ), news_report.Work_Type ( text | values: Screening, Music ) ]
foreign keys:
news_report.Event_ID = event.Event_ID
news_report.journalist_ID = journalist.journalist_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of journalists who attended events with attendance above 10000?
-- How many journalists are there who have covered at least one event in the year 2015?
-- What is the name of the event with the highest attendance in 2010?
-- Which journalist(s) have covered the most events in the year 2010?
-- What is the name of the journalist who covered the event with the highest attendance in 2010?
------------------------------------------------------------------------------------------
database_id: wine_1
database schema :
table grapes, columns = [ grapes.ID ( integer | primary key | values: 1, 2 ), grapes.Grape ( text | values: Barbera, Cabernet Franc ), grapes.Color ( text | values: Red, White ) ]
table appellations, columns = [ appellations.No ( integer | primary key | values: 1, 2 ), appellations.Appelation ( text | values: Alexander Valley, Amador County ), appellations.County ( text | values: Sonoma, Amador ), appellations.State ( text | values: California ), appellations.Area ( text | values: North Coast, Sierra Foothills ), appellations.isAVA ( text | values: Yes, No ) ]
table wine, columns = [ wine.No ( real | values: 1, 2 ), wine.Grape ( text | values: Zinfandel, Sauvignon Blanc ), wine.Winery ( text | values: Robert Biale, Chiarello Family ), wine.Appelation ( text | values: St. Helena, Napa Valley ), wine.State ( text | values: California ), wine.Name ( text | values: Old Kraft Vineyard, Giana ), wine.Year ( real | values: 2008, 2007 ), wine.Price ( real | values: 44, 35 ), wine.Score ( real | values: 93, 91 ), wine.Cases ( real | values: 275, 480 ), wine.Drink ( text | values: now, 2012 ) ]
foreign keys:
wine.Appelation = appellations.Appelation
wine.Grape = grapes.Grape

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of cases sold for wines made from red grapes?
-- What are the top 3 counties with the highest total number of wine cases sold?
-- List the names of all wines made in the state of California, sorted by the wine's score in descending order.
-- What is the total number of wines made from the grape 'Cabernet Sauvignon' that have a price higher than $50?
-- Which winery produced the most wines that were awarded a perfect score (100)?
------------------------------------------------------------------------------------------
database_id: customers_and_addresses
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.address_content ( text | values: 9443 Boyle Route Suite 857, 1969 Jabari Port Suite 393 ), Addresses.city ( text | values: Lucasville, New Sabryna ), Addresses.zip_postcode ( text | values: 416, 721 ), Addresses.state_province_county ( text | values: Colorado, SouthCarolina ), Addresses.country ( text | values: USA ), Addresses.other_address_details ( text | values: N/A ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.product_details ( text | values: Americano, Dove Chocolate ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.payment_method ( text | values: Cash, Cheque ), Customers.customer_name ( text | values: Dr. Julia Wuckert MD, Tillman Ernser ), Customers.date_became_customer ( datetime | values: 2018-03-01 23:20:10, 2018-02-28 11:37:44 ), Customers.other_customer_details ( text | values: VIP ) ]
table Customer_Addresses, columns = [ Customer_Addresses.customer_id ( integer | values: 2, 13 ), Customer_Addresses.address_id ( integer | values: 11, 14 ), Customer_Addresses.date_address_from ( datetime | values: 1985-03-29 20:31:43, 2010-08-25 04:24:35 ), Customer_Addresses.address_type ( text | values: Billing, Residential ), Customer_Addresses.date_address_to ( datetime | values: 1993-02-17 17:55:18, 1972-02-17 22:23:38 ) ]
table Customer_Contact_Channels, columns = [ Customer_Contact_Channels.customer_id ( integer | values: 9, 2 ), Customer_Contact_Channels.channel_code ( text | values: Email, Cell ), Customer_Contact_Channels.active_from_date ( datetime | values: 2017-12-07 18:18:15, 2017-04-07 04:51:41 ), Customer_Contact_Channels.active_to_date ( datetime | values: 2018-03-23 13:37:14, 2018-03-23 01:30:52 ), Customer_Contact_Channels.contact_number ( text | values: 940.035.6435x0225, 189.449.8326x7607 ) ]
table Customer_Orders, columns = [ Customer_Orders.order_id ( integer | primary key | values: 1, 2 ), Customer_Orders.customer_id ( integer | values: 15, 3 ), Customer_Orders.order_status ( text | values: Cancelled, Delivered ), Customer_Orders.order_date ( datetime | values: 2018-03-21 11:20:46, 2018-03-05 06:35:33 ), Customer_Orders.order_details ( text | values: Second time ) ]
table Order_Items, columns = [ Order_Items.order_id ( integer | values: 14, 5 ), Order_Items.product_id ( integer | values: 2, 3 ), Order_Items.order_quantity ( text | values: 5, 9 ) ]
foreign keys:
Customer_Addresses.customer_id = Customers.customer_id
Customer_Addresses.address_id = Addresses.address_id
Customer_Contact_Channels.customer_id = Customers.customer_id
Customer_Orders.customer_id = Customers.customer_id
Order_Items.order_id = Customer_Orders.order_id
Order_Items.product_id = Products.product_id

# Here are some example questions that CAN be answered by the schema below:
-- Here are the 5 questions that can be answered using the provided database schema:
-- How many customers are there in total?
-- What is the average number of orders placed by customers who have a contact channel with 'Email' code?
-- What is the average order quantity of all orders placed by customers in the city of New York?
-- What are the most common payment methods used by customers in the country of India?
------------------------------------------------------------------------------------------
database_id: protein_institute
database schema :
table building, columns = [ building.building_id ( text | primary key | values: 0, 1 ), building.Name ( text | values: Citizens Bank Building, Tampa City Hall ), building.Street_address ( text | values: 701 North Franklin Street, 315 John F. Kennedy Boulevard ), building.Years_as_tallest ( text | values: 1913–1915, 1915–1926 ), building.Height_feet ( real | values: 145, 160 ), building.Floors ( real | values: 12, 10 ) ]
table Institution, columns = [ Institution.Institution_id ( text | primary key | values: 0, 1 ), Institution.Institution ( text | values: Ave Maria University, Dakota State University ), Institution.Location ( text | values: Ave Maria, Florida, Madison, South Dakota ), Institution.Founded ( real | values: 1998.0, 1881.0 ), Institution.Type ( text | values: Private, Public ), Institution.Enrollment ( real | values: 1200, 3102 ), Institution.Team ( text | values: Gyrenes, Trojans ), Institution.Primary_Conference ( text | values: The Sun, none ), Institution.building_id ( text | values: 1, 3 ) ]
table protein, columns = [ protein.common_name ( text | primary key | values: Tropical Clawed Frog, body louse ), protein.protein_name ( text | values: uncharacterized protein C20orf117-like, uncharacterized protein LOC578090 ), protein.divergence_from_human_lineage ( real | values: 371.2, 742.9 ), protein.accession_number ( text | values: XP_002942331.1, XP_783370.2 ), protein.sequence_length ( real | values: 1584.0, 1587.0 ), protein.sequence_identity_to_human_protein ( text | values: 39%, 47% ), protein.Institution_id ( text | values: 1, 3 ) ]
foreign keys:
Institution.building_id = building.building_id
protein.Institution_id = Institution.Institution_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the average height of all buildings that are taller than 100 floors?
-- How many institutions are there that have an enrollment of more than 10,000 students and have a team that plays in the primary conference 'NCAA'?
-- What is the count of proteins with a sequence length greater than 500 amino acids that are related to the institution with the name 'Harvard University'?
-- What are the names of all institutions that have a building with a height of more than 1000 feet and were founded before the year 1800?
-- What is the count of institutions that have a building with a height of more than 500 feet and have a team that plays in the primary conference 'NCAA' and have an enrollment of more than 10,000 students?  JOIN building and institution tables to answer this question.  (ANSWER: 4)
------------------------------------------------------------------------------------------
database_id: school_player
database schema :
table school, columns = [ school.School_ID ( integer | primary key | values: 1, 2 ), school.School ( text | values: St Aloysius' College, Barker College ), school.Location ( text | values: Milsons Point, Hornsby ), school.Enrollment ( real | values: 1200.0, 2300.0 ), school.Founded ( real | values: 1879.0, 1890.0 ), school.Denomination ( text | values: Catholic, Anglican ), school.Boys_or_Girls ( text | values: Boys, Boys only to Yr 9 Co-ed Year 10 to 12 ), school.Day_or_Boarding ( text | values: Day, Day & Boarding ), school.Year_Entered_Competition ( real | values: 1929.0, 1944.0 ), school.School_Colors ( text | values: Royal Blue and Gold, Red & Blue ) ]
table school_details, columns = [ school_details.School_ID ( integer | primary key | values: 1, 2 ), school_details.Nickname ( text | values: Tigers, Auks ), school_details.Colors ( text | values: Blue and Yellow, Dark Green and White ), school_details.League ( text | values: DSHA ), school_details.Class ( text | values: Flight A, Flight B ), school_details.Division ( text | values: Division 1, Division 3 ) ]
table school_performance, columns = [ school_performance.School_Id ( integer | primary key | values: 1, 2 ), school_performance.School_Year ( text | values: 1987-88, 1988-89 ), school_performance.Class_A ( text | values: Yantis, Happy ), school_performance.Class_AA ( text | values: Blanco, Bishop ) ]
table player, columns = [ player.Player_ID ( integer | primary key | values: 1, 2 ), player.Player ( text | values: Timothy Beckham, Pedro Álvarez ), player.Team ( text | values: Tampa Bay Devil Rays, Pittsburgh Pirates ), player.Age ( real | values: 15, 14 ), player.Position ( text | values: Shortstop, Third baseman ), player.School_ID ( integer | values: 1, 2 ) ]
foreign keys:
school_details.School_ID = school.School_ID
school_performance.School_Id = school.School_ID
player.School_ID = school.School_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many schools are there in the school table?
-- What is the name of the school with the highest enrollment in the school table?
-- What is the school with the highest enrollment in the school table that also has the most awards (assuming the awards are contained in the school_performance table)?
-- What is the average age of players from the school with the highest enrollment in the school table?
-- Which schools in the school table have at least 2000 students in the school_performance table for Class A and Class AA awards in the same school year?  show the school name and enrollment.
------------------------------------------------------------------------------------------
database_id: phone_1
database schema :
table chip_model, columns = [ chip_model.Model_name ( text | primary key | values: X3 Advanced, X3 Basic ), chip_model.Launch_year ( real | values: 2002.0, 2003.0 ), chip_model.RAM_MiB ( real | values: 32.0, 64.0 ), chip_model.ROM_MiB ( real | values: 32.0, 48.0 ), chip_model.Slots ( text | values: 1CFII,1SD, 1SD ), chip_model.WiFi ( text | values: No, 802.11b ), chip_model.Bluetooth ( text | values: No, 1.1 ) ]
table screen_mode, columns = [ screen_mode.Graphics_mode ( integer | primary key | values: 0.0, 1.0 ), screen_mode.Char_cells ( text | values: 80 × 32, 40 × 32 ), screen_mode.Pixels ( text | values: 640 × 256, 320 × 256 ), screen_mode.Hardware_colours ( real | values: 2.0, 4.0 ), screen_mode.used_kb ( real | values: 20.0, 16.0 ), screen_mode.map ( text | values: 3000–7FFF, 4000–7FFF ), screen_mode.Type ( text | values: Graphics, Text ) ]
table phone, columns = [ phone.Company_name ( text | values: Sony Mobile Communications, LG Electronics ), phone.Hardware_Model_name ( text | primary key | values: GT-I9100, GT-I9300 ), phone.Accreditation_type ( text | values: Full, Provisional ), phone.Accreditation_level ( text | values: joyn Hot Fixes, joyn ), phone.Date ( text | values: Approved (awarded 15.11.12), Approved (awarded 19.11.12) ), phone.chip_model ( text | values: X5, X51v ), phone.screen_mode ( text | values: 1, 3 ) ]
foreign keys:
phone.chip_model = chip_model.Model_name
phone.screen_mode = screen_mode.Graphics_mode

# Here are some example questions that CAN be answered by the schema below:
-- How many chip models have at least 64 MB of RAM and at least 128 MB of ROM?
-- What is the average launch year of chip models that have at least one slot for memory expansion?
-- Which company produced the phone with the highest level of accreditation?
-- What is the percentage of phones with a screen mode that has a map of 640x480?
-- What are the chip model names of the phones that were released after 2010 and have at least 256 MB of RAM?  ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ```
------------------------------------------------------------------------------------------
database_id: tvshow
database schema :
table TV_Channel, columns = [ TV_Channel.id ( text | primary key | values: 700, 701 ), TV_Channel.series_name ( text | values: Sky Radio, Sky Music ), TV_Channel.Country ( text | values: Italy, United Kingdom ), TV_Channel.Language ( text | values: Italian, English ), TV_Channel.Content ( text | values: music ), TV_Channel.Pixel_aspect_ratio_PAR ( text | values: 4:3, 4:3 / 16:9 ), TV_Channel.Hight_definition_TV ( text | values: no, yes ), TV_Channel.Pay_per_view_PPV ( text | values: no ), TV_Channel.Package_Option ( text | values: Sky Famiglia, no ( FTV ) ) ]
table TV_series, columns = [ TV_series.id ( integer | primary key | values: 1.0, 2.0 ), TV_series.Episode ( text | values: A Love of a Lifetime, Friendly Skies ), TV_series.Air_Date ( text | values: September 24, 2007, October 1, 2007 ), TV_series.Rating ( text | values: 5.8, 5.3 ), TV_series.Share ( real | values: 9.0, 7.0 ), TV_series.18_49_Rating_Share ( text | values: 3.5/9, 3.2/8 ), TV_series.Viewers_m ( text | values: 9.16, 8.23 ), TV_series.Weekly_Rank ( real | values: 43.0, 50.0 ), TV_series.Channel ( text | values: 700, 701 ) ]
table Cartoon, columns = [ Cartoon.id ( integer | primary key | values: 1.0, 2.0 ), Cartoon.Title ( text | values: The Rise of the Blue Beetle!, Terror on Dinosaur Island! ), Cartoon.Directed_by ( text | values: Ben Jones, Brandon Vietti ), Cartoon.Written_by ( text | values: Michael Jelenic, Steven Melching ), Cartoon.Original_air_date ( text | values: November14,2008, November21,2008 ), Cartoon.Production_code ( real | values: 101.0, 102.0 ), Cartoon.Channel ( text | values: 700, 701 ) ]
foreign keys:
TV_series.Channel = TV_Channel.id
Cartoon.Channel = TV_Channel.id

# Here are some example questions that CAN be answered by the schema below:
-- Which TV channels have high-definition TV?
-- What is the average rating of TV series aired on channels that have pay-per-view (PPV) options?
-- Which TV series aired in 2017 have the highest share of 18-49 rating?
-- What is the title of the cartoon that was directed by "Bob Smith"?
-- What is the total number of TV series per channel that have a weekly rank above 10?
------------------------------------------------------------------------------------------
database_id: wrestler
database schema :
table wrestler, columns = [ wrestler.Wrestler_ID ( integer | primary key | values: 1, 2 ), wrestler.Name ( text | values: Rey Misterio Sr., Fishman ), wrestler.Reign ( text | values: 1, 2 ), wrestler.Days_held ( text | values: 344, 113 ), wrestler.Location ( text | values: Tijuana , Mexico, Tokyo , Japan ), wrestler.Event ( text | values: Live event, Wrestling World 1997 ) ]
table Elimination, columns = [ Elimination.Elimination_ID ( text | primary key | values: 1, 2 ), Elimination.Wrestler_ID ( text | values: 1, 2 ), Elimination.Team ( text | values: Team Orton, Team Batista ), Elimination.Eliminated_By ( text | values: Punk, Benjamin ), Elimination.Elimination_Move ( text | values: Go To Sleep, Paydirt ), Elimination.Time ( text | values: 00:11, 07:38 ) ]
foreign keys:
Elimination.Wrestler_ID = wrestler.Wrestler_ID

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM wrestler WHERE Days_held = "1";
-- SELECT e.Elimination_Move, w.Name FROM Elimination e JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Name = "John Cena";
-- Which wrestlers, who held the championship for more than 100 days, were eliminated by the champion in the same event?
-- What is the average number of days held by wrestlers in the Elimination table?
-- Which wrestlers were eliminated by a wrestler who also held the championship for more than 100 days?
------------------------------------------------------------------------------------------
database_id: customer_complaints
database schema :
table Staff, columns = [ Staff.staff_id ( integer | primary key | values: 114, 115 ), Staff.gender ( text | values: 0, 1 ), Staff.first_name ( text | values: Ward, Lucie ), Staff.last_name ( text | values: Boehm, Lowe ), Staff.email_address ( text | values: marcelle.ritchie@example.com, ohintz@example.org ), Staff.phone_number ( text | values: (379)551-0838x146, 142-311-6503x206 ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 113, 114 ), Customers.customer_type_code ( text | values: Good Credit Rating, Defaults on payments ), Customers.address_line_1 ( text | values: 144 Legros Landing, 039 Jedidiah Estate Suite 537 ), Customers.address_line_2 ( text | values: Apt. 551, Apt. 245 ), Customers.town_city ( text | values: Maryamport, Sauerberg ), Customers.state ( text | values: Kansas, Hawaii ), Customers.email_address ( text | values: hsteuber@example.org, cayla.satterfield@example.net ), Customers.phone_number ( text | values: 06963347450, 470-803-0244 ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 117, 118 ), Products.parent_product_id ( real | values: 4, 3 ), Products.product_category_code ( text | values: Food, Book ), Products.date_product_first_available ( datetime | values: 1988-09-29 17:54:50, 1974-06-25 12:26:47 ), Products.date_product_discontinued ( datetime | values: 1987-12-20 13:46:16, 1991-08-20 05:22:31 ), Products.product_name ( text | values: Chocolate, The Great Gatsby ), Products.product_description ( text | values: Handmade chocolate, American novel ), Products.product_price ( real | values: 2.88, 35 ) ]
table Complaints, columns = [ Complaints.complaint_id ( real | values: 1, 2 ), Complaints.product_id ( integer | values: 117, 118 ), Complaints.customer_id ( integer | values: 120, 113 ), Complaints.complaint_outcome_code ( text | values: OK ), Complaints.complaint_status_code ( text | values: Closed, New ), Complaints.complaint_type_code ( text | values: Product Failure, Product Unusable ), Complaints.date_complaint_raised ( datetime | values: 2002-07-18 10:59:35, 1973-02-10 22:55:56 ), Complaints.date_complaint_closed ( datetime | values: 1976-04-19 11:03:06, 2013-09-14 02:59:10 ), Complaints.staff_id ( integer | values: 114, 120 ) ]
foreign keys:
Complaints.customer_id = Customers.customer_id
Complaints.product_id = Products.product_id
Complaints.staff_id = Staff.staff_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the product with the highest price that is no longer available?
-- What is the total number of complaints raised by male staff members in the "Services" category?
-- How many products are there in the "Electronics" category that are priced higher than $2000?  [product_price > 2000]  [product_category_code = "Electronics"]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT
------------------------------------------------------------------------------------------
database_id: department_management
database schema :
table department, columns = [ department.Department_ID ( integer | primary key | values: 1, 2 ), department.Name ( text | values: State, Treasury ), department.Creation ( text | values: 1789, 1947 ), department.Ranking ( real | values: 1, 2 ), department.Budget_in_Billions ( real | values: 9.96, 11.1 ), department.Num_Employees ( real | values: 30266.0, 115897.0 ) ]
table head, columns = [ head.head_ID ( integer | primary key | values: 1, 2 ), head.name ( text | values: Tiger Woods, Sergio García ), head.born_state ( text | values: Alabama, California ), head.age ( real | values: 67.0, 68.0 ) ]
table management, columns = [ management.department_ID ( integer | primary key | values: 2, 7 ), management.head_ID ( integer | values: 5, 6 ), management.temporary_acting ( text | values: Yes, No ) ]
foreign keys:
management.head_ID = head.head_ID
management.department_ID = department.Department_ID

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of all department heads?
-- What is the total budget of all departments that are not the head of the department?
-- What is the average ranking of all departments with more than 500 employees?
-- How many departments are headed by people born in the state of "California"?
-- What is the total budget of all departments that have been acting as the head of the department at some point?  OR  What is the total budget of all departments that have had temporary head(s)?  OR  What is the total budget of all departments with temporary head(s) in the past?  OR  What is the total budget of all departments that have had a head in the past?  OR  What is the total budget of all departments that have had temporary acting heads?  OR  What is the total budget of all departments that have had acting heads?  OR  What is the total budget of all departments that have had past temporary acting heads?  OR  What is the total budget of all departments that have been led by temporary heads?  OR  What is the total budget of all departments with past acting head(s)?  OR  What is the total budget of all
------------------------------------------------------------------------------------------
database_id: customers_and_products_contacts
database schema :
table Addresses, columns = [ Addresses.address_id ( integer | primary key | values: 1, 2 ), Addresses.line_1_number_building ( text | values: 4315 Kerluke Canyon Apt. 800, 319 Kozey Highway Suite 973 ), Addresses.city ( text | values: Hertafurt, Edgardoberg ), Addresses.zip_postcode ( text | values: 740, 282 ), Addresses.state_province_county ( text | values: Nevada, Colorado ), Addresses.country ( text | values: USA ) ]
table Products, columns = [ Products.product_id ( integer | primary key | values: 1, 2 ), Products.product_type_code ( text | values: Hardware, Clothes ), Products.product_name ( text | values: Apple, jcrew ), Products.product_price ( real | values: 54753982.574522, 30590929.528306 ) ]
table Customers, columns = [ Customers.customer_id ( integer | primary key | values: 1, 2 ), Customers.payment_method_code ( text | values: Credit Card, Direct Debit ), Customers.customer_number ( text | values: 456, 553 ), Customers.customer_name ( text | values: Kayley, Sterling ), Customers.customer_address ( text | values: 636 Chanelle Isle Apt. 846, 12174 Boyer Crossroad ), Customers.customer_phone ( text | values: +87(9)5279161988, 896.685.8228x2786 ), Customers.customer_email ( text | values: antonette73@example.com, stroman.chadd@example.net ) ]
table Contacts, columns = [ Contacts.contact_id ( integer | primary key | values: 1, 2 ), Contacts.customer_id ( real | values: 4, 6 ), Contacts.gender ( text | values: male, female ), Contacts.first_name ( text | values: Cierra, Jennifer ), Contacts.last_name ( text | values: Collins, Doyle ), Contacts.contact_phone ( text | values: +73(2)0854391820, 482-949-1364x17500 ) ]
table Customer_Address_History, columns = [ Customer_Address_History.customer_id ( integer | values: 12, 3 ), Customer_Address_History.address_id ( integer | values: 7, 2 ), Customer_Address_History.date_from ( datetime | values: 2015-07-23 14:37:18, 2016-11-06 14:33:12 ), Customer_Address_History.date_to ( datetime | values: 2018-03-07 12:04:20, 2018-03-14 21:36:28 ) ]
table Customer_Orders, columns = [ Customer_Orders.order_id ( integer | primary key | values: 1, 2 ), Customer_Orders.customer_id ( integer | values: 2, 6 ), Customer_Orders.order_date ( datetime | values: 2009-07-19 13:40:49, 1976-05-28 15:02:44 ), Customer_Orders.order_status_code ( text | values: Completed, Part ) ]
table Order_Items, columns = [ Order_Items.order_item_id ( real | values: 1, 2 ), Order_Items.order_id ( integer | values: 9, 8 ), Order_Items.product_id ( integer | values: 15, 12 ), Order_Items.order_quantity ( text | values: 3, 7 ) ]
foreign keys:
Customer_Address_History.address_id = Addresses.address_id
Customer_Address_History.customer_id = Customers.customer_id
Customer_Orders.customer_id = Customers.customer_id
Order_Items.order_id = Customer_Orders.order_id
Order_Items.product_id = Products.product_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the average price of products ordered by customers from the United States, grouped by product type?
-- How many customers have a contact phone number that starts with the digit 4?
-- What is the total number of orders placed by customers with a payment method of "credit card"?
-- What is the average number of orders placed by customers who have purchased products with a price greater than $100?  ```sql
------------------------------------------------------------------------------------------
database_id: company_1
database schema :
table works_on, columns = [ works_on.Essn ( integer | primary key | values: 123456789, 333445555 ), works_on.Pno ( real | values: 1, 2 ), works_on.Hours ( real | values: 32.5, 7.5 ) ]
table employee, columns = [ employee.Fname ( text | values: Jonh, Franklin ), employee.Minit ( text | values: B, T ), employee.Lname ( text | values: Smith, Wong ), employee.Ssn ( integer | primary key | values: 123456789, 333445555 ), employee.Bdate ( text | values: 1965-01-09, 1955-12-08 ), employee.Address ( text | values: 731 Fondren, Houston, TX, 638 Voss, Houston, TX ), employee.Sex ( text | values: M, F ), employee.Salary ( real | values: 30000, 40000 ), employee.Super_ssn ( real | values: 333445555, 888665555 ), employee.Dno ( real | values: 5, 1 ) ]
table department, columns = [ department.Dname ( text | values: Headquarters, Administration ), department.Dnumber ( integer | primary key | values: 1, 4 ), department.Mgr_ssn ( real | values: 888665555, 987654321 ), department.Mgr_start_date ( text | values: 1981-06-19, 1995-01-01 ) ]
table project, columns = [ project.Pname ( text | values: ProductX, ProductY ), project.Pnumber ( integer | primary key | values: 1, 2 ), project.Plocation ( text | values: Bellaire, Sugarland ), project.Dnum ( real | values: 5, 4 ) ]
table dependent, columns = [ dependent.Essn ( integer | primary key | values: 123456789, 333445555 ), dependent.Dependent_name ( text | values: Alice, Elizabeth ), dependent.Sex ( text | values: F, M ), dependent.Bdate ( text | values: 1986-04-05, 1983-10-25 ), dependent.Relationship ( text | values: Daughter, Son ) ]
table dept_locations, columns = [ dept_locations.Dnumber ( integer | primary key | values: 1, 4 ), dept_locations.Dlocation ( text | values: Houston, Stafford ) ]

# Here are some example questions that CAN be answered by the schema below:
-- What is the average hours worked by employees in department 5?
-- How many employees work on project P-1?
-- What is the average salary of all employees working in the department with department number 5?
-- What is the name of the project with project number 4?
-- What are the names of all employees working on project 3?
------------------------------------------------------------------------------------------
database_id: workshop_paper
database schema :
table workshop, columns = [ workshop.Workshop_ID ( integer | primary key | values: 1, 2 ), workshop.Date ( text | values: August 18, 2007, August 21, 2007 ), workshop.Venue ( text | values: London UK, New Jersey USA ), workshop.Name ( text | values: ABC 2007, Conference 2007 ) ]
table submission, columns = [ submission.Submission_ID ( integer | primary key | values: 1, 2 ), submission.Scores ( real | values: 72.0, 79.0 ), submission.Author ( text | values: Steve Niehaus, Sammy Green ), submission.College ( text | values: Notre Dame, Florida ) ]
table Acceptance, columns = [ Acceptance.Submission_ID ( integer | primary key | values: 1, 2 ), Acceptance.Workshop_ID ( integer | values: 1, 3 ), Acceptance.Result ( text | values: Accepted, Rejected ) ]
foreign keys:
Acceptance.Workshop_ID = workshop.Workshop_ID
Acceptance.Submission_ID = submission.Submission_ID

# Here are some example questions that CAN be answered by the schema below:
-- How many workshops were held at the "University of California, Berkeley" venue?
-- What is the average score of submissions to the workshop with the name "ICML"?
-- Which college submitted the most number of papers to the workshop with the name "NIPS"?
-- How many submissions were accepted to the workshop with the name "CVPR"?
-- What are the names of authors who submitted papers to workshops held at the "Stanford University" venue?  ORDER BY Name;  LIMIT 1;  OFFSET 1;  SELECT Name FROM workshop AS T1 JOIN Acceptance AS T2 ON T1.Workshop_ID = T2.Workshop_ID JOIN submission AS T3 ON T2.Submission_ID = T3.Submission_ID WHERE T1.Venue = 'Stanford University' AND T3.Author IS NOT NULL;  GROUP BY T3.Author;  ORDER BY COUNT(T3.Author) DESC;  LIMIT 2;  SELECT T3.Author FROM workshop AS T1 JOIN Acceptance AS T2 ON T1.Workshop_ID = T2.Workshop_ID JOIN submission AS T3 ON T2.Submission_ID = T3.Submission_ID WHERE T1.Venue
------------------------------------------------------------------------------------------
database_id: epinions_1
database schema :
table item, columns = [ item.i_id ( integer | primary key | values: 0, 1 ), item.title ( text | values: pear, orange ) ]
table review, columns = [ review.a_id ( integer | primary key | values: 1, 2 ), review.u_id ( integer | values: 1, 2 ), review.i_id ( integer | values: 1, 3 ), review.rating ( real | values: 10, 5 ), review.rank ( real | values: 1, 2 ) ]
table useracct, columns = [ useracct.u_id ( integer | primary key | values: 1, 2 ), useracct.name ( text | values: Helen, Mark ) ]
table trust, columns = [ trust.source_u_id ( integer | values: 1, 2 ), trust.target_u_id ( integer | values: 2, 3 ), trust.trust ( real | values: 10, 6 ) ]
foreign keys:
review.i_id = item.i_id
review.u_id = useracct.u_id
trust.target_u_id = useracct.u_id
trust.source_u_id = useracct.u_id

# Here are some example questions that CAN be answered by the schema below:
-- What is the title of the item with i_id 5?
-- How many items have a rating of 5 in the review table?
-- What are the names of the users who have a rating of 4 for an item with title 'Product X'?
-- What is the average rating of items with title containing 'Apple'?
-- How many users have a rating of 4 for an item that is ranked 3 or higher and has a rating of 5?  Show the count only for the top 3 items.  Order by rank in descending order.  Limit to the top 3.  Also, show the count of users for each item.  Include all columns from the review table.  Use a subquery to determine the item ids.  Do not include any items with an i_id less than 4.  Filter the results to show only the items that are ranked 3 or higher.  Use a join to match the item titles.  Filter the results to show only the users with a rating of 4.  Order the results by rank in descending order.  Limit the results to the top 3.  Finally, exclude any items with an
------------------------------------------------------------------------------------------
database_id: party_host
database schema :
table party, columns = [ party.Party_ID ( integer | primary key | values: 1, 2 ), party.Party_Theme ( text | values: Spring, Club Q-BASE ), party.Location ( text | values: Hemkade 48 Zaandam, Various locations ), party.First_year ( text | values: 2000, 2002 ), party.Last_year ( text | values: 2001, 2002 ), party.Number_of_hosts ( real | values: 5, 23 ) ]
table host, columns = [ host.Host_ID ( integer | primary key | values: 1, 2 ), host.Name ( text | values: Austin Daye, Lloyd Daniels ), host.Nationality ( text | values: United States, Hungary ), host.Age ( text | values: 43, 37 ) ]
table party_host, columns = [ party_host.Party_ID ( integer | primary key | values: 1, 2 ), party_host.Host_ID ( integer | values: 1, 5 ), party_host.Is_Main_in_Charge ( text | values: T, F ) ]
foreign keys:
party_host.Party_ID = party.Party_ID
party_host.Host_ID = host.Host_ID

# Here are some example questions that CAN be answered by the schema below:
-- Select all names of hosts who are from Asia and have participated in the party with theme 'Winter Wonderland'.
-- What is the age of the main host in charge for the party with theme 'Summer Party'?
-- What is the average age of hosts who hosted the parties with the highest number of hosts in the party table?
-- What is the average age of the hosts who hosted the parties that took place in the United States?
-- What is the average age of hosts who organized parties with the theme of "Hollywood Glamour"?
------------------------------------------------------------------------------------------
database_id: product_catalog
database schema :
table Attribute_Definitions, columns = [ Attribute_Definitions.attribute_id ( integer | primary key | values: 1, 2 ), Attribute_Definitions.attribute_name ( text | values: Green, Black ), Attribute_Definitions.attribute_data_type ( text | values: Bool ) ]
table Catalogs, columns = [ Catalogs.catalog_id ( integer | primary key | values: 1, 2 ), Catalogs.catalog_name ( text | values: Chocolate, Coffee Bean ), Catalogs.catalog_publisher ( text | values: Koepp-Rutherford handmade chocolate store, Murray Coffee shop ), Catalogs.date_of_publication ( datetime | values: 2013-03-15 05:09:17, 2012-04-13 06:37:09 ), Catalogs.date_of_latest_revision ( datetime | values: 2017-09-26 12:10:36, 2017-10-26 01:16:51 ) ]
table Catalog_Structure, columns = [ Catalog_Structure.catalog_level_number ( integer | primary key | values: 1, 8 ), Catalog_Structure.catalog_id ( integer | values: 1, 2 ), Catalog_Structure.catalog_level_name ( text | values: Category, Sub-Category ) ]
table Catalog_Contents, columns = [ Catalog_Contents.catalog_entry_id ( integer | primary key | values: 1, 2 ), Catalog_Contents.catalog_level_number ( integer | values: 1, 8 ), Catalog_Contents.parent_entry_id ( real | values: 5, 6 ), Catalog_Contents.previous_entry_id ( real | values: 9, 6 ), Catalog_Contents.next_entry_id ( real | values: 7, 8 ), Catalog_Contents.catalog_entry_name ( text | values: Cola, Root beer ), Catalog_Contents.product_stock_number ( text | values: 89 cp, 37 hq ), Catalog_Contents.price_in_dollars ( real | values: 200.78, 687.59 ), Catalog_Contents.price_in_euros ( real | values: 159.84, 590.11 ), Catalog_Contents.price_in_pounds ( real | values: 172.17, 471.78 ), Catalog_Contents.capacity ( text | values: 1, 8 ), Catalog_Contents.length ( text | values: 3, 6 ), Catalog_Contents.height ( text | values: 9, 5 ), Catalog_Contents.width ( text | values: 5, 6 ) ]
table Catalog_Contents_Additional_Attributes, columns = [ Catalog_Contents_Additional_Attributes.catalog_entry_id ( integer | values: 5, 15 ), Catalog_Contents_Additional_Attributes.catalog_level_number ( integer | values: 8, 9 ), Catalog_Contents_Additional_Attributes.attribute_id ( real | values: 4, 3 ), Catalog_Contents_Additional_Attributes.attribute_value ( text | values: 1, 0 ) ]
foreign keys:
Catalog_Structure.catalog_id = Catalogs.catalog_id
Catalog_Contents.catalog_level_number = Catalog_Structure.catalog_level_number
Catalog_Contents_Additional_Attributes.catalog_level_number = Catalog_Structure.catalog_level_number
Catalog_Contents_Additional_Attributes.catalog_entry_id = Catalog_Contents.catalog_entry_id

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM Catalogs WHERE date_of_publication > '2022-01-01' AND date_of_latest_revision < '2022-01-01';
-- SELECT T2.attribute_name, T2.attribute_id FROM Catalog_Contents_Additional_Attributes AS T1 INNER JOIN Attribute_Definitions AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_value LIKE '%test%';
-- SELECT T1.catalog_id, T1.catalog_name FROM Catalogs AS T1 INNER JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id WHERE T1.catalog_name LIKE 'Catalog%' AND T2.catalog_level_name LIKE 'Main%';
-- SELECT COUNT(DISTINCT T2.attribute_value) FROM Catalog_Contents_Additional_Attributes AS T1 INNER JOIN Attribute_Definitions AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_name = 'test';
-- SELECT T1.catalog_entry_name, T1.price_in_dollars, T1.capacity FROM Catalog_Contents AS T1 WHERE T1.price_in_dollars > 10 AND T1
---

# --- Example ---
# Task: Examine all the database schemas provided above and return a ranked list of the 10 most relevant database_ids for answering the following question.
# Q: How many French singers are there?
#
# The 10 most relevant database_ids are:
1. singer
2. orchestra
3. musical
4. concert_singer
5. sports_competition
6. tvshow
7. museum_visit
8. department_store
9. poker_player
10. party_host
# --- End of Example ---


# --- Your Task ---
# Task: Examine all the database schemas provided above and return a ranked list of the 10 most relevant database_ids for answering the following question.
# Q: find id of the tv channels that from the countries where have more than two tv channels.
#
# The 10 most relevant database_ids are:
