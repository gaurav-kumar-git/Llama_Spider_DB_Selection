
You are given multiple databases. Each database has a schema consisting of tables, columns, and relationships (foreign keys).
---
database_id: perpetrator
database schema :
CREATE TABLE perpetrator (
  Perpetrator_ID INTEGER PRIMARY KEY,
  People_ID INTEGER,
  Date TEXT,
  Year REAL,
  Location TEXT,
  Country TEXT,
  Killed REAL,
  Injured REAL,
  FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);

CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  "Home Town" TEXT
);

# Here are some example questions that CAN be answered by the schema below:
-- How many people are recorded in the database?
-- What is the average height of people who have a weight greater than 70kg?
-- Which location has the highest number of perpetrators who killed more than 5 people?
-- What is the name of the person with People_ID = 2?
-- What is the year with the most perpetrators?
------------------------------------------------------------------------------------------
database_id: college_2
database schema :
CREATE TABLE classroom (
  building TEXT PRIMARY KEY,
  room_number TEXT,
  capacity REAL
);

CREATE TABLE department (
  dept_name TEXT PRIMARY KEY,
  building TEXT,
  budget REAL
);

CREATE TABLE course (
  course_id TEXT PRIMARY KEY,
  title TEXT,
  dept_name TEXT,
  credits REAL,
  FOREIGN KEY (dept_name) REFERENCES department(dept_name)
);

CREATE TABLE instructor (
  ID TEXT PRIMARY KEY,
  name TEXT,
  dept_name TEXT,
  salary REAL,
  FOREIGN KEY (dept_name) REFERENCES department(dept_name)
);

CREATE TABLE section (
  course_id TEXT PRIMARY KEY,
  sec_id TEXT,
  semester TEXT,
  year REAL,
  building TEXT,
  room_number TEXT,
  time_slot_id TEXT,
  FOREIGN KEY (building) REFERENCES classroom(building),
  FOREIGN KEY (room_number) REFERENCES classroom(room_number),
  FOREIGN KEY (course_id) REFERENCES course(course_id)
);

CREATE TABLE teaches (
  ID TEXT PRIMARY KEY,
  course_id TEXT,
  sec_id TEXT,
  semester TEXT,
  year INTEGER,
  FOREIGN KEY (ID) REFERENCES instructor(ID),
  FOREIGN KEY (course_id) REFERENCES section(course_id),
  FOREIGN KEY (sec_id) REFERENCES section(sec_id),
  FOREIGN KEY (semester) REFERENCES section(semester),
  FOREIGN KEY (year) REFERENCES section(year)
);

CREATE TABLE student (
  ID TEXT PRIMARY KEY,
  name TEXT,
  dept_name TEXT,
  tot_cred REAL,
  FOREIGN KEY (dept_name) REFERENCES department(dept_name)
);

CREATE TABLE takes (
  ID TEXT PRIMARY KEY,
  course_id TEXT,
  sec_id TEXT,
  semester TEXT,
  year INTEGER,
  grade TEXT,
  FOREIGN KEY (ID) REFERENCES student(ID),
  FOREIGN KEY (course_id) REFERENCES section(course_id),
  FOREIGN KEY (sec_id) REFERENCES section(sec_id),
  FOREIGN KEY (semester) REFERENCES section(semester),
  FOREIGN KEY (year) REFERENCES section(year)
);

CREATE TABLE advisor (
  s_ID TEXT PRIMARY KEY,
  i_ID TEXT,
  FOREIGN KEY (s_ID) REFERENCES student(ID),
  FOREIGN KEY (i_ID) REFERENCES instructor(ID)
);

CREATE TABLE time_slot (
  time_slot_id TEXT PRIMARY KEY,
  day TEXT,
  start_hr REAL,
  start_min REAL,
  end_hr REAL,
  end_min REAL
);

CREATE TABLE prereq (
  course_id TEXT PRIMARY KEY,
  prereq_id TEXT,
  FOREIGN KEY (prereq_id) REFERENCES course(course_id),
  FOREIGN KEY (course_id) REFERENCES course(course_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What are the names and budgets of all departments?
-- Which courses have prerequisites, and what are their prerequisite course IDs?
-- List the names of instructors and the course IDs of the sections they teach in the Fall semester.
-- How many sections of the course 'Math 300' are scheduled in the Fall semester?
-- What is the name of the instructor who teaches the 'Math 300' course in the Spring semester of the year 2020?
------------------------------------------------------------------------------------------
database_id: flight_company
database schema :
CREATE TABLE airport (
  id INTEGER PRIMARY KEY,
  City TEXT,
  Country TEXT,
  IATA TEXT,
  ICAO TEXT,
  name TEXT
);

CREATE TABLE operate_company (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Type TEXT,
  Principal_activities TEXT,
  Incorporated_in TEXT,
  Group_Equity_Shareholding REAL
);

CREATE TABLE flight (
  id INTEGER PRIMARY KEY,
  Vehicle_Flight_number TEXT,
  Date TEXT,
  Pilot TEXT,
  Velocity REAL,
  Altitude REAL,
  airport_id INTEGER,
  company_id INTEGER,
  FOREIGN KEY (company_id) REFERENCES operate_company(id),
  FOREIGN KEY (airport_id) REFERENCES airport(id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average altitude of flights that departed from airports in the United States?
-- What are the names of the pilots who flew flights operated by companies whose name starts with 'A', on Sundays?
-- Which airport has the highest number of flights that departed on a Monday?
-- What is the velocity of flights that departed from the airport with the IATA code 'LHR', on a day when the temperature was above 0 degrees Celsius?
-- How many flights operated by companies with a Group Equity Shareholding greater than 50% have been operated by pilots who are also the principal of the company they work for?
------------------------------------------------------------------------------------------
database_id: icfp_1
database schema :
CREATE TABLE Inst (
  instID INTEGER PRIMARY KEY,
  name TEXT,
  country TEXT
);

CREATE TABLE Authors (
  authID INTEGER PRIMARY KEY,
  lname TEXT,
  fname TEXT
);

CREATE TABLE Papers (
  paperID INTEGER PRIMARY KEY,
  title TEXT
);

CREATE TABLE Authorship (
  authID INTEGER PRIMARY KEY,
  instID INTEGER,
  paperID INTEGER,
  authOrder REAL,
  FOREIGN KEY (paperID) REFERENCES Papers(paperID),
  FOREIGN KEY (instID) REFERENCES Inst(instID),
  FOREIGN KEY (authID) REFERENCES Authors(authID)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many papers were written by authors from the USA?
-- What is the average number of authors per paper for papers written by authors from Germany?
-- List all authors who have written more than 5 papers.
-- What is the title of the paper with the highest number of authors?
-- How many papers were written by authors from institutions in the UK?
------------------------------------------------------------------------------------------
database_id: body_builder
database schema :
CREATE TABLE body_builder (
  Body_Builder_ID INTEGER PRIMARY KEY,
  People_ID INTEGER,
  Snatch REAL,
  Clean_Jerk REAL,
  Total REAL,
  FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);

CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Birth_Date TEXT,
  Birth_Place TEXT
);

# Here are some example questions that CAN be answered by the schema below:
-- How many body builders have a total score above 300?
-- What is the average snatch weight for body builders born in 1980?
-- List the names of people who have a body builder with a snatch weight of 100 or more.
-- What is the average weight of people who have a body builder with a total score above 350?
-- How many body builders have a snatch weight below 70?  How many of these body builders are from the city of Tokyo?  What is the average weight of these body builders?  How many of these body builders have a total score above 300?  How many of these body builders have a birth date in 1990?  How many of these body builders are from the city of New York?  What is the average height of these body builders?  How many of these body builders have a birth date in 1985?  What is the average snatch weight of these body builders?  How many of these body builders have a weight below 60?  How many of these body builders are from the city of London?  How many of these body builders have a birth date in 1995?  What is the average
------------------------------------------------------------------------------------------
database_id: storm_record
database schema :
CREATE TABLE storm (
  Storm_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Dates_active TEXT,
  Max_speed REAL,
  Damage_millions_USD REAL,
  Number_Deaths REAL
);

CREATE TABLE region (
  Region_id INTEGER PRIMARY KEY,
  Region_code TEXT,
  Region_name TEXT
);

CREATE TABLE affected_region (
  Region_id INTEGER PRIMARY KEY,
  Storm_ID INTEGER,
  Number_city_affected REAL,
  FOREIGN KEY (Storm_ID) REFERENCES storm(Storm_ID),
  FOREIGN KEY (Region_id) REFERENCES region(Region_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of deaths in all storms?
-- Which region has the highest number of cities affected by all storms?
-- What is the number of storms that occurred between 2010-01-01 and 2020-01-01?
-- What is the storm with the highest damage in the region with code 'US-01'?
-- What is the total number of deaths in storms where the storm's max speed was above 120 miles per hour?  in the storm that caused the most deaths?  in the region 'US-01'?  in the storm that caused the most deaths in the region 'US-01'?  in the storm with the highest damage in the region 'US-01'?  in the storm that caused the most deaths where the storm's max speed was above 120 miles per hour?  in the region with the highest number of cities affected by all storms?  in the storm with the highest damage in the region with code 'US-01'?  in the region 'US-01'?  in the storm that caused the most deaths where the storm's max speed was above 120 miles per hour?  in the storm that caused the
------------------------------------------------------------------------------------------
database_id: pilot_record
database schema :
CREATE TABLE aircraft (
  Aircraft_ID INTEGER PRIMARY KEY,
  Order_Year REAL,
  Manufacturer TEXT,
  Model TEXT,
  Fleet_Series TEXT,
  Powertrain TEXT,
  Fuel_Propulsion TEXT
);

CREATE TABLE pilot (
  Pilot_ID INTEGER PRIMARY KEY,
  Pilot_name TEXT,
  Rank REAL,
  Age REAL,
  Nationality TEXT,
  Position TEXT,
  Join_Year REAL,
  Team TEXT
);

CREATE TABLE pilot_record (
  Record_ID REAL,
  Pilot_ID INTEGER PRIMARY KEY,
  Aircraft_ID INTEGER,
  Date TEXT,
  FOREIGN KEY (Aircraft_ID) REFERENCES aircraft(Aircraft_ID),
  FOREIGN KEY (Pilot_ID) REFERENCES pilot(Pilot_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of pilots in the 'Team' 'Delta'?
-- How many aircraft are manufactured by 'Boeing' in the year '2010'?
-- What is the name of the aircraft with the highest number of records, and what is the model of that aircraft?
-- What is the average number of flights performed by pilots who flew in the year '2015'?
-- What is the nationality of the pilots who have flown the aircraft manufactured by 'Airbus' and have more than 100 records?  The result should only show unique nationalities.  The nationality should be the one that is more represented among the pilots.   The nationality with the highest number of occurrences among the pilots who flew the Airbus aircraft should be returned.  The nationality should be shown in the format 'country (occurrences)'.  The result should show the nationality with the highest occurrences.  The occurrences should be ordered by the descending order.   If two or more nationalities have the same occurrences, the nationality that appears first in the database should be returned.  If there is more than one nationality with the same highest occurrences, all should be returned.  If there are no pilots who
------------------------------------------------------------------------------------------
database_id: race_track
database schema :
CREATE TABLE race (
  Race_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Class TEXT,
  Date TEXT,
  Track_ID TEXT,
  FOREIGN KEY (Track_ID) REFERENCES track(Track_ID)
);

CREATE TABLE track (
  Track_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  Seating REAL,
  Year_Opened REAL
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of seats per track that hosted a race in 2020?
-- What are the names of all the tracks that hosted a race on the 12th day of February?
-- Which track has the highest seating capacity?
-- What is the name of the race that occurred on the track with the highest seating capacity?
-- What is the count of all the races that took place on a track with a seating capacity of over 40,000?
------------------------------------------------------------------------------------------
database_id: academic
database schema :
CREATE TABLE author (
  aid INTEGER PRIMARY KEY,
  homepage TEXT,
  name TEXT,
  oid REAL
);

CREATE TABLE conference (
  cid INTEGER PRIMARY KEY,
  homepage TEXT,
  name TEXT
);

CREATE TABLE domain (
  did INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE domain_author (
  aid INTEGER,
  did INTEGER PRIMARY KEY,
  FOREIGN KEY (did) REFERENCES domain(did),
  FOREIGN KEY (aid) REFERENCES author(aid)
);

CREATE TABLE domain_conference (
  cid INTEGER,
  did INTEGER PRIMARY KEY,
  FOREIGN KEY (did) REFERENCES domain(did),
  FOREIGN KEY (cid) REFERENCES conference(cid)
);

CREATE TABLE journal (
  homepage TEXT,
  jid INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE domain_journal (
  did INTEGER PRIMARY KEY,
  jid INTEGER,
  FOREIGN KEY (did) REFERENCES domain(did),
  FOREIGN KEY (jid) REFERENCES journal(jid)
);

CREATE TABLE keyword (
  keyword TEXT,
  kid INTEGER PRIMARY KEY
);

CREATE TABLE domain_keyword (
  did INTEGER PRIMARY KEY,
  kid INTEGER,
  FOREIGN KEY (did) REFERENCES domain(did),
  FOREIGN KEY (kid) REFERENCES keyword(kid)
);

CREATE TABLE publication (
  abstract TEXT,
  cid TEXT,
  citation_num REAL,
  jid INTEGER,
  pid INTEGER PRIMARY KEY,
  reference_num REAL,
  title TEXT,
  year REAL,
  FOREIGN KEY (cid) REFERENCES conference(cid),
  FOREIGN KEY (jid) REFERENCES journal(jid)
);

CREATE TABLE domain_publication (
  did INTEGER PRIMARY KEY,
  pid INTEGER,
  FOREIGN KEY (did) REFERENCES domain(did),
  FOREIGN KEY (pid) REFERENCES publication(pid)
);

CREATE TABLE organization (
  continent TEXT,
  homepage TEXT,
  name TEXT,
  oid INTEGER PRIMARY KEY
);

CREATE TABLE publication_keyword (
  pid INTEGER,
  kid INTEGER PRIMARY KEY,
  FOREIGN KEY (kid) REFERENCES keyword(kid),
  FOREIGN KEY (pid) REFERENCES publication(pid)
);

CREATE TABLE writes (
  aid INTEGER PRIMARY KEY,
  pid INTEGER,
  FOREIGN KEY (aid) REFERENCES author(aid),
  FOREIGN KEY (pid) REFERENCES publication(pid)
);

CREATE TABLE cite (
  cited INTEGER,
  citing INTEGER,
  FOREIGN KEY (citing) REFERENCES publication(pid),
  FOREIGN KEY (cited) REFERENCES publication(pid)
);

# Here are some example questions that CAN be answered by the schema below:
-- What are the names and homepages of all authors?
-- List the titles and years of publications presented at each conference.
-- Which keywords are associated with each publication?
-- Which domain has the most publications, including both conference and journal papers?
-- What is the name of the author who wrote the most papers that were cited at least 10 times?
------------------------------------------------------------------------------------------
database_id: department_store
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  address_details TEXT
);

CREATE TABLE Staff (
  staff_id INTEGER PRIMARY KEY,
  staff_gender TEXT,
  staff_name TEXT
);

CREATE TABLE Suppliers (
  supplier_id INTEGER PRIMARY KEY,
  supplier_name TEXT,
  supplier_phone TEXT
);

CREATE TABLE Department_Store_Chain (
  dept_store_chain_id INTEGER PRIMARY KEY,
  dept_store_chain_name TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  payment_method_code TEXT,
  customer_code TEXT,
  customer_name TEXT,
  customer_address TEXT,
  customer_phone TEXT,
  customer_email TEXT
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  product_type_code TEXT,
  product_name TEXT,
  product_price REAL
);

CREATE TABLE Supplier_Addresses (
  supplier_id INTEGER PRIMARY KEY,
  address_id INTEGER,
  date_from DATETIME,
  date_to DATETIME,
  FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id),
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Customer_Addresses (
  customer_id INTEGER PRIMARY KEY,
  address_id INTEGER,
  date_from DATETIME,
  date_to DATETIME,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Customer_Orders (
  order_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  order_status_code TEXT,
  order_date DATETIME,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Department_Stores (
  dept_store_id INTEGER PRIMARY KEY,
  dept_store_chain_id INTEGER,
  store_name TEXT,
  store_address TEXT,
  store_phone TEXT,
  store_email TEXT,
  FOREIGN KEY (dept_store_chain_id) REFERENCES Department_Store_Chain(dept_store_chain_id)
);

CREATE TABLE Departments (
  department_id INTEGER PRIMARY KEY,
  dept_store_id INTEGER,
  department_name TEXT,
  FOREIGN KEY (dept_store_id) REFERENCES Department_Stores(dept_store_id)
);

CREATE TABLE Order_Items (
  order_item_id INTEGER PRIMARY KEY,
  order_id INTEGER,
  product_id INTEGER,
  FOREIGN KEY (product_id) REFERENCES Products(product_id),
  FOREIGN KEY (order_id) REFERENCES Customer_Orders(order_id)
);

CREATE TABLE Product_Suppliers (
  product_id INTEGER PRIMARY KEY,
  supplier_id INTEGER,
  date_supplied_from DATETIME,
  date_supplied_to DATETIME,
  total_amount_purchased TEXT,
  total_value_purchased REAL,
  FOREIGN KEY (product_id) REFERENCES Products(product_id),
  FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)
);

CREATE TABLE Staff_Department_Assignments (
  staff_id INTEGER PRIMARY KEY,
  department_id INTEGER,
  date_assigned_from DATETIME,
  job_title_code TEXT,
  date_assigned_to DATETIME,
  FOREIGN KEY (staff_id) REFERENCES Staff(staff_id),
  FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- Which customers have placed orders along with their order dates and statuses
-- List each product with the names of its suppliers and the dates they started supplying it
-- What is the name of the department where staff member with staff_id = 1 is assigned?
-- How many different addresses does the supplier with supplier_id = 1 have?
-- What is the total amount of money spent by all customers on orders placed after '2020-01-01' and before '2020-12-31'?  Select only the sum of total_amount_purchased for orders placed during the specified date range.  ORDER BY total_amount_purchased in descending order.  LIMIT 10.  Group the results by total_amount_purchased.  (Hint:  Use the Customer_Orders table to get the date range of the orders.)  Use the Product_Suppliers table to get the total_amount_purchased.  Use the Order_Items table to get the order_id.  Use the Customer_Orders table to get the customer_id.  Use the Customers table to filter the results by customer_id.  Use the Product_Suppliers table to get the supplier_id.  Use the Suppliers table to get the supplier_name.  Use the Product_Suppliers table to get the product_id.  Use the Products table to get the product_name.  Use the Product_S
------------------------------------------------------------------------------------------
database_id: music_4
database schema :
CREATE TABLE artist (
  Artist_ID INTEGER PRIMARY KEY,
  Artist TEXT,
  Age REAL,
  Famous_Title TEXT,
  Famous_Release_date TEXT
);

CREATE TABLE volume (
  Volume_ID INTEGER PRIMARY KEY,
  Volume_Issue TEXT,
  Issue_Date TEXT,
  Weeks_on_Top REAL,
  Song TEXT,
  Artist_ID INTEGER,
  FOREIGN KEY (Artist_ID) REFERENCES artist(Artist_ID)
);

CREATE TABLE music_festival (
  ID INTEGER PRIMARY KEY,
  Music_Festival TEXT,
  Date_of_ceremony TEXT,
  Category TEXT,
  Volume INTEGER,
  Result TEXT,
  FOREIGN KEY (Volume) REFERENCES volume(Volume_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the artist with the most weeks on top in the database?
-- What is the average age of all artists in the database?
-- What are the names of all the music festivals that had at least one artist that won in the "rock" category?
-- What is the number of artists in the database that released a song with a release date before 2010?
-- What are the names of all the artists that participated in music festivals with the category "hip hop"?  Show the artist names only if their song was on top for at least 10 weeks.  Order the results by the number of weeks on top.  Exclude any artists that are not famous.  Use the music_festival table for filtering.  Use the volume table for the weeks_on_top information.  Use the artist table for filtering the famous title.  Use the music_festival table to filter the hip hop category.  Use the artist table for ordering the results.  Use the volume table for counting the weeks_on_top.  Use the artist table for filtering the famous title.  Use the music_festival table for filtering the hip hop category.  Use the artist table for ordering the results
------------------------------------------------------------------------------------------
database_id: insurance_fnol
database schema :
CREATE TABLE Customers (
  Customer_ID INTEGER PRIMARY KEY,
  Customer_name TEXT
);

CREATE TABLE Services (
  Service_ID INTEGER PRIMARY KEY,
  Service_name TEXT
);

CREATE TABLE Available_Policies (
  Policy_ID INTEGER PRIMARY KEY,
  policy_type_code TEXT,
  Customer_Phone TEXT
);

CREATE TABLE Customers_Policies (
  Customer_ID INTEGER PRIMARY KEY,
  Policy_ID INTEGER,
  Date_Opened DATETIME,
  Date_Closed DATETIME,
  FOREIGN KEY (Policy_ID) REFERENCES Available_Policies(Policy_ID),
  FOREIGN KEY (Customer_ID) REFERENCES Customers(Customer_ID)
);

CREATE TABLE First_Notification_of_Loss (
  FNOL_ID INTEGER PRIMARY KEY,
  Customer_ID INTEGER,
  Policy_ID INTEGER,
  Service_ID INTEGER,
  FOREIGN KEY (Customer_ID) REFERENCES Customers_Policies(Customer_ID),
  FOREIGN KEY (Policy_ID) REFERENCES Customers_Policies(Policy_ID),
  FOREIGN KEY (Service_ID) REFERENCES Services(Service_ID)
);

CREATE TABLE Claims (
  Claim_ID INTEGER PRIMARY KEY,
  FNOL_ID INTEGER,
  Effective_Date DATETIME,
  FOREIGN KEY (FNOL_ID) REFERENCES First_Notification_of_Loss(FNOL_ID)
);

CREATE TABLE Settlements (
  Settlement_ID INTEGER PRIMARY KEY,
  Claim_ID INTEGER,
  Effective_Date DATETIME,
  Settlement_Amount REAL,
  FOREIGN KEY (Claim_ID) REFERENCES Claims(Claim_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average settlement amount for claims settled on a Monday?
-- How many customers have policies that are still open?
-- What is the count of customers with at least one policy that was opened in the year 2020?
-- What is the number of claims for which the settlement amount is greater than $100,000 and the claim was settled on a day of the week that is not a Friday?   -5
-- What is the number of customers who have made at least one claim in the year 2020 and also have a policy that was opened in the year 2019?   -6
------------------------------------------------------------------------------------------
database_id: cinema
database schema :
CREATE TABLE film (
  Film_ID INTEGER PRIMARY KEY,
  Rank_in_series REAL,
  Number_in_season REAL,
  Title TEXT,
  Directed_by TEXT,
  Original_air_date TEXT,
  Production_code TEXT
);

CREATE TABLE cinema (
  Cinema_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Openning_year REAL,
  Capacity REAL,
  Location TEXT
);

CREATE TABLE schedule (
  Cinema_ID INTEGER PRIMARY KEY,
  Film_ID INTEGER,
  Date TEXT,
  Show_times_per_day REAL,
  Price REAL,
  FOREIGN KEY (Cinema_ID) REFERENCES cinema(Cinema_ID),
  FOREIGN KEY (Film_ID) REFERENCES film(Film_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many films were directed by the director with the name "Rick and Morty"?
-- What is the average price of a ticket for films of the "Rick and Morty" series?
-- What is the name of the cinema with the highest capacity?
-- How many films were shown on the 1st of January, 2022?
-- What is the rank of the film with title "Pilot" in the series?  (assuming there are multiple films with the same title in the series)  and what is the number of films with title "Pilot" in the series?  and what is the number of seasons in which the film "Pilot" was shown?   and what is the title of the first film in the series?   and what is the title of the first film in the series that was shown on the 1st of January, 2022?   and what is the number of films with title "Pilot" that were shown on the 1st of January, 2022?   and what is the number of seasons in which the film "Pilot" was shown on the 1st of January, 2022?
------------------------------------------------------------------------------------------
database_id: decoration_competition
database schema :
CREATE TABLE college (
  College_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Leader_Name TEXT,
  College_Location TEXT
);

CREATE TABLE member (
  Member_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  College_ID INTEGER,
  FOREIGN KEY (College_ID) REFERENCES college(College_ID)
);

CREATE TABLE round (
  Round_ID REAL,
  Member_ID INTEGER PRIMARY KEY,
  Decoration_Theme TEXT,
  Rank_in_Round REAL,
  FOREIGN KEY (Member_ID) REFERENCES member(Member_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- List all colleges with their leader names and locations
-- Which members belong to each college and their representing countries
-- Show the decoration themes assigned to each member and their rank in the round
-- Identify members who achieved first rank in any round and the associated theme
-- Provide each college’s name along with the names of its members
------------------------------------------------------------------------------------------
database_id: phone_market
database schema :
CREATE TABLE phone (
  Name TEXT,
  Phone_ID INTEGER PRIMARY KEY,
  Memory_in_G REAL,
  Carrier TEXT,
  Price REAL
);

CREATE TABLE market (
  Market_ID INTEGER PRIMARY KEY,
  District TEXT,
  Num_of_employees REAL,
  Num_of_shops REAL,
  Ranking REAL
);

CREATE TABLE phone_market (
  Market_ID INTEGER PRIMARY KEY,
  Phone_ID TEXT,
  Num_of_stock REAL,
  FOREIGN KEY (Phone_ID) REFERENCES phone(Phone_ID),
  FOREIGN KEY (Market_ID) REFERENCES market(Market_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of phones sold in the market with district 'North'?
-- How many phones does the market with district 'North' have in stock in total?
-- What is the name of the phone with the highest memory and a price of more than 500?
-- What is the average ranking of the markets with more than 50 employees?
-- What are the names of the phones sold in the market with district 'North' and a ranking of more than 5?  #include the phone memory in the results.
------------------------------------------------------------------------------------------
database_id: store_product
database schema :
CREATE TABLE product (
  product_id INTEGER PRIMARY KEY,
  product TEXT,
  dimensions TEXT,
  dpi REAL,
  pages_per_minute_color REAL,
  max_page_size TEXT,
  interface TEXT
);

CREATE TABLE store (
  Store_ID INTEGER PRIMARY KEY,
  Store_Name TEXT,
  Type TEXT,
  Area_size REAL,
  Number_of_product_category REAL,
  Ranking REAL
);

CREATE TABLE district (
  District_ID INTEGER PRIMARY KEY,
  District_name TEXT,
  Headquartered_City TEXT,
  City_Population REAL,
  City_Area REAL
);

CREATE TABLE store_product (
  Store_ID INTEGER PRIMARY KEY,
  Product_ID REAL,
  FOREIGN KEY (Store_ID) REFERENCES store(Store_ID)
);

CREATE TABLE store_district (
  Store_ID INTEGER PRIMARY KEY,
  District_ID INTEGER,
  FOREIGN KEY (District_ID) REFERENCES district(District_ID),
  FOREIGN KEY (Store_ID) REFERENCES store(Store_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the product with product_id = 10?
-- What is the average number of products in a store with interface = "USB"?
-- What is the product with the highest dpi?
-- What is the district with the highest population?
-- What is the name of the store with the highest ranking and the product with product_id = 20?  SELECT product_name FROM product AS p  JOIN store_product AS sp ON p.product_id = sp.Product_id  JOIN store AS s ON sp.Store_id = s.Store_id WHERE s.Ranking = (SELECT MAX(Ranking) FROM store) AND p.product_id = 20;  (this query is for the question 5, don't include it in your answer)  SELECT p.product, s.Store_Name FROM product AS p  JOIN store_product AS sp ON p.product_id = sp.Product_id  JOIN store AS s ON sp.Store_id = s.Store_ID WHERE s.Store_Name = 'Store Name' AND p.product_id = 20;  (this query is for the question 5, don't include it in your answer)  SELECT s.Store_Name FROM store AS s  JOIN store_product AS sp ON s.Store
------------------------------------------------------------------------------------------
database_id: assets_maintenance
database schema :
CREATE TABLE Third_Party_Companies (
  company_id INTEGER PRIMARY KEY,
  company_type TEXT,
  company_name TEXT,
  company_address TEXT,
  other_company_details TEXT
);

CREATE TABLE Maintenance_Contracts (
  maintenance_contract_id INTEGER PRIMARY KEY,
  maintenance_contract_company_id INTEGER,
  contract_start_date DATETIME,
  contract_end_date DATETIME,
  other_contract_details TEXT,
  FOREIGN KEY (maintenance_contract_company_id) REFERENCES Third_Party_Companies(company_id)
);

CREATE TABLE Parts (
  part_id INTEGER PRIMARY KEY,
  part_name TEXT,
  chargeable_yn TEXT,
  chargeable_amount TEXT,
  other_part_details TEXT
);

CREATE TABLE Skills (
  skill_id INTEGER PRIMARY KEY,
  skill_code TEXT,
  skill_description TEXT
);

CREATE TABLE Staff (
  staff_id INTEGER PRIMARY KEY,
  staff_name TEXT,
  gender TEXT,
  other_staff_details TEXT
);

CREATE TABLE Assets (
  asset_id INTEGER PRIMARY KEY,
  maintenance_contract_id INTEGER,
  supplier_company_id INTEGER,
  asset_details TEXT,
  asset_make TEXT,
  asset_model TEXT,
  asset_acquired_date DATETIME,
  asset_disposed_date DATETIME,
  other_asset_details TEXT,
  FOREIGN KEY (supplier_company_id) REFERENCES Third_Party_Companies(company_id),
  FOREIGN KEY (maintenance_contract_id) REFERENCES Maintenance_Contracts(maintenance_contract_id)
);

CREATE TABLE Asset_Parts (
  asset_id INTEGER,
  part_id INTEGER,
  FOREIGN KEY (asset_id) REFERENCES Assets(asset_id),
  FOREIGN KEY (part_id) REFERENCES Parts(part_id)
);

CREATE TABLE Maintenance_Engineers (
  engineer_id INTEGER PRIMARY KEY,
  company_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  other_details TEXT,
  FOREIGN KEY (company_id) REFERENCES Third_Party_Companies(company_id)
);

CREATE TABLE Engineer_Skills (
  engineer_id INTEGER,
  skill_id INTEGER,
  FOREIGN KEY (skill_id) REFERENCES Skills(skill_id),
  FOREIGN KEY (engineer_id) REFERENCES Maintenance_Engineers(engineer_id)
);

CREATE TABLE Fault_Log (
  fault_log_entry_id INTEGER PRIMARY KEY,
  asset_id INTEGER,
  recorded_by_staff_id INTEGER,
  fault_log_entry_datetime DATETIME,
  fault_description TEXT,
  other_fault_details TEXT,
  FOREIGN KEY (recorded_by_staff_id) REFERENCES Staff(staff_id),
  FOREIGN KEY (asset_id) REFERENCES Assets(asset_id)
);

CREATE TABLE Engineer_Visits (
  engineer_visit_id INTEGER PRIMARY KEY,
  contact_staff_id INTEGER,
  engineer_id INTEGER,
  fault_log_entry_id INTEGER,
  fault_status TEXT,
  visit_start_datetime DATETIME,
  visit_end_datetime DATETIME,
  other_visit_details TEXT,
  FOREIGN KEY (contact_staff_id) REFERENCES Staff(staff_id),
  FOREIGN KEY (engineer_id) REFERENCES Maintenance_Engineers(engineer_id),
  FOREIGN KEY (fault_log_entry_id) REFERENCES Fault_Log(fault_log_entry_id)
);

CREATE TABLE Part_Faults (
  part_fault_id INTEGER PRIMARY KEY,
  part_id INTEGER,
  fault_short_name TEXT,
  fault_description TEXT,
  other_fault_details TEXT,
  FOREIGN KEY (part_id) REFERENCES Parts(part_id)
);

CREATE TABLE Fault_Log_Parts (
  fault_log_entry_id INTEGER,
  part_fault_id INTEGER,
  fault_status TEXT,
  FOREIGN KEY (fault_log_entry_id) REFERENCES Fault_Log(fault_log_entry_id),
  FOREIGN KEY (part_fault_id) REFERENCES Part_Faults(part_fault_id)
);

CREATE TABLE Skills_Required_To_Fix (
  part_fault_id INTEGER,
  skill_id INTEGER,
  FOREIGN KEY (skill_id) REFERENCES Skills(skill_id),
  FOREIGN KEY (part_fault_id) REFERENCES Part_Faults(part_fault_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- List all third-party companies along with their contract start and end dates
-- Which assets are maintained by each company and what models they are
-- What is the total number of assets that have been disposed of?
-- What are the names of the third-party companies that have a maintenance contract with a company that has a maintenance contract company_id of 100?
-- What is the part name of the most expensive part, i.e., the part with the maximum chargeable_amount?
------------------------------------------------------------------------------------------
database_id: student_assessment
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  line_1 TEXT,
  line_2 TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT
);

CREATE TABLE People (
  person_id INTEGER PRIMARY KEY,
  first_name TEXT,
  middle_name TEXT,
  last_name TEXT,
  cell_mobile_number TEXT,
  email_address TEXT,
  login_name TEXT,
  password TEXT
);

CREATE TABLE Students (
  student_id INTEGER PRIMARY KEY,
  student_details TEXT,
  FOREIGN KEY (student_id) REFERENCES People(person_id)
);

CREATE TABLE Courses (
  course_id TEXT PRIMARY KEY,
  course_name TEXT,
  course_description TEXT,
  other_details TEXT
);

CREATE TABLE People_Addresses (
  person_address_id INTEGER PRIMARY KEY,
  person_id INTEGER,
  address_id INTEGER,
  date_from DATETIME,
  date_to DATETIME,
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id),
  FOREIGN KEY (person_id) REFERENCES People(person_id)
);

CREATE TABLE Student_Course_Registrations (
  student_id INTEGER PRIMARY KEY,
  course_id INTEGER,
  registration_date DATETIME,
  FOREIGN KEY (course_id) REFERENCES Courses(course_id),
  FOREIGN KEY (student_id) REFERENCES Students(student_id)
);

CREATE TABLE Student_Course_Attendance (
  student_id INTEGER PRIMARY KEY,
  course_id INTEGER,
  date_of_attendance DATETIME,
  FOREIGN KEY (student_id) REFERENCES Student_Course_Registrations(student_id),
  FOREIGN KEY (course_id) REFERENCES Student_Course_Registrations(course_id)
);

CREATE TABLE Candidates (
  candidate_id INTEGER PRIMARY KEY,
  candidate_details TEXT,
  FOREIGN KEY (candidate_id) REFERENCES People(person_id)
);

CREATE TABLE Candidate_Assessments (
  candidate_id INTEGER PRIMARY KEY,
  qualification TEXT,
  assessment_date DATETIME,
  asessment_outcome_code TEXT,
  FOREIGN KEY (candidate_id) REFERENCES Candidates(candidate_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of addresses a person has? SELECT AVG(cnt) FROM (SELECT COUNT(*) cnt FROM People_Addresses GROUP BY person_id) 2. How many students have registered for the course with the course name "Data Analysis"? SELECT COUNT(*) FROM Student_Course_Registrations WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Data Analysis') 3. What is the name of the city where the address with the highest zip code is located? SELECT city FROM Addresses ORDER BY zip_postcode DESC LIMIT 1 4. What is the number of candidates who have passed the assessment for the qualification "Certified Data Analyst"? SELECT COUNT(*) FROM Candidate_Assessments WHERE asessment_outcome_code = 'Pass' AND qualification = 'Certified Data Analyst' 5. What is the name of the first student who registered for the course with the course name "Data Analysis"? SELECT first_name, last_name FROM Student_Course_Registrations AS S JOIN Students AS ST ON S.student_id = ST.student_id WHERE course_id = (SELECT course_id FROM Courses WHERE course_name = 'Data Analysis') ORDER BY S.registration_date LIMIT
-- This is the beginning of the problem. Please see below for the continuation of the problem.
------------------------------------------------------------------------------------------
database_id: dog_kennels
database schema :
CREATE TABLE Breeds (
  breed_code TEXT PRIMARY KEY,
  breed_name TEXT
);

CREATE TABLE Charges (
  charge_id INTEGER PRIMARY KEY,
  charge_type TEXT,
  charge_amount REAL
);

CREATE TABLE Sizes (
  size_code TEXT PRIMARY KEY,
  size_description TEXT
);

CREATE TABLE Treatment_Types (
  treatment_type_code TEXT PRIMARY KEY,
  treatment_type_description TEXT
);

CREATE TABLE Owners (
  owner_id INTEGER PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  street TEXT,
  city TEXT,
  state TEXT,
  zip_code TEXT,
  email_address TEXT,
  home_phone TEXT,
  cell_number TEXT
);

CREATE TABLE Dogs (
  dog_id INTEGER PRIMARY KEY,
  owner_id INTEGER,
  abandoned_yn TEXT,
  breed_code TEXT,
  size_code TEXT,
  name TEXT,
  age TEXT,
  date_of_birth DATETIME,
  gender TEXT,
  weight TEXT,
  date_arrived DATETIME,
  date_adopted DATETIME,
  date_departed DATETIME,
  FOREIGN KEY (owner_id) REFERENCES Owners(owner_id),
  FOREIGN KEY (owner_id) REFERENCES Owners(owner_id),
  FOREIGN KEY (size_code) REFERENCES Sizes(size_code),
  FOREIGN KEY (breed_code) REFERENCES Breeds(breed_code)
);

CREATE TABLE Professionals (
  professional_id INTEGER PRIMARY KEY,
  role_code TEXT,
  first_name TEXT,
  street TEXT,
  city TEXT,
  state TEXT,
  zip_code TEXT,
  last_name TEXT,
  email_address TEXT,
  home_phone TEXT,
  cell_number TEXT
);

CREATE TABLE Treatments (
  treatment_id INTEGER PRIMARY KEY,
  dog_id INTEGER,
  professional_id INTEGER,
  treatment_type_code TEXT,
  date_of_treatment DATETIME,
  cost_of_treatment REAL,
  FOREIGN KEY (dog_id) REFERENCES Dogs(dog_id),
  FOREIGN KEY (professional_id) REFERENCES Professionals(professional_id),
  FOREIGN KEY (treatment_type_code) REFERENCES Treatment_Types(treatment_type_code)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average weight of dogs that were adopted by owners from the state of California?
-- Which treatment types are used for dogs that are abandoned and weigh over 20 pounds?
------------------------------------------------------------------------------------------
database_id: music_1
database schema :
CREATE TABLE genre (
  g_name TEXT PRIMARY KEY,
  rating TEXT,
  most_popular_in TEXT
);

CREATE TABLE artist (
  artist_name TEXT PRIMARY KEY,
  country TEXT,
  gender TEXT,
  preferred_genre TEXT,
  FOREIGN KEY (preferred_genre) REFERENCES genre(g_name)
);

CREATE TABLE files (
  f_id INTEGER PRIMARY KEY,
  artist_name TEXT,
  file_size TEXT,
  duration TEXT,
  formats TEXT,
  FOREIGN KEY (artist_name) REFERENCES artist(artist_name)
);

CREATE TABLE song (
  song_name TEXT PRIMARY KEY,
  artist_name TEXT,
  country TEXT,
  f_id INTEGER,
  genre_is TEXT,
  rating REAL,
  languages TEXT,
  releasedate DATETIME,
  resolution REAL,
  FOREIGN KEY (genre_is) REFERENCES genre(g_name),
  FOREIGN KEY (f_id) REFERENCES files(f_id),
  FOREIGN KEY (artist_name) REFERENCES artist(artist_name)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average file size of songs by artists from the United States that are rated 4 or higher, grouped by genre?
-- What is the total number of songs released in the year 2000, by artist, that belong to the 'rock' genre?
-- What is the name of the artist with the highest number of songs in the 'pop' genre, who is from the United Kingdom?
-- What is the total number of songs by artists from the 'Electronic' genre that have a duration of more than 5 minutes?
-- What is the name of the most popular artist in the 'Hip-Hop/Rap' genre who has a song with a rating of 5?
------------------------------------------------------------------------------------------
database_id: company_employee
database schema :
CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Age REAL,
  Name TEXT,
  Nationality TEXT,
  Graduation_College TEXT
);

CREATE TABLE company (
  Company_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_in_Billion REAL,
  Profits_in_Billion REAL,
  Assets_in_Billion REAL,
  Market_Value_in_Billion REAL
);

CREATE TABLE employment (
  Company_ID INTEGER PRIMARY KEY,
  People_ID INTEGER,
  Year_working REAL,
  FOREIGN KEY (People_ID) REFERENCES people(People_ID),
  FOREIGN KEY (Company_ID) REFERENCES company(Company_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of people who graduated from 'Harvard University'?
-- How many people are working at a company that has its headquarters in 'New York City'?
-- What is the total sales in billion of companies that have at least 1000 employees?
-- What is the average profits in billion of companies that have their market value in billion above 100?
-- What is the name of the people who are working at a company that has its headquarters in 'Chicago', are older than 30 years, and have a graduation college that is not 'MIT' or 'Harvard University'?  order them by name in ascending order.  ](https://lms-01-sql.challenge.dev/)
------------------------------------------------------------------------------------------
database_id: farm
database schema :
CREATE TABLE city (
  City_ID INTEGER PRIMARY KEY,
  Official_Name TEXT,
  Status TEXT,
  Area_km_2 REAL,
  Population REAL,
  Census_Ranking TEXT
);

CREATE TABLE farm (
  Farm_ID INTEGER PRIMARY KEY,
  Year REAL,
  Total_Horses REAL,
  Working_Horses REAL,
  Total_Cattle REAL,
  Oxen REAL,
  Bulls REAL,
  Cows REAL,
  Pigs REAL,
  Sheep_and_Goats REAL
);

CREATE TABLE farm_competition (
  Competition_ID INTEGER PRIMARY KEY,
  Year REAL,
  Theme TEXT,
  Host_city_ID INTEGER,
  Hosts TEXT,
  FOREIGN KEY (Host_city_ID) REFERENCES city(City_ID)
);

CREATE TABLE competition_record (
  Competition_ID INTEGER PRIMARY KEY,
  Farm_ID INTEGER,
  Rank REAL,
  FOREIGN KEY (Farm_ID) REFERENCES farm(Farm_ID),
  FOREIGN KEY (Competition_ID) REFERENCES farm_competition(Competition_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of horses on farms in the city with the official name 'London'?
-- What is the total number of farms participating in the farm competition with the theme 'Cattle' held in the city with the official name 'Paris'?
-- What is the total number of cows on farms in the city with the status 'Town' and the area more than 500 km^2?
-- What is the number of farms that have participated in at least two farm competitions and have won a prize in the competition with the theme 'Sheep and Goats'?  ````
-- What is the total number of cities that host farm competitions?
------------------------------------------------------------------------------------------
database_id: solvency_ii
database schema :
CREATE TABLE Addresses (
  Address_ID INTEGER PRIMARY KEY,
  address_details TEXT
);

CREATE TABLE Locations (
  Location_ID INTEGER PRIMARY KEY,
  Other_Details TEXT
);

CREATE TABLE Products (
  Product_ID INTEGER PRIMARY KEY,
  Product_Type_Code TEXT,
  Product_Name TEXT,
  Product_Price REAL
);

CREATE TABLE Parties (
  Party_ID INTEGER PRIMARY KEY,
  Party_Details TEXT
);

CREATE TABLE Assets (
  Asset_ID INTEGER PRIMARY KEY,
  Other_Details TEXT
);

CREATE TABLE Channels (
  Channel_ID INTEGER PRIMARY KEY,
  Other_Details TEXT
);

CREATE TABLE Finances (
  Finance_ID INTEGER PRIMARY KEY,
  Other_Details TEXT
);

CREATE TABLE Events (
  Event_ID INTEGER PRIMARY KEY,
  Address_ID INTEGER,
  Channel_ID REAL,
  Event_Type_Code TEXT,
  Finance_ID INTEGER,
  Location_ID INTEGER,
  FOREIGN KEY (Finance_ID) REFERENCES Finances(Finance_ID),
  FOREIGN KEY (Address_ID) REFERENCES Addresses(Address_ID),
  FOREIGN KEY (Location_ID) REFERENCES Locations(Location_ID)
);

CREATE TABLE Products_in_Events (
  Product_in_Event_ID INTEGER PRIMARY KEY,
  Event_ID INTEGER,
  Product_ID INTEGER,
  FOREIGN KEY (Product_ID) REFERENCES Products(Product_ID),
  FOREIGN KEY (Event_ID) REFERENCES Events(Event_ID)
);

CREATE TABLE Parties_in_Events (
  Party_ID INTEGER PRIMARY KEY,
  Event_ID INTEGER,
  Role_Code TEXT,
  FOREIGN KEY (Event_ID) REFERENCES Events(Event_ID),
  FOREIGN KEY (Party_ID) REFERENCES Parties(Party_ID)
);

CREATE TABLE Agreements (
  Document_ID INTEGER PRIMARY KEY,
  Event_ID INTEGER,
  FOREIGN KEY (Event_ID) REFERENCES Events(Event_ID)
);

CREATE TABLE Assets_in_Events (
  Asset_ID INTEGER PRIMARY KEY,
  Event_ID INTEGER,
  FOREIGN KEY (Event_ID) REFERENCES Events(Event_ID),
  FOREIGN KEY (Event_ID) REFERENCES Events(Event_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the count of unique addresses that have been used for events?
-- What is the average product price for all products that have been used in events with location ID 1234?
-- What are the event types that have been used for events in channels with ID 5678?
-- How many parties have participated in events with location ID 9012 and have the role code 'organizer'?
-- What is the total number of assets that have been used in events with finance ID 3456?
------------------------------------------------------------------------------------------
database_id: city_record
database schema :
CREATE TABLE city (
  City_ID INTEGER PRIMARY KEY,
  City TEXT,
  Hanzi TEXT,
  Hanyu_Pinyin TEXT,
  Regional_Population REAL,
  GDP REAL
);

CREATE TABLE match (
  Match_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Score TEXT,
  Result TEXT,
  Competition TEXT
);

CREATE TABLE temperature (
  City_ID INTEGER PRIMARY KEY,
  Jan REAL,
  Feb REAL,
  Mar REAL,
  Apr REAL,
  Jun REAL,
  Jul REAL,
  Aug REAL,
  Sep REAL,
  Oct REAL,
  Nov REAL,
  Dec REAL,
  FOREIGN KEY (City_ID) REFERENCES city(City_ID)
);

CREATE TABLE hosting_city (
  Year INTEGER PRIMARY KEY,
  Match_ID INTEGER,
  Host_City TEXT,
  FOREIGN KEY (Match_ID) REFERENCES match(Match_ID),
  FOREIGN KEY (Host_City) REFERENCES city(City_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many cities have a population greater than 10 million?
-- What is the average GDP of cities whose Hanzi is "???"?
-- What is the average temperature in the city whose City_ID is 1 in January?
-- What is the most populous city in the competition "World Cup"?
-- How many cities are hosting cities for the year 2010 and have a population greater than 5 million?  Answer the question by joining city, hosting_city and match tables.  (Hint: Use subquery or join for this question)  You may use either match or hosting_city to get the result.  Please explain your answer.  (Note: You cannot use the match table alone to answer this question.)  You should use a subquery or join to answer this question.)
------------------------------------------------------------------------------------------
database_id: swimming
database schema :
CREATE TABLE swimmer (
  ID INTEGER PRIMARY KEY,
  name TEXT,
  Nationality TEXT,
  meter_100 REAL,
  meter_200 TEXT,
  meter_300 TEXT,
  meter_400 TEXT,
  meter_500 TEXT,
  meter_600 TEXT,
  meter_700 TEXT,
  Time TEXT
);

CREATE TABLE stadium (
  ID INTEGER PRIMARY KEY,
  name TEXT,
  Capacity REAL,
  City TEXT,
  Country TEXT,
  Opening_year REAL
);

CREATE TABLE event (
  ID INTEGER PRIMARY KEY,
  Name TEXT,
  Stadium_ID INTEGER,
  Year TEXT,
  FOREIGN KEY (Stadium_ID) REFERENCES stadium(ID)
);

CREATE TABLE record (
  ID REAL,
  Result TEXT,
  Swimmer_ID INTEGER PRIMARY KEY,
  Event_ID INTEGER,
  FOREIGN KEY (Swimmer_ID) REFERENCES swimmer(ID),
  FOREIGN KEY (Event_ID) REFERENCES event(ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of swimmers participating in events at the stadium with a capacity of 50000?
-- Which swimmers have a meter 100 time less than 1:20?
-- What is the name of the stadium with the highest opening year?
-- How many swimmers have won a record in the year 2010?
-- What are the names of the swimmers who won a record in the event with the name '50m freestyle'?  (Note: '50m freestyle' is in the records table)  (Note: this is a complex question using a join, as the event name is not directly in the records table)  (Note: you will need to join the records table with the event table to find the event ID, and then join that with the event table again to find the event name)  (Note: this is a complex question using a join, as the event name is not directly in the records table)  (Note: you will need to join the records table with the event table to find the event ID, and then join that with the event table again to find the event name)  (Note: you will need to
------------------------------------------------------------------------------------------
database_id: flight_2
database schema :
CREATE TABLE airlines (
  uid INTEGER PRIMARY KEY,
  Airline TEXT,
  Abbreviation TEXT,
  Country TEXT
);

CREATE TABLE airports (
  City TEXT,
  AirportCode TEXT PRIMARY KEY,
  AirportName TEXT,
  Country TEXT,
  CountryAbbrev TEXT
);

CREATE TABLE flights (
  Airline INTEGER PRIMARY KEY,
  FlightNo REAL,
  SourceAirport TEXT,
  DestAirport TEXT,
  FOREIGN KEY (DestAirport) REFERENCES airports(AirportCode),
  FOREIGN KEY (SourceAirport) REFERENCES airports(AirportCode)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM flights WHERE DestAirport = 'JFK' AND Airline = 1;
-- SELECT COUNT(*) FROM airlines WHERE Country = 'USA';
-- SELECT COUNT(*) FROM airports WHERE Country = 'USA' AND City LIKE 'New%';
-- SELECT COUNT(DISTINCT Airline) FROM flights WHERE DestAirport = 'LHR';
-- SELECT COUNT(*) FROM airports WHERE Country = 'USA' AND City = 'New York';  // Note: This will return 0 because the City column does not have a separate entry for 'New York', it is 'New York City' in the database.  // However, the schema allows this question to be asked.  // This is an example of a question that might require some clarification or expansion of the schema.  //  // Alternatively, the question could be rephrased to 'How many airports are in the US that have "New York" in their city name?'  // This would be a more accurate and schema-friendly question.  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //  //
------------------------------------------------------------------------------------------
database_id: election
database schema :
CREATE TABLE county (
  County_Id INTEGER PRIMARY KEY,
  County_name TEXT,
  Population REAL,
  Zip_code TEXT
);

CREATE TABLE party (
  Party_ID INTEGER PRIMARY KEY,
  Year REAL,
  Party TEXT,
  Governor TEXT,
  Lieutenant_Governor TEXT,
  Comptroller TEXT,
  Attorney_General TEXT,
  US_Senate TEXT
);

CREATE TABLE election (
  Election_ID INTEGER PRIMARY KEY,
  Counties_Represented TEXT,
  District INTEGER,
  Delegate TEXT,
  Party INTEGER,
  First_Elected REAL,
  Committee TEXT,
  FOREIGN KEY (District) REFERENCES county(County_Id),
  FOREIGN KEY (Party) REFERENCES party(Party_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the total population of all counties in the database?
-- How many counties have a population greater than 100000?
-- What is the name of the governor who was elected in the year 2010 as a Democrat?
-- What are the names of all the lieutenant governors who were elected as Republicans in the year 2005?
-- What is the total number of delegates elected in the year 2010?
------------------------------------------------------------------------------------------
database_id: manufactory_1
database schema :
CREATE TABLE Manufacturers (
  Code INTEGER PRIMARY KEY,
  Name TEXT,
  Headquarter TEXT,
  Founder TEXT,
  Revenue REAL
);

CREATE TABLE Products (
  Code INTEGER PRIMARY KEY,
  Name TEXT,
  Price REAL,
  Manufacturer INTEGER,
  FOREIGN KEY (Manufacturer) REFERENCES Manufacturers(Code)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many products does manufacturer code 12345 produce?
-- What is the name of the manufacturer that produces product code 67890?
-- What is the average revenue of all manufacturers?
-- What is the name of the founder of the manufacturer that produces product code 54321?
-- What are the names of all products that cost more than 500.00?
------------------------------------------------------------------------------------------
database_id: debate
database schema :
CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  District TEXT,
  Name TEXT,
  Party TEXT,
  Age REAL
);

CREATE TABLE debate (
  Debate_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Num_of_Audience REAL
);

CREATE TABLE debate_people (
  Debate_ID INTEGER PRIMARY KEY,
  Affirmative INTEGER,
  Negative INTEGER,
  If_Affirmative_Win TEXT,
  FOREIGN KEY (Negative) REFERENCES people(People_ID),
  FOREIGN KEY (Affirmative) REFERENCES people(People_ID),
  FOREIGN KEY (Debate_ID) REFERENCES debate(Debate_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many people were present at the debate on 20/03/2005?
-- What is the average age of people who were present at the debate?
-- What is the name of the person who was present at the debate on 20/03/2005 and is 25 years old?
-- What is the number of people who were present at the debate and are from the "City Hall" district?
-- What is the total number of people who were present at the debate on 20/03/2005, and are from the "City Hall" district, and are part of the "Green" party?
------------------------------------------------------------------------------------------
database_id: network_2
database schema :
CREATE TABLE Person (
  name TEXT PRIMARY KEY,
  age REAL,
  city TEXT,
  gender TEXT,
  job TEXT
);

CREATE TABLE PersonFriend (
  name TEXT,
  friend TEXT,
  year REAL,
  FOREIGN KEY (friend) REFERENCES Person(name),
  FOREIGN KEY (name) REFERENCES Person(name)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of all people in the database?
-- How many people have friends in the city of "New York"?
-- What are the names of people in the city of "Los Angeles" who are friends with people from "Chicago"?
-- How many jobs are there in the database, and what are the names of people with each job?
-- What are the names of people who are friends with people from the city of "Chicago" and are also from "Chicago"?  SELECT name FROM Person WHERE name IN ( SELECT name FROM Person WHERE city = "Chicago" ) AND name IN ( SELECT friend FROM PersonFriend WHERE year = ( SELECT MAX(year) FROM PersonFriend ) );  SELECT name FROM Person WHERE name IN ( SELECT name FROM PersonFriend WHERE friend = ( SELECT name FROM Person WHERE city = "Chicago" ) );  SELECT name FROM Person WHERE name IN ( SELECT name FROM PersonFriend WHERE friend = ( SELECT name FROM Person WHERE city = "Chicago" ) ) AND name IN ( SELECT name FROM PersonFriend WHERE friend = ( SELECT name FROM Person WHERE city = "Chicago" ) );  SELECT name FROM Person WHERE name IN ( SELECT name FROM PersonFriend WHERE friend = (
------------------------------------------------------------------------------------------
database_id: local_govt_in_alabama
database schema :
CREATE TABLE Services (
  Service_ID INTEGER PRIMARY KEY,
  Service_Type_Code TEXT
);

CREATE TABLE Participants (
  Participant_ID INTEGER PRIMARY KEY,
  Participant_Type_Code TEXT,
  Participant_Details TEXT
);

CREATE TABLE Events (
  Event_ID INTEGER PRIMARY KEY,
  Service_ID INTEGER,
  Event_Details TEXT,
  FOREIGN KEY (Service_ID) REFERENCES Services(Service_ID)
);

CREATE TABLE Participants_in_Events (
  Event_ID INTEGER PRIMARY KEY,
  Participant_ID INTEGER,
  FOREIGN KEY (Event_ID) REFERENCES Events(Event_ID),
  FOREIGN KEY (Participant_ID) REFERENCES Participants(Participant_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the Service with the highest Service_ID?
-- Which Participants have a Participant_ID greater than 1 and are in Events that have a Service_ID equal to 1?
-- What percentage of Services with a Service Type Code of 'A' have a corresponding Event with at least one Participant of Type 'C'?
-- What is the average number of Participants of Type 'B' per Event that has at least one Participant of Type 'B' and at least one Participant of Type 'C'?
-- What is the total number of Events with a Service ID that has a Service Type Code of 'B' and at least one Participant of Type 'C'?
------------------------------------------------------------------------------------------
database_id: climbing
database schema :
CREATE TABLE mountain (
  Mountain_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Prominence REAL,
  Range TEXT,
  Country TEXT
);

CREATE TABLE climber (
  Climber_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Time TEXT,
  Points REAL,
  Mountain_ID INTEGER,
  FOREIGN KEY (Mountain_ID) REFERENCES mountain(Mountain_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- Which mountains have more than 2000 points?
-- How many climbers from the United States are there, and how many mountains have they climbed?
-- What is the average height of mountains climbed by climbers from Japan?
-- Which mountains are located in the "European Alps" range and have a height greater than 3500 meters?
-- What is the highest mountain in the United States and how many climbers have ascended it?
------------------------------------------------------------------------------------------
database_id: e_learning
database schema :
CREATE TABLE Course_Authors_and_Tutors (
  author_id INTEGER PRIMARY KEY,
  author_tutor_ATB TEXT,
  login_name TEXT,
  password TEXT,
  personal_name TEXT,
  middle_name TEXT,
  family_name TEXT,
  gender_mf TEXT,
  address_line_1 TEXT
);

CREATE TABLE Students (
  student_id INTEGER PRIMARY KEY,
  date_of_registration DATETIME,
  date_of_latest_logon DATETIME,
  login_name TEXT,
  password TEXT,
  personal_name TEXT,
  middle_name TEXT,
  family_name TEXT
);

CREATE TABLE Subjects (
  subject_id INTEGER PRIMARY KEY,
  subject_name TEXT
);

CREATE TABLE Courses (
  course_id INTEGER PRIMARY KEY,
  author_id INTEGER,
  subject_id INTEGER,
  course_name TEXT,
  course_description TEXT,
  FOREIGN KEY (subject_id) REFERENCES Subjects(subject_id),
  FOREIGN KEY (author_id) REFERENCES Course_Authors_and_Tutors(author_id)
);

CREATE TABLE Student_Course_Enrolment (
  registration_id INTEGER PRIMARY KEY,
  student_id INTEGER,
  course_id INTEGER,
  date_of_enrolment DATETIME,
  date_of_completion DATETIME,
  FOREIGN KEY (student_id) REFERENCES Students(student_id),
  FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

CREATE TABLE Student_Tests_Taken (
  registration_id INTEGER,
  date_test_taken DATETIME,
  test_result TEXT,
  FOREIGN KEY (registration_id) REFERENCES Student_Course_Enrolment(registration_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many students are enrolled in courses with a subject name 'Mathematics'?
-- What is the average date of registration of students who are enrolled in courses taught by authors with family name 'Smith'?
-- Which student with family name 'Johnson' is enrolled in a course with course name 'Algebra'?
-- What is the number of students who have completed a course with a subject name starting with 'E'? (Include only students who completed the course after the year 2000)  # This one is a bit tricky as the date_of_completion is of TIME type, so it may require some extra logic. # I assume that the completed year is the first two digits of the date_of_completion. # You may need to convert this to DATE type first. # Please, correct me if I am wrong. # (Hint: You may need to use some date functions) # Note: I used the first two digits of the date_of_completion to filter the year, assuming that the date_of_completion is in the format 'YYYY-MM-DD HH:MM:SS'. If your database uses a different format, please, correct me. # This is a complex query that requires filtering and joining multiple tables. #
-- What is the name of the course that was created by the author with id 12345?
------------------------------------------------------------------------------------------
database_id: scientist_1
database schema :
CREATE TABLE Scientists (
  SSN INTEGER PRIMARY KEY,
  Name TEXT
);

CREATE TABLE Projects (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Hours REAL
);

CREATE TABLE AssignedTo (
  Scientist INTEGER PRIMARY KEY,
  Project TEXT,
  FOREIGN KEY (Project) REFERENCES Projects(Code),
  FOREIGN KEY (Scientist) REFERENCES Scientists(SSN)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of hours worked on projects led by scientists from the United States?
-- How many scientists are working on projects with more than 100 hours?
-- What is the name of the project with the code "P001"?
-- Which projects are led by scientists born before 1960?
-- What is the name of the scientist with SSN "1234567890"?  (Note: this SSN is fictional and not present in the schema)  (This one is a bit tricky)  (Hint: this one is a bit of a trick question)  (Hint: not all information is always present in a database)  (Hint: some information may be missing or not available)  (Note: this question is a bit of a trick question because it is asking for a value that may not exist in the database)  (Note: it is asking for a value that may not be present in the database)  (Hint: you may not get the answer you are looking for)  (Hint: be careful what you wish for)  (Hint: the answer may not be what you expect)  (Note: the answer may not be what you
------------------------------------------------------------------------------------------
database_id: ship_1
database schema :
CREATE TABLE captain (
  Captain_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Ship_ID INTEGER,
  age TEXT,
  Class TEXT,
  Rank TEXT,
  FOREIGN KEY (Ship_ID) REFERENCES Ship(Ship_ID)
);

CREATE TABLE Ship (
  Ship_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Built_Year REAL,
  Class TEXT,
  Flag TEXT
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT SUM(COUNT(Captain_ID)) FROM captain WHERE age = 'Old';
-- SELECT s.Name FROM Ship AS s JOIN captain AS c ON s.Ship_ID = c.Ship_ID WHERE c.Rank = 'Lieutenant';
-- SELECT s.Type FROM Ship AS s JOIN captain AS c ON s.Ship_ID = c.Ship_ID WHERE c.Name LIKE '%Jack%';
-- SELECT COUNT(c.Captain_ID) FROM captain c JOIN ship s ON c.Ship_ID = s.Ship_ID WHERE s.Built_Year > 1960;
-- SELECT c.Name FROM captain c WHERE c.age LIKE 'Young' AND c.Class = 'A';  --  class = 'A' AND age = 'Young'  -- Young AND Class = 'A'  --  Young AND A  --  Young AND A  -- Young AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A  -- AND A
------------------------------------------------------------------------------------------
database_id: entertainment_awards
database schema :
CREATE TABLE festival_detail (
  Festival_ID INTEGER PRIMARY KEY,
  Festival_Name TEXT,
  Chair_Name TEXT,
  Location TEXT,
  Year REAL,
  Num_of_Audience REAL
);

CREATE TABLE artwork (
  Artwork_ID INTEGER PRIMARY KEY,
  Type TEXT,
  Name TEXT
);

CREATE TABLE nomination (
  Artwork_ID INTEGER PRIMARY KEY,
  Festival_ID INTEGER,
  Result TEXT,
  FOREIGN KEY (Festival_ID) REFERENCES festival_detail(Festival_ID),
  FOREIGN KEY (Artwork_ID) REFERENCES artwork(Artwork_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of festival details in the festival_detail table?
-- What is the festival name of the festival with the highest number of audience in the festival_detail table?
-- How many artworks were nominated in the festival with festival ID 1?
-- What is the name of the artwork with the highest number of nominations that was nominated in the festival with festival ID 1?
-- What is the average number of audience for the festivals held in the year 2015?  (Note: year is in the integer format)
------------------------------------------------------------------------------------------
database_id: allergy_1
database schema :
CREATE TABLE Allergy_Type (
  Allergy TEXT PRIMARY KEY,
  AllergyType TEXT
);

CREATE TABLE Has_Allergy (
  StuID INTEGER,
  Allergy TEXT,
  FOREIGN KEY (Allergy) REFERENCES Allergy_Type(Allergy),
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM Student WHERE Age > 20;
-- SELECT * FROM Student WHERE Major = 1;
-- SELECT T2.Allergy FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = 'Smith';
-- SELECT T1.Lname, T1.Fname, T1.Age, T2.Allergy FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID WHERE T1.Age > 18 AND T2.Allergy = 'Shellfish';
-- SELECT COUNT(DISTINCT T1.Lname) FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.StuID = T2.StuID WHERE T2.Allergy = 'Peanuts' AND T1.Age BETWEEN 17 AND 25; Answer the questions based on the provided schema.  ]]>
------------------------------------------------------------------------------------------
database_id: imdb
database schema :
CREATE TABLE actor (
  aid INTEGER PRIMARY KEY,
  gender TEXT,
  name TEXT,
  nationality TEXT,
  birth_city TEXT,
  birth_year REAL
);

CREATE TABLE copyright (
  id INTEGER PRIMARY KEY,
  msid REAL,
  cid REAL
);

CREATE TABLE cast (
  id INTEGER PRIMARY KEY,
  msid INTEGER,
  aid INTEGER,
  role REAL,
  FOREIGN KEY (msid) REFERENCES copyright(msid),
  FOREIGN KEY (aid) REFERENCES actor(aid)
);

CREATE TABLE genre (
  gid INTEGER PRIMARY KEY,
  genre TEXT
);

CREATE TABLE classification (
  id INTEGER PRIMARY KEY,
  msid INTEGER,
  gid INTEGER,
  FOREIGN KEY (msid) REFERENCES copyright(msid),
  FOREIGN KEY (gid) REFERENCES genre(gid)
);

CREATE TABLE company (
  id INTEGER PRIMARY KEY,
  name TEXT,
  country_code TEXT
);

CREATE TABLE director (
  did INTEGER PRIMARY KEY,
  gender TEXT,
  name TEXT,
  nationality TEXT,
  birth_city TEXT,
  birth_year REAL
);

CREATE TABLE producer (
  pid INTEGER PRIMARY KEY,
  gender TEXT,
  name TEXT,
  nationality TEXT,
  birth_city TEXT,
  birth_year REAL
);

CREATE TABLE directed_by (
  id INTEGER PRIMARY KEY,
  msid INTEGER,
  did INTEGER,
  FOREIGN KEY (did) REFERENCES director(did),
  FOREIGN KEY (msid) REFERENCES copyright(msid)
);

CREATE TABLE keyword (
  id INTEGER PRIMARY KEY,
  keyword TEXT
);

CREATE TABLE made_by (
  id INTEGER PRIMARY KEY,
  msid INTEGER,
  pid INTEGER,
  FOREIGN KEY (pid) REFERENCES producer(pid),
  FOREIGN KEY (msid) REFERENCES copyright(msid)
);

CREATE TABLE movie (
  mid INTEGER PRIMARY KEY,
  title TEXT,
  release_year REAL,
  title_aka TEXT,
  budget TEXT
);

CREATE TABLE tags (
  id INTEGER PRIMARY KEY,
  msid INTEGER,
  kid REAL,
  FOREIGN KEY (msid) REFERENCES copyright(msid)
);

CREATE TABLE tv_series (
  sid INTEGER PRIMARY KEY,
  title TEXT,
  release_year REAL,
  num_of_seasons REAL,
  num_of_episodes REAL,
  title_aka TEXT,
  budget TEXT
);

CREATE TABLE writer (
  wid INTEGER PRIMARY KEY,
  gender TEXT,
  name REAL,
  nationality REAL,
  num_of_episodes REAL,
  birth_city TEXT,
  birth_year REAL
);

CREATE TABLE written_by (
  id REAL,
  msid INTEGER,
  wid INTEGER,
  FOREIGN KEY (wid) REFERENCES writer(wid),
  FOREIGN KEY (msid) REFERENCES copyright(msid)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM cast WHERE role = 2 AND aid IN ( SELECT aid FROM actor WHERE gender  = 'male' AND birth_city  =  'Los Angeles' );
-- Here are 5 diverse, high-quality, natural language questions that can be answered using the provided database schema:
-- What are the names of all actors who have played in movies with a budget of more than $100 million?
------------------------------------------------------------------------------------------
database_id: products_for_hire
database schema :
CREATE TABLE Discount_Coupons (
  coupon_id INTEGER PRIMARY KEY,
  date_issued DATETIME,
  coupon_amount REAL
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  coupon_id INTEGER,
  good_or_bad_customer TEXT,
  first_name TEXT,
  last_name TEXT,
  gender_mf TEXT,
  date_became_customer DATETIME,
  date_last_hire DATETIME,
  FOREIGN KEY (coupon_id) REFERENCES Discount_Coupons(coupon_id)
);

CREATE TABLE Bookings (
  booking_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  booking_status_code TEXT,
  returned_damaged_yn TEXT,
  booking_start_date DATETIME,
  booking_end_date DATETIME,
  count_hired TEXT,
  amount_payable REAL,
  amount_of_discount REAL,
  amount_outstanding REAL,
  amount_of_refund REAL,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Products_for_Hire (
  product_id INTEGER PRIMARY KEY,
  product_type_code TEXT,
  daily_hire_cost REAL,
  product_name TEXT,
  product_description TEXT
);

CREATE TABLE Payments (
  payment_id INTEGER PRIMARY KEY,
  booking_id INTEGER,
  customer_id INTEGER,
  payment_type_code TEXT,
  amount_paid_in_full_yn TEXT,
  payment_date DATETIME,
  amount_due REAL,
  amount_paid REAL,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id)
);

CREATE TABLE Products_Booked (
  booking_id INTEGER PRIMARY KEY,
  product_id INTEGER,
  returned_yn TEXT,
  returned_late_yn TEXT,
  booked_count REAL,
  booked_amount REAL,
  FOREIGN KEY (product_id) REFERENCES Products_for_Hire(product_id),
  FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id)
);

CREATE TABLE View_Product_Availability (
  product_id INTEGER,
  booking_id INTEGER,
  status_date DATETIME PRIMARY KEY,
  available_yn TEXT,
  FOREIGN KEY (product_id) REFERENCES Products_for_Hire(product_id),
  FOREIGN KEY (booking_id) REFERENCES Bookings(booking_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the total amount of outstanding payments made by customers who are good customers, and who have a coupon amount of at least $50?
-- How many bookings were made by customers who are bad customers, and who have a product type code of 'E'?
-- What is the average amount of refund made by customers who hired a product for at least 5 days?
-- What is the total count of customers who became customers after 2020-01-01, and who have made a payment of $100 or more in full?  and also, what is the total amount of coupons issued before 2020-01-01?  and also, what is the total amount of coupons issued before 2020-01-01, and the count of bookings made by customers who have a gender of 'M'?  and also, what is the count of products booked by customers who have a first name of 'John'?  and also, what is the average amount of discount made by customers who are good customers?  and also, what is the total amount of outstanding payments made by customers who have a coupon amount of at least $50, and who are good customers?  and also, what
-- What is the average amount of discount given to customers who have made more than one booking?
------------------------------------------------------------------------------------------
database_id: candidate_poll
database schema :
CREATE TABLE candidate (
  Candidate_ID INTEGER PRIMARY KEY,
  People_ID INTEGER,
  Poll_Source TEXT,
  Date TEXT,
  Support_rate REAL,
  Consider_rate REAL,
  Oppose_rate REAL,
  Unsure_rate REAL,
  FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);

CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Sex TEXT,
  Name TEXT,
  Date_of_Birth TEXT,
  Height REAL,
  Weight REAL
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average height of people who support Donald Trump?
-- How many people consider voting for Hillary Clinton in the 2016 election?
-- What is the percentage of people who are unsure about voting for Bernie Sanders?
-- What is the average weight of people who support Hillary Clinton but do not consider voting for Donald Trump?
-- How many people who are male and voted in the 2016 election support voting for both Donald Trump and Hillary Clinton?
------------------------------------------------------------------------------------------
database_id: chinook_1
database schema :
CREATE TABLE Album (
  AlbumId INTEGER PRIMARY KEY,
  Title TEXT,
  ArtistId INTEGER,
  FOREIGN KEY (ArtistId) REFERENCES Artist(ArtistId)
);

CREATE TABLE Artist (
  ArtistId INTEGER PRIMARY KEY,
  Name TEXT
);

CREATE TABLE Customer (
  CustomerId INTEGER PRIMARY KEY,
  FirstName TEXT,
  LastName TEXT,
  Company TEXT,
  Address TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  PostalCode TEXT,
  Phone TEXT,
  Fax TEXT,
  Email TEXT,
  SupportRepId INTEGER,
  FOREIGN KEY (SupportRepId) REFERENCES Employee(EmployeeId)
);

CREATE TABLE Employee (
  EmployeeId INTEGER PRIMARY KEY,
  LastName TEXT,
  FirstName TEXT,
  Title TEXT,
  ReportsTo INTEGER,
  BirthDate DATETIME,
  HireDate DATETIME,
  Address TEXT,
  City TEXT,
  State TEXT,
  Country TEXT,
  PostalCode TEXT,
  Phone TEXT,
  Fax TEXT,
  Email TEXT,
  FOREIGN KEY (ReportsTo) REFERENCES Employee(EmployeeId)
);

CREATE TABLE Genre (
  GenreId INTEGER PRIMARY KEY,
  Name TEXT
);

CREATE TABLE Invoice (
  InvoiceId INTEGER PRIMARY KEY,
  CustomerId INTEGER,
  InvoiceDate DATETIME,
  BillingAddress TEXT,
  BillingCity TEXT,
  BillingState TEXT,
  BillingCountry TEXT,
  BillingPostalCode TEXT,
  Total REAL,
  FOREIGN KEY (CustomerId) REFERENCES Customer(CustomerId)
);

CREATE TABLE InvoiceLine (
  InvoiceLineId INTEGER PRIMARY KEY,
  InvoiceId INTEGER,
  TrackId INTEGER,
  UnitPrice REAL,
  Quantity REAL,
  FOREIGN KEY (TrackId) REFERENCES Track(TrackId),
  FOREIGN KEY (InvoiceId) REFERENCES Invoice(InvoiceId)
);

CREATE TABLE MediaType (
  MediaTypeId INTEGER PRIMARY KEY,
  Name TEXT
);

CREATE TABLE Playlist (
  PlaylistId INTEGER PRIMARY KEY,
  Name TEXT
);

CREATE TABLE PlaylistTrack (
  PlaylistId INTEGER PRIMARY KEY,
  TrackId INTEGER,
  FOREIGN KEY (TrackId) REFERENCES Track(TrackId),
  FOREIGN KEY (PlaylistId) REFERENCES Playlist(PlaylistId)
);

CREATE TABLE Track (
  TrackId INTEGER PRIMARY KEY,
  Name TEXT,
  AlbumId INTEGER,
  MediaTypeId INTEGER,
  GenreId INTEGER,
  Composer TEXT,
  Milliseconds REAL,
  Bytes REAL,
  UnitPrice REAL,
  FOREIGN KEY (MediaTypeId) REFERENCES MediaType(MediaTypeId),
  FOREIGN KEY (GenreId) REFERENCES Genre(GenreId),
  FOREIGN KEY (AlbumId) REFERENCES Album(AlbumId)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM Artist
-- SELECT AVG(UnitPrice)
-- SELECT T1.Title, T1.ArtistId
-- SELECT COUNT(DISTINCT T1.CustomerId)
-- SELECT T1.Name, COUNT(T2.TrackId)
------------------------------------------------------------------------------------------
database_id: flight_4
database schema :
CREATE TABLE routes (
  rid INTEGER PRIMARY KEY,
  dst_apid INTEGER,
  dst_ap TEXT,
  src_apid INTEGER,
  src_ap TEXT,
  alid INTEGER,
  airline TEXT,
  codeshare TEXT,
  FOREIGN KEY (alid) REFERENCES airlines(alid),
  FOREIGN KEY (src_apid) REFERENCES airports(apid),
  FOREIGN KEY (dst_apid) REFERENCES airports(apid)
);

CREATE TABLE airports (
  apid INTEGER PRIMARY KEY,
  name TEXT,
  city TEXT,
  country TEXT,
  x REAL,
  y REAL,
  elevation REAL,
  iata TEXT,
  icao TEXT
);

CREATE TABLE airlines (
  alid INTEGER PRIMARY KEY,
  name TEXT,
  iata TEXT,
  icao TEXT,
  callsign TEXT,
  country TEXT,
  active TEXT
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of routes operated by each airline?
-- What are the names of all airports in Japan?
-- How many routes start from airport 'SFO'?
-- What is the average elevation of all airports in the United States?
-- Which airlines operate flights to 'Los Angeles International Airport' (LAX)?  # Answer with the names of the airlines. #  Show distinct names only. #  Do not include duplicate airline names in the result. #  #  Assume that the airport name LAX is a valid IATA code for Los Angeles International Airport. #  #  Assume that the airport name LAX is a valid IATA code for Los Angeles International Airport. #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #  #
------------------------------------------------------------------------------------------
database_id: pets_1
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Has_Pet (
  StuID INTEGER,
  PetID INTEGER,
  FOREIGN KEY (StuID) REFERENCES Student(StuID),
  FOREIGN KEY (PetID) REFERENCES Pets(PetID)
);

CREATE TABLE Pets (
  PetID INTEGER PRIMARY KEY,
  PetType TEXT,
  pet_age REAL,
  weight REAL
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of students who are majoring in "Computer Science"?
-- How many students are taking "Computer Science" as their major and are living in the city with code "TX"?
-- What is the average weight of pets belonging to students who are majoring in "Engineering"?
-- How many students who are majoring in "Mathematics" have an advisor whose name starts with "D"?
-- What is the average age of pets belonging to students who are majoring in "Biology" and have a pet that is a dog?
------------------------------------------------------------------------------------------
database_id: dorm_1
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Dorm (
  dormid REAL,
  dorm_name TEXT,
  student_capacity REAL,
  gender TEXT
);

CREATE TABLE Dorm_amenity (
  amenid REAL,
  amenity_name TEXT
);

CREATE TABLE Has_amenity (
  dormid INTEGER,
  amenid INTEGER,
  FOREIGN KEY (amenid) REFERENCES Dorm_amenity(amenid),
  FOREIGN KEY (dormid) REFERENCES Dorm(dormid)
);

CREATE TABLE Lives_in (
  stuid INTEGER,
  dormid INTEGER,
  room_number REAL,
  FOREIGN KEY (dormid) REFERENCES Dorm(dormid),
  FOREIGN KEY (stuid) REFERENCES Student(StuID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of students in the dorm named "Dorm2"?
-- How many students live in the dorm with gender "M"?
-- What is the name of the advisor of the student with LName "Smith"?
-- What is the most common major among students living in the dorm with the name "Dorm1"?
-- What is the name of the dorm where student with StuID 5 lives?
------------------------------------------------------------------------------------------
database_id: journal_committee
database schema :
CREATE TABLE journal (
  Journal_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Theme TEXT,
  Sales REAL
);

CREATE TABLE editor (
  Editor_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Age REAL
);

CREATE TABLE journal_committee (
  Editor_ID INTEGER PRIMARY KEY,
  Journal_ID INTEGER,
  Work_Type TEXT,
  FOREIGN KEY (Journal_ID) REFERENCES journal(Journal_ID),
  FOREIGN KEY (Editor_ID) REFERENCES editor(Editor_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of editors who work on journals with a sales revenue above $100,000?
-- What is the total number of journals published by editors who are above 30 years old?
-- What is the total sales revenue of all journals published by editors who are below 25 years old?
-- Which editor has published the most journals?
-- What is the number of journals with a sales revenue between $50,000 and $100,000? and what is the average sales revenue of these journals?
------------------------------------------------------------------------------------------
database_id: flight_1
database schema :
CREATE TABLE flight (
  flno INTEGER PRIMARY KEY,
  origin TEXT,
  destination TEXT,
  distance REAL,
  departure_date DATETIME,
  arrival_date DATETIME,
  price REAL,
  aid INTEGER,
  FOREIGN KEY (aid) REFERENCES aircraft(aid)
);

CREATE TABLE aircraft (
  aid INTEGER PRIMARY KEY,
  name TEXT,
  distance REAL
);

CREATE TABLE employee (
  eid INTEGER PRIMARY KEY,
  name TEXT,
  salary REAL
);

CREATE TABLE certificate (
  eid INTEGER PRIMARY KEY,
  aid INTEGER,
  FOREIGN KEY (aid) REFERENCES aircraft(aid),
  FOREIGN KEY (eid) REFERENCES employee(eid)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average salary of employees who have a certificate for an aircraft that flies to a destination with a distance greater than 3000 miles?
-- How many flights have a departure date on or after 2022-01-01 and a price greater than $500?
-- What is the total distance flown by all aircraft that have been involved in at least one flight with a price greater than $1000?
-- How many employees have a certificate for an aircraft that is named 'Airbus A320'?
-- What is the maximum price of flights that have a departure date on or after 2022-01-01 and are operated by aircraft that have a distance greater than 2000 miles?
------------------------------------------------------------------------------------------
database_id: medicine_enzyme_interaction
database schema :
CREATE TABLE medicine (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Trade_Name TEXT,
  FDA_approved TEXT
);

CREATE TABLE enzyme (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Location TEXT,
  Product TEXT,
  Chromosome TEXT,
  OMIM REAL,
  Porphyria TEXT
);

CREATE TABLE medicine_enzyme_interaction (
  enzyme_id INTEGER PRIMARY KEY,
  medicine_id INTEGER,
  interaction_type TEXT,
  FOREIGN KEY (medicine_id) REFERENCES medicine(id),
  FOREIGN KEY (enzyme_id) REFERENCES enzyme(id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the medicine with the trade name "Paracetamol"?
-- What is the name of the enzyme with location "Mitochondria"?
-- How many medicines have interactions with an enzyme located in "Nucleus"?
-- What is the name of the medicine with FDA approval "Approved" and trade name "Aspirin"?
-- What is the name of the enzyme with the highest OMIM value?
------------------------------------------------------------------------------------------
database_id: local_govt_and_lot
database schema :
CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  customer_details TEXT
);

CREATE TABLE Properties (
  property_id INTEGER PRIMARY KEY,
  property_type_code TEXT,
  property_address TEXT,
  other_details TEXT
);

CREATE TABLE Residents (
  resident_id INTEGER PRIMARY KEY,
  property_id INTEGER,
  date_moved_in DATETIME,
  date_moved_out DATETIME,
  other_details TEXT,
  FOREIGN KEY (property_id) REFERENCES Properties(property_id)
);

CREATE TABLE Organizations (
  organization_id INTEGER PRIMARY KEY,
  parent_organization_id REAL,
  organization_details TEXT
);

CREATE TABLE Services (
  service_id INTEGER PRIMARY KEY,
  organization_id INTEGER,
  service_type_code TEXT,
  service_details TEXT,
  FOREIGN KEY (organization_id) REFERENCES Organizations(organization_id)
);

CREATE TABLE Residents_Services (
  resident_id INTEGER PRIMARY KEY,
  service_id INTEGER,
  date_moved_in DATETIME,
  property_id INTEGER,
  date_requested DATETIME,
  date_provided DATETIME,
  other_details TEXT,
  FOREIGN KEY (resident_id) REFERENCES Residents(resident_id),
  FOREIGN KEY (property_id) REFERENCES Residents(property_id),
  FOREIGN KEY (date_moved_in) REFERENCES Residents(date_moved_in),
  FOREIGN KEY (service_id) REFERENCES Services(service_id)
);

CREATE TABLE Things (
  thing_id INTEGER PRIMARY KEY,
  organization_id INTEGER,
  Type_of_Thing_Code TEXT,
  service_type_code TEXT,
  service_details TEXT,
  FOREIGN KEY (organization_id) REFERENCES Organizations(organization_id)
);

CREATE TABLE Customer_Events (
  Customer_Event_ID INTEGER PRIMARY KEY,
  customer_id INTEGER,
  date_moved_in DATETIME,
  property_id INTEGER,
  resident_id INTEGER,
  thing_id INTEGER,
  FOREIGN KEY (resident_id) REFERENCES Residents(resident_id),
  FOREIGN KEY (property_id) REFERENCES Residents(property_id),
  FOREIGN KEY (date_moved_in) REFERENCES Residents(date_moved_in),
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (thing_id) REFERENCES Things(thing_id)
);

CREATE TABLE Customer_Event_Notes (
  Customer_Event_Note_ID INTEGER PRIMARY KEY,
  Customer_Event_ID INTEGER,
  service_type_code TEXT,
  resident_id REAL,
  property_id REAL,
  date_moved_in DATETIME,
  FOREIGN KEY (Customer_Event_ID) REFERENCES Customer_Events(Customer_Event_ID)
);

CREATE TABLE Timed_Status_of_Things (
  thing_id INTEGER PRIMARY KEY,
  Date_and_Date DATETIME,
  Status_of_Thing_Code TEXT,
  FOREIGN KEY (thing_id) REFERENCES Things(thing_id)
);

CREATE TABLE Timed_Locations_of_Things (
  thing_id INTEGER PRIMARY KEY,
  Date_and_Time DATETIME,
  Location_Code TEXT,
  FOREIGN KEY (thing_id) REFERENCES Things(thing_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT ( T1.customer_id ) FROM Customers AS T1 JOIN Residents AS T2 ON T1.customer_id  =  T2.customer_id;
-- SELECT T1.property_id, T1.property_type_code FROM Properties AS T1 JOIN Residents AS T2 ON T1.property_id  =  T2.property_id WHERE T2.date_moved_out  =  '2022-01-01';
-- What is the average number of services provided per resident in the year 2020?
-- What is the average number of residents per property that moved out in the year 2020?
-- What is the average number of services requested per resident in the year 2020?
------------------------------------------------------------------------------------------
database_id: station_weather
database schema :
CREATE TABLE train (
  id INTEGER PRIMARY KEY,
  train_number REAL,
  name TEXT,
  origin TEXT,
  destination TEXT,
  time TEXT,
  interval TEXT
);

CREATE TABLE station (
  id INTEGER PRIMARY KEY,
  network_name TEXT,
  services TEXT,
  local_authority TEXT
);

CREATE TABLE route (
  train_id INTEGER PRIMARY KEY,
  station_id INTEGER,
  FOREIGN KEY (station_id) REFERENCES station(id),
  FOREIGN KEY (train_id) REFERENCES train(id)
);

CREATE TABLE weekly_weather (
  station_id INTEGER PRIMARY KEY,
  day_of_week TEXT,
  high_temperature REAL,
  low_temperature REAL,
  precipitation REAL,
  wind_speed_mph REAL,
  FOREIGN KEY (station_id) REFERENCES station(id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the train with train number 12345? SELECT name FROM train WHERE train_number = 12345;
-- How many trains are there in total, and how many of them have an interval of 'hourly'? SELECT COUNT(*) FROM train WHERE interval = 'hourly';
-- What are the names of the stations that are part of the 'Network Rail' network? SELECT name FROM station WHERE network_name = 'Network Rail';
-- What is the average high temperature at stations that are part of the 'Transport for London' network on Monday? SELECT AVG(high_temperature) FROM weekly_weather AS ww JOIN station AS s ON ww.station_id = s.id WHERE s.network_name = 'Transport for London' AND ww.day_of_week = 'Monday';
-- What is the number of trains that travel to 'London Bridge' and have an interval of 'hourly' or 'peak hours'? SELECT COUNT(*) FROM train AS t JOIN route AS r ON t.id = r.train_id JOIN station AS s ON r.station_id = s.id WHERE s.name = 'London Bridge' AND (t.interval = 'hourly' OR t.interval = 'peak hours');  SELECT COUNT(*) FROM train
------------------------------------------------------------------------------------------
database_id: shop_membership
database schema :
CREATE TABLE member (
  Member_ID INTEGER PRIMARY KEY,
  Card_Number TEXT,
  Name TEXT,
  Hometown TEXT,
  Level REAL
);

CREATE TABLE branch (
  Branch_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Open_year TEXT,
  Address_road TEXT,
  City TEXT,
  membership_amount TEXT
);

CREATE TABLE membership_register_branch (
  Member_ID INTEGER PRIMARY KEY,
  Branch_ID TEXT,
  Register_Year TEXT,
  FOREIGN KEY (Branch_ID) REFERENCES branch(Branch_ID),
  FOREIGN KEY (Member_ID) REFERENCES member(Member_ID)
);

CREATE TABLE purchase (
  Member_ID INTEGER PRIMARY KEY,
  Branch_ID TEXT,
  Year TEXT,
  Total_pounds REAL,
  FOREIGN KEY (Branch_ID) REFERENCES branch(Branch_ID),
  FOREIGN KEY (Member_ID) REFERENCES member(Member_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many members have their card number in the format XXXXXXXXXX (8 digits long)?
-- What is the average total pounds bought by members from each branch in 2010?
-- Which branch has the highest membership amount and has a member with a card number starting with '98'?
-- What is the name of the city where the branch with the highest membership amount is located?
-- How many members from the branch with the highest membership amount are registered in the year 2010?
------------------------------------------------------------------------------------------
database_id: driving_school
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  line_1_number_building TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT
);

CREATE TABLE Staff (
  staff_id INTEGER PRIMARY KEY,
  staff_address_id INTEGER,
  nickname TEXT,
  first_name TEXT,
  middle_name TEXT,
  last_name TEXT,
  date_of_birth DATETIME,
  date_joined_staff DATETIME,
  date_left_staff DATETIME,
  FOREIGN KEY (staff_address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Vehicles (
  vehicle_id INTEGER PRIMARY KEY,
  vehicle_details TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  customer_address_id INTEGER,
  customer_status_code TEXT,
  date_became_customer DATETIME,
  date_of_birth DATETIME,
  first_name TEXT,
  last_name TEXT,
  amount_outstanding REAL,
  email_address TEXT,
  phone_number TEXT,
  cell_mobile_phone_number TEXT,
  FOREIGN KEY (customer_address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Customer_Payments (
  customer_id INTEGER PRIMARY KEY,
  datetime_payment DATETIME,
  payment_method_code TEXT,
  amount_payment REAL,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Lessons (
  lesson_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  lesson_status_code TEXT,
  staff_id INTEGER,
  vehicle_id INTEGER,
  lesson_date DATETIME,
  lesson_time TEXT,
  price REAL,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (staff_id) REFERENCES Staff(staff_id),
  FOREIGN KEY (vehicle_id) REFERENCES Vehicles(vehicle_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many customers have outstanding amounts greater than $1000?
-- What is the average price of all lessons given by staff with the nickname 'John'?
-- What is the total number of lessons given to customers from the city 'New York'?
-- What is the number of staff members who have been with the company for more than 5 years?
-- What is the number of customers who have taken lessons on a vehicle with a vehicle details containing the string 'Speedster'?
------------------------------------------------------------------------------------------
database_id: concert_singer
database schema :
CREATE TABLE stadium (
  Stadium_ID INTEGER PRIMARY KEY,
  Location TEXT,
  Name TEXT,
  Capacity REAL,
  Highest REAL,
  Lowest REAL,
  Average REAL
);

CREATE TABLE singer (
  Singer_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Song_Name TEXT,
  Song_release_year TEXT,
  Age REAL,
  Is_male TEXT
);

CREATE TABLE concert (
  concert_ID INTEGER PRIMARY KEY,
  concert_Name TEXT,
  Theme TEXT,
  Stadium_ID TEXT,
  Year TEXT,
  FOREIGN KEY (Stadium_ID) REFERENCES stadium(Stadium_ID)
);

CREATE TABLE singer_in_concert (
  concert_ID INTEGER PRIMARY KEY,
  Singer_ID TEXT,
  FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID),
  FOREIGN KEY (concert_ID) REFERENCES concert(concert_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- Which singer has performed at the most concerts?
-- What is the average age of male singers who have performed at the most concerts?
-- 2.
-- 4.
-- Here are five questions that can be answered using the provided database schema:
------------------------------------------------------------------------------------------
database_id: music_2
database schema :
CREATE TABLE Songs (
  SongId INTEGER PRIMARY KEY,
  Title TEXT
);

CREATE TABLE Albums (
  AId INTEGER PRIMARY KEY,
  Title TEXT,
  Year REAL,
  Label TEXT,
  Type TEXT
);

CREATE TABLE Band (
  Id INTEGER PRIMARY KEY,
  Firstname TEXT,
  Lastname TEXT
);

CREATE TABLE Instruments (
  SongId INTEGER PRIMARY KEY,
  BandmateId INTEGER,
  Instrument TEXT,
  FOREIGN KEY (BandmateId) REFERENCES Band(Id),
  FOREIGN KEY (SongId) REFERENCES Songs(SongId)
);

CREATE TABLE Performance (
  SongId INTEGER PRIMARY KEY,
  Bandmate INTEGER,
  StagePosition TEXT,
  FOREIGN KEY (Bandmate) REFERENCES Band(Id),
  FOREIGN KEY (SongId) REFERENCES Songs(SongId)
);

CREATE TABLE Tracklists (
  AlbumId INTEGER PRIMARY KEY,
  Position REAL,
  SongId INTEGER,
  FOREIGN KEY (AlbumId) REFERENCES Albums(AId),
  FOREIGN KEY (SongId) REFERENCES Songs(SongId)
);

CREATE TABLE Vocals (
  SongId INTEGER PRIMARY KEY,
  Bandmate INTEGER,
  Type TEXT,
  FOREIGN KEY (Bandmate) REFERENCES Band(Id),
  FOREIGN KEY (SongId) REFERENCES Songs(SongId)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many songs were released by the band that released the album "1984"?
-- What are the names of the bandmates who played instruments on the song "Happiness"?
-- What are the song titles that have no vocals in the 'Thriller' album?
-- What is the genre of the album 'Hotel California'?
-- Which bandmate played the instrument 'bass' in the song 'Hotel California'?
------------------------------------------------------------------------------------------
database_id: sports_competition
database schema :
CREATE TABLE club (
  Club_ID INTEGER PRIMARY KEY,
  name TEXT,
  Region TEXT,
  Start_year TEXT
);

CREATE TABLE club_rank (
  Rank INTEGER PRIMARY KEY,
  Club_ID INTEGER,
  Gold REAL,
  Silver REAL,
  Bronze REAL,
  Total REAL,
  FOREIGN KEY (Club_ID) REFERENCES club(Club_ID)
);

CREATE TABLE player (
  Player_ID INTEGER PRIMARY KEY,
  name TEXT,
  Position TEXT,
  Club_ID INTEGER,
  Apps REAL,
  Tries REAL,
  Goals TEXT,
  Points REAL,
  FOREIGN KEY (Club_ID) REFERENCES club(Club_ID)
);

CREATE TABLE competition (
  Competition_ID INTEGER PRIMARY KEY,
  Year REAL,
  Competition_type TEXT,
  Country TEXT
);

CREATE TABLE competition_result (
  Competition_ID INTEGER PRIMARY KEY,
  Club_ID_1 INTEGER,
  Club_ID_2 INTEGER,
  Score TEXT,
  FOREIGN KEY (Competition_ID) REFERENCES competition(Competition_ID),
  FOREIGN KEY (Club_ID_2) REFERENCES club(Club_ID),
  FOREIGN KEY (Club_ID_1) REFERENCES club(Club_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of tries scored by players from clubs that have won at least one gold medal in the club_rank table?
-- How many clubs are there in the club table that have a name starting with the letter "A"?
-- What is the average number of points scored by players who have played in competitions that have the competition type "Championship"?
-- How many clubs have won the championship in the year 2015?
-- How many players are from the club "Barbarians" and are position "Forward"?
------------------------------------------------------------------------------------------
database_id: railway
database schema :
CREATE TABLE railway (
  Railway_ID INTEGER PRIMARY KEY,
  Railway TEXT,
  Builder TEXT,
  Built TEXT,
  Wheels TEXT,
  Location TEXT,
  ObjectNumber TEXT
);

CREATE TABLE train (
  Train_ID INTEGER PRIMARY KEY,
  Train_Num TEXT,
  Name TEXT,
  "From" TEXT,
  Arrival TEXT,
  Railway_ID INTEGER,
  FOREIGN KEY (Railway_ID) REFERENCES railway(Railway_ID)
);

CREATE TABLE manager (
  Manager_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Working_year_starts TEXT,
  Age REAL,
  Level REAL
);

CREATE TABLE railway_manage (
  Railway_ID INTEGER PRIMARY KEY,
  Manager_ID INTEGER,
  From_Year TEXT,
  FOREIGN KEY (Railway_ID) REFERENCES railway(Railway_ID),
  FOREIGN KEY (Manager_ID) REFERENCES manager(Manager_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM train WHERE Arrival = '2024-03-16';
-- SELECT T2.Name FROM manager AS T1 INNER JOIN railway_manage AS T2 ON T1.Manager_ID = T2.Manager_ID WHERE T2.Railway_ID = 3;
-- SELECT T1.Railway FROM railway AS T1 INNER JOIN train AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.From = 'Paris';
-- SELECT COUNT(DISTINCT T2.Name) FROM manager AS T1 INNER JOIN railway_manage AS T2 ON T1.Manager_ID = T2.Manager_ID WHERE T2.From_Year = '2020';
-- SELECT T1.Railway FROM railway AS T1 INNER JOIN railway_manage AS T2 ON T1.Railway_ID = T2.Railway_ID WHERE T2.Manager_ID = 4 AND T1.Built = '2010-01-01';  --> invalid because there is no T2.Manager_ID = 4;  corrected question: SELECT T1.Railway FROM railway AS T1 INNER JOIN railway_manage AS T2 ON T1.Railway_ID = T2.Railway
------------------------------------------------------------------------------------------
database_id: inn_1
database schema :
CREATE TABLE Rooms (
  RoomId TEXT PRIMARY KEY,
  roomName TEXT,
  beds REAL,
  bedType TEXT,
  maxOccupancy REAL,
  basePrice REAL,
  decor TEXT
);

CREATE TABLE Reservations (
  Code INTEGER PRIMARY KEY,
  Room TEXT,
  CheckIn TEXT,
  CheckOut TEXT,
  Rate REAL,
  LastName TEXT,
  FirstName TEXT,
  Adults REAL,
  Kids REAL,
  FOREIGN KEY (Room) REFERENCES Rooms(RoomId)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of beds in rooms with more than 2 beds?
-- How many rooms have a base price greater than $500 and are decorated with 'Modern'?
-- What are the names of all the rooms that have a bed type 'King'?
-- How many guests (adults + kids) were in rooms with 'Luxury' decor and check-in date between '2022-01-01' and '2022-01-31'?
-- What is the total number of nights reserved in rooms with 'Deluxe' decor and a base price less than $200?  Show the result only for rooms with 'Deluxe' decor.  (Note: this will likely require a subquery)  ALSO, only consider reservations made between '2021-01-01' and '2021-01-31'.
------------------------------------------------------------------------------------------
database_id: museum_visit
database schema :
CREATE TABLE museum (
  Museum_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Num_of_Staff REAL,
  Open_Year TEXT
);

CREATE TABLE visitor (
  ID INTEGER PRIMARY KEY,
  Name TEXT,
  Level_of_membership REAL,
  Age REAL
);

CREATE TABLE visit (
  Museum_ID INTEGER PRIMARY KEY,
  visitor_ID TEXT,
  Num_of_Ticket REAL,
  Total_spent REAL,
  FOREIGN KEY (visitor_ID) REFERENCES visitor(ID),
  FOREIGN KEY (Museum_ID) REFERENCES museum(Museum_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of museums that have more than 50 staff members?
-- How many visitors have visited the museum with the name "National Museum" in the year 2015?
-- What is the average age of visitors who have visited the museum with the name "National Museum"?
-- What is the number of museums that have both a museum with the name "National Museum" and a museum with the name "Local Museum"?
-- What is the average amount spent by visitors who have visited the museum with the name "Local Museum"? AND what is the number of visitors who have visited the museum with the name "Local Museum"? AND what is the number of staff members in the museum with the name "Local Museum"? AND what is the number of visitors who have visited the museum with the name "National Museum"? AND what is the average age of visitors who have visited the museum with the name "National Museum"? AND what is the number of staff members in the museum with the name "National Museum"?  (Note: This question is asking for multiple results)  AND what is the name of the museum with the most number of staff members?  AND what is the average age of visitors who have visited
------------------------------------------------------------------------------------------
database_id: browser_web
database schema :
CREATE TABLE Web_client_accelerator (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Operating_system TEXT,
  Client TEXT,
  Connection TEXT
);

CREATE TABLE browser (
  id INTEGER PRIMARY KEY,
  name TEXT,
  market_share REAL
);

CREATE TABLE accelerator_compatible_browser (
  accelerator_id INTEGER PRIMARY KEY,
  browser_id INTEGER,
  compatible_since_year REAL,
  FOREIGN KEY (browser_id) REFERENCES browser(id),
  FOREIGN KEY (accelerator_id) REFERENCES Web_client_accelerator(id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of accelerators for the "Google Chrome" browser?
-- What is the name of the accelerator that has the highest market share among the "Firefox" browser accelerators?
-- What is the connection speed of the accelerator that has the highest market share among the "Safari" browser accelerators?
-- What is the name of the operating system used by the accelerator that
-- What is the name of the web client accelerator with id 2?
------------------------------------------------------------------------------------------
database_id: baseball_1
database schema :
CREATE TABLE all_star (
  player_id TEXT,
  year REAL,
  game_num REAL,
  game_id TEXT,
  team_id TEXT,
  league_id TEXT,
  gp REAL,
  starting_pos REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE appearances (
  year REAL,
  team_id TEXT,
  league_id TEXT,
  player_id TEXT,
  g_all REAL,
  gs REAL,
  g_batting REAL,
  g_defense REAL,
  g_p REAL,
  g_c REAL,
  g_1b REAL,
  g_2b REAL,
  g_3b REAL,
  g_ss REAL,
  g_lf REAL,
  g_cf REAL,
  g_rf REAL,
  g_of REAL,
  g_dh REAL,
  g_ph REAL,
  g_pr REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id),
  FOREIGN KEY (team_id) REFERENCES team(team_id)
);

CREATE TABLE manager_award (
  player_id TEXT,
  award_id TEXT,
  year REAL,
  league_id TEXT,
  tie TEXT,
  notes REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE player_award (
  player_id TEXT,
  award_id TEXT,
  year REAL,
  league_id TEXT,
  tie TEXT,
  notes TEXT,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE manager_award_vote (
  award_id TEXT,
  year REAL,
  league_id TEXT,
  player_id TEXT,
  points_won REAL,
  points_max REAL,
  votes_first REAL
);

CREATE TABLE player_award_vote (
  award_id TEXT,
  year REAL,
  league_id TEXT,
  player_id TEXT,
  points_won REAL,
  points_max REAL,
  votes_first REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE batting (
  player_id TEXT,
  year REAL,
  stint REAL,
  team_id TEXT,
  league_id TEXT,
  g REAL,
  ab REAL,
  r REAL,
  h REAL,
  double REAL,
  triple REAL,
  hr REAL,
  rbi REAL,
  sb REAL,
  cs REAL,
  bb REAL,
  so REAL,
  ibb REAL,
  hbp REAL,
  sh REAL,
  sf REAL,
  g_idp REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE batting_postseason (
  year REAL,
  round TEXT,
  player_id TEXT,
  team_id TEXT,
  league_id TEXT,
  g REAL,
  ab REAL,
  r REAL,
  h REAL,
  double REAL,
  triple REAL,
  hr REAL,
  rbi REAL,
  sb REAL,
  cs REAL,
  bb REAL,
  so REAL,
  ibb REAL,
  hbp REAL,
  sh REAL,
  sf REAL,
  g_idp REAL,
  FOREIGN KEY (team_id) REFERENCES team(team_id),
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE player_college (
  player_id TEXT,
  college_id TEXT,
  year REAL,
  FOREIGN KEY (college_id) REFERENCES college(college_id),
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE fielding (
  player_id TEXT,
  year REAL,
  stint REAL,
  team_id TEXT,
  league_id TEXT,
  pos TEXT,
  g REAL,
  gs REAL,
  inn_outs REAL,
  po REAL,
  a REAL,
  e REAL,
  dp REAL,
  pb REAL,
  wp REAL,
  sb REAL,
  cs REAL,
  zr REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE fielding_outfield (
  player_id TEXT,
  year REAL,
  stint REAL,
  glf REAL,
  gcf REAL,
  grf REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE fielding_postseason (
  player_id TEXT,
  year REAL,
  team_id TEXT,
  league_id TEXT,
  round TEXT,
  pos TEXT,
  g REAL,
  gs REAL,
  inn_outs REAL,
  po REAL,
  a REAL,
  e REAL,
  dp REAL,
  tp REAL,
  pb REAL,
  sb REAL,
  cs REAL,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE hall_of_fame (
  player_id TEXT,
  yearid REAL,
  votedby TEXT,
  ballots REAL,
  needed REAL,
  votes REAL,
  inducted TEXT,
  category TEXT,
  needed_note TEXT,
  FOREIGN KEY (player_id) REFERENCES player(player_id)
);

CREATE TABLE home_game (
  year REAL,
  league_id TEXT,
  team_id TEXT,
  park_id TEXT,
  span_first TEXT,
  span_last TEXT,
  games REAL,
  openings REAL,
  attendance REAL,
  FOREIGN KEY (park_id) REFERENCES park(park_id),
  FOREIGN KEY (team_id) REFERENCES team(team_id)
);

CREATE TABLE manager (
  player_id TEXT,
  year REAL,
  team_id TEXT,
  league_id TEXT,
  inseason REAL,
  g REAL,
  w REAL,
  l REAL,
  rank REAL,
  plyr_mgr TEXT,
  FOREIGN KEY (team_id) REFERENCES team(team_id)
);

CREATE TABLE manager_half (
  player_id TEXT,
  year REAL,
  team_id TEXT,
  league_id TEXT,
  inseason REAL,
  half REAL,
  g REAL,
  w REAL,
  l REAL,
  rank REAL,
  FOREIGN KEY (team_id) REFERENCES team(team_id)
);

CREATE TABLE player (
  player_id TEXT,
  birth_year REAL,
  birth_month REAL,
  birth_day REAL,
  birth_country TEXT,
  birth_state TEXT,
  birth_city TEXT,
  death_year REAL,
  death_month REAL,
  death_day REAL,
  death_country TEXT,
  death_state TEXT,
  death_city TEXT,
  name_first TEXT,
  name_last TEXT,
  name_given TEXT,
  weight REAL,
  height REAL,
  bats TEXT,
  throws TEXT,
  debut TEXT,
  final_game TEXT,
  retro_id TEXT,
  bbref_id TEXT
);

CREATE TABLE park (
  park_id TEXT,
  park_name TEXT,
  park_alias TEXT,
  city TEXT,
  state TEXT,
  country TEXT
);

CREATE TABLE pitching (
  player_id TEXT,
  year REAL,
  stint REAL,
  team_id TEXT,
  league_id TEXT,
  w REAL,
  l REAL,
  g REAL,
  gs REAL,
  cg REAL,
  sho REAL,
  sv REAL,
  ipouts REAL,
  h REAL,
  er REAL,
  hr REAL,
  bb REAL,
  so REAL,
  baopp REAL,
  era REAL,
  ibb REAL,
  wp REAL,
  hbp REAL,
  bk REAL,
  bfp REAL,
  gf REAL,
  r REAL,
  sh REAL,
  sf REAL,
  g_idp REAL
);

CREATE TABLE pitching_postseason (
  player_id TEXT,
  year REAL,
  round TEXT,
  team_id TEXT,
  league_id TEXT,
  w REAL,
  l REAL,
  g REAL,
  gs REAL,
  cg REAL,
  sho REAL,
  sv REAL,
  ipouts REAL,
  h REAL,
  er REAL,
  hr REAL,
  bb REAL,
  so REAL,
  baopp TEXT,
  era REAL,
  ibb REAL,
  wp REAL,
  hbp REAL,
  bk REAL,
  bfp REAL,
  gf REAL,
  r REAL,
  sh REAL,
  sf REAL,
  g_idp REAL
);

CREATE TABLE salary (
  year REAL,
  team_id TEXT,
  league_id TEXT,
  player_id TEXT,
  salary REAL
);

CREATE TABLE college (
  college_id TEXT,
  name_full TEXT,
  city TEXT,
  state TEXT,
  country TEXT
);

CREATE TABLE postseason (
  year REAL,
  round TEXT,
  team_id_winner TEXT,
  league_id_winner TEXT,
  team_id_loser TEXT,
  league_id_loser TEXT,
  wins REAL,
  losses REAL,
  ties REAL
);

CREATE TABLE team (
  year REAL,
  league_id TEXT,
  team_id TEXT,
  franchise_id TEXT,
  div_id TEXT,
  rank REAL,
  g REAL,
  ghome REAL,
  w REAL,
  l REAL,
  div_win TEXT,
  wc_win TEXT,
  lg_win TEXT,
  ws_win TEXT,
  r REAL,
  ab REAL,
  h REAL,
  double REAL,
  triple REAL,
  hr REAL,
  bb REAL,
  so REAL,
  sb REAL,
  cs REAL,
  hbp REAL,
  sf REAL,
  ra REAL,
  er REAL,
  era REAL,
  cg REAL,
  sho REAL,
  sv REAL,
  ipouts REAL,
  ha REAL,
  hra REAL,
  bba REAL,
  soa REAL,
  e REAL,
  dp REAL,
  fp REAL,
  name TEXT,
  park TEXT,
  attendance REAL,
  bpf REAL,
  ppf REAL,
  team_id_br TEXT,
  team_id_lahman45 TEXT,
  team_id_retro TEXT
);

CREATE TABLE team_franchise (
  franchise_id TEXT,
  franchise_name TEXT,
  active TEXT,
  na_assoc TEXT
);

CREATE TABLE team_half (
  year REAL,
  league_id TEXT,
  team_id TEXT,
  half REAL,
  div_id TEXT,
  div_win TEXT,
  rank REAL,
  g REAL,
  w REAL,
  l REAL
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM ( SELECT DISTINCT T1.team_id FROM all_star AS T1 INNER JOIN team AS T2 ON T1.team_id = T2.team_id WHERE T2.year = 1990 )
-- SELECT COUNT(*) FROM ( SELECT DISTINCT T1.player_id FROM player_award AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_last = 'Gonzalez' )  WHERE award_id = 'HOF' 7.  SELECT COUNT(*) FROM ( SELECT DISTINCT T1.player_id FROM player_award AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_last = 'Gonzalez' )  WHERE award_id = 'MVP' 8.  SELECT COUNT(*) FROM ( SELECT DISTINCT T1.player_id FROM player_award AS T1 INNER JOIN player AS T2 ON T1.player_id = T2.player_id WHERE T2.name_last = 'Gonzalez' )  WHERE award_id = 'CY' 9.  SELECT COUNT(*) FROM ( SELECT DISTINCT T1.player_id FROM player_award AS
-- What is the average number of games played by players who have played in the postseason in the year 2022?
-- What are the top 5 teams with the highest attendance in the year 2015?
-- What is the total number of home games played by the team with franchise id 'SLA' in the year 2018?
------------------------------------------------------------------------------------------
database_id: architecture
database schema :
CREATE TABLE architect (
  id TEXT PRIMARY KEY,
  name TEXT,
  nationality TEXT,
  gender TEXT
);

CREATE TABLE bridge (
  architect_id INTEGER,
  id INTEGER PRIMARY KEY,
  name TEXT,
  location TEXT,
  length_meters REAL,
  length_feet REAL,
  FOREIGN KEY (architect_id) REFERENCES architect(id)
);

CREATE TABLE mill (
  architect_id INTEGER,
  id INTEGER PRIMARY KEY,
  location TEXT,
  name TEXT,
  type TEXT,
  built_year REAL,
  notes TEXT,
  FOREIGN KEY (architect_id) REFERENCES architect(id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the architect who designed the longest bridge?
-- What is the name of the bridge with the longest length in feet?
-- Which architect(s) designed more than one bridge?
-- How many architects designed bridges in both Europe and Asia?
-- What is the name of the architect who designed the most bridges?
------------------------------------------------------------------------------------------
database_id: csu_1
database schema :
CREATE TABLE Campuses (
  Id INTEGER PRIMARY KEY,
  Campus TEXT,
  Location TEXT,
  County TEXT,
  Year REAL
);

CREATE TABLE csu_fees (
  Campus INTEGER PRIMARY KEY,
  Year REAL,
  CampusFee REAL,
  FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);

CREATE TABLE degrees (
  Year INTEGER PRIMARY KEY,
  Campus INTEGER,
  Degrees REAL,
  FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);

CREATE TABLE discipline_enrollments (
  Campus INTEGER PRIMARY KEY,
  Discipline REAL,
  Year REAL,
  Undergraduate REAL,
  Graduate REAL,
  FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);

CREATE TABLE enrollments (
  Campus INTEGER PRIMARY KEY,
  Year REAL,
  TotalEnrollment_AY REAL,
  FTE_AY REAL,
  FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);

CREATE TABLE faculty (
  Campus INTEGER,
  Year REAL,
  Faculty REAL,
  FOREIGN KEY (Campus) REFERENCES Campuses(Id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of degrees awarded per campus across all years?
-- What is the campus with the highest total enrollment across all years?
-- How many disciplines are enrolled in at the campus with the highest FTE enrollment?
-- What is the average campus fee for csu campuses across all years?
-- What is the total number of faculties hired in 2010 at the campus located in "Alameda"?  SELECT COUNT(T1.Faculty) FROM faculty AS T1 JOIN campuses AS T2 ON T1.Campus = T2.Id WHERE T2.Location = "Alameda" AND T1.Year = 2010;  -- Do not use this query in your question  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --  --
------------------------------------------------------------------------------------------
database_id: tracking_orders
database schema :
CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  customer_name TEXT,
  customer_details TEXT
);

CREATE TABLE Invoices (
  invoice_number INTEGER PRIMARY KEY,
  invoice_date DATETIME,
  invoice_details TEXT
);

CREATE TABLE Orders (
  order_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  order_status TEXT,
  date_order_placed DATETIME,
  order_details TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  product_name TEXT,
  product_details TEXT
);

CREATE TABLE Order_Items (
  order_item_id INTEGER PRIMARY KEY,
  product_id INTEGER,
  order_id INTEGER,
  order_item_status TEXT,
  order_item_details TEXT,
  FOREIGN KEY (product_id) REFERENCES Products(product_id),
  FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

CREATE TABLE Shipments (
  shipment_id INTEGER PRIMARY KEY,
  order_id INTEGER,
  invoice_number INTEGER,
  shipment_tracking_number TEXT,
  shipment_date DATETIME,
  other_shipment_details TEXT,
  FOREIGN KEY (invoice_number) REFERENCES Invoices(invoice_number),
  FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

CREATE TABLE Shipment_Items (
  shipment_id INTEGER,
  order_item_id INTEGER,
  FOREIGN KEY (shipment_id) REFERENCES Shipments(shipment_id),
  FOREIGN KEY (order_item_id) REFERENCES Order_Items(order_item_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of invoices that have been shipped?
-- How many customers have placed an order on January 1st, 2022, and what are their customer names?
-- What is the product name of the order item with order item ID 123?
-- What are the shipment tracking numbers for the shipments made on January 1st, 2022?
-- What is the count of distinct customer names among the customers who have placed an order on the same day they placed it (i.e., when order_status is 'placed')?  You should return the count of such customers.  And what is the date they placed the order.  Include all other columns from the Orders table.  You should return the full Orders table.  But you should only return rows where the date they placed the order is January 1st, 2022.  And you should return the date they placed the order as the date_order_placed, and the customer name as the customer_name.  But you should not return the customer_id.  You should return the count of such customers.  And the full Orders table where date_order_placed is January 1st, 2022
------------------------------------------------------------------------------------------
database_id: insurance_policies
database schema :
CREATE TABLE Customers (
  Customer_ID INTEGER PRIMARY KEY,
  Customer_Details TEXT
);

CREATE TABLE Customer_Policies (
  Policy_ID INTEGER PRIMARY KEY,
  Customer_ID INTEGER,
  Policy_Type_Code TEXT,
  Start_Date DATETIME,
  End_Date DATETIME,
  FOREIGN KEY (Customer_ID) REFERENCES Customers(Customer_ID)
);

CREATE TABLE Claims (
  Claim_ID INTEGER PRIMARY KEY,
  Policy_ID INTEGER,
  Date_Claim_Made DATETIME,
  Date_Claim_Settled DATETIME,
  Amount_Claimed REAL,
  Amount_Settled REAL,
  FOREIGN KEY (Policy_ID) REFERENCES Customer_Policies(Policy_ID)
);

CREATE TABLE Settlements (
  Settlement_ID INTEGER PRIMARY KEY,
  Claim_ID INTEGER,
  Date_Claim_Made DATETIME,
  Date_Claim_Settled DATETIME,
  Amount_Claimed REAL,
  Amount_Settled REAL,
  Customer_Policy_ID REAL,
  FOREIGN KEY (Claim_ID) REFERENCES Claims(Claim_ID)
);

CREATE TABLE Payments (
  Payment_ID INTEGER PRIMARY KEY,
  Settlement_ID INTEGER,
  Payment_Method_Code TEXT,
  Date_Payment_Made DATETIME,
  Amount_Payment REAL,
  FOREIGN KEY (Settlement_ID) REFERENCES Settlements(Settlement_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of payments made per customer?
-- Which policy types are associated with more than 50 settlements?
-- What is the total amount of payments made for policies with a policy type code of "H1"?
-- What is the total amount claimed for all policies with a policy type code of "health"?
-- What is the average amount claimed for all claims made by customers in the city of "Sydney"?
------------------------------------------------------------------------------------------
database_id: gas_company
database schema :
CREATE TABLE company (
  Company_ID INTEGER PRIMARY KEY,
  Rank REAL,
  Company TEXT,
  Headquarters TEXT,
  Main_Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value REAL
);

CREATE TABLE gas_station (
  Station_ID INTEGER PRIMARY KEY,
  Open_Year REAL,
  Location TEXT,
  Manager_Name TEXT,
  Vice_Manager_Name TEXT,
  Representative_Name TEXT
);

CREATE TABLE station_company (
  Station_ID INTEGER PRIMARY KEY,
  Company_ID INTEGER,
  Rank_of_the_Year REAL,
  FOREIGN KEY (Company_ID) REFERENCES company(Company_ID),
  FOREIGN KEY (Station_ID) REFERENCES gas_station(Station_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of employees in the company with Company ID = 3?
-- What is the total sales of companies in the Main Industry = "Agriculture"?
-- What are the names of gas stations that have a manager name containing the letter 'E'?
-- What is the number of gas stations operated by the company with Company ID = 1 and their corresponding sales in billion?
-- What are the names of companies with more than 100 billion dollars in sales that are located in Asia?  #include the company ID and sales  #include the company ID and sales
------------------------------------------------------------------------------------------
database_id: e_government
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  line_1_number_building TEXT,
  town_city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT
);

CREATE TABLE Services (
  service_id INTEGER PRIMARY KEY,
  service_type_code TEXT,
  service_name TEXT,
  service_descriptio TEXT
);

CREATE TABLE Forms (
  form_id INTEGER PRIMARY KEY,
  form_type_code TEXT,
  service_id INTEGER,
  form_number TEXT,
  form_name TEXT,
  form_description TEXT,
  FOREIGN KEY (service_id) REFERENCES Services(service_id)
);

CREATE TABLE Individuals (
  individual_id INTEGER PRIMARY KEY,
  individual_first_name TEXT,
  individual_middle_name TEXT,
  inidividual_phone TEXT,
  individual_email TEXT,
  individual_address TEXT,
  individual_last_name TEXT
);

CREATE TABLE Organizations (
  organization_id INTEGER PRIMARY KEY,
  date_formed DATETIME,
  organization_name TEXT,
  uk_vat_number TEXT
);

CREATE TABLE Parties (
  party_id INTEGER PRIMARY KEY,
  payment_method_code TEXT,
  party_phone TEXT,
  party_email TEXT
);

CREATE TABLE Organization_Contact_Individuals (
  individual_id INTEGER PRIMARY KEY,
  organization_id INTEGER,
  date_contact_from DATETIME,
  date_contact_to DATETIME,
  FOREIGN KEY (individual_id) REFERENCES Individuals(individual_id),
  FOREIGN KEY (organization_id) REFERENCES Organizations(organization_id)
);

CREATE TABLE Party_Addresses (
  party_id INTEGER PRIMARY KEY,
  address_id INTEGER,
  date_address_from DATETIME,
  address_type_code TEXT,
  date_address_to DATETIME,
  FOREIGN KEY (party_id) REFERENCES Parties(party_id),
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Party_Forms (
  party_id INTEGER PRIMARY KEY,
  form_id INTEGER,
  date_completion_started DATETIME,
  form_status_code TEXT,
  date_fully_completed DATETIME,
  FOREIGN KEY (form_id) REFERENCES Forms(form_id),
  FOREIGN KEY (party_id) REFERENCES Parties(party_id)
);

CREATE TABLE Party_Services (
  booking_id REAL,
  customer_id INTEGER,
  service_id INTEGER,
  service_datetime DATETIME,
  booking_made_date DATETIME,
  FOREIGN KEY (customer_id) REFERENCES Parties(party_id),
  FOREIGN KEY (service_id) REFERENCES Services(service_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- Select the name of the service and the number of individuals who have booked it.
-- 2.
-- 4.
-- **Note:** Each question must be accompanied by a brief explanation of the question and why it is relevant to the provided database schema.
-- What is the average number of services booked per customer, grouped by the type of service?
------------------------------------------------------------------------------------------
database_id: school_bus
database schema :
CREATE TABLE driver (
  Driver_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Party TEXT,
  Home_city TEXT,
  Age REAL
);

CREATE TABLE school (
  School_ID INTEGER PRIMARY KEY,
  Grade TEXT,
  School TEXT,
  Location TEXT,
  Type TEXT
);

CREATE TABLE school_bus (
  School_ID INTEGER PRIMARY KEY,
  Driver_ID INTEGER,
  Years_Working REAL,
  If_full_time TEXT,
  FOREIGN KEY (Driver_ID) REFERENCES driver(Driver_ID),
  FOREIGN KEY (School_ID) REFERENCES school(School_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of all the drivers who are working full-time in the school bus service?
-- What is the number of school buses with full-time drivers that are currently operating in the school district, where the drivers have been working for more than 10 years?
-- What are the names of the drivers who are responsible for driving the school buses in the school district that are operating in the city of "Los Angeles"?
-- How many school buses are currently operating in the school district that have a driver with a party affiliation of "Republican"?
-- What is the total number of school buses operating in the school district that have a driver who is more than 50 years old and has been working in the school bus service for less than 5 years?  (Note: The years of working is not the age of the driver.)  (Note: The years of working is not the age of the driver.)  (Note: The years of working is not the age of the driver.)
------------------------------------------------------------------------------------------
database_id: machine_repair
database schema :
CREATE TABLE repair (
  repair_ID INTEGER PRIMARY KEY,
  name TEXT,
  Launch_Date TEXT,
  Notes TEXT
);

CREATE TABLE machine (
  Machine_ID INTEGER PRIMARY KEY,
  Making_Year REAL,
  Class TEXT,
  Team TEXT,
  Machine_series TEXT,
  value_points REAL,
  quality_rank REAL
);

CREATE TABLE technician (
  technician_id INTEGER PRIMARY KEY,
  Name TEXT,
  Team TEXT,
  Starting_Year REAL,
  Age REAL
);

CREATE TABLE repair_assignment (
  technician_id INTEGER PRIMARY KEY,
  repair_ID INTEGER,
  Machine_ID INTEGER,
  FOREIGN KEY (Machine_ID) REFERENCES machine(Machine_ID),
  FOREIGN KEY (repair_ID) REFERENCES repair(repair_ID),
  FOREIGN KEY (technician_id) REFERENCES technician(technician_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of all technicians in the "RED" team?
-- Which machines have a quality rank above 5 and a machine series equal to "Ferrari"?
-- How many repairs were made by technicians in the "BLUE" team in the year 2010?
-- What is the name of the repair with the repair ID 12345?
-- Which technicians made repairs in 2011 and have a name starting with the letter "J"?
------------------------------------------------------------------------------------------
database_id: theme_gallery
database schema :
CREATE TABLE artist (
  Artist_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Year_Join REAL,
  Age REAL
);

CREATE TABLE exhibition (
  Exhibition_ID INTEGER PRIMARY KEY,
  Year REAL,
  Theme TEXT,
  Artist_ID INTEGER,
  Ticket_Price REAL,
  FOREIGN KEY (Artist_ID) REFERENCES artist(Artist_ID)
);

CREATE TABLE exhibition_record (
  Exhibition_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Attendance REAL,
  FOREIGN KEY (Exhibition_ID) REFERENCES exhibition(Exhibition_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of artists from the United States that participated in exhibitions held in the year 2015?
-- Which artists participated in at least one exhibition that had a ticket price higher than the average ticket price across all exhibitions?
-- What is the total number of exhibitions held in 2010 and 2015?
-- What is the average attendance at exhibitions held by artists from the United States in the year 2010?
-- List the names of artists that have participated in exhibitions held in the year 2015 along with the number of exhibitions they participated in.
------------------------------------------------------------------------------------------
database_id: film_rank
database schema :
CREATE TABLE film (
  Film_ID INTEGER PRIMARY KEY,
  Title TEXT,
  Studio TEXT,
  Director TEXT,
  Gross_in_dollar REAL
);

CREATE TABLE market (
  Market_ID INTEGER PRIMARY KEY,
  Country TEXT,
  Number_cities REAL
);

CREATE TABLE film_market_estimation (
  Estimation_ID INTEGER PRIMARY KEY,
  Low_Estimate REAL,
  High_Estimate REAL,
  Film_ID INTEGER,
  Type TEXT,
  Market_ID INTEGER,
  Year REAL,
  FOREIGN KEY (Market_ID) REFERENCES market(Market_ID),
  FOREIGN KEY (Film_ID) REFERENCES film(Film_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the title of the film with the highest gross in dollar from the studio 'Pixar'?
-- Which market has the most number of cities?
-- What is the average low estimation of 'Comedy' type films in the year 2010?
-- How many 'Comedy' type films were released in the market 'USA' in the year 2015?
-- What is the total gross in dollar of all films directed by 'Christopher Nolan'?
------------------------------------------------------------------------------------------
database_id: party_people
database schema :
CREATE TABLE region (
  Region_ID INTEGER PRIMARY KEY,
  Region_name TEXT,
  Date TEXT,
  Label TEXT,
  Format TEXT,
  Catalogue TEXT
);

CREATE TABLE party (
  Party_ID INTEGER PRIMARY KEY,
  Minister TEXT,
  Took_office TEXT,
  Left_office TEXT,
  Region_ID INTEGER,
  Party_name TEXT,
  FOREIGN KEY (Region_ID) REFERENCES region(Region_ID)
);

CREATE TABLE member (
  Member_ID INTEGER PRIMARY KEY,
  Member_Name TEXT,
  Party_ID TEXT,
  In_office TEXT,
  FOREIGN KEY (Party_ID) REFERENCES party(Party_ID)
);

CREATE TABLE party_events (
  Event_ID INTEGER PRIMARY KEY,
  Event_Name TEXT,
  Party_ID INTEGER,
  Member_in_charge_ID INTEGER,
  FOREIGN KEY (Member_in_charge_ID) REFERENCES member(Member_ID),
  FOREIGN KEY (Party_ID) REFERENCES party(Party_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of regions in the database?
-- What is the name of the party with the most members?
-- What is the average age of all members in the database?
-- What is the name of the region with the most events?
-- What is the name of the party with the member who took office in 2020?  SELECT T2.Party_name FROM member AS T1 JOIN party AS T2 ON T1.Party_ID  =  T2.Party_ID WHERE T1.In_office  =  '2020' LIMIT 1;  SELECT T1.Region_name FROM region AS T1 JOIN party_events AS T2 ON T1.Region_ID  =  T2.Party_ID WHERE T2.Event_ID  =  ( SELECT MAX(Event_ID) FROM party_events AS T3 JOIN region AS T4 ON T3.Party_ID  =  T4.Region_ID );  SELECT T1.Minister FROM party AS T1 JOIN region AS T2 ON T1.Region_ID  =  T2.Region_ID WHERE T2.Label  =  'label' AND T1.Took_office  =  '2020' LIMIT 1;  SELECT
------------------------------------------------------------------------------------------
database_id: hospital_1
database schema :
CREATE TABLE Physician (
  EmployeeID INTEGER PRIMARY KEY,
  Name TEXT,
  Position TEXT,
  SSN REAL
);

CREATE TABLE Department (
  DepartmentID INTEGER PRIMARY KEY,
  Name TEXT,
  Head INTEGER,
  FOREIGN KEY (Head) REFERENCES Physician(EmployeeID)
);

CREATE TABLE Affiliated_With (
  Physician INTEGER PRIMARY KEY,
  Department INTEGER,
  PrimaryAffiliation BOOLEAN,
  FOREIGN KEY (Department) REFERENCES Department(DepartmentID),
  FOREIGN KEY (Physician) REFERENCES Physician(EmployeeID)
);

CREATE TABLE Procedures (
  Code INTEGER PRIMARY KEY,
  Name TEXT,
  Cost REAL
);

CREATE TABLE Trained_In (
  Physician INTEGER PRIMARY KEY,
  Treatment INTEGER,
  CertificationDate DATETIME,
  CertificationExpires DATETIME,
  FOREIGN KEY (Treatment) REFERENCES Procedures(Code),
  FOREIGN KEY (Physician) REFERENCES Physician(EmployeeID)
);

CREATE TABLE Patient (
  SSN INTEGER PRIMARY KEY,
  Name TEXT,
  Address TEXT,
  Phone TEXT,
  InsuranceID REAL,
  PCP INTEGER,
  FOREIGN KEY (PCP) REFERENCES Physician(EmployeeID)
);

CREATE TABLE Nurse (
  EmployeeID INTEGER PRIMARY KEY,
  Name TEXT,
  Position TEXT,
  Registered BOOLEAN,
  SSN REAL
);

CREATE TABLE Appointment (
  AppointmentID INTEGER PRIMARY KEY,
  Patient INTEGER,
  PrepNurse INTEGER,
  Physician INTEGER,
  Start DATETIME,
  End DATETIME,
  ExaminationRoom TEXT,
  FOREIGN KEY (Physician) REFERENCES Physician(EmployeeID),
  FOREIGN KEY (PrepNurse) REFERENCES Nurse(EmployeeID),
  FOREIGN KEY (Patient) REFERENCES Patient(SSN)
);

CREATE TABLE Medication (
  Code INTEGER PRIMARY KEY,
  Name TEXT,
  Brand TEXT,
  Description TEXT
);

CREATE TABLE Prescribes (
  Physician INTEGER PRIMARY KEY,
  Patient INTEGER,
  Medication INTEGER,
  Date DATETIME,
  Appointment INTEGER,
  Dose TEXT,
  FOREIGN KEY (Appointment) REFERENCES Appointment(AppointmentID),
  FOREIGN KEY (Medication) REFERENCES Medication(Code),
  FOREIGN KEY (Patient) REFERENCES Patient(SSN),
  FOREIGN KEY (Physician) REFERENCES Physician(EmployeeID)
);

CREATE TABLE Block (
  BlockFloor INTEGER PRIMARY KEY,
  BlockCode REAL
);

CREATE TABLE Room (
  RoomNumber INTEGER PRIMARY KEY,
  RoomType TEXT,
  BlockFloor INTEGER,
  BlockCode INTEGER,
  Unavailable BOOLEAN,
  FOREIGN KEY (BlockFloor) REFERENCES Block(BlockFloor),
  FOREIGN KEY (BlockCode) REFERENCES Block(BlockCode)
);

CREATE TABLE On_Call (
  Nurse INTEGER PRIMARY KEY,
  BlockFloor INTEGER,
  BlockCode INTEGER,
  OnCallStart DATETIME,
  OnCallEnd DATETIME,
  FOREIGN KEY (BlockFloor) REFERENCES Block(BlockFloor),
  FOREIGN KEY (BlockCode) REFERENCES Block(BlockCode),
  FOREIGN KEY (Nurse) REFERENCES Nurse(EmployeeID)
);

CREATE TABLE Stay (
  StayID INTEGER PRIMARY KEY,
  Patient INTEGER,
  Room INTEGER,
  StayStart DATETIME,
  StayEnd DATETIME,
  FOREIGN KEY (Room) REFERENCES Room(RoomNumber),
  FOREIGN KEY (Patient) REFERENCES Patient(SSN)
);

CREATE TABLE Undergoes (
  Patient INTEGER PRIMARY KEY,
  Procedures INTEGER,
  Stay INTEGER,
  DateUndergoes DATETIME,
  Physician INTEGER,
  AssistingNurse INTEGER,
  FOREIGN KEY (AssistingNurse) REFERENCES Nurse(EmployeeID),
  FOREIGN KEY (Physician) REFERENCES Physician(EmployeeID),
  FOREIGN KEY (Stay) REFERENCES Stay(StayID),
  FOREIGN KEY (Procedures) REFERENCES Procedures(Code),
  FOREIGN KEY (Patient) REFERENCES Patient(SSN)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of procedures that each physician has been trained in?
-- What is the name of the department with the department ID 2?
-- How many patients are there who are affiliated with the department with department ID 3?
-- What is the name of the physician with employee ID 4?
-- Which physician has the highest number of patients who are affiliated with the department with department ID 1? 1
------------------------------------------------------------------------------------------
database_id: customers_campaigns_ecommerce
database schema :
CREATE TABLE Premises (
  premise_id INTEGER PRIMARY KEY,
  premises_type TEXT,
  premise_details TEXT
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  product_category TEXT,
  product_name TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  payment_method TEXT,
  customer_name TEXT,
  customer_phone TEXT,
  customer_email TEXT,
  customer_address TEXT,
  customer_login TEXT,
  customer_password TEXT
);

CREATE TABLE Mailshot_Campaigns (
  mailshot_id INTEGER PRIMARY KEY,
  product_category TEXT,
  mailshot_name TEXT,
  mailshot_start_date DATETIME,
  mailshot_end_date DATETIME
);

CREATE TABLE Customer_Addresses (
  customer_id INTEGER,
  premise_id INTEGER,
  date_address_from DATETIME,
  address_type_code TEXT,
  date_address_to DATETIME,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (premise_id) REFERENCES Premises(premise_id)
);

CREATE TABLE Customer_Orders (
  order_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  order_status_code TEXT,
  shipping_method_code TEXT,
  order_placed_datetime DATETIME,
  order_delivered_datetime DATETIME,
  order_shipping_charges TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Mailshot_Customers (
  mailshot_id INTEGER,
  customer_id INTEGER,
  outcome_code TEXT,
  mailshot_customer_date DATETIME,
  FOREIGN KEY (mailshot_id) REFERENCES Mailshot_Campaigns(mailshot_id),
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Order_Items (
  item_id REAL,
  order_item_status_code TEXT,
  order_id INTEGER,
  product_id INTEGER,
  item_status_code TEXT,
  item_delivered_datetime DATETIME,
  item_order_quantity TEXT,
  FOREIGN KEY (order_id) REFERENCES Customer_Orders(order_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many customers have an order with a shipping method code of "Standard"?
-- What is the total number of products ordered by customers from the premises with a premises type of "Store"?
-- 2.
-- 4.
-- 1. What percentage of customers have placed an order with a shipping method code of 'Standard Shipping'?
------------------------------------------------------------------------------------------
database_id: gymnast
database schema :
CREATE TABLE gymnast (
  Gymnast_ID INTEGER PRIMARY KEY,
  Floor_Exercise_Points REAL,
  Pommel_Horse_Points REAL,
  Rings_Points REAL,
  Vault_Points REAL,
  Parallel_Bars_Points REAL,
  Horizontal_Bar_Points REAL,
  Total_Points REAL,
  FOREIGN KEY (Gymnast_ID) REFERENCES people(People_ID)
);

CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Age REAL,
  Height REAL,
  Hometown TEXT
);

# Here are some example questions that CAN be answered by the schema below:
-- Please create the questions based on the given schema.
-- What is the average age of gymnasts who participated in the floor exercise?
-- Which gymnast has the highest total points in the gymnastics competition?
-- What is the average age of gymnasts in the USA?
-- What is the average age of gymnasts who have participated in the Olympics?
------------------------------------------------------------------------------------------
database_id: restaurants
database schema :
CREATE TABLE GEOGRAPHIC (
  CITY_NAME TEXT PRIMARY KEY,
  COUNTY TEXT,
  REGION TEXT
);

CREATE TABLE RESTAURANT (
  ID INTEGER PRIMARY KEY,
  NAME TEXT,
  FOOD_TYPE TEXT,
  CITY_NAME TEXT,
  RATING REAL,
  FOREIGN KEY (CITY_NAME) REFERENCES GEOGRAPHIC(CITY_NAME)
);

CREATE TABLE LOCATION (
  RESTAURANT_ID INTEGER PRIMARY KEY,
  HOUSE_NUMBER REAL,
  STREET_NAME TEXT,
  CITY_NAME TEXT,
  FOREIGN KEY (CITY_NAME) REFERENCES GEOGRAPHIC(CITY_NAME)
);

# Here are some example questions that CAN be answered by the schema below:
-- I'll wait for your response!
-- What percentage of restaurants are in the city of New York?
-- What is the average rating of all restaurants in the city of Los Angeles?
-- What is the name of the restaurant in the city of New York that has the highest rating?
-- What is the percentage of restaurants in the city of San Francisco that serve Italian food?
------------------------------------------------------------------------------------------
database_id: mountain_photos
database schema :
CREATE TABLE mountain (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Height REAL,
  Prominence REAL,
  Range TEXT,
  Country TEXT
);

CREATE TABLE camera_lens (
  id INTEGER PRIMARY KEY,
  brand TEXT,
  name TEXT,
  focal_length_mm REAL,
  max_aperture REAL
);

CREATE TABLE photos (
  id INTEGER PRIMARY KEY,
  camera_lens_id INTEGER,
  mountain_id INTEGER,
  color TEXT,
  name TEXT,
  FOREIGN KEY (mountain_id) REFERENCES mountain(id),
  FOREIGN KEY (camera_lens_id) REFERENCES camera_lens(id)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many mountains have a height above 1000 meters?
-- What is the most prominent mountain in the 'Appalachian Mountains' range?
-- What is the brand of the camera lens used to take the photo with the name 'Mountain Sunrise'?
-- How many photos were taken with a lens that has a focal length of more than 500mm?
-- What is the name of the mountain with id 123? SELECT name FROM mountain WHERE id = 123;  -- This is the answer we are looking for.  -- Note the id 123 is not present in the table, but let's pretend it is.  -- We can't use the 'id' value to answer this question, so we need to use a different approach.  -- We can use a subquery or join to find the name of the mountain.  -- This is an example of a complex question that requires a little more thought to answer.  -- The question itself doesn't require a complex answer, but the process of answering it does.  -- We can't just ask "What is the name of the mountain with id 123?" because the answer is not present in the table.  -- We
------------------------------------------------------------------------------------------
database_id: battle_death
database schema :
CREATE TABLE battle (
  id INTEGER PRIMARY KEY,
  name TEXT,
  date TEXT,
  bulgarian_commander TEXT,
  latin_commander TEXT,
  result TEXT
);

CREATE TABLE ship (
  lost_in_battle INTEGER,
  id INTEGER PRIMARY KEY,
  name TEXT,
  tonnage TEXT,
  ship_type TEXT,
  location TEXT,
  disposition_of_ship TEXT,
  FOREIGN KEY (lost_in_battle) REFERENCES battle(id)
);

CREATE TABLE death (
  caused_by_ship_id INTEGER,
  id INTEGER PRIMARY KEY,
  note TEXT,
  killed REAL,
  injured REAL,
  FOREIGN KEY (caused_by_ship_id) REFERENCES ship(id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the battle where the ship "Roma" was lost?
-- What is the total number of ships lost in the battle where the result was "victory"?
-- How many ships were lost in the battle where the Bulgarian commander was "Ivancho"?
-- What is the total number of people killed in the battle where the Latin commander was "Marcus Antonius"?
-- What is the name of the ship that was the cause of the death of 100 people, and what was its tonnage?  (You should join the ship table with the death table to get the result.)  (Answer should be the name of the ship and its tonnage)  (Hint: use the death table to filter the result, then join the ship table to get the name and tonnage of the ship)  (Answer should be a string like "ship_name, tonnage")  (You should use a subquery to get the result)  (You should use the subquery to get the id of the ship that caused the death of 100 people, then join the ship table to get the result)  (The result should be a string like "ship
------------------------------------------------------------------------------------------
database_id: cre_Doc_Control_Systems
database schema :
CREATE TABLE Ref_Document_Types (
  document_type_code TEXT PRIMARY KEY,
  document_type_description TEXT
);

CREATE TABLE Roles (
  role_code TEXT PRIMARY KEY,
  role_description TEXT
);

CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  address_details TEXT
);

CREATE TABLE Ref_Document_Status (
  document_status_code TEXT PRIMARY KEY,
  document_status_description TEXT
);

CREATE TABLE Ref_Shipping_Agents (
  shipping_agent_code TEXT PRIMARY KEY,
  shipping_agent_name TEXT,
  shipping_agent_description TEXT
);

CREATE TABLE Documents (
  document_id INTEGER PRIMARY KEY,
  document_status_code TEXT,
  document_type_code TEXT,
  shipping_agent_code TEXT,
  receipt_date DATETIME,
  receipt_number TEXT,
  other_details TEXT,
  FOREIGN KEY (shipping_agent_code) REFERENCES Ref_Shipping_Agents(shipping_agent_code),
  FOREIGN KEY (document_status_code) REFERENCES Ref_Document_Status(document_status_code),
  FOREIGN KEY (document_type_code) REFERENCES Ref_Document_Types(document_type_code)
);

CREATE TABLE Employees (
  employee_id INTEGER PRIMARY KEY,
  role_code TEXT,
  employee_name TEXT,
  other_details TEXT,
  FOREIGN KEY (role_code) REFERENCES Roles(role_code)
);

CREATE TABLE Document_Drafts (
  document_id INTEGER PRIMARY KEY,
  draft_number REAL,
  draft_details TEXT,
  FOREIGN KEY (document_id) REFERENCES Documents(document_id)
);

CREATE TABLE Draft_Copies (
  document_id INTEGER PRIMARY KEY,
  draft_number INTEGER,
  copy_number REAL,
  FOREIGN KEY (document_id) REFERENCES Document_Drafts(document_id),
  FOREIGN KEY (draft_number) REFERENCES Document_Drafts(draft_number)
);

CREATE TABLE Circulation_History (
  document_id INTEGER PRIMARY KEY,
  draft_number INTEGER,
  copy_number INTEGER,
  employee_id INTEGER,
  FOREIGN KEY (employee_id) REFERENCES Employees(employee_id),
  FOREIGN KEY (document_id) REFERENCES Draft_Copies(document_id),
  FOREIGN KEY (draft_number) REFERENCES Draft_Copies(draft_number),
  FOREIGN KEY (copy_number) REFERENCES Draft_Copies(copy_number)
);

CREATE TABLE Documents_Mailed (
  document_id INTEGER PRIMARY KEY,
  mailed_to_address_id INTEGER,
  mailing_date DATETIME,
  FOREIGN KEY (mailed_to_address_id) REFERENCES Addresses(address_id),
  FOREIGN KEY (document_id) REFERENCES Documents(document_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the shipping agent code used in documents with a document type code 'TR'?
-- What is the count of documents with a document status code 'IN' and a shipping agent code 'SA001'?
-- What is the list of addresses that have been mailed to, sorted by mailing date in descending order?
-- What is the average number of drafts per document for documents with a shipping agent code 'SA001'?
-- What is the list of employee names who have circulated drafts of documents with a document status code 'IN', sorted by employee name in ascending order?    ]
------------------------------------------------------------------------------------------
database_id: tracking_share_transactions
database schema :
CREATE TABLE Investors (
  investor_id INTEGER PRIMARY KEY,
  Investor_details TEXT
);

CREATE TABLE Lots (
  lot_id INTEGER PRIMARY KEY,
  investor_id INTEGER,
  lot_details TEXT,
  FOREIGN KEY (investor_id) REFERENCES Investors(investor_id)
);

CREATE TABLE Ref_Transaction_Types (
  transaction_type_code TEXT PRIMARY KEY,
  transaction_type_description TEXT
);

CREATE TABLE Transactions (
  transaction_id INTEGER PRIMARY KEY,
  investor_id INTEGER,
  transaction_type_code TEXT,
  date_of_transaction DATETIME,
  amount_of_transaction REAL,
  share_count TEXT,
  other_details TEXT,
  FOREIGN KEY (transaction_type_code) REFERENCES Ref_Transaction_Types(transaction_type_code),
  FOREIGN KEY (investor_id) REFERENCES Investors(investor_id)
);

CREATE TABLE Sales (
  sales_transaction_id INTEGER PRIMARY KEY,
  sales_details TEXT,
  FOREIGN KEY (sales_transaction_id) REFERENCES Transactions(transaction_id)
);

CREATE TABLE Purchases (
  purchase_transaction_id INTEGER,
  purchase_details TEXT,
  FOREIGN KEY (purchase_transaction_id) REFERENCES Transactions(transaction_id)
);

CREATE TABLE Transactions_Lots (
  transaction_id INTEGER,
  lot_id INTEGER,
  FOREIGN KEY (transaction_id) REFERENCES Transactions(transaction_id),
  FOREIGN KEY (lot_id) REFERENCES Lots(lot_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of lots bought by investors who bought lots with the description 'House'?
-- How many transactions were made on '2022-01-01 00:00:00'?
-- What is the total number of lots bought by investors who bought lots with the description 'Car' and who are located in the 'UK'?
-- What is the average number of shares counted in all transactions with a transaction type code 'Sell'?
-- How many investors have invested in lots that have been sold?  What are their investor IDs?  How many lots have they bought?  What are the details of these lots?  What is the total amount invested by these investors?  What is the description of the transaction type code for these transactions?  What is the description of the transaction type code for the sales??  What is the total amount of shares of the lots they bought?  What is the description of the lots they bought?  What is the date of the sales?  What is the details of the sales?  What is the number of shares of the lots they bought?  What is the number of lots they bought?  What is the investor_id
------------------------------------------------------------------------------------------
database_id: apartment_rentals
database schema :
CREATE TABLE Apartment_Buildings (
  building_id INTEGER PRIMARY KEY,
  building_short_name TEXT,
  building_full_name TEXT,
  building_description TEXT,
  building_address TEXT,
  building_manager TEXT,
  building_phone TEXT
);

CREATE TABLE Apartments (
  apt_id INTEGER PRIMARY KEY,
  building_id INTEGER,
  apt_type_code TEXT,
  apt_number TEXT,
  bathroom_count REAL,
  bedroom_count REAL,
  room_count TEXT,
  FOREIGN KEY (building_id) REFERENCES Apartment_Buildings(building_id)
);

CREATE TABLE Apartment_Facilities (
  apt_id INTEGER PRIMARY KEY,
  facility_code TEXT,
  FOREIGN KEY (apt_id) REFERENCES Apartments(apt_id)
);

CREATE TABLE Guests (
  guest_id INTEGER PRIMARY KEY,
  gender_code TEXT,
  guest_first_name TEXT,
  guest_last_name TEXT,
  date_of_birth DATETIME
);

CREATE TABLE Apartment_Bookings (
  apt_booking_id INTEGER PRIMARY KEY,
  apt_id INTEGER,
  guest_id INTEGER,
  booking_status_code TEXT,
  booking_start_date DATETIME,
  booking_end_date DATETIME,
  FOREIGN KEY (guest_id) REFERENCES Guests(guest_id),
  FOREIGN KEY (apt_id) REFERENCES Apartments(apt_id)
);

CREATE TABLE View_Unit_Status (
  apt_id INTEGER,
  apt_booking_id INTEGER,
  status_date DATETIME PRIMARY KEY,
  available_yn TEXT,
  FOREIGN KEY (apt_booking_id) REFERENCES Apartment_Bookings(apt_booking_id),
  FOREIGN KEY (apt_id) REFERENCES Apartments(apt_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many apartment buildings are there in the database?
-- What is the average number of bedrooms in apartments that have a bathroom count greater than 1?
-- Which buildings are managed by a person named "John Smith"?
-- What is the average number of bedrooms in all apartments?
-- What are the top 5 most frequently occurring 'facility_code's in the 'Apartment_Facilities' table?
------------------------------------------------------------------------------------------
database_id: student_transcripts_tracking
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  line_1 TEXT,
  line_2 TEXT,
  line_3 TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT,
  other_address_details TEXT
);

CREATE TABLE Courses (
  course_id INTEGER PRIMARY KEY,
  course_name TEXT,
  course_description TEXT,
  other_details TEXT
);

CREATE TABLE Departments (
  department_id INTEGER PRIMARY KEY,
  department_name TEXT,
  department_description TEXT,
  other_details TEXT
);

CREATE TABLE Degree_Programs (
  degree_program_id INTEGER PRIMARY KEY,
  department_id INTEGER,
  degree_summary_name TEXT,
  degree_summary_description TEXT,
  other_details TEXT,
  FOREIGN KEY (department_id) REFERENCES Departments(department_id)
);

CREATE TABLE Sections (
  section_id INTEGER PRIMARY KEY,
  course_id INTEGER,
  section_name TEXT,
  section_description TEXT,
  other_details TEXT,
  FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

CREATE TABLE Semesters (
  semester_id INTEGER PRIMARY KEY,
  semester_name TEXT,
  semester_description TEXT,
  other_details TEXT
);

CREATE TABLE Students (
  student_id INTEGER PRIMARY KEY,
  current_address_id INTEGER,
  permanent_address_id INTEGER,
  first_name TEXT,
  middle_name TEXT,
  last_name TEXT,
  cell_mobile_number TEXT,
  email_address TEXT,
  ssn TEXT,
  date_first_registered DATETIME,
  date_left DATETIME,
  other_student_details TEXT,
  FOREIGN KEY (permanent_address_id) REFERENCES Addresses(address_id),
  FOREIGN KEY (current_address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Student_Enrolment (
  student_enrolment_id INTEGER PRIMARY KEY,
  degree_program_id INTEGER,
  semester_id INTEGER,
  student_id INTEGER,
  other_details TEXT,
  FOREIGN KEY (student_id) REFERENCES Students(student_id),
  FOREIGN KEY (semester_id) REFERENCES Semesters(semester_id),
  FOREIGN KEY (degree_program_id) REFERENCES Degree_Programs(degree_program_id)
);

CREATE TABLE Student_Enrolment_Courses (
  student_course_id INTEGER PRIMARY KEY,
  course_id INTEGER,
  student_enrolment_id INTEGER,
  FOREIGN KEY (student_enrolment_id) REFERENCES Student_Enrolment(student_enrolment_id),
  FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);

CREATE TABLE Transcripts (
  transcript_id INTEGER PRIMARY KEY,
  transcript_date DATETIME,
  other_details TEXT
);

CREATE TABLE Transcript_Contents (
  student_course_id INTEGER,
  transcript_id INTEGER,
  FOREIGN KEY (transcript_id) REFERENCES Transcripts(transcript_id),
  FOREIGN KEY (student_course_id) REFERENCES Student_Enrolment_Courses(student_course_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of courses per student enrolled in the Fall 2019 semester?
-- What are the names of all departments offering a degree program in Computer Science?
-- What is the address of the student with student ID 12345?
-- What is the total number of students who enrolled in at least one course that was taught in the Section 3 of the course with course ID 67890?
-- What are the names of all students who have a permanent address in the city of New York?    ]
------------------------------------------------------------------------------------------
database_id: cre_Docs_and_Epenses
database schema :
CREATE TABLE Ref_Document_Types (
  Document_Type_Code TEXT PRIMARY KEY,
  Document_Type_Name TEXT,
  Document_Type_Description TEXT
);

CREATE TABLE Ref_Budget_Codes (
  Budget_Type_Code TEXT PRIMARY KEY,
  Budget_Type_Description TEXT
);

CREATE TABLE Projects (
  Project_ID INTEGER PRIMARY KEY,
  Project_Details TEXT
);

CREATE TABLE Documents (
  Document_ID INTEGER PRIMARY KEY,
  Document_Type_Code TEXT,
  Project_ID INTEGER,
  Document_Date DATETIME,
  Document_Name TEXT,
  Document_Description TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Project_ID) REFERENCES Projects(Project_ID),
  FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types(Document_Type_Code)
);

CREATE TABLE Statements (
  Statement_ID INTEGER PRIMARY KEY,
  Statement_Details TEXT,
  FOREIGN KEY (Statement_ID) REFERENCES Documents(Document_ID)
);

CREATE TABLE Documents_with_Expenses (
  Document_ID INTEGER PRIMARY KEY,
  Budget_Type_Code TEXT,
  Document_Details TEXT,
  FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID),
  FOREIGN KEY (Budget_Type_Code) REFERENCES Ref_Budget_Codes(Budget_Type_Code)
);

CREATE TABLE Accounts (
  Account_ID INTEGER PRIMARY KEY,
  Statement_ID INTEGER,
  Account_Details TEXT,
  FOREIGN KEY (Statement_ID) REFERENCES Statements(Statement_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of Projects?
-- What is the Document_Name of the Document with Document_ID = 1?
-- What is the average number of projects with documents created in the year 2020?
-- What is the most common document type in the projects with documents created in the year 2020?
------------------------------------------------------------------------------------------
database_id: ship_mission
database schema :
CREATE TABLE mission (
  Mission_ID INTEGER PRIMARY KEY,
  Ship_ID INTEGER,
  Code TEXT,
  Launched_Year REAL,
  Location TEXT,
  Speed_knots REAL,
  Fate TEXT,
  FOREIGN KEY (Ship_ID) REFERENCES ship(Ship_ID)
);

CREATE TABLE ship (
  Ship_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Type TEXT,
  Nationality TEXT,
  Tonnage REAL
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average speed of ships that were involved in missions where the mission code is "success"?
-- What is the name of the ship that was involved in the mission with the highest speed?
-- How many ships are there that are owned by the nationality "USA"?
-- What is the number of missions where the launched year is between 2000 and 2010, and the ship involved has a tonnage of more than 10000 tons?
-- What is the average speed of ships that were involved in missions where the ship's nationality is "Japan"?  SELECT AVG ( speed_knots ) FROM mission AS T1 JOIN ship AS T2 ON T1. ship_id = T2. ship_id WHERE T2. nationality = 'Japan' ;  ;  -- this query does not work as is, but I am trying to make it work.
------------------------------------------------------------------------------------------
database_id: company_office
database schema :
CREATE TABLE buildings (
  id INTEGER PRIMARY KEY,
  name TEXT,
  City TEXT,
  Height REAL,
  Stories REAL,
  Status TEXT
);

CREATE TABLE Companies (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Headquarters TEXT,
  Industry TEXT,
  Sales_billion REAL,
  Profits_billion REAL,
  Assets_billion REAL,
  Market_Value_billion TEXT
);

CREATE TABLE Office_locations (
  building_id INTEGER PRIMARY KEY,
  company_id INTEGER,
  move_in_year REAL,
  FOREIGN KEY (company_id) REFERENCES Companies(id),
  FOREIGN KEY (building_id) REFERENCES buildings(id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average height of buildings in cities with more than one building?
-- How many companies are housed in buildings taller than 200 meters?
-- What is the average number of stories in buildings that are completed?
-- Which companies have their headquarters in cities with more than one building?
-- What is the average market value of billion-dollar companies housed in buildings taller than 200 meters?  (This question is not possible to answer with the given schema because it asks for an average value of a non-numeric field and there is no direct relation between the table with the field and the table with the numeric value that can be used for the average.)  Replace this question with another one.
------------------------------------------------------------------------------------------
database_id: tracking_software_problems
database schema :
CREATE TABLE Problem_Category_Codes (
  problem_category_code TEXT PRIMARY KEY,
  problem_category_description TEXT
);

CREATE TABLE Problem_Log (
  problem_log_id INTEGER PRIMARY KEY,
  assigned_to_staff_id INTEGER,
  problem_id INTEGER,
  problem_category_code TEXT,
  problem_status_code TEXT,
  log_entry_date DATETIME,
  log_entry_description TEXT,
  log_entry_fix TEXT,
  other_log_details TEXT,
  FOREIGN KEY (problem_status_code) REFERENCES Problem_Status_Codes(problem_status_code),
  FOREIGN KEY (problem_id) REFERENCES Problems(problem_id),
  FOREIGN KEY (assigned_to_staff_id) REFERENCES Staff(staff_id),
  FOREIGN KEY (problem_category_code) REFERENCES Problem_Category_Codes(problem_category_code)
);

CREATE TABLE Problem_Status_Codes (
  problem_status_code TEXT PRIMARY KEY,
  problem_status_description TEXT
);

CREATE TABLE Product (
  product_id INTEGER PRIMARY KEY,
  product_name TEXT,
  product_details TEXT
);

CREATE TABLE Staff (
  staff_id INTEGER PRIMARY KEY,
  staff_first_name TEXT,
  staff_last_name TEXT,
  other_staff_details TEXT
);

CREATE TABLE Problems (
  problem_id INTEGER PRIMARY KEY,
  product_id INTEGER,
  closure_authorised_by_staff_id INTEGER,
  reported_by_staff_id INTEGER,
  date_problem_reported DATETIME,
  date_problem_closed DATETIME,
  problem_description TEXT,
  other_problem_details TEXT,
  FOREIGN KEY (reported_by_staff_id) REFERENCES Staff(staff_id),
  FOREIGN KEY (product_id) REFERENCES Product(product_id),
  FOREIGN KEY (closure_authorised_by_staff_id) REFERENCES Staff(staff_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of staff that reported problems in the Product category?
-- What are the staff names and dates when a problem in the 'Software' product was reported?
-- What is the total number of problems reported in the 'Software' product in the month of January?
-- What are the staff names of staff who have reported more than 5 problems in the month of January?
-- What are the product names of products that have had a problem reported by a staff member who has also reported problems in the 'Software' product?
------------------------------------------------------------------------------------------
database_id: products_gen_characteristics
database schema :
CREATE TABLE Ref_Characteristic_Types (
  characteristic_type_code TEXT PRIMARY KEY,
  characteristic_type_description TEXT
);

CREATE TABLE Ref_Colors (
  color_code TEXT PRIMARY KEY,
  color_description TEXT
);

CREATE TABLE Ref_Product_Categories (
  product_category_code TEXT PRIMARY KEY,
  product_category_description TEXT,
  unit_of_measure TEXT
);

CREATE TABLE Characteristics (
  characteristic_id INTEGER PRIMARY KEY,
  characteristic_type_code TEXT,
  characteristic_data_type TEXT,
  characteristic_name TEXT,
  other_characteristic_details TEXT,
  FOREIGN KEY (characteristic_type_code) REFERENCES Ref_Characteristic_Types(characteristic_type_code)
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  color_code TEXT,
  product_category_code TEXT,
  product_name TEXT,
  typical_buying_price TEXT,
  typical_selling_price TEXT,
  product_description TEXT,
  other_product_details TEXT,
  FOREIGN KEY (color_code) REFERENCES Ref_Colors(color_code),
  FOREIGN KEY (product_category_code) REFERENCES Ref_Product_Categories(product_category_code)
);

CREATE TABLE Product_Characteristics (
  product_id INTEGER,
  characteristic_id INTEGER,
  product_characteristic_value TEXT,
  FOREIGN KEY (product_id) REFERENCES Products(product_id),
  FOREIGN KEY (characteristic_id) REFERENCES Characteristics(characteristic_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of distinct characteristic type codes used for characteristics with a characteristic name that contains the word 'length'?
-- How many products have a color code that corresponds to a color description containing the word'red'?
-- What is the product name of products that have a product category code that corresponds to a unit of measure equal to 'kg'?
------------------------------------------------------------------------------------------
database_id: coffee_shop
database schema :
CREATE TABLE shop (
  Shop_ID INTEGER PRIMARY KEY,
  Address TEXT,
  Num_of_staff TEXT,
  Score REAL,
  Open_Year TEXT
);

CREATE TABLE member (
  Member_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Membership_card TEXT,
  Age REAL,
  Time_of_purchase REAL,
  Level_of_membership REAL,
  Address TEXT
);

CREATE TABLE happy_hour (
  HH_ID INTEGER PRIMARY KEY,
  Shop_ID INTEGER,
  Month TEXT,
  Num_of_shaff_in_charge REAL,
  FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)
);

CREATE TABLE happy_hour_member (
  HH_ID INTEGER PRIMARY KEY,
  Member_ID INTEGER,
  Total_amount REAL,
  FOREIGN KEY (Member_ID) REFERENCES member(Member_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT SUM(T1.Score) FROM shop AS T1 INNER JOIN happy_hour AS T2 ON T1.Shop_ID = T2.Shop_ID WHERE T2.Num_of_shaff_in_charge = 2 AND T2.Month = 'June' GROUP BY T2.Shop_ID;
-- What is the average number of staff in all the shops that have a score above 8 and are located in the city of Tokyo?
-- What is the average age of all members who are members of the 'Silver' level and are located in the city of Osaka?
-- How many members are members of the 'Gold' level and are also members of the 'Platinum' level?
-- What is the average number of members who joined the happy hour in the month of January in the shop with shop ID 10?
------------------------------------------------------------------------------------------
database_id: riding_club
database schema :
CREATE TABLE player (
  Player_ID INTEGER PRIMARY KEY,
  Sponsor_name TEXT,
  Player_name TEXT,
  Gender TEXT,
  Residence TEXT,
  Occupation TEXT,
  Votes REAL,
  Rank TEXT
);

CREATE TABLE club (
  Club_ID INTEGER PRIMARY KEY,
  Club_name TEXT,
  Region TEXT,
  Start_year REAL
);

CREATE TABLE coach (
  Coach_ID INTEGER PRIMARY KEY,
  Coach_name TEXT,
  Gender TEXT,
  Club_ID INTEGER,
  Rank REAL,
  FOREIGN KEY (Club_ID) REFERENCES club(Club_ID)
);

CREATE TABLE player_coach (
  Player_ID INTEGER PRIMARY KEY,
  Coach_ID INTEGER,
  Starting_year REAL,
  FOREIGN KEY (Coach_ID) REFERENCES coach(Coach_ID),
  FOREIGN KEY (Player_ID) REFERENCES player(Player_ID)
);

CREATE TABLE match_result (
  Rank INTEGER PRIMARY KEY,
  Club_ID INTEGER,
  Gold REAL,
  Big_Silver REAL,
  Small_Silver REAL,
  Bronze REAL,
  Points REAL,
  FOREIGN KEY (Club_ID) REFERENCES club(Club_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many players are there in total?
-- What is the name of the club that the player with the highest number of votes is associated with?
-- What is the name of the coach that coached the player with the name "John Doe"?
-- What is the average number of votes received by players from the "Male" gender?
-- How many clubs have won at least one gold medal in the Olympic Games?  How many of these clubs are based in the region "Asia"?  Please display both the count of clubs that won at least one gold and the count of clubs based in "Asia" separately.  For clubs that won at least one gold, please also display their respective regions.  For clubs based in "Asia", please also display the number of gold medals they won.  Please use the match_result table for this question.  Do not include any clubs that did not win at least one gold medal.  Sort the results by region.  Please use the following format: "Region: Count, Gold Medals Won" or "Region: Count".  If a club won no gold medals, do not display the gold medals won.  Do not include any duplicate results.  Please
------------------------------------------------------------------------------------------
database_id: customers_card_transactions
database schema :
CREATE TABLE Accounts (
  account_id INTEGER PRIMARY KEY,
  customer_id REAL,
  account_name TEXT,
  other_account_details TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  customer_first_name TEXT,
  customer_last_name TEXT,
  customer_address TEXT,
  customer_phone TEXT,
  customer_email TEXT,
  other_customer_details TEXT
);

CREATE TABLE Customers_Cards (
  card_id INTEGER PRIMARY KEY,
  customer_id REAL,
  card_type_code TEXT,
  card_number TEXT,
  date_valid_from DATETIME,
  date_valid_to DATETIME,
  other_card_details TEXT
);

CREATE TABLE Financial_Transactions (
  transaction_id REAL,
  previous_transaction_id REAL,
  account_id INTEGER,
  card_id INTEGER,
  transaction_type TEXT,
  transaction_date DATETIME,
  transaction_amount REAL,
  transaction_comment TEXT,
  other_transaction_details TEXT,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id),
  FOREIGN KEY (card_id) REFERENCES Customers_Cards(card_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the count of customers that have at least one active card?
-- What is the number of accounts opened by customers from the address '123 Main St'?
-- What is the count of financial transactions with a transaction type of 'withdrawal' and a transaction amount of $100 or more, by the customer with customer ID 1?
-- What is the name of the account with the account ID 1, and what is its account name?
-- What is the count of customers that have exactly one active card, and what is the count of customers that have no active cards?
------------------------------------------------------------------------------------------
database_id: county_public_safety
database schema :
CREATE TABLE county_public_safety (
  County_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Population REAL,
  Police_officers REAL,
  Residents_per_officer REAL,
  Case_burden REAL,
  Crime_rate REAL,
  Police_force TEXT,
  Location TEXT
);

CREATE TABLE city (
  City_ID INTEGER PRIMARY KEY,
  County_ID INTEGER,
  Name TEXT,
  White REAL,
  Black REAL,
  Amerindian REAL,
  Asian REAL,
  Multiracial REAL,
  Hispanic REAL,
  FOREIGN KEY (County_ID) REFERENCES county_public_safety(County_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM county_public_safety;
-- What is the average number of police officers per county, and what is the total population of the counties with more than 200 police officers?
-- What is the average number of residents per police officer in the counties with a population of more than 50,000?
-- What is the average crime rate in the counties with a police force that is primarily a county police force?
-- What is the average number of residents per police officer in the counties with a crime rate of more than 1,000?
------------------------------------------------------------------------------------------
database_id: performance_attendance
database schema :
CREATE TABLE member (
  Member_ID TEXT PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Role TEXT
);

CREATE TABLE performance (
  Performance_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Host TEXT,
  Location TEXT,
  Attendance REAL
);

CREATE TABLE member_attendance (
  Member_ID INTEGER PRIMARY KEY,
  Performance_ID INTEGER,
  Num_of_Pieces REAL,
  FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID),
  FOREIGN KEY (Member_ID) REFERENCES member(Member_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of unique nationalities of the members who attended the performance on '2024-03-01'?
-- What is the average number of pieces presented by the members from the 'USA'?
-- How many members have attended a performance in the location 'Tokyo'?
-- What are the names of the members who have a role 'Principal' and have attended a performance in '2024'?
-- What is the total number of members who have attended more than 1 performance in the same location as the performance on '2024-02-01' and are from the nationality 'Japan'?
------------------------------------------------------------------------------------------
database_id: club_1
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Club (
  ClubID INTEGER PRIMARY KEY,
  ClubName TEXT,
  ClubDesc TEXT,
  ClubLocation TEXT
);

CREATE TABLE Member_of_club (
  StuID INTEGER,
  ClubID INTEGER,
  Position TEXT,
  FOREIGN KEY (ClubID) REFERENCES Club(ClubID),
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of students in the "Computer Science" major?
-- Which clubs are located in the city of "New York"?
-- How many students who are members of the "Computer Science" club are there in the city with code "Boulder"?
-- What is the average age of students who are members of the "Computer Science" club and are living in the city with code "Boulder"?
-- What is the name of the student who is the president of the "Computer Science" club in the city with code "Boulder"?
------------------------------------------------------------------------------------------
database_id: singer
database schema :
CREATE TABLE singer (
  Singer_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Birth_Year REAL,
  Net_Worth_Millions REAL,
  Citizenship TEXT
);

CREATE TABLE song (
  Song_ID INTEGER PRIMARY KEY,
  Title TEXT,
  Singer_ID INTEGER,
  Sales REAL,
  Highest_Position REAL,
  FOREIGN KEY (Singer_ID) REFERENCES singer(Singer_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average net worth of singers born in the year 1975?
-- What are the names of the top 3 singers in terms of the total sales of their songs?
-- Which song with a highest position of 1 in the charts has a singer from the United States?
-- How many singers have a net worth of more than 100 million dollars?
-- What are the titles of songs performed by singers from the United Kingdom?
------------------------------------------------------------------------------------------
database_id: culture_company
database schema :
CREATE TABLE book_club (
  book_club_id INTEGER PRIMARY KEY,
  Year REAL,
  Author_or_Editor TEXT,
  Book_Title TEXT,
  Publisher TEXT,
  Category TEXT,
  Result TEXT
);

CREATE TABLE movie (
  movie_id INTEGER PRIMARY KEY,
  Title TEXT,
  Year REAL,
  Director TEXT,
  Budget_million REAL,
  Gross_worldwide REAL
);

CREATE TABLE culture_company (
  Company_name TEXT PRIMARY KEY,
  Type TEXT,
  Incorporated_in TEXT,
  Group_Equity_Shareholding REAL,
  book_club_id TEXT,
  movie_id TEXT,
  FOREIGN KEY (movie_id) REFERENCES movie(movie_id),
  FOREIGN KEY (book_club_id) REFERENCES book_club(book_club_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of movie titles that have a budget of more than 100 million dollars, released in the year 2000?
-- How many book clubs exist which are published by 'McGraw-Hill'?
-- What is the average budget of all movies released in the year 2010?
-- Which book club, published by 'Penguin', has the highest result?
-- What is the number of movies directed by 'Christopher Nolan', sorted in descending order by their gross worldwide revenue?  Show only the top 3 results.  Also, show only the results for movies with a budget of more than 100 million dollars.  Finally, show only the results for movies released in the year 2010.   Display the results as a list.  (Note: You should use the movie table for this question.)   [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]  [END]
------------------------------------------------------------------------------------------
database_id: cre_Doc_Template_Mgt
database schema :
CREATE TABLE Ref_Template_Types (
  Template_Type_Code TEXT PRIMARY KEY,
  Template_Type_Description TEXT
);

CREATE TABLE Templates (
  Template_ID INTEGER PRIMARY KEY,
  Version_Number REAL,
  Template_Type_Code TEXT,
  Date_Effective_From DATETIME,
  Date_Effective_To DATETIME,
  Template_Details TEXT,
  FOREIGN KEY (Template_Type_Code) REFERENCES Ref_Template_Types(Template_Type_Code)
);

CREATE TABLE Documents (
  Document_ID INTEGER PRIMARY KEY,
  Template_ID INTEGER,
  Document_Name TEXT,
  Document_Description TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Template_ID) REFERENCES Templates(Template_ID)
);

CREATE TABLE Paragraphs (
  Paragraph_ID INTEGER PRIMARY KEY,
  Document_ID INTEGER,
  Paragraph_Text TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Document_ID) REFERENCES Documents(Document_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of documents that were created using a template with the code 'tt0001'?
-- What is the template type description for the template type code 'tt0002'?
-- How many unique documents were created by each template type code?
-- What are the documents created using a template with a version number greater than 2 and a template type code 'tt0001'?
-- What is the total number of paragraphs in all documents created by a template type code 'tt0002' and the document name contains 'example'?  (Note: this question may not be answerable based on the schema)  (Note: this question may not be answerable based on the schema)  (Note: this question may not be answerable based on the schema)  (Note: this question may not be answerable based on the schema)  (Note: this question may not be answerable based on the schema)  (Note: this question may not be answerable based on the schema)  (Note: this question may not be answerable based from the schema)  (Note: this question may not be answerable based from the schema)  (Note
------------------------------------------------------------------------------------------
database_id: musical
database schema :
CREATE TABLE musical (
  Musical_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Year REAL,
  Award TEXT,
  Category TEXT,
  Nominee TEXT,
  Result TEXT
);

CREATE TABLE actor (
  Actor_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Musical_ID INTEGER,
  Character TEXT,
  Duration TEXT,
  age REAL,
  FOREIGN KEY (Musical_ID) REFERENCES actor(Actor_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many actors participated in the musical "Rent"?
-- What were the categories in which "Hamilton" won awards in 2016?
-- What are the names of the actors who were nominated in the musical "The Phantom of the Opera" in the year 1987?
-- What is the total number of actors in the musical "The Phantom of the Opera" who have won awards?
-- What are the names of the actors who have acted in both "The Phantom of the Opera" and "Rent"?  ```
------------------------------------------------------------------------------------------
database_id: world_1
database schema :
CREATE TABLE city (
  ID INTEGER PRIMARY KEY,
  Name TEXT,
  CountryCode TEXT,
  District TEXT,
  Population REAL,
  FOREIGN KEY (CountryCode) REFERENCES country(Code)
);

CREATE TABLE sqlite_sequence (
  name TEXT,
  seq TEXT
);

CREATE TABLE country (
  Code TEXT PRIMARY KEY,
  Name TEXT,
  Continent TEXT,
  Region TEXT,
  SurfaceArea REAL,
  IndepYear REAL,
  Population REAL,
  LifeExpectancy REAL,
  GNP REAL,
  GNPOld REAL,
  LocalName TEXT,
  GovernmentForm TEXT,
  HeadOfState TEXT,
  Capital REAL,
  Code2 TEXT
);

CREATE TABLE countrylanguage (
  CountryCode TEXT PRIMARY KEY,
  Language TEXT,
  IsOfficial TEXT,
  Percentage REAL,
  FOREIGN KEY (CountryCode) REFERENCES country(Code)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the country with the highest population?
-- What is the average population of countries in the region "North America"?
-- How many cities are in the country with the code "USA"?
-- What is the name of the city with the highest population in the district "New York"?
-- What is the number of countries where English is an official language?
------------------------------------------------------------------------------------------
database_id: device
database schema :
CREATE TABLE device (
  Device_ID INTEGER PRIMARY KEY,
  Device TEXT,
  Carrier TEXT,
  Package_Version TEXT,
  Applications TEXT,
  Software_Platform TEXT
);

CREATE TABLE shop (
  Shop_ID INTEGER PRIMARY KEY,
  Shop_Name TEXT,
  Location TEXT,
  Open_Date TEXT,
  Open_Year REAL
);

CREATE TABLE stock (
  Shop_ID INTEGER PRIMARY KEY,
  Device_ID INTEGER,
  Quantity REAL,
  FOREIGN KEY (Device_ID) REFERENCES device(Device_ID),
  FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many devices are there in the database?
-- What is the average number of devices per shop?
-- What is the device ID of the device "iPhone 11"?
-- What are the names of all the shops where the quantity of "iPhone 11" is greater than 100?
-- What is the total number of shops where the shop name contains "store" and the open year is 2019?
------------------------------------------------------------------------------------------
database_id: tracking_grants_for_research
database schema :
CREATE TABLE Document_Types (
  document_type_code TEXT PRIMARY KEY,
  document_description TEXT
);

CREATE TABLE Documents (
  document_id INTEGER PRIMARY KEY,
  document_type_code TEXT,
  grant_id INTEGER,
  sent_date DATETIME,
  response_received_date DATETIME,
  other_details TEXT,
  FOREIGN KEY (grant_id) REFERENCES Grants(grant_id),
  FOREIGN KEY (document_type_code) REFERENCES Document_Types(document_type_code)
);

CREATE TABLE Grants (
  grant_id INTEGER PRIMARY KEY,
  organisation_id INTEGER,
  grant_amount REAL,
  grant_start_date DATETIME,
  grant_end_date DATETIME,
  other_details TEXT,
  FOREIGN KEY (organisation_id) REFERENCES Organisations(organisation_id)
);

CREATE TABLE Organisation_Types (
  organisation_type TEXT PRIMARY KEY,
  organisation_type_description TEXT
);

CREATE TABLE Organisations (
  organisation_id INTEGER PRIMARY KEY,
  organisation_type TEXT,
  organisation_details TEXT,
  FOREIGN KEY (organisation_type) REFERENCES Organisation_Types(organisation_type)
);

CREATE TABLE Project_Outcomes (
  project_id INTEGER,
  outcome_code TEXT,
  outcome_details TEXT,
  FOREIGN KEY (outcome_code) REFERENCES Research_Outcomes(outcome_code),
  FOREIGN KEY (project_id) REFERENCES Projects(project_id)
);

CREATE TABLE Project_Staff (
  staff_id INTEGER PRIMARY KEY,
  project_id INTEGER,
  role_code TEXT,
  date_from DATETIME,
  date_to DATETIME,
  other_details TEXT,
  FOREIGN KEY (role_code) REFERENCES Staff_Roles(role_code),
  FOREIGN KEY (project_id) REFERENCES Projects(project_id)
);

CREATE TABLE Projects (
  project_id INTEGER PRIMARY KEY,
  organisation_id INTEGER,
  project_details TEXT,
  FOREIGN KEY (organisation_id) REFERENCES Organisations(organisation_id)
);

CREATE TABLE Research_Outcomes (
  outcome_code TEXT PRIMARY KEY,
  outcome_description TEXT
);

CREATE TABLE Research_Staff (
  staff_id INTEGER PRIMARY KEY,
  employer_organisation_id INTEGER,
  staff_details TEXT,
  FOREIGN KEY (employer_organisation_id) REFERENCES Organisations(organisation_id)
);

CREATE TABLE Staff_Roles (
  role_code TEXT PRIMARY KEY,
  role_description TEXT
);

CREATE TABLE Tasks (
  task_id INTEGER PRIMARY KEY,
  project_id INTEGER,
  task_details TEXT,
  "eg Agree Objectives" TEXT,
  FOREIGN KEY (project_id) REFERENCES Projects(project_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- Select all documents with the document_type_code 'APPROVAL' and the sent_date between '2014-01-01' and '2016-01-01', and which were received after the document with document_id = 1.
-- What is the document_type_code of the document with document_id = 1?  Join the Documents and Document_Types tables on document_type_code to answer this question.
-- What is the average grant amount for the projects that were completed before 31/12/2020?
-- Which organisation type has the highest average grant amount?
-- What is the average duration of research staff employment in the organisation type 'University'?
------------------------------------------------------------------------------------------
database_id: employee_hire_evaluation
database schema :
CREATE TABLE employee (
  Employee_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Age REAL,
  City TEXT
);

CREATE TABLE shop (
  Shop_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Location TEXT,
  District TEXT,
  Number_products REAL,
  Manager_name TEXT
);

CREATE TABLE hiring (
  Shop_ID INTEGER,
  Employee_ID INTEGER PRIMARY KEY,
  Start_from TEXT,
  Is_full_time TEXT,
  FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID),
  FOREIGN KEY (Shop_ID) REFERENCES shop(Shop_ID)
);

CREATE TABLE evaluation (
  Employee_ID TEXT PRIMARY KEY,
  Year_awarded TEXT,
  Bonus REAL,
  FOREIGN KEY (Employee_ID) REFERENCES employee(Employee_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of employees working in shops that have a manager named "John"?
-- How many employees are there in total, who have received a bonus?
-- What is the name of the shop located in the district "Downtown", that has more than 50 products?
-- Which city has the most employees working in it, and how many employees work there?
-- What is the name of the shop with the highest number of products, and how many employees work there?  - That shop's manager's name is "John"?  - Also, get the average age of employees working in that shop.  - Finally, get the bonus of the employee with the highest bonus.  - And, finally, get the total number of shops in the district "Downtown".  - AND, the number of employees who work in the district "Downtown" with the name "John".  - (All these sub-questions should be part of the main question)  - Also, the sub-questions should be in the correct order as per the question above.  - Also, the sub-questions should be separated by commas.  - Please, also, make sure that the
------------------------------------------------------------------------------------------
database_id: movie_1
database schema :
CREATE TABLE Movie (
  mID INTEGER PRIMARY KEY,
  title TEXT,
  year REAL,
  director TEXT
);

CREATE TABLE Reviewer (
  rID INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE Rating (
  rID INTEGER,
  mID INTEGER,
  stars REAL,
  ratingDate DATETIME,
  FOREIGN KEY (rID) REFERENCES Reviewer(rID),
  FOREIGN KEY (mID) REFERENCES Movie(mID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of ratings for movies released before 1990?
-- Which movie directors have a movie that was released in the year 2000?
-- What is the total number of movies rated by reviewers from the USA?
-- Which movies have a rating of 4 stars and were released after the year 2000?
-- How many reviewers have rated a movie that has a rating of 3 stars?  ]]]]
------------------------------------------------------------------------------------------
database_id: network_1
database schema :
CREATE TABLE Highschooler (
  ID INTEGER PRIMARY KEY,
  name TEXT,
  grade REAL
);

CREATE TABLE Friend (
  student_id INTEGER PRIMARY KEY,
  friend_id INTEGER,
  FOREIGN KEY (friend_id) REFERENCES Highschooler(ID),
  FOREIGN KEY (student_id) REFERENCES Highschooler(ID)
);

CREATE TABLE Likes (
  student_id INTEGER PRIMARY KEY,
  liked_id INTEGER,
  FOREIGN KEY (student_id) REFERENCES Highschooler(ID),
  FOREIGN KEY (liked_id) REFERENCES Highschooler(ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average grade of all students who have at least one friend?
-- What is the grade of the student whose name is "Alice"?
-- How many students like at least one student who has a grade of 12?
-- What is the ID of the student who is friends with the student who has the highest grade?
-- How many students have at least one friend whose name starts with the letter "S"?  ```sql
------------------------------------------------------------------------------------------
database_id: poker_player
database schema :
CREATE TABLE poker_player (
  Poker_Player_ID INTEGER PRIMARY KEY,
  People_ID INTEGER,
  Final_Table_Made REAL,
  Best_Finish REAL,
  Money_Rank REAL,
  Earnings REAL,
  FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);

CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Nationality TEXT,
  Name TEXT,
  Birth_Date TEXT,
  Height REAL
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average height of the people that made it to the final table in the poker tournament?
-- What is the highest earnings of a poker player who is American and has a height of 180 cm or more?
-- What is the average earnings of the people who made it to the final table in the poker tournament and are from the UK?
-- How many poker players are from the UK and have an earnings of more than $100,000?
-- What is the name of the poker player with the highest earnings among the people who were born before 1990?  ```sql
------------------------------------------------------------------------------------------
database_id: program_share
database schema :
CREATE TABLE program (
  Program_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Origin TEXT,
  Launch REAL,
  Owner TEXT
);

CREATE TABLE channel (
  Channel_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Owner TEXT,
  Share_in_percent REAL,
  Rating_in_percent REAL
);

CREATE TABLE broadcast (
  Channel_ID INTEGER PRIMARY KEY,
  Program_ID INTEGER,
  Time_of_day TEXT,
  FOREIGN KEY (Program_ID) REFERENCES program(Program_ID),
  FOREIGN KEY (Channel_ID) REFERENCES channel(Channel_ID)
);

CREATE TABLE broadcast_share (
  Channel_ID INTEGER PRIMARY KEY,
  Program_ID INTEGER,
  Date TEXT,
  Share_in_percent REAL,
  FOREIGN KEY (Program_ID) REFERENCES program(Program_ID),
  FOREIGN KEY (Channel_ID) REFERENCES channel(Channel_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average share of a program on all channels for each program, ordered by average share in descending order?
-- How many channels are there in total?
-- What is the number of broadcasts on all channels for each day of the week?
-- What is the average share of a channel for each program, ordered by average share in descending order?
-- What is the number of programs on a channel that has a rating of 80% or higher?  ]]>0.6
------------------------------------------------------------------------------------------
database_id: aircraft
database schema :
CREATE TABLE pilot (
  Pilot_Id INTEGER PRIMARY KEY,
  Name TEXT,
  Age REAL
);

CREATE TABLE aircraft (
  Aircraft_ID INTEGER PRIMARY KEY,
  Aircraft TEXT,
  Description TEXT,
  Max_Gross_Weight TEXT,
  Total_disk_area TEXT,
  Max_disk_Loading TEXT
);

CREATE TABLE match (
  Round INTEGER PRIMARY KEY,
  Location TEXT,
  Country TEXT,
  Date TEXT,
  Fastest_Qualifying TEXT,
  Winning_Pilot TEXT,
  Winning_Aircraft TEXT,
  FOREIGN KEY (Winning_Pilot) REFERENCES pilot(Pilot_Id),
  FOREIGN KEY (Winning_Aircraft) REFERENCES aircraft(Aircraft_ID)
);

CREATE TABLE airport (
  Airport_ID INTEGER PRIMARY KEY,
  Airport_Name TEXT,
  Total_Passengers REAL,
  %_Change_2007 TEXT,
  International_Passengers REAL,
  Domestic_Passengers REAL,
  Transit_Passengers REAL,
  Aircraft_Movements REAL,
  Freight_Metric_Tonnes REAL
);

CREATE TABLE airport_aircraft (
  ID REAL,
  Airport_ID INTEGER PRIMARY KEY,
  Aircraft_ID INTEGER,
  FOREIGN KEY (Aircraft_ID) REFERENCES aircraft(Aircraft_ID),
  FOREIGN KEY (Airport_ID) REFERENCES airport(Airport_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of all pilots?
-- What is the total number of aircraft that have been used to win matches?
-- Which airport has the highest number of transit passengers?
-- What is the average Max Gross Weight of all aircraft that have been used to win matches?
-- What is the name of the pilot who won the match at round 5 and used an aircraft with a Max Disk Loading of 15?  (Hint: You will need to use a subquery or a join to answer this question.)
------------------------------------------------------------------------------------------
database_id: restaurant_1
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Restaurant (
  ResID INTEGER PRIMARY KEY,
  ResName TEXT,
  Address TEXT,
  Rating REAL
);

CREATE TABLE Type_Of_Restaurant (
  ResID INTEGER,
  ResTypeID INTEGER,
  FOREIGN KEY (ResTypeID) REFERENCES Restaurant_Type(ResTypeID),
  FOREIGN KEY (ResID) REFERENCES Restaurant(ResID)
);

CREATE TABLE Restaurant_Type (
  ResTypeID INTEGER PRIMARY KEY,
  ResTypeName TEXT,
  ResTypeDescription TEXT
);

CREATE TABLE Visits_Restaurant (
  StuID INTEGER,
  ResID INTEGER,
  Time DATETIME,
  Spent REAL,
  FOREIGN KEY (ResID) REFERENCES Restaurant(ResID),
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

# Here are some example questions that CAN be answered by the schema below:
-- Insert your questions in the above format.
-- 2.
-- 4.
-- **Hint:** Use the relationships between the tables to create your questions. You can use SQL to answer the questions, but you must provide the SQL query that supports your answer.**
-- What is the average age of female students who have visited a restaurant in the city of "New York"?
------------------------------------------------------------------------------------------
database_id: customers_and_invoices
database schema :
CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  customer_first_name TEXT,
  customer_middle_initial TEXT,
  customer_last_name TEXT,
  gender TEXT,
  email_address TEXT,
  login_name TEXT,
  login_password TEXT,
  phone_number TEXT,
  town_city TEXT,
  state_county_province TEXT,
  country TEXT
);

CREATE TABLE Orders (
  order_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  date_order_placed DATETIME,
  order_details TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Invoices (
  invoice_number INTEGER PRIMARY KEY,
  order_id INTEGER,
  invoice_date DATETIME,
  FOREIGN KEY (order_id) REFERENCES Orders(order_id)
);

CREATE TABLE Accounts (
  account_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  date_account_opened DATETIME,
  account_name TEXT,
  other_account_details TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Product_Categories (
  production_type_code TEXT PRIMARY KEY,
  product_type_description TEXT,
  vat_rating REAL
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  parent_product_id REAL,
  production_type_code TEXT,
  unit_price REAL,
  product_name TEXT,
  product_color TEXT,
  product_size TEXT,
  FOREIGN KEY (production_type_code) REFERENCES Product_Categories(production_type_code)
);

CREATE TABLE Financial_Transactions (
  transaction_id REAL,
  account_id INTEGER,
  invoice_number INTEGER,
  transaction_type TEXT,
  transaction_date DATETIME,
  transaction_amount REAL,
  transaction_comment TEXT,
  other_transaction_details TEXT,
  FOREIGN KEY (account_id) REFERENCES Accounts(account_id),
  FOREIGN KEY (invoice_number) REFERENCES Invoices(invoice_number)
);

CREATE TABLE Order_Items (
  order_item_id INTEGER PRIMARY KEY,
  order_id INTEGER,
  product_id INTEGER,
  product_quantity TEXT,
  other_order_item_details TEXT,
  FOREIGN KEY (order_id) REFERENCES Orders(order_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Invoice_Line_Items (
  order_item_id INTEGER,
  invoice_number INTEGER,
  product_id INTEGER,
  product_title TEXT,
  product_quantity TEXT,
  product_price REAL,
  derived_product_cost REAL,
  derived_vat_payable REAL,
  derived_total_cost REAL,
  FOREIGN KEY (product_id) REFERENCES Products(product_id),
  FOREIGN KEY (invoice_number) REFERENCES Invoices(invoice_number),
  FOREIGN KEY (order_item_id) REFERENCES Order_Items(order_item_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- Answer the following questions using the provided schema:
-- What is the total number of customers who reside in the state of "California"?
-- Which product has the highest unit price among the products in the "Electronics" category?
-- 2.
-- 4.
------------------------------------------------------------------------------------------
database_id: insurance_and_eClaims
database schema :
CREATE TABLE Customers (
  Customer_ID INTEGER PRIMARY KEY,
  Customer_Details TEXT
);

CREATE TABLE Staff (
  Staff_ID INTEGER PRIMARY KEY,
  Staff_Details TEXT
);

CREATE TABLE Policies (
  Policy_ID INTEGER PRIMARY KEY,
  Customer_ID INTEGER,
  Policy_Type_Code TEXT,
  Start_Date DATETIME,
  End_Date DATETIME,
  FOREIGN KEY (Customer_ID) REFERENCES Customers(Customer_ID)
);

CREATE TABLE Claim_Headers (
  Claim_Header_ID INTEGER PRIMARY KEY,
  Claim_Status_Code TEXT,
  Claim_Type_Code TEXT,
  Policy_ID INTEGER,
  Date_of_Claim DATETIME,
  Date_of_Settlement DATETIME,
  Amount_Claimed REAL,
  Amount_Piad REAL,
  FOREIGN KEY (Policy_ID) REFERENCES Policies(Policy_ID)
);

CREATE TABLE Claims_Documents (
  Claim_ID INTEGER PRIMARY KEY,
  Document_Type_Code TEXT,
  Created_by_Staff_ID INTEGER,
  Created_Date REAL,
  FOREIGN KEY (Created_by_Staff_ID) REFERENCES Staff(Staff_ID),
  FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers(Claim_Header_ID)
);

CREATE TABLE Claims_Processing_Stages (
  Claim_Stage_ID INTEGER PRIMARY KEY,
  Next_Claim_Stage_ID REAL,
  Claim_Status_Name TEXT,
  Claim_Status_Description TEXT
);

CREATE TABLE Claims_Processing (
  Claim_Processing_ID INTEGER PRIMARY KEY,
  Claim_ID INTEGER,
  Claim_Outcome_Code TEXT,
  Claim_Stage_ID REAL,
  Staff_ID INTEGER,
  FOREIGN KEY (Staff_ID) REFERENCES Staff(Staff_ID),
  FOREIGN KEY (Claim_ID) REFERENCES Claim_Headers(Claim_Header_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of policies held by customers who have made at least one claim?
-- How many staff members are involved in the processing of claims that have a claim outcome code of 'Paid'?
-- Which customer has the most policies?
-- What is the total amount paid to customers for claims that were processed in the year 2020?  Note: The year should be determined by the Date_of_Settlement.  (Note: the date field is of type TIME. You may assume it is a time value in the format 'HH:MM:SS' where 'HH' represents the hour and 'MM' represents the minute. Therefore, you can determine the year from the hour value.  For example, if the hour value is between 0 and 11, the year is 2020, and if the hour value is between 12 and 23, the year is 2021.)  Also, note that the 'year' should be determined by the hour of the Date_of_Settlement field.  For example, if the hour value is between 0 and 11, the year is 2020; otherwise, the year is 2021.  Note that
------------------------------------------------------------------------------------------
database_id: college_1
database schema :
CREATE TABLE CLASS (
  CLASS_CODE TEXT PRIMARY KEY,
  CRS_CODE TEXT,
  CLASS_SECTION TEXT,
  CLASS_TIME TEXT,
  CLASS_ROOM TEXT,
  PROF_NUM INTEGER,
  FOREIGN KEY (PROF_NUM) REFERENCES EMPLOYEE(EMP_NUM),
  FOREIGN KEY (CRS_CODE) REFERENCES COURSE(CRS_CODE)
);

CREATE TABLE COURSE (
  CRS_CODE TEXT PRIMARY KEY,
  DEPT_CODE TEXT,
  CRS_DESCRIPTION TEXT,
  CRS_CREDIT REAL,
  FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE)
);

CREATE TABLE DEPARTMENT (
  DEPT_CODE TEXT PRIMARY KEY,
  DEPT_NAME TEXT,
  SCHOOL_CODE TEXT,
  EMP_NUM INTEGER,
  DEPT_ADDRESS TEXT,
  DEPT_EXTENSION TEXT,
  FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM)
);

CREATE TABLE EMPLOYEE (
  EMP_NUM INTEGER PRIMARY KEY,
  EMP_LNAME TEXT,
  EMP_FNAME TEXT,
  EMP_INITIAL TEXT,
  EMP_JOBCODE TEXT,
  EMP_HIREDATE DATETIME,
  EMP_DOB DATETIME
);

CREATE TABLE ENROLL (
  CLASS_CODE TEXT,
  STU_NUM INTEGER,
  ENROLL_GRADE TEXT,
  FOREIGN KEY (STU_NUM) REFERENCES STUDENT(STU_NUM),
  FOREIGN KEY (CLASS_CODE) REFERENCES CLASS(CLASS_CODE)
);

CREATE TABLE PROFESSOR (
  EMP_NUM INTEGER,
  DEPT_CODE TEXT,
  PROF_OFFICE TEXT,
  PROF_EXTENSION TEXT,
  PROF_HIGH_DEGREE TEXT,
  FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE),
  FOREIGN KEY (EMP_NUM) REFERENCES EMPLOYEE(EMP_NUM)
);

CREATE TABLE STUDENT (
  STU_NUM INTEGER PRIMARY KEY,
  STU_LNAME TEXT,
  STU_FNAME TEXT,
  STU_INIT TEXT,
  STU_DOB DATETIME,
  STU_HRS REAL,
  STU_CLASS TEXT,
  STU_GPA REAL,
  STU_TRANSFER REAL,
  DEPT_CODE TEXT,
  STU_PHONE TEXT,
  PROF_NUM REAL,
  FOREIGN KEY (DEPT_CODE) REFERENCES DEPARTMENT(DEPT_CODE)
);

# Here are some example questions that CAN be answered by the schema below:
-- Please wait while I generate the questions based on the provided schema.
-- Which professors have taught a class that has more than 100 students enrolled?
-- What is the average GPA of students who are majoring in Computer Science?
-- What is the number of students who are enrolled in a class taught by a professor who is also a department head?
-- What is the average GPA of students enrolled in classes that have a class time between 1 and 3 pm?
------------------------------------------------------------------------------------------
database_id: local_govt_mdm
database schema :
CREATE TABLE Customer_Master_Index (
  master_customer_id INTEGER PRIMARY KEY,
  cmi_details TEXT
);

CREATE TABLE CMI_Cross_References (
  cmi_cross_ref_id INTEGER PRIMARY KEY,
  master_customer_id INTEGER,
  source_system_code TEXT,
  FOREIGN KEY (master_customer_id) REFERENCES Customer_Master_Index(master_customer_id)
);

CREATE TABLE Council_Tax (
  council_tax_id INTEGER PRIMARY KEY,
  cmi_cross_ref_id INTEGER,
  FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE Business_Rates (
  business_rates_id INTEGER PRIMARY KEY,
  cmi_cross_ref_id INTEGER,
  FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE Benefits_Overpayments (
  council_tax_id INTEGER PRIMARY KEY,
  cmi_cross_ref_id INTEGER,
  FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE Parking_Fines (
  council_tax_id INTEGER PRIMARY KEY,
  cmi_cross_ref_id INTEGER,
  FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE Rent_Arrears (
  council_tax_id INTEGER PRIMARY KEY,
  cmi_cross_ref_id INTEGER,
  FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

CREATE TABLE Electoral_Register (
  electoral_register_id INTEGER PRIMARY KEY,
  cmi_cross_ref_id INTEGER,
  FOREIGN KEY (cmi_cross_ref_id) REFERENCES CMI_Cross_References(cmi_cross_ref_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of customers with business rates?
-- How many council tax records have a corresponding parking fine record?
-- What is the total number of customers that have a council tax record and an electoral register record?
-- What is the total number of customers that have a council tax record, but do not have a business rate or parking fine record?  Select the master_customer_id from the Customer_Master_Index table for customers that meet the above criteria.  Also, display the source_system_code from the CMI_Cross_References table for each of the customers that meet the above criteria.  Order the results by master_customer_id in descending order.  Display the results in a format that includes the master_customer_id and source_system_code.  Also, include a header row that includes the column names.  Display the results in a format that includes the master_customer_id and source_system_code.  Finally, include the count of the total number of customers that meet the above criteria.  Display the count as "Total Number of Customers: " followed by the actual count.  Display the results in a format that includes the master_customer_id and source_system_code.  Include the actual count as part of the header row
------------------------------------------------------------------------------------------
database_id: book_2
database schema :
CREATE TABLE publication (
  Publication_ID INTEGER PRIMARY KEY,
  Book_ID INTEGER,
  Publisher TEXT,
  Publication_Date TEXT,
  Price REAL,
  FOREIGN KEY (Book_ID) REFERENCES book(Book_ID)
);

CREATE TABLE book (
  Book_ID INTEGER PRIMARY KEY,
  Title TEXT,
  Issues REAL,
  Writer TEXT
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average price of publications by the publisher "Wiley"?
-- What is the title of the book with the highest number of issues?
-- How many publications were made in 2015?
-- SELECT COUNT(*) FROM publication WHERE price = (SELECT AVG(price) FROM publication)
-- SELECT t1.Title FROM book AS t1 JOIN publication AS t2 ON t1.Book_ID = t2.Book_ID WHERE t2.Publisher = 'Wiley'
------------------------------------------------------------------------------------------
database_id: hr_1
database schema :
CREATE TABLE regions (
  REGION_ID INTEGER PRIMARY KEY,
  REGION_NAME TEXT
);

CREATE TABLE countries (
  COUNTRY_ID TEXT PRIMARY KEY,
  COUNTRY_NAME TEXT,
  REGION_ID INTEGER,
  FOREIGN KEY (REGION_ID) REFERENCES regions(REGION_ID)
);

CREATE TABLE departments (
  DEPARTMENT_ID INTEGER PRIMARY KEY,
  DEPARTMENT_NAME TEXT,
  MANAGER_ID REAL,
  LOCATION_ID REAL
);

CREATE TABLE jobs (
  JOB_ID TEXT PRIMARY KEY,
  JOB_TITLE TEXT,
  MIN_SALARY REAL,
  MAX_SALARY REAL
);

CREATE TABLE employees (
  EMPLOYEE_ID INTEGER PRIMARY KEY,
  FIRST_NAME TEXT,
  LAST_NAME TEXT,
  EMAIL TEXT,
  PHONE_NUMBER TEXT,
  HIRE_DATE DATETIME,
  JOB_ID TEXT,
  SALARY REAL,
  COMMISSION_PCT REAL,
  MANAGER_ID REAL,
  DEPARTMENT_ID INTEGER,
  FOREIGN KEY (JOB_ID) REFERENCES jobs(JOB_ID),
  FOREIGN KEY (DEPARTMENT_ID) REFERENCES departments(DEPARTMENT_ID)
);

CREATE TABLE job_history (
  EMPLOYEE_ID INTEGER PRIMARY KEY,
  START_DATE DATETIME,
  END_DATE DATETIME,
  JOB_ID TEXT,
  DEPARTMENT_ID INTEGER,
  FOREIGN KEY (JOB_ID) REFERENCES jobs(JOB_ID),
  FOREIGN KEY (DEPARTMENT_ID) REFERENCES departments(DEPARTMENT_ID),
  FOREIGN KEY (EMPLOYEE_ID) REFERENCES employees(EMPLOYEE_ID)
);

CREATE TABLE locations (
  LOCATION_ID INTEGER PRIMARY KEY,
  STREET_ADDRESS TEXT,
  POSTAL_CODE TEXT,
  CITY TEXT,
  STATE_PROVINCE TEXT,
  COUNTRY_ID TEXT,
  FOREIGN KEY (COUNTRY_ID) REFERENCES countries(COUNTRY_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the country where the city of "Sydney" is located?
-- How many employees work in the marketing department?
-- How many employees work in the sales department in the USA?
-- What is the average salary of employees in the sales department?
-- What is the total number of employees in the marketing department who work in the Asia-Pacific region?
------------------------------------------------------------------------------------------
database_id: soccer_1
database schema :
CREATE TABLE Player_Attributes (
  id INTEGER PRIMARY KEY,
  player_fifa_api_id INTEGER,
  player_api_id INTEGER,
  date TEXT,
  overall_rating REAL,
  potential REAL,
  preferred_foot TEXT,
  attacking_work_rate TEXT,
  defensive_work_rate TEXT,
  crossing REAL,
  finishing REAL,
  heading_accuracy REAL,
  short_passing REAL,
  volleys REAL,
  dribbling REAL,
  curve REAL,
  free_kick_accuracy REAL,
  long_passing REAL,
  ball_control REAL,
  acceleration REAL,
  sprint_speed REAL,
  agility REAL,
  reactions REAL,
  balance REAL,
  shot_power REAL,
  jumping REAL,
  stamina REAL,
  strength REAL,
  long_shots REAL,
  aggression REAL,
  interceptions REAL,
  positioning REAL,
  vision REAL,
  penalties REAL,
  marking REAL,
  standing_tackle REAL,
  sliding_tackle REAL,
  gk_diving REAL,
  gk_handling REAL,
  gk_kicking REAL,
  gk_positioning REAL,
  gk_reflexes REAL,
  FOREIGN KEY (player_api_id) REFERENCES Player(player_api_id),
  FOREIGN KEY (player_fifa_api_id) REFERENCES Player(player_fifa_api_id)
);

CREATE TABLE sqlite_sequence (
  name TEXT,
  seq TEXT
);

CREATE TABLE Player (
  id INTEGER PRIMARY KEY,
  player_api_id REAL,
  player_name TEXT,
  player_fifa_api_id REAL,
  birthday TEXT,
  height REAL,
  weight REAL
);

CREATE TABLE League (
  id INTEGER PRIMARY KEY,
  country_id INTEGER,
  name TEXT,
  FOREIGN KEY (country_id) REFERENCES Country(id)
);

CREATE TABLE Country (
  id INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE Team (
  id INTEGER PRIMARY KEY,
  team_api_id REAL,
  team_fifa_api_id REAL,
  team_long_name TEXT,
  team_short_name TEXT
);

CREATE TABLE Team_Attributes (
  id INTEGER PRIMARY KEY,
  team_fifa_api_id INTEGER,
  team_api_id INTEGER,
  date TEXT,
  buildUpPlaySpeed REAL,
  buildUpPlaySpeedClass TEXT,
  buildUpPlayDribbling REAL,
  buildUpPlayDribblingClass TEXT,
  buildUpPlayPassing REAL,
  buildUpPlayPassingClass TEXT,
  buildUpPlayPositioningClass TEXT,
  chanceCreationPassing REAL,
  chanceCreationPassingClass TEXT,
  chanceCreationCrossing REAL,
  chanceCreationCrossingClass TEXT,
  chanceCreationShooting REAL,
  chanceCreationShootingClass TEXT,
  chanceCreationPositioningClass TEXT,
  defencePressure REAL,
  defencePressureClass TEXT,
  defenceAggression REAL,
  defenceAggressionClass TEXT,
  defenceTeamWidth REAL,
  defenceTeamWidthClass TEXT,
  defenceDefenderLineClass TEXT,
  FOREIGN KEY (team_api_id) REFERENCES Team(team_api_id),
  FOREIGN KEY (team_fifa_api_id) REFERENCES Team(team_fifa_api_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM Player_Attributes WHERE date LIKE '2017%' AND preferred_foot LIKE 'Left'
-- SELECT COUNT(*) FROM Player_Attributes WHERE potential > 80 AND defensive_work_rate LIKE 'Medium'
-- SELECT COUNT(*) FROM Team_Attributes WHERE date LIKE '2017%' AND buildUpPlaySpeed > 60
-- SELECT COUNT(*) FROM Player_Attributes WHERE preferred_foot LIKE 'Right' AND acceleration > 70 AND agility > 70
-- SELECT COUNT(*) FROM Player_Attributes WHERE date LIKE '2018%' AND overall_rating > 80 AND standing_tackle > 50 AND stamina > 60 AND gk_reflexes > 50
------------------------------------------------------------------------------------------
database_id: sakila_1
database schema :
CREATE TABLE actor (
  actor_id INTEGER PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  last_update DATETIME
);

CREATE TABLE address (
  address_id INTEGER PRIMARY KEY,
  address TEXT,
  address2 TEXT,
  district TEXT,
  city_id INTEGER,
  postal_code TEXT,
  phone TEXT,
  last_update DATETIME,
  FOREIGN KEY (city_id) REFERENCES city(city_id)
);

CREATE TABLE category (
  category_id INTEGER PRIMARY KEY,
  name TEXT,
  last_update DATETIME
);

CREATE TABLE city (
  city_id INTEGER PRIMARY KEY,
  city TEXT,
  country_id INTEGER,
  last_update DATETIME,
  FOREIGN KEY (country_id) REFERENCES country(country_id)
);

CREATE TABLE country (
  country_id INTEGER PRIMARY KEY,
  country TEXT,
  last_update DATETIME
);

CREATE TABLE customer (
  customer_id INTEGER PRIMARY KEY,
  store_id INTEGER,
  first_name TEXT,
  last_name TEXT,
  email TEXT,
  address_id INTEGER,
  active BOOLEAN,
  create_date DATETIME,
  last_update DATETIME,
  FOREIGN KEY (store_id) REFERENCES store(store_id),
  FOREIGN KEY (address_id) REFERENCES address(address_id)
);

CREATE TABLE film (
  film_id INTEGER PRIMARY KEY,
  title TEXT,
  description TEXT,
  release_year DATETIME,
  language_id INTEGER,
  original_language_id INTEGER,
  rental_duration REAL,
  rental_rate REAL,
  length REAL,
  replacement_cost REAL,
  rating TEXT,
  special_features TEXT,
  last_update DATETIME,
  FOREIGN KEY (original_language_id) REFERENCES language(language_id),
  FOREIGN KEY (language_id) REFERENCES language(language_id)
);

CREATE TABLE film_actor (
  actor_id INTEGER PRIMARY KEY,
  film_id INTEGER,
  last_update DATETIME,
  FOREIGN KEY (film_id) REFERENCES film(film_id),
  FOREIGN KEY (actor_id) REFERENCES actor(actor_id)
);

CREATE TABLE film_category (
  film_id INTEGER PRIMARY KEY,
  category_id INTEGER,
  last_update DATETIME,
  FOREIGN KEY (category_id) REFERENCES category(category_id),
  FOREIGN KEY (film_id) REFERENCES film(film_id)
);

CREATE TABLE film_text (
  film_id INTEGER PRIMARY KEY,
  title TEXT,
  description TEXT
);

CREATE TABLE inventory (
  inventory_id INTEGER PRIMARY KEY,
  film_id INTEGER,
  store_id INTEGER,
  last_update DATETIME,
  FOREIGN KEY (film_id) REFERENCES film(film_id),
  FOREIGN KEY (store_id) REFERENCES store(store_id)
);

CREATE TABLE language (
  language_id INTEGER PRIMARY KEY,
  name TEXT,
  last_update DATETIME
);

CREATE TABLE payment (
  payment_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  staff_id INTEGER,
  rental_id INTEGER,
  amount REAL,
  payment_date DATETIME,
  last_update DATETIME,
  FOREIGN KEY (staff_id) REFERENCES staff(staff_id),
  FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
  FOREIGN KEY (rental_id) REFERENCES rental(rental_id)
);

CREATE TABLE rental (
  rental_id INTEGER PRIMARY KEY,
  rental_date DATETIME,
  inventory_id INTEGER,
  customer_id INTEGER,
  return_date DATETIME,
  staff_id INTEGER,
  last_update DATETIME,
  FOREIGN KEY (customer_id) REFERENCES customer(customer_id),
  FOREIGN KEY (inventory_id) REFERENCES inventory(inventory_id),
  FOREIGN KEY (staff_id) REFERENCES staff(staff_id)
);

CREATE TABLE staff (
  staff_id INTEGER PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  address_id INTEGER,
  picture TEXT,
  email TEXT,
  store_id REAL,
  active BOOLEAN,
  username TEXT,
  password TEXT,
  last_update DATETIME,
  FOREIGN KEY (address_id) REFERENCES address(address_id)
);

CREATE TABLE store (
  store_id INTEGER PRIMARY KEY,
  manager_staff_id INTEGER,
  address_id INTEGER,
  last_update DATETIME,
  FOREIGN KEY (address_id) REFERENCES address(address_id),
  FOREIGN KEY (manager_staff_id) REFERENCES staff(staff_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What are the names of all the cities that have a country id of 1?
-- What are the titles of all the films that have a release year of 2006?
-- What is the average number of customers in each city, grouped by city?
-- What are the top 5 cities with the most number of customers?
-- What is the average rental duration of films rated as "G" and "PG"?
------------------------------------------------------------------------------------------
database_id: real_estate_properties
database schema :
CREATE TABLE Ref_Feature_Types (
  feature_type_code TEXT PRIMARY KEY,
  feature_type_name TEXT
);

CREATE TABLE Ref_Property_Types (
  property_type_code TEXT PRIMARY KEY,
  property_type_description TEXT
);

CREATE TABLE Other_Available_Features (
  feature_id INTEGER PRIMARY KEY,
  feature_type_code TEXT,
  feature_name TEXT,
  feature_description TEXT,
  FOREIGN KEY (feature_type_code) REFERENCES Ref_Feature_Types(feature_type_code)
);

CREATE TABLE Properties (
  property_id INTEGER PRIMARY KEY,
  property_type_code TEXT,
  date_on_market DATETIME,
  date_sold DATETIME,
  property_name TEXT,
  property_address TEXT,
  room_count REAL,
  vendor_requested_price REAL,
  buyer_offered_price REAL,
  agreed_selling_price REAL,
  apt_feature_1 TEXT,
  apt_feature_2 TEXT,
  apt_feature_3 TEXT,
  fld_feature_1 TEXT,
  fld_feature_2 TEXT,
  fld_feature_3 TEXT,
  hse_feature_1 TEXT,
  hse_feature_2 TEXT,
  hse_feature_3 TEXT,
  oth_feature_1 TEXT,
  oth_feature_2 TEXT,
  oth_feature_3 TEXT,
  shp_feature_1 TEXT,
  shp_feature_2 TEXT,
  shp_feature_3 TEXT,
  other_property_details TEXT,
  FOREIGN KEY (property_type_code) REFERENCES Ref_Property_Types(property_type_code)
);

CREATE TABLE Other_Property_Features (
  property_id INTEGER,
  feature_id INTEGER,
  property_feature_description TEXT,
  FOREIGN KEY (property_id) REFERENCES Properties(property_id),
  FOREIGN KEY (feature_id) REFERENCES Other_Available_Features(feature_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of properties that are on the market for more than 90 days?
-- What are the names of the features that are not provided for a house with a property type code of 'HSE'?
-- SELECT T1.feature_name FROM Other_Available_Features AS T1 INNER JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code = T2.feature_type_code WHERE T2.feature_type_name = 'FLOOR PLAN' AND T1.feature_name = 'Elevated'
-- SELECT T2.property_type_description FROM Properties AS T1 INNER JOIN Ref_Property_Types AS T2 ON T1.property_type_code = T2.property_type_code WHERE T1.property_name = 'MyHouse'
-- SELECT T3.feature_name FROM Properties AS T1 INNER JOIN Other_Property_Features AS T2 ON T1.property_id = T2.property_id INNER JOIN Other_Available_Features AS T3 ON T2.feature_id = T3.feature_id WHERE T1.property_address LIKE '123 Main St' AND T2.property_feature_description = 'Feature 2'
------------------------------------------------------------------------------------------
database_id: college_3
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Faculty (
  FacID INTEGER PRIMARY KEY,
  Lname TEXT,
  Fname TEXT,
  Rank TEXT,
  Sex TEXT,
  Phone REAL,
  Room TEXT,
  Building TEXT
);

CREATE TABLE Department (
  DNO INTEGER PRIMARY KEY,
  Division TEXT,
  DName TEXT,
  Room TEXT,
  Building TEXT,
  DPhone REAL
);

CREATE TABLE Member_of (
  FacID INTEGER,
  DNO INTEGER,
  Appt_Type TEXT,
  FOREIGN KEY (DNO) REFERENCES Department(DNO),
  FOREIGN KEY (FacID) REFERENCES Faculty(FacID)
);

CREATE TABLE Course (
  CID TEXT PRIMARY KEY,
  CName TEXT,
  Credits REAL,
  Instructor INTEGER,
  Days TEXT,
  Hours TEXT,
  DNO INTEGER,
  FOREIGN KEY (DNO) REFERENCES Department(DNO),
  FOREIGN KEY (Instructor) REFERENCES Faculty(FacID)
);

CREATE TABLE Minor_in (
  StuID INTEGER,
  DNO INTEGER,
  FOREIGN KEY (DNO) REFERENCES Department(DNO),
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

CREATE TABLE Enrolled_in (
  StuID INTEGER,
  CID TEXT,
  Grade TEXT,
  FOREIGN KEY (Grade) REFERENCES Gradeconversion(lettergrade),
  FOREIGN KEY (CID) REFERENCES Course(CID),
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

CREATE TABLE Gradeconversion (
  lettergrade TEXT PRIMARY KEY,
  gradepoint REAL
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM Student WHERE Age > 20
-- SELECT * FROM Student WHERE LName = 'Smith' AND Fname = 'John'
-- SELECT D.DName FROM Department AS D JOIN Member_of AS M ON D.DNO = M.DNO WHERE M.FacID = 123
-- SELECT F.Fname FROM Faculty AS F WHERE F.Rank = 'assistant professor'
-- SELECT SUM(Credits) FROM Course WHERE DNO IN (SELECT DNO FROM Department WHERE DName = 'Computer Science') AND Instructor IN (SELECT FacID FROM Faculty WHERE Lname = 'Kim') AND Credits > 3  AND Days LIKE 'M%'  AND Hours LIKE '10%'  AND CID IN (SELECT CID FROM Enrolled_in WHERE StuID = 456)  AND CID IN (SELECT CID FROM Course WHERE Instructor IN (SELECT FacID FROM Faculty WHERE Fname = 'Michael'))  AND CID IN (SELECT CID FROM Course WHERE Instructor IN (SELECT FacID FROM Faculty WHERE Sex = 'F'))  AND CID IN (SELECT CID FROM Course WHERE Instructor IN (SELECT FacID FROM Faculty WHERE Rank = 'assistant professor'))  AND CID IN (SELECT CID FROM Course
------------------------------------------------------------------------------------------
database_id: course_teach
database schema :
CREATE TABLE course (
  Course_ID INTEGER PRIMARY KEY,
  Staring_Date TEXT,
  Course TEXT
);

CREATE TABLE teacher (
  Teacher_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Age TEXT,
  Hometown TEXT
);

CREATE TABLE course_arrange (
  Course_ID INTEGER PRIMARY KEY,
  Teacher_ID INTEGER,
  Grade REAL,
  FOREIGN KEY (Teacher_ID) REFERENCES teacher(Teacher_ID),
  FOREIGN KEY (Course_ID) REFERENCES course(Course_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the teacher who taught the course with ID 101?
-- What is the average age of the teachers who taught courses that started in the year 2010?
-- What is the total number of courses taught by teachers from the city of 'New York'?
-- Which courses started before the year 2015 and have a grade of 3.5 or higher?
-- What is the name of the teacher who has the most courses taught?  (Hint: You'll need a subquery for this one)  ]
------------------------------------------------------------------------------------------
database_id: roller_coaster
database schema :
CREATE TABLE roller_coaster (
  Roller_Coaster_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Park TEXT,
  Country_ID INTEGER,
  Length REAL,
  Height REAL,
  Speed TEXT,
  Opened TEXT,
  Status TEXT,
  FOREIGN KEY (Country_ID) REFERENCES country(Country_ID)
);

CREATE TABLE country (
  Country_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Population REAL,
  Area REAL,
  Languages TEXT
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average height of roller coasters in the United States?
-- What roller coasters have a speed greater than 90 km/h and are located in the country with the highest population?
-- How many roller coasters are there in total, and what is the average height of the roller coasters in the top 3 countries by population?
-- What are the names of the roller coasters that are still open and have a length greater than 5 km in the country with the lowest population?
-- What roller coasters have a speed of at least 100 km/h and are located in a country with a population less than 100 million?  ``` ```
------------------------------------------------------------------------------------------
database_id: customer_deliveries
database schema :
CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  product_name TEXT,
  product_price REAL,
  product_description TEXT
);

CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  address_details TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  payment_method TEXT,
  customer_name TEXT,
  customer_phone TEXT,
  customer_email TEXT,
  date_became_customer DATETIME
);

CREATE TABLE Regular_Orders (
  regular_order_id INTEGER PRIMARY KEY,
  distributer_id INTEGER,
  FOREIGN KEY (distributer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Regular_Order_Products (
  regular_order_id INTEGER,
  product_id INTEGER,
  FOREIGN KEY (regular_order_id) REFERENCES Regular_Orders(regular_order_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Actual_Orders (
  actual_order_id INTEGER PRIMARY KEY,
  order_status_code TEXT,
  regular_order_id INTEGER,
  actual_order_date DATETIME,
  FOREIGN KEY (regular_order_id) REFERENCES Regular_Orders(regular_order_id)
);

CREATE TABLE Actual_Order_Products (
  actual_order_id INTEGER,
  product_id INTEGER,
  FOREIGN KEY (actual_order_id) REFERENCES Actual_Orders(actual_order_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

CREATE TABLE Customer_Addresses (
  customer_id INTEGER,
  address_id INTEGER,
  date_from DATETIME,
  address_type TEXT,
  date_to DATETIME,
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id),
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Delivery_Routes (
  route_id INTEGER PRIMARY KEY,
  route_name TEXT,
  other_route_details TEXT
);

CREATE TABLE Delivery_Route_Locations (
  location_code TEXT PRIMARY KEY,
  route_id INTEGER,
  location_address_id INTEGER,
  location_name TEXT,
  FOREIGN KEY (route_id) REFERENCES Delivery_Routes(route_id),
  FOREIGN KEY (location_address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Trucks (
  truck_id INTEGER PRIMARY KEY,
  truck_licence_number TEXT,
  truck_details TEXT
);

CREATE TABLE Employees (
  employee_id INTEGER PRIMARY KEY,
  employee_address_id INTEGER,
  employee_name TEXT,
  employee_phone TEXT,
  FOREIGN KEY (employee_address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Order_Deliveries (
  location_code TEXT,
  actual_order_id INTEGER,
  delivery_status_code TEXT,
  driver_employee_id INTEGER,
  truck_id INTEGER,
  delivery_date DATETIME,
  FOREIGN KEY (driver_employee_id) REFERENCES Employees(employee_id),
  FOREIGN KEY (location_code) REFERENCES Delivery_Route_Locations(location_code),
  FOREIGN KEY (actual_order_id) REFERENCES Actual_Orders(actual_order_id),
  FOREIGN KEY (truck_id) REFERENCES Trucks(truck_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the product with product_id 5?
-- Which customers have made at least one purchase after 2023-03-01?
-- What are the details of the address with city "New York"?
-- How many actual orders were made by the customer with customer_id 4 on 2023-01-01?
-- What is the name of the truck with truck_id 5?    ]
------------------------------------------------------------------------------------------
database_id: game_injury
database schema :
CREATE TABLE stadium (
  id INTEGER PRIMARY KEY,
  name TEXT,
  Home_Games REAL,
  Average_Attendance REAL,
  Total_Attendance REAL,
  Capacity_Percentage REAL
);

CREATE TABLE game (
  stadium_id INTEGER,
  id INTEGER PRIMARY KEY,
  Season REAL,
  Date TEXT,
  Home_team TEXT,
  Away_team TEXT,
  Score TEXT,
  Competition TEXT,
  FOREIGN KEY (stadium_id) REFERENCES stadium(id)
);

CREATE TABLE injury_accident (
  game_id INTEGER,
  id INTEGER PRIMARY KEY,
  Player TEXT,
  Injury TEXT,
  Number_of_matches TEXT,
  Source TEXT,
  FOREIGN KEY (game_id) REFERENCES game(id)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many games has a stadium with average attendance more than 15000?
-- What is the name of the stadium with the highest total attendance?
-- What is the number of games where a player named 'John' was injured?
-- Which stadium has the most home games with a competition of 'Premier League'?
-- What is the average attendance of stadiums with a capacity percentage greater than 70%?  Select the result rounded to the nearest whole number.  Join the table `stadium` with the `game` table to answer this question.  Exclude stadiums with no home games.  Only include games played in the 2015 season.  Use a subquery or join.  Use the AVG aggregation function.  Make sure to handle division by zero.  Group by the result of the AVG function to ensure that the result is rounded to the nearest whole number.  Include the stadium id in the result.  Order the result by the average attendance in descending order.  Exclude any stadiums with no games played in the 2015 season.  Exclude any stadiums with no home games.  Exclude any games played in the 2015 season.  Exclude any stadiums with no home
------------------------------------------------------------------------------------------
database_id: school_finance
database schema :
CREATE TABLE School (
  School_id TEXT PRIMARY KEY,
  School_name TEXT,
  Location TEXT,
  Mascot TEXT,
  Enrollment REAL,
  IHSAA_Class TEXT,
  IHSAA_Football_Class TEXT,
  County TEXT
);

CREATE TABLE budget (
  School_id INTEGER PRIMARY KEY,
  Year REAL,
  Budgeted REAL,
  total_budget_percent_budgeted REAL,
  Invested REAL,
  total_budget_percent_invested REAL,
  Budget_invested_percent TEXT,
  FOREIGN KEY (School_id) REFERENCES School(School_id)
);

CREATE TABLE endowment (
  endowment_id INTEGER PRIMARY KEY,
  School_id INTEGER,
  donator_name TEXT,
  amount REAL,
  FOREIGN KEY (School_id) REFERENCES School(School_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many schools have a football IHSAA Class of A?
-- What is the total number of schools in the database?
-- What is the average budget invested percentage for schools in IHSAA Class A?
-- How many schools have an endowment with a donator name starting with the letter 'A'?
-- What is the total budget for a school with an enrollment of 500 in the year 2020?  SELECT t2.Budgeted FROM budget AS t2  JOIN School AS t1 ON t2.School_id = t1.School_id WHERE t1.Enrollment = 500 AND t2.Year = 2020
------------------------------------------------------------------------------------------
database_id: scholar
database schema :
CREATE TABLE venue (
  venueId INTEGER PRIMARY KEY,
  venueName TEXT
);

CREATE TABLE author (
  authorId INTEGER PRIMARY KEY,
  authorName TEXT
);

CREATE TABLE dataset (
  datasetId INTEGER PRIMARY KEY,
  datasetName TEXT
);

CREATE TABLE journal (
  journalId INTEGER PRIMARY KEY,
  journalName TEXT
);

CREATE TABLE keyphrase (
  keyphraseId INTEGER PRIMARY KEY,
  keyphraseName TEXT
);

CREATE TABLE paper (
  paperId INTEGER PRIMARY KEY,
  title TEXT,
  venueId INTEGER,
  year REAL,
  numCiting REAL,
  numCitedBy REAL,
  journalId INTEGER,
  FOREIGN KEY (venueId) REFERENCES venue(venueId),
  FOREIGN KEY (journalId) REFERENCES journal(journalId)
);

CREATE TABLE cite (
  citingPaperId INTEGER PRIMARY KEY,
  citedPaperId INTEGER,
  FOREIGN KEY (citingPaperId) REFERENCES paper(paperId),
  FOREIGN KEY (citedPaperId) REFERENCES paper(paperId)
);

CREATE TABLE paperDataset (
  paperId REAL,
  datasetId INTEGER PRIMARY KEY
);

CREATE TABLE paperKeyphrase (
  paperId INTEGER,
  keyphraseId INTEGER PRIMARY KEY,
  FOREIGN KEY (keyphraseId) REFERENCES keyphrase(keyphraseId),
  FOREIGN KEY (paperId) REFERENCES paper(paperId)
);

CREATE TABLE writes (
  paperId INTEGER PRIMARY KEY,
  authorId INTEGER,
  FOREIGN KEY (authorId) REFERENCES author(authorId),
  FOREIGN KEY (paperId) REFERENCES paper(paperId)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(T1.paperId) FROM writes AS T1 INNER JOIN paper AS T2 ON T1.paperId = T2.paperId WHERE T2.journalId = 4 AND T2.venueId = 3 AND T1.authorId = 6;
-- SELECT t2.authorName FROM writes AS t1 JOIN author AS t2 ON t1.authorId  =  t2.authorId WHERE t1.paperId  =  ( SELECT paperId FROM paper WHERE title  =  "A Study on the Impact of Climate Change on Biodiversity" );
-- SELECT t2.journalName FROM writes AS t1 JOIN journal AS t2 ON t1.paperId  =  t2.journalId WHERE t1.authorId  =  ( SELECT authorId FROM author WHERE authorName  =  "John Doe" );
-- SELECT COUNT ( DISTINCT t2.paperId ) FROM writes AS t1 JOIN paper AS t2 ON t1.paperId  =  t2.paperId WHERE t2.year  =  2010 AND t1.authorId  =  ( SELECT authorId FROM author WHERE authorName  =  "Jane Smith" );
-- SELECT t3.keyphraseName FROM writes AS t1 JOIN paper AS t2 ON t1.paperId  =  t2.paperId JOIN paperKeyphrase AS t3 ON t2.paperId  =  t3.paperId WHERE t2.title  =  "A Study on the Impact
------------------------------------------------------------------------------------------
database_id: voter_1
database schema :
CREATE TABLE AREA_CODE_STATE (
  area_code INTEGER PRIMARY KEY,
  state TEXT
);

CREATE TABLE CONTESTANTS (
  contestant_number INTEGER PRIMARY KEY,
  contestant_name TEXT
);

CREATE TABLE VOTES (
  vote_id INTEGER PRIMARY KEY,
  phone_number REAL,
  state TEXT,
  contestant_number INTEGER,
  created DATETIME,
  FOREIGN KEY (contestant_number) REFERENCES CONTESTANTS(contestant_number),
  FOREIGN KEY (state) REFERENCES AREA_CODE_STATE(state)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many votes were cast for contestants in the state of California?
-- What are the names of the top 3 contestants with the most votes?
-- In what year were the most votes cast for contestants in the state of Florida?
-- What is the name of the contestant who received the most votes in the state of New York?
-- How many different states have contestants with more than 100 votes?
------------------------------------------------------------------------------------------
database_id: match_season
database schema :
CREATE TABLE country (
  Country_id INTEGER PRIMARY KEY,
  Country_name TEXT,
  Capital TEXT,
  Official_native_language TEXT
);

CREATE TABLE team (
  Team_id INTEGER PRIMARY KEY,
  Name TEXT
);

CREATE TABLE match_season (
  Season INTEGER PRIMARY KEY,
  Player TEXT,
  Position TEXT,
  Country INTEGER,
  Team INTEGER,
  Draft_Pick_Number REAL,
  Draft_Class TEXT,
  College TEXT,
  FOREIGN KEY (Team) REFERENCES team(Team_id),
  FOREIGN KEY (Country) REFERENCES country(Country_id)
);

CREATE TABLE player (
  Player_ID INTEGER PRIMARY KEY,
  Player TEXT,
  Years_Played TEXT,
  Total_WL TEXT,
  Singles_WL TEXT,
  Doubles_WL TEXT,
  Team INTEGER,
  FOREIGN KEY (Team) REFERENCES team(Team_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the total number of players from the United States?
-- What is the average number of years played by tennis players who have played for the New York Red Bulls and have a winning record in singles?
-- What is the name of the team that played against 'Team A' in the 2015 season?
-- What is the total number of players from country 'Australia' that played in the 2015 season?
------------------------------------------------------------------------------------------
database_id: small_bank_1
database schema :
CREATE TABLE ACCOUNTS (
  custid INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE SAVINGS (
  custid INTEGER PRIMARY KEY,
  balance REAL,
  FOREIGN KEY (custid) REFERENCES ACCOUNTS(custid)
);

CREATE TABLE CHECKING (
  custid INTEGER PRIMARY KEY,
  balance REAL,
  FOREIGN KEY (custid) REFERENCES ACCOUNTS(custid)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many customers have accounts in both savings and checking?
-- What is the average balance of customers with more than $1000 in savings?
-- What is the name of the customer with the highest balance in checking?
-- How many customers have a savings balance greater than $500 and a checking balance less than $200?
-- What is the total balance of all savings accounts for customers who have both savings and checking accounts?
------------------------------------------------------------------------------------------
database_id: wta_1
database schema :
CREATE TABLE players (
  player_id INTEGER PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  hand TEXT,
  birth_date DATETIME,
  country_code TEXT
);

CREATE TABLE matches (
  best_of REAL,
  draw_size REAL,
  loser_age REAL,
  loser_entry TEXT,
  loser_hand TEXT,
  loser_ht REAL,
  loser_id INTEGER,
  loser_ioc TEXT,
  loser_name TEXT,
  loser_rank REAL,
  loser_rank_points REAL,
  loser_seed REAL,
  match_num REAL,
  minutes REAL,
  round TEXT,
  score TEXT,
  surface TEXT,
  tourney_date DATETIME,
  tourney_id TEXT,
  tourney_level TEXT,
  tourney_name TEXT,
  winner_age REAL,
  winner_entry TEXT,
  winner_hand TEXT,
  winner_ht REAL,
  winner_id INTEGER,
  winner_ioc TEXT,
  winner_name TEXT,
  winner_rank REAL,
  winner_rank_points REAL,
  winner_seed REAL,
  year REAL,
  FOREIGN KEY (winner_id) REFERENCES players(player_id),
  FOREIGN KEY (loser_id) REFERENCES players(player_id)
);

CREATE TABLE rankings (
  ranking_date DATETIME,
  ranking REAL,
  player_id INTEGER,
  ranking_points REAL,
  tours REAL,
  FOREIGN KEY (player_id) REFERENCES players(player_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM players WHERE hand = 'right';
-- SELECT COUNT(DISTINCT winner_name) FROM matches WHERE winner_rank = 1;
-- SELECT COUNT(*) FROM players AS p
-- SELECT COUNT(*) FROM rankings AS r
-- SELECT COUNT(DISTINCT loser_name) FROM matches WHERE loser_hand = 'left' AND tourney_name LIKE '%Grand%';
------------------------------------------------------------------------------------------
database_id: yelp
database schema :
CREATE TABLE business (
  bid INTEGER PRIMARY KEY,
  business_id TEXT,
  name TEXT,
  full_address TEXT,
  city TEXT,
  latitude TEXT,
  longitude TEXT,
  review_count REAL,
  is_open REAL,
  rating REAL,
  state TEXT
);

CREATE TABLE category (
  id INTEGER PRIMARY KEY,
  business_id TEXT,
  category_name TEXT,
  FOREIGN KEY (business_id) REFERENCES business(business_id)
);

CREATE TABLE user (
  uid INTEGER PRIMARY KEY,
  user_id TEXT,
  name TEXT
);

CREATE TABLE checkin (
  cid INTEGER PRIMARY KEY,
  business_id TEXT,
  count REAL,
  day TEXT,
  FOREIGN KEY (business_id) REFERENCES business(business_id)
);

CREATE TABLE neighbourhood (
  id INTEGER PRIMARY KEY,
  business_id TEXT,
  neighbourhood_name TEXT,
  FOREIGN KEY (business_id) REFERENCES business(business_id)
);

CREATE TABLE review (
  rid INTEGER PRIMARY KEY,
  business_id TEXT,
  user_id TEXT,
  rating REAL,
  text TEXT,
  year REAL,
  month TEXT,
  FOREIGN KEY (user_id) REFERENCES user(user_id),
  FOREIGN KEY (business_id) REFERENCES business(business_id)
);

CREATE TABLE tip (
  tip_id INTEGER PRIMARY KEY,
  business_id TEXT,
  text TEXT,
  user_id TEXT,
  likes REAL,
  year REAL,
  month TEXT,
  FOREIGN KEY (user_id) REFERENCES user(user_id),
  FOREIGN KEY (business_id) REFERENCES business(business_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many businesses in the city of 'San Francisco' have a rating higher than 3?
-- What is the average rating of all the businesses that have been reviewed by users from 'New York'?
-- How many businesses in the city of 'Los Angeles' have at least 100 check-ins?
-- Which category has the most businesses in the city of 'Chicago'?
-- What is the total number of reviews written by users who have given a rating of 5 to at least one business in the city of 'Boston'?  ```sql
------------------------------------------------------------------------------------------
database_id: student_1
database schema :
CREATE TABLE list (
  LastName TEXT PRIMARY KEY,
  FirstName TEXT,
  Grade REAL,
  Classroom REAL
);

CREATE TABLE teachers (
  LastName TEXT PRIMARY KEY,
  FirstName TEXT,
  Classroom REAL
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average grade of students in classroom 5?
-- How many students are in the same classroom as Mr. Smith?
-- What is the number of unique classrooms taught by teachers?
-- What is the number of students with the last name 'Johnson' and a grade of 8?
-- Which teachers have more than one classroom assigned to them?  SELECT T1.LastName, T2.Classroom FROM teachers AS T1 INNER JOIN list AS T2 ON T1.Classroom = T2.Classroom GROUP BY T1.LastName HAVING COUNT(T2.Classroom) > 1;  -- SQL Answer
------------------------------------------------------------------------------------------
database_id: manufacturer
database schema :
CREATE TABLE manufacturer (
  Manufacturer_ID INTEGER PRIMARY KEY,
  Open_Year REAL,
  Name TEXT,
  Num_of_Factories REAL,
  Num_of_Shops REAL
);

CREATE TABLE furniture (
  Furniture_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Num_of_Component REAL,
  Market_Rate REAL
);

CREATE TABLE furniture_manufacte (
  Manufacturer_ID INTEGER PRIMARY KEY,
  Furniture_ID INTEGER,
  Price_in_Dollar REAL,
  FOREIGN KEY (Furniture_ID) REFERENCES furniture(Furniture_ID),
  FOREIGN KEY (Manufacturer_ID) REFERENCES manufacturer(Manufacturer_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average market rate of all the furniture manufactured by the companies that have more than 2 factories?
-- What is the total number of shops in all the factories of companies that have more than one factory?
-- SELECT name FROM manufacturer WHERE num_of_factories > 0 AND num_of_shops = 0 AND open_year < 1990;
-- SELECT name FROM manufacturer WHERE num_of_factories > 0 AND num_of_shops > 0 AND num_of_factories > num_of_shops;
-- SELECT name FROM manufacturer WHERE num_of_factories > 0 AND num_of_factories < 20 AND num_of_shops < 0;
------------------------------------------------------------------------------------------
database_id: store_1
database schema :
CREATE TABLE artists (
  id INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE sqlite_sequence (
  name TEXT,
  seq TEXT
);

CREATE TABLE albums (
  id INTEGER PRIMARY KEY,
  title TEXT,
  artist_id INTEGER,
  FOREIGN KEY (artist_id) REFERENCES artists(id)
);

CREATE TABLE employees (
  id INTEGER PRIMARY KEY,
  last_name TEXT,
  first_name TEXT,
  title TEXT,
  reports_to INTEGER,
  birth_date DATETIME,
  hire_date DATETIME,
  address TEXT,
  city TEXT,
  state TEXT,
  country TEXT,
  postal_code TEXT,
  phone TEXT,
  fax TEXT,
  email TEXT,
  FOREIGN KEY (reports_to) REFERENCES employees(id)
);

CREATE TABLE customers (
  id INTEGER PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  company TEXT,
  address TEXT,
  city TEXT,
  state TEXT,
  country TEXT,
  postal_code TEXT,
  phone TEXT,
  fax TEXT,
  email TEXT,
  support_rep_id INTEGER,
  FOREIGN KEY (support_rep_id) REFERENCES employees(id)
);

CREATE TABLE genres (
  id INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE invoices (
  id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  invoice_date DATETIME,
  billing_address TEXT,
  billing_city TEXT,
  billing_state TEXT,
  billing_country TEXT,
  billing_postal_code TEXT,
  total REAL,
  FOREIGN KEY (customer_id) REFERENCES customers(id)
);

CREATE TABLE media_types (
  id INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE tracks (
  id INTEGER PRIMARY KEY,
  name TEXT,
  album_id INTEGER,
  media_type_id INTEGER,
  genre_id INTEGER,
  composer TEXT,
  milliseconds REAL,
  bytes REAL,
  unit_price REAL,
  FOREIGN KEY (media_type_id) REFERENCES media_types(id),
  FOREIGN KEY (genre_id) REFERENCES genres(id),
  FOREIGN KEY (album_id) REFERENCES albums(id)
);

CREATE TABLE invoice_lines (
  id INTEGER PRIMARY KEY,
  invoice_id INTEGER,
  track_id INTEGER,
  unit_price REAL,
  quantity REAL,
  FOREIGN KEY (track_id) REFERENCES tracks(id),
  FOREIGN KEY (invoice_id) REFERENCES invoices(id)
);

CREATE TABLE playlists (
  id INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE playlist_tracks (
  playlist_id INTEGER PRIMARY KEY,
  track_id INTEGER,
  FOREIGN KEY (track_id) REFERENCES tracks(id),
  FOREIGN KEY (playlist_id) REFERENCES playlists(id)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(T1.name) FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T1.title LIKE '%Sales%' AND T2.country = 'USA' AND T1.hire_date > '1990-01-01';
-- SELECT COUNT(T1.name) FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T1.title LIKE '%Sales%' AND T2.country = 'USA' AND T1.hire_date > '1990-01-01' AND T1.first_name LIKE 'J%' AND T1.last_name LIKE 'Smith';  SELECT COUNT(T1.id) FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T1.title LIKE '%Sales%' AND T2.country = 'USA' AND T1.hire_date > '1990-01-01' AND T1.first_name LIKE 'J%' AND T1.last_name LIKE 'Smith';  SELECT COUNT(T1.id) FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id
------------------------------------------------------------------------------------------
database_id: train_station
database schema :
CREATE TABLE station (
  Station_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Annual_entry_exit REAL,
  Annual_interchanges REAL,
  Total_Passengers REAL,
  Location TEXT,
  Main_Services TEXT,
  Number_of_Platforms REAL
);

CREATE TABLE train (
  Train_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Time TEXT,
  Service TEXT
);

CREATE TABLE train_station (
  Train_ID INTEGER PRIMARY KEY,
  Station_ID INTEGER,
  FOREIGN KEY (Station_ID) REFERENCES station(Station_ID),
  FOREIGN KEY (Train_ID) REFERENCES train(Train_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of total passengers for stations in London?
-- How many stations have more than 500 interchanges and more than 200,000 passengers?
-- What is the number of trains that stop at least 3 stations in London?
-- What is the number of stations that have a total number of platforms less than 10?
-- What is the average annual entry-exit number for stations that have a total number of passengers less than 100,000?  1
------------------------------------------------------------------------------------------
database_id: document_management
database schema :
CREATE TABLE Roles (
  role_code TEXT PRIMARY KEY,
  role_description TEXT
);

CREATE TABLE Users (
  user_id INTEGER PRIMARY KEY,
  role_code TEXT,
  user_name TEXT,
  user_login TEXT,
  password TEXT,
  FOREIGN KEY (role_code) REFERENCES Roles(role_code)
);

CREATE TABLE Document_Structures (
  document_structure_code TEXT PRIMARY KEY,
  parent_document_structure_code TEXT,
  document_structure_description TEXT
);

CREATE TABLE Functional_Areas (
  functional_area_code TEXT PRIMARY KEY,
  parent_functional_area_code TEXT,
  functional_area_description TEXT
);

CREATE TABLE Images (
  image_id INTEGER PRIMARY KEY,
  image_alt_text TEXT,
  image_name TEXT,
  image_url TEXT
);

CREATE TABLE Documents (
  document_code TEXT PRIMARY KEY,
  document_structure_code TEXT,
  document_type_code TEXT,
  access_count REAL,
  document_name TEXT,
  FOREIGN KEY (document_structure_code) REFERENCES Document_Structures(document_structure_code)
);

CREATE TABLE Document_Functional_Areas (
  document_code TEXT,
  functional_area_code TEXT,
  FOREIGN KEY (functional_area_code) REFERENCES Functional_Areas(functional_area_code),
  FOREIGN KEY (document_code) REFERENCES Documents(document_code)
);

CREATE TABLE Document_Sections (
  section_id INTEGER PRIMARY KEY,
  document_code TEXT,
  section_sequence REAL,
  section_code TEXT,
  section_title TEXT,
  FOREIGN KEY (document_code) REFERENCES Documents(document_code)
);

CREATE TABLE Document_Sections_Images (
  section_id INTEGER PRIMARY KEY,
  image_id INTEGER,
  FOREIGN KEY (image_id) REFERENCES Images(image_id),
  FOREIGN KEY (section_id) REFERENCES Document_Sections(section_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT T1.document_name FROM Documents AS T1 INNER JOIN Document_Structures AS T2 ON T1.document_structure_code  =  T2.document_structure_code WHERE T2.document_structure_code  = 'main';
-- SELECT T1.role_description FROM Roles AS T1 INNER JOIN Users AS T2 ON T1.role_code  =  T2.role_code WHERE T2.user_name  =  'John' AND T2.role_code  =  'admin';  SELECT T1.document_structure_code FROM Document_Structures AS T1 WHERE T1.document_structure_description  =  'Main Document Structure';  SELECT T1.document_structure_code FROM Document_Structures AS T1 WHERE T1.document_structure_description  =  'Main Document Structure';  SELECT T1.document_structure_code FROM Document_Structures AS T1 WHERE T1.document_structure_description  =  'Main Document Structure';  SELECT T1.document_structure_code FROM Document_Structures AS T1 WHERE T1.document_structure_description  =  'Main Document Structure';  SELECT T1.document_structure_code FROM Document_Structures AS T1 WHERE T1.document_structure_description  =  'Main Document Structure';
------------------------------------------------------------------------------------------
database_id: formula_1
database schema :
CREATE TABLE circuits (
  circuitId INTEGER PRIMARY KEY,
  circuitRef TEXT,
  name TEXT,
  location TEXT,
  country TEXT,
  lat REAL,
  lng REAL,
  alt REAL,
  url TEXT
);

CREATE TABLE races (
  raceId INTEGER PRIMARY KEY,
  year REAL,
  round REAL,
  circuitId INTEGER,
  name TEXT,
  date TEXT,
  time TEXT,
  url TEXT,
  FOREIGN KEY (circuitId) REFERENCES circuits(circuitId)
);

CREATE TABLE drivers (
  driverId INTEGER PRIMARY KEY,
  driverRef TEXT,
  number REAL,
  code TEXT,
  forename TEXT,
  surname TEXT,
  dob TEXT,
  nationality TEXT,
  url TEXT
);

CREATE TABLE status (
  statusId INTEGER PRIMARY KEY,
  status TEXT
);

CREATE TABLE seasons (
  year INTEGER PRIMARY KEY,
  url TEXT
);

CREATE TABLE constructors (
  constructorId INTEGER PRIMARY KEY,
  constructorRef TEXT,
  name TEXT,
  nationality TEXT,
  url TEXT
);

CREATE TABLE constructorStandings (
  constructorStandingsId INTEGER PRIMARY KEY,
  raceId INTEGER,
  constructorId INTEGER,
  points REAL,
  position REAL,
  positionText TEXT,
  wins REAL,
  FOREIGN KEY (raceId) REFERENCES races(raceId),
  FOREIGN KEY (constructorId) REFERENCES constructors(constructorId)
);

CREATE TABLE results (
  resultId INTEGER PRIMARY KEY,
  raceId INTEGER,
  driverId INTEGER,
  constructorId INTEGER,
  number REAL,
  grid REAL,
  position REAL,
  positionText TEXT,
  positionOrder REAL,
  points REAL,
  laps REAL,
  time TEXT,
  milliseconds REAL,
  fastestLap REAL,
  rank REAL,
  fastestLapTime TEXT,
  fastestLapSpeed TEXT,
  statusId REAL,
  FOREIGN KEY (driverId) REFERENCES drivers(driverId),
  FOREIGN KEY (raceId) REFERENCES races(raceId),
  FOREIGN KEY (constructorId) REFERENCES constructors(constructorId)
);

CREATE TABLE driverStandings (
  driverStandingsId INTEGER PRIMARY KEY,
  raceId INTEGER,
  driverId INTEGER,
  points REAL,
  position REAL,
  positionText TEXT,
  wins REAL,
  FOREIGN KEY (driverId) REFERENCES drivers(driverId),
  FOREIGN KEY (raceId) REFERENCES races(raceId)
);

CREATE TABLE constructorResults (
  constructorResultsId INTEGER PRIMARY KEY,
  raceId INTEGER,
  constructorId INTEGER,
  points REAL,
  status REAL,
  FOREIGN KEY (raceId) REFERENCES races(raceId),
  FOREIGN KEY (constructorId) REFERENCES constructors(constructorId)
);

CREATE TABLE qualifying (
  qualifyId INTEGER PRIMARY KEY,
  raceId INTEGER,
  driverId INTEGER,
  constructorId INTEGER,
  number REAL,
  position REAL,
  q1 TEXT,
  q2 TEXT,
  q3 TEXT,
  FOREIGN KEY (driverId) REFERENCES drivers(driverId),
  FOREIGN KEY (raceId) REFERENCES races(raceId),
  FOREIGN KEY (constructorId) REFERENCES constructors(constructorId)
);

CREATE TABLE pitStops (
  raceId INTEGER PRIMARY KEY,
  driverId INTEGER,
  stop REAL,
  lap REAL,
  time TEXT,
  duration TEXT,
  milliseconds REAL,
  FOREIGN KEY (driverId) REFERENCES drivers(driverId),
  FOREIGN KEY (raceId) REFERENCES races(raceId)
);

CREATE TABLE lapTimes (
  raceId INTEGER PRIMARY KEY,
  driverId INTEGER,
  lap REAL,
  position REAL,
  time TEXT,
  milliseconds REAL,
  FOREIGN KEY (driverId) REFERENCES drivers(driverId),
  FOREIGN KEY (raceId) REFERENCES races(raceId)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of laps driven by each driver in the 2022 season?
-- What are the names of the drivers who have won the championship in the 2019 season?
-- How many constructors have won at least one race in the 2021 season?
-- What is the name of the circuit with the highest altitude?
-- What are the names of the drivers who have completed all laps in the fastest lap in the 2020 season?
------------------------------------------------------------------------------------------
database_id: game_1
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Video_Games (
  GameID INTEGER PRIMARY KEY,
  GName TEXT,
  GType TEXT
);

CREATE TABLE Plays_Games (
  StuID INTEGER,
  GameID INTEGER,
  Hours_Played REAL,
  FOREIGN KEY (StuID) REFERENCES Student(StuID),
  FOREIGN KEY (GameID) REFERENCES Video_Games(GameID)
);

CREATE TABLE SportsInfo (
  StuID INTEGER,
  SportName TEXT,
  HoursPerWeek REAL,
  GamesPlayed REAL,
  OnScholarship TEXT,
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of students who are female and are majoring in computer science? (Assume computer science is major 1.)
-- What are the average hours played by students who have played at least one game in the sports category?
-- What are the names of the students who have played sports and also have a advisor whose name starts with 'A'?
-- What is the number of games played by students who are from the city of 'New York'?
-- What is the name of the game with the highest average hours played across all students?  (If there are multiple games with the same average, any one of them is acceptable.)  Also, please provide the average hours played for this game.  (Note: The average hours played should be an integer.)  (Assume at least one game has been played.)  (Assume at least one student has played at least one game.)  (Assume at least one game has been played by more than one student.)  (Assume at least one student has played more than one game.)  (Assume at least one student has played more than one game in the same sport.)  (Assume at least one
------------------------------------------------------------------------------------------
database_id: loan_1
database schema :
CREATE TABLE bank (
  branch_ID INTEGER PRIMARY KEY,
  bname TEXT,
  no_of_customers REAL,
  city TEXT,
  state TEXT
);

CREATE TABLE customer (
  cust_ID TEXT PRIMARY KEY,
  cust_name TEXT,
  acc_type TEXT,
  acc_bal REAL,
  no_of_loans REAL,
  credit_score REAL,
  branch_ID INTEGER,
  state TEXT,
  FOREIGN KEY (branch_ID) REFERENCES bank(branch_ID)
);

CREATE TABLE loan (
  loan_ID TEXT PRIMARY KEY,
  loan_type TEXT,
  cust_ID TEXT,
  branch_ID TEXT,
  amount REAL,
  FOREIGN KEY (branch_ID) REFERENCES bank(branch_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average credit score of customers in the city of New York, who have a credit score greater than 700?
-- How many customers have a credit score between 650 and 700, who are from the state of California, and have a loan?
-- What is the total number of loans given by the branch in the city of New York, who have more than 500 customers?
-- What is the number of customers with a credit score greater than 600, who have a loan from the branch in the city of Los Angeles?
-- What is the average account balance of customers in the state of Texas, who have a loan and a credit score greater than 750?
------------------------------------------------------------------------------------------
database_id: bike_1
database schema :
CREATE TABLE station (
  id INTEGER PRIMARY KEY,
  name TEXT,
  lat REAL,
  long REAL,
  dock_count REAL,
  city TEXT,
  installation_date TEXT
);

CREATE TABLE status (
  station_id INTEGER,
  bikes_available REAL,
  docks_available REAL,
  time TEXT,
  FOREIGN KEY (station_id) REFERENCES station(id)
);

CREATE TABLE trip (
  id INTEGER PRIMARY KEY,
  duration REAL,
  start_date TEXT,
  start_station_name TEXT,
  start_station_id REAL,
  end_date TEXT,
  end_station_name TEXT,
  end_station_id REAL,
  bike_id REAL,
  subscription_type TEXT,
  zip_code REAL
);

CREATE TABLE weather (
  date TEXT,
  max_temperature_f REAL,
  mean_temperature_f REAL,
  min_temperature_f REAL,
  max_dew_point_f REAL,
  mean_dew_point_f REAL,
  min_dew_point_f REAL,
  max_humidity REAL,
  mean_humidity REAL,
  min_humidity REAL,
  max_sea_level_pressure_inches REAL,
  mean_sea_level_pressure_inches REAL,
  min_sea_level_pressure_inches REAL,
  max_visibility_miles REAL,
  mean_visibility_miles REAL,
  min_visibility_miles REAL,
  max_wind_Speed_mph REAL,
  mean_wind_speed_mph REAL,
  max_gust_speed_mph REAL,
  precipitation_inches REAL,
  cloud_cover REAL,
  events TEXT,
  wind_dir_degrees REAL,
  zip_code REAL
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of bikes available at stations in San Francisco that have more than 50 docks?
-- What is the average duration of bike trips on Wednesdays?
-- What is the average temperature in San Francisco on days with precipitation?
-- What are the top 3 cities with the most number of stations installed in 2010?
-- What is the average number of bikes available at stations with a name containing the word "Central"?
------------------------------------------------------------------------------------------
database_id: entrepreneur
database schema :
CREATE TABLE entrepreneur (
  Entrepreneur_ID INTEGER PRIMARY KEY,
  People_ID INTEGER,
  Company TEXT,
  Money_Requested REAL,
  Investor TEXT,
  FOREIGN KEY (People_ID) REFERENCES people(People_ID)
);

CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Height REAL,
  Weight REAL,
  Date_of_Birth TEXT
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average height of people who are investors?
-- What is the name of the person who is the entrepreneur with the highest money requested?
-- What is the total amount of money requested by all entrepreneurs who are over 170cm tall?
-- What is the company of the entrepreneur who requested the 3rd highest amount of money?
-- What is the name of the entrepreneur with the highest height among all entrepreneurs who are investors in "Google"?  or 'Microsoft'? or 'Facebook'? or 'Apple'? or 'Amazon'? or 'Netflix'? or 'Tesla'? or 'Spotify'? or 'Uber'? or 'NVIDIA'? or 'Caterpillar'? or 'Procter & Gamble'? or '3M'? or 'HP'? or 'Volkswagen'? or 'L'Oréal'? or 'Roche'? or 'SAP'? or 'ExxonMobil'? or 'Dell'? or 'Cisco'? or 'Pfizer'? or 'Danaher'? or 'McDonald's'? or 'AstraZeneca'? or 'Merck'? or 'Intel'? or 'Novartis'? or 'Qualcomm'? or 'Lyond
------------------------------------------------------------------------------------------
database_id: orchestra
database schema :
CREATE TABLE conductor (
  Conductor_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Age REAL,
  Nationality TEXT,
  Year_of_Work REAL
);

CREATE TABLE orchestra (
  Orchestra_ID INTEGER PRIMARY KEY,
  Orchestra TEXT,
  Conductor_ID INTEGER,
  Record_Company TEXT,
  Year_of_Founded REAL,
  Major_Record_Format TEXT,
  FOREIGN KEY (Conductor_ID) REFERENCES conductor(Conductor_ID)
);

CREATE TABLE performance (
  Performance_ID INTEGER PRIMARY KEY,
  Orchestra_ID INTEGER,
  Type TEXT,
  Date TEXT,
  Official_ratings_(millions) REAL,
  Weekly_rank TEXT,
  Share TEXT,
  FOREIGN KEY (Orchestra_ID) REFERENCES orchestra(Orchestra_ID)
);

CREATE TABLE show (
  Show_ID REAL,
  Performance_ID INTEGER,
  If_first_show TEXT,
  Result TEXT,
  Attendance REAL,
  FOREIGN KEY (Performance_ID) REFERENCES performance(Performance_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- Please help me generate the questions.
-- What is the average age of conductors in the database who have been working for more than 20 years?
-- What is the total number of performances by the orchestra with Orchestra ID 1 in the year 2010?
-- What is the name of the conductor with the highest average official ratings (in millions) for the performances conducted in the year 2010?
-- What is the number of performances with an official rating of more than 10 million in the year 2015?
------------------------------------------------------------------------------------------
database_id: cre_Drama_Workshop_Groups
database schema :
CREATE TABLE Ref_Payment_Methods (
  payment_method_code TEXT PRIMARY KEY,
  payment_method_description TEXT
);

CREATE TABLE Ref_Service_Types (
  Service_Type_Code TEXT PRIMARY KEY,
  Parent_Service_Type_Code TEXT,
  Service_Type_Description TEXT
);

CREATE TABLE Addresses (
  Address_ID TEXT PRIMARY KEY,
  Line_1 TEXT,
  Line_2 TEXT,
  City_Town TEXT,
  State_County TEXT,
  Other_Details TEXT
);

CREATE TABLE Products (
  Product_ID TEXT PRIMARY KEY,
  Product_Name TEXT,
  Product_Price REAL,
  Product_Description TEXT,
  Other_Product_Service_Details TEXT
);

CREATE TABLE Marketing_Regions (
  Marketing_Region_Code TEXT PRIMARY KEY,
  Marketing_Region_Name TEXT,
  Marketing_Region_Descriptrion TEXT,
  Other_Details TEXT
);

CREATE TABLE Clients (
  Client_ID INTEGER PRIMARY KEY,
  Address_ID INTEGER,
  Customer_Email_Address TEXT,
  Customer_Name TEXT,
  Customer_Phone TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Address_ID) REFERENCES Addresses(Address_ID)
);

CREATE TABLE Drama_Workshop_Groups (
  Workshop_Group_ID INTEGER PRIMARY KEY,
  Address_ID INTEGER,
  Currency_Code TEXT,
  Marketing_Region_Code TEXT,
  Store_Name TEXT,
  Store_Phone TEXT,
  Store_Email_Address TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Address_ID) REFERENCES Addresses(Address_ID)
);

CREATE TABLE Performers (
  Performer_ID INTEGER PRIMARY KEY,
  Address_ID INTEGER,
  Customer_Name TEXT,
  Customer_Phone TEXT,
  Customer_Email_Address TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Address_ID) REFERENCES Addresses(Address_ID)
);

CREATE TABLE Customers (
  Customer_ID TEXT PRIMARY KEY,
  Address_ID INTEGER,
  Customer_Name TEXT,
  Customer_Phone TEXT,
  Customer_Email_Address TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Address_ID) REFERENCES Addresses(Address_ID)
);

CREATE TABLE Stores (
  Store_ID TEXT PRIMARY KEY,
  Address_ID INTEGER,
  Marketing_Region_Code TEXT,
  Store_Name TEXT,
  Store_Phone TEXT,
  Store_Email_Address TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Marketing_Region_Code) REFERENCES Marketing_Regions(Marketing_Region_Code),
  FOREIGN KEY (Address_ID) REFERENCES Addresses(Address_ID)
);

CREATE TABLE Bookings (
  Booking_ID INTEGER PRIMARY KEY,
  Customer_ID INTEGER,
  Workshop_Group_ID TEXT,
  Status_Code TEXT,
  Store_ID REAL,
  Order_Date DATETIME,
  Planned_Delivery_Date DATETIME,
  Actual_Delivery_Date DATETIME,
  Other_Order_Details TEXT,
  FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID),
  FOREIGN KEY (Customer_ID) REFERENCES Clients(Client_ID)
);

CREATE TABLE Performers_in_Bookings (
  Order_ID INTEGER PRIMARY KEY,
  Performer_ID INTEGER,
  FOREIGN KEY (Order_ID) REFERENCES Bookings(Booking_ID),
  FOREIGN KEY (Performer_ID) REFERENCES Performers(Performer_ID)
);

CREATE TABLE Customer_Orders (
  Order_ID INTEGER PRIMARY KEY,
  Customer_ID INTEGER,
  Store_ID INTEGER,
  Order_Date DATETIME,
  Planned_Delivery_Date DATETIME,
  Actual_Delivery_Date DATETIME,
  Other_Order_Details TEXT,
  FOREIGN KEY (Store_ID) REFERENCES Stores(Store_ID),
  FOREIGN KEY (Customer_ID) REFERENCES Customers(Customer_ID)
);

CREATE TABLE Order_Items (
  Order_Item_ID INTEGER PRIMARY KEY,
  Order_ID INTEGER,
  Product_ID INTEGER,
  Order_Quantity TEXT,
  Other_Item_Details TEXT,
  FOREIGN KEY (Product_ID) REFERENCES Products(Product_ID),
  FOREIGN KEY (Order_ID) REFERENCES Customer_Orders(Order_ID)
);

CREATE TABLE Invoices (
  Invoice_ID INTEGER PRIMARY KEY,
  Order_ID INTEGER,
  payment_method_code TEXT,
  Product_ID REAL,
  Order_Quantity TEXT,
  Other_Item_Details TEXT,
  Order_Item_ID REAL,
  FOREIGN KEY (payment_method_code) REFERENCES Ref_Payment_Methods(payment_method_code),
  FOREIGN KEY (Order_ID) REFERENCES Bookings(Booking_ID),
  FOREIGN KEY (Order_ID) REFERENCES Customer_Orders(Order_ID)
);

CREATE TABLE Services (
  Service_ID INTEGER PRIMARY KEY,
  Service_Type_Code TEXT,
  Workshop_Group_ID INTEGER,
  Product_Description TEXT,
  Product_Name TEXT,
  Product_Price REAL,
  Other_Product_Service_Details TEXT,
  FOREIGN KEY (Service_Type_Code) REFERENCES Ref_Service_Types(Service_Type_Code),
  FOREIGN KEY (Workshop_Group_ID) REFERENCES Drama_Workshop_Groups(Workshop_Group_ID)
);

CREATE TABLE Bookings_Services (
  Order_ID INTEGER PRIMARY KEY,
  Product_ID INTEGER,
  FOREIGN KEY (Product_ID) REFERENCES Services(Service_ID),
  FOREIGN KEY (Order_ID) REFERENCES Bookings(Booking_ID)
);

CREATE TABLE Invoice_Items (
  Invoice_Item_ID INTEGER PRIMARY KEY,
  Invoice_ID INTEGER,
  Order_ID INTEGER,
  Order_Item_ID INTEGER,
  Product_ID INTEGER,
  Order_Quantity REAL,
  Other_Item_Details TEXT,
  FOREIGN KEY (Order_ID) REFERENCES Bookings_Services(Order_ID),
  FOREIGN KEY (Product_ID) REFERENCES Bookings_Services(Product_ID),
  FOREIGN KEY (Invoice_ID) REFERENCES Invoices(Invoice_ID),
  FOREIGN KEY (Order_Item_ID) REFERENCES Order_Items(Order_Item_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- Select the number of customers who are also performers.
-- What is the average number of bookings per customer, grouped by region?
-- What is the total number of clients who have purchased drama workshop services in each region?
-- What are the most common payment methods used by customers to pay for drama workshop services in each region?
-- What are the average order quantities and total revenue generated per region for drama workshop services?
------------------------------------------------------------------------------------------
database_id: car_1
database schema :
CREATE TABLE continents (
  ContId INTEGER PRIMARY KEY,
  Continent TEXT
);

CREATE TABLE countries (
  CountryId INTEGER PRIMARY KEY,
  CountryName TEXT,
  Continent INTEGER,
  FOREIGN KEY (Continent) REFERENCES continents(ContId)
);

CREATE TABLE car_makers (
  Id INTEGER PRIMARY KEY,
  Maker TEXT,
  FullName TEXT,
  Country TEXT,
  FOREIGN KEY (Country) REFERENCES countries(CountryId)
);

CREATE TABLE model_list (
  ModelId INTEGER PRIMARY KEY,
  Maker INTEGER,
  Model TEXT,
  FOREIGN KEY (Maker) REFERENCES car_makers(Id)
);

CREATE TABLE car_names (
  MakeId INTEGER PRIMARY KEY,
  Model TEXT,
  Make TEXT,
  FOREIGN KEY (Model) REFERENCES model_list(Model)
);

CREATE TABLE cars_data (
  Id INTEGER PRIMARY KEY,
  MPG TEXT,
  Cylinders REAL,
  Edispl REAL,
  Horsepower TEXT,
  Weight REAL,
  Accelerate REAL,
  Year REAL,
  FOREIGN KEY (Id) REFERENCES car_names(MakeId)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many car models are made in the continent of Asia?
-- What is the average horsepower of all car models made in the country of United States?
-- How many car makers have at least one car model that has a horsepower greater than 250 and weighs less than 3500?
-- What is the average number of cylinders of all car models made by the maker Toyota, in the year 1990?
-- Which country has the highest number of car makers?  Display the name of the country and the number of car makers.  (Note: you can use subqueries or joins to achieve this)
------------------------------------------------------------------------------------------
database_id: geo
database schema :
CREATE TABLE state (
  state_name TEXT PRIMARY KEY,
  population REAL,
  area REAL,
  country_name TEXT,
  capital TEXT,
  density REAL
);

CREATE TABLE city (
  city_name TEXT PRIMARY KEY,
  population REAL,
  country_name TEXT,
  state_name TEXT,
  FOREIGN KEY (state_name) REFERENCES state(state_name)
);

CREATE TABLE border_info (
  state_name TEXT,
  border TEXT PRIMARY KEY,
  FOREIGN KEY (border) REFERENCES state(state_name),
  FOREIGN KEY (state_name) REFERENCES state(state_name)
);

CREATE TABLE highlow (
  state_name TEXT PRIMARY KEY,
  highest_elevation TEXT,
  lowest_point TEXT,
  highest_point TEXT,
  lowest_elevation TEXT,
  FOREIGN KEY (state_name) REFERENCES state(state_name)
);

CREATE TABLE lake (
  lake_name TEXT,
  area REAL,
  country_name TEXT,
  state_name TEXT
);

CREATE TABLE mountain (
  mountain_name TEXT PRIMARY KEY,
  mountain_altitude REAL,
  country_name TEXT,
  state_name TEXT,
  FOREIGN KEY (state_name) REFERENCES state(state_name)
);

CREATE TABLE river (
  river_name TEXT PRIMARY KEY,
  length REAL,
  country_name TEXT,
  traverse TEXT,
  FOREIGN KEY (traverse) REFERENCES state(state_name)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average population of all cities in the state of New York?
-- How many states have a population greater than 10 million and a border with the state of Texas?
-- What is the name of the capital city of the state with the highest population density?
-- What is the name of the river that traverses the state of California?
-- What is the total area of all lakes in the state of Oregon?  Join the lake table with the state table to get the state's name and then join it with the state table to get the country name.  Order the results by state name.  Select the state's name, country name, and the total area of the lakes.  Do not show any results where the state's name is null.  Do not show any results where the country name is null.  Use the state table's area column to calculate the total area.  Use the lake table's area column to calculate the total area.  Use the state table's area column to calculate the total area.  Use the state table's area column to calculate the total area.  Use the state table's area column to calculate the total area.  Use the state table
------------------------------------------------------------------------------------------
database_id: behavior_monitoring
database schema :
CREATE TABLE Ref_Address_Types (
  address_type_code TEXT PRIMARY KEY,
  address_type_description TEXT
);

CREATE TABLE Ref_Detention_Type (
  detention_type_code TEXT PRIMARY KEY,
  detention_type_description TEXT
);

CREATE TABLE Ref_Incident_Type (
  incident_type_code TEXT PRIMARY KEY,
  incident_type_description TEXT
);

CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  line_1 TEXT,
  line_2 TEXT,
  line_3 TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT,
  other_address_details TEXT
);

CREATE TABLE Students (
  student_id INTEGER PRIMARY KEY,
  address_id INTEGER,
  first_name TEXT,
  middle_name TEXT,
  last_name TEXT,
  cell_mobile_number TEXT,
  email_address TEXT,
  date_first_rental DATETIME,
  date_left_university DATETIME,
  other_student_details TEXT,
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Teachers (
  teacher_id INTEGER PRIMARY KEY,
  address_id INTEGER,
  first_name TEXT,
  middle_name TEXT,
  last_name TEXT,
  gender TEXT,
  cell_mobile_number TEXT,
  email_address TEXT,
  other_details TEXT,
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Assessment_Notes (
  notes_id REAL,
  student_id INTEGER,
  teacher_id INTEGER,
  date_of_notes DATETIME,
  text_of_notes TEXT,
  other_details TEXT,
  FOREIGN KEY (teacher_id) REFERENCES Teachers(teacher_id),
  FOREIGN KEY (student_id) REFERENCES Students(student_id)
);

CREATE TABLE Behavior_Incident (
  incident_id INTEGER PRIMARY KEY,
  incident_type_code TEXT,
  student_id INTEGER,
  date_incident_start DATETIME,
  date_incident_end DATETIME,
  incident_summary TEXT,
  recommendations TEXT,
  other_details TEXT,
  FOREIGN KEY (student_id) REFERENCES Students(student_id),
  FOREIGN KEY (incident_type_code) REFERENCES Ref_Incident_Type(incident_type_code)
);

CREATE TABLE Detention (
  detention_id INTEGER PRIMARY KEY,
  detention_type_code TEXT,
  teacher_id INTEGER,
  datetime_detention_start DATETIME,
  datetime_detention_end DATETIME,
  detention_summary TEXT,
  other_details TEXT,
  FOREIGN KEY (teacher_id) REFERENCES Teachers(teacher_id),
  FOREIGN KEY (detention_type_code) REFERENCES Ref_Detention_Type(detention_type_code)
);

CREATE TABLE Student_Addresses (
  student_id INTEGER,
  address_id INTEGER,
  date_address_from DATETIME,
  date_address_to DATETIME,
  monthly_rental REAL,
  other_details TEXT,
  FOREIGN KEY (student_id) REFERENCES Students(student_id),
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Students_in_Detention (
  student_id INTEGER,
  detention_id INTEGER,
  incident_id INTEGER,
  FOREIGN KEY (student_id) REFERENCES Students(student_id),
  FOREIGN KEY (detention_id) REFERENCES Detention(detention_id),
  FOREIGN KEY (incident_id) REFERENCES Behavior_Incident(incident_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average monthly rental amount for students living at addresses with zip codes starting with '7'?
-- What is the total number of students who have been involved in any incident type other than 'Bullying'?
-- What is the list of addresses where students have been detained by teachers with the last name 'Doe', and the detention type is 'Disciplinary Action'?
-- What is the number of teachers with more than one student in detention on the same day?
-- What is the list of students who have been involved in incidents that occurred on the same day as their date of first rental?  ```
------------------------------------------------------------------------------------------
database_id: cre_Doc_Tracking_DB
database schema :
CREATE TABLE Ref_Document_Types (
  Document_Type_Code TEXT PRIMARY KEY,
  Document_Type_Name TEXT,
  Document_Type_Description TEXT
);

CREATE TABLE Ref_Calendar (
  Calendar_Date DATETIME PRIMARY KEY,
  Day_Number REAL
);

CREATE TABLE Ref_Locations (
  Location_Code TEXT PRIMARY KEY,
  Location_Name TEXT,
  Location_Description TEXT
);

CREATE TABLE Roles (
  Role_Code TEXT PRIMARY KEY,
  Role_Name TEXT,
  Role_Description TEXT
);

CREATE TABLE All_Documents (
  Document_ID INTEGER PRIMARY KEY,
  Date_Stored DATETIME,
  Document_Type_Code TEXT,
  Document_Name TEXT,
  Document_Description TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Date_Stored) REFERENCES Ref_Calendar(Calendar_Date),
  FOREIGN KEY (Document_Type_Code) REFERENCES Ref_Document_Types(Document_Type_Code)
);

CREATE TABLE Employees (
  Employee_ID INTEGER PRIMARY KEY,
  Role_Code TEXT,
  Employee_Name TEXT,
  Gender_MFU TEXT,
  Date_of_Birth DATETIME,
  Other_Details TEXT,
  FOREIGN KEY (Role_Code) REFERENCES Roles(Role_Code)
);

CREATE TABLE Document_Locations (
  Document_ID INTEGER PRIMARY KEY,
  Location_Code TEXT,
  Date_in_Location_From DATETIME,
  Date_in_Locaton_To DATETIME,
  FOREIGN KEY (Document_ID) REFERENCES All_Documents(Document_ID),
  FOREIGN KEY (Date_in_Locaton_To) REFERENCES Ref_Calendar(Calendar_Date),
  FOREIGN KEY (Date_in_Location_From) REFERENCES Ref_Calendar(Calendar_Date),
  FOREIGN KEY (Location_Code) REFERENCES Ref_Locations(Location_Code)
);

CREATE TABLE Documents_to_be_Destroyed (
  Document_ID INTEGER PRIMARY KEY,
  Destruction_Authorised_by_Employee_ID INTEGER,
  Destroyed_by_Employee_ID INTEGER,
  Planned_Destruction_Date DATETIME,
  Actual_Destruction_Date DATETIME,
  Other_Details TEXT,
  FOREIGN KEY (Document_ID) REFERENCES All_Documents(Document_ID),
  FOREIGN KEY (Actual_Destruction_Date) REFERENCES Ref_Calendar(Calendar_Date),
  FOREIGN KEY (Planned_Destruction_Date) REFERENCES Ref_Calendar(Calendar_Date),
  FOREIGN KEY (Destruction_Authorised_by_Employee_ID) REFERENCES Employees(Employee_ID),
  FOREIGN KEY (Destroyed_by_Employee_ID) REFERENCES Employees(Employee_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- 2. How many employees are there in total?
-- What is the name of the document type that has the description 'Contract'?
-- What is the document name of the document with document id 123456?
-- What is the document type code of documents that are stored in the location with location code 'A1' and were stored before 01:00:00?
-- What is the document name of the document with the highest document id?
------------------------------------------------------------------------------------------
database_id: university_basketball
database schema :
CREATE TABLE basketball_match (
  Team_ID INTEGER PRIMARY KEY,
  School_ID INTEGER,
  Team_Name TEXT,
  ACC_Regular_Season TEXT,
  ACC_Percent TEXT,
  ACC_Home TEXT,
  ACC_Road TEXT,
  All_Games TEXT,
  All_Games_Percent REAL,
  All_Home TEXT,
  All_Road TEXT,
  All_Neutral TEXT,
  FOREIGN KEY (School_ID) REFERENCES university(School_ID)
);

CREATE TABLE university (
  School_ID INTEGER PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Founded REAL,
  Affiliation TEXT,
  Enrollment REAL,
  Nickname TEXT,
  Primary_conference TEXT
);

# Here are some example questions that CAN be answered by the schema below:
-- How many teams participated in the ACC regular season in the 2022-2023 season?
-- Which school has the highest number of total games played?
-- Find the number of teams that are members of the Atlantic Coast Conference (ACC) but are not members of the Power Five conferences.
-- What is the average number of games played at home by teams that are members of the Power Five conferences?
-- Which school has the highest number of wins in the ACC regular season in the 2022-2023 season?  (Note: "wins" in this context is the number of games won, not the number of games played)  You should only consider the teams that participated in the 2022-2023 ACC regular season.  (Hint: You may need to use an aggregation function to answer this question.)  (Note: The ACC_Regular_Season field can be used to determine which season a team participated in.)  (Note: If the team participated in the 2022-2023 season, you can assume the team's wins are stored in the ACC_Percent field.)  (Note: The ACC_Percent field stores the win-loss record in the format "x
------------------------------------------------------------------------------------------
database_id: soccer_2
database schema :
CREATE TABLE College (
  cName TEXT PRIMARY KEY,
  state TEXT,
  enr REAL
);

CREATE TABLE Player (
  pID INTEGER PRIMARY KEY,
  pName TEXT,
  yCard TEXT,
  HS REAL
);

CREATE TABLE Tryout (
  pID INTEGER PRIMARY KEY,
  cName TEXT,
  pPos TEXT,
  decision TEXT,
  FOREIGN KEY (cName) REFERENCES College(cName),
  FOREIGN KEY (pID) REFERENCES Player(pID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of Colleges in the database?
-- What is the average number of enrollments for all Colleges located in the state of California?
-- Which College has the most players that passed the tryout?
-- What is the number of College teams that have more than 10 players?
-- Which College has the most players that are defenders? (pPos = D) and located in the state of California?  ) and the number of players is more than 10?
------------------------------------------------------------------------------------------
database_id: activity_1
database schema :
CREATE TABLE Activity (
  actid INTEGER PRIMARY KEY,
  activity_name TEXT
);

CREATE TABLE Participates_in (
  stuid INTEGER,
  actid INTEGER,
  FOREIGN KEY (actid) REFERENCES Activity(actid),
  FOREIGN KEY (stuid) REFERENCES Student(StuID)
);

CREATE TABLE Faculty_Participates_in (
  FacID INTEGER,
  actid INTEGER,
  FOREIGN KEY (actid) REFERENCES Activity(actid),
  FOREIGN KEY (FacID) REFERENCES Faculty(FacID)
);

CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Faculty (
  FacID INTEGER PRIMARY KEY,
  Lname TEXT,
  Fname TEXT,
  Rank TEXT,
  Sex TEXT,
  Phone REAL,
  Room TEXT,
  Building TEXT
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of students who participate in the 'Basketball' activity?
-- How many students participate in activities that have a faculty advisor?
-- What is the most common activity that students with a major in 'Computer Science' participate in?
-- SELECT T1.Lname, T2.activity_name
-- SELECT T1.FacID, T2.activity_name
------------------------------------------------------------------------------------------
database_id: cre_Theme_park
database schema :
CREATE TABLE Ref_Hotel_Star_Ratings (
  star_rating_code TEXT PRIMARY KEY,
  star_rating_description TEXT
);

CREATE TABLE Locations (
  Location_ID INTEGER PRIMARY KEY,
  Location_Name TEXT,
  Address TEXT,
  Other_Details TEXT
);

CREATE TABLE Ref_Attraction_Types (
  Attraction_Type_Code TEXT PRIMARY KEY,
  Attraction_Type_Description TEXT
);

CREATE TABLE Visitors (
  Tourist_ID INTEGER PRIMARY KEY,
  Tourist_Details TEXT
);

CREATE TABLE Features (
  Feature_ID INTEGER PRIMARY KEY,
  Feature_Details TEXT
);

CREATE TABLE Hotels (
  hotel_id INTEGER PRIMARY KEY,
  star_rating_code TEXT,
  pets_allowed_yn TEXT,
  price_range REAL,
  other_hotel_details TEXT,
  FOREIGN KEY (star_rating_code) REFERENCES Ref_Hotel_Star_Ratings(star_rating_code)
);

CREATE TABLE Tourist_Attractions (
  Tourist_Attraction_ID INTEGER PRIMARY KEY,
  Attraction_Type_Code TEXT,
  Location_ID INTEGER,
  How_to_Get_There TEXT,
  Name TEXT,
  Description TEXT,
  Opening_Hours TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Attraction_Type_Code) REFERENCES Ref_Attraction_Types(Attraction_Type_Code),
  FOREIGN KEY (Location_ID) REFERENCES Locations(Location_ID)
);

CREATE TABLE Street_Markets (
  Market_ID INTEGER PRIMARY KEY,
  Market_Details TEXT,
  FOREIGN KEY (Market_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Shops (
  Shop_ID INTEGER PRIMARY KEY,
  Shop_Details TEXT,
  FOREIGN KEY (Shop_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Museums (
  Museum_ID INTEGER PRIMARY KEY,
  Museum_Details TEXT,
  FOREIGN KEY (Museum_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Royal_Family (
  Royal_Family_ID INTEGER PRIMARY KEY,
  Royal_Family_Details TEXT,
  FOREIGN KEY (Royal_Family_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Theme_Parks (
  Theme_Park_ID INTEGER PRIMARY KEY,
  Theme_Park_Details TEXT,
  FOREIGN KEY (Theme_Park_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Visits (
  Visit_ID INTEGER PRIMARY KEY,
  Tourist_Attraction_ID INTEGER,
  Tourist_ID INTEGER,
  Visit_Date DATETIME,
  Visit_Details TEXT,
  FOREIGN KEY (Tourist_ID) REFERENCES Visitors(Tourist_ID),
  FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Photos (
  Photo_ID INTEGER PRIMARY KEY,
  Tourist_Attraction_ID INTEGER,
  Name TEXT,
  Description TEXT,
  Filename TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Staff (
  Staff_ID INTEGER PRIMARY KEY,
  Tourist_Attraction_ID INTEGER,
  Name TEXT,
  Other_Details TEXT,
  FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

CREATE TABLE Tourist_Attraction_Features (
  Tourist_Attraction_ID INTEGER PRIMARY KEY,
  Feature_ID INTEGER,
  FOREIGN KEY (Feature_ID) REFERENCES Features(Feature_ID),
  FOREIGN KEY (Tourist_Attraction_ID) REFERENCES Tourist_Attractions(Tourist_Attraction_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(Tourist_Attraction_ID)
-- SELECT star_rating_description FROM Ref_Hotel_Star_Ratings WHERE star_rating_code = (SELECT star_rating_code FROM Hotels WHERE pets_allowed_yn = 'Y');
-- SELECT COUNT(Tourist_ID)
-- SELECT DISTINCT Location_Name
-- SELECT T1.star_rating_description, T2.price_range
------------------------------------------------------------------------------------------
database_id: twitter_1
database schema :
CREATE TABLE follows (
  f1 INTEGER PRIMARY KEY,
  f2 INTEGER,
  FOREIGN KEY (f2) REFERENCES user_profiles(uid),
  FOREIGN KEY (f1) REFERENCES user_profiles(uid)
);

CREATE TABLE tweets (
  id INTEGER PRIMARY KEY,
  uid INTEGER,
  text TEXT,
  createdate DATETIME,
  FOREIGN KEY (uid) REFERENCES user_profiles(uid)
);

CREATE TABLE user_profiles (
  uid INTEGER PRIMARY KEY,
  name TEXT,
  email TEXT,
  partitionid REAL,
  followers REAL
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of followers of all users who have made a tweet?
-- What is the name of the user who has the most followers?
-- How many users have tweeted before 2020-01-01?
-- What is the number of users who follow at least one user who has tweeted?
-- What is the name of the user with the email 'user@example.com' and who has tweeted the most number of times?  If there are multiple users with the same maximum number of tweets, return all their names.  Assume there are no duplicate names.  Assume the email is unique.  Assume the email is present in the database.  Assume the email is present in the user_profiles table.  Assume the email is unique to one user.  Assume there is at least one user with the email.  Assume the email is in the format 'user@domain.com'.  Assume the email is present in the user_profiles table.  Assume the email is not null.  Assume the email is in the user_profiles table.  Assume there is at least one user with the email in the user_profiles table.  Assume the email is not null in the user_profiles table.
------------------------------------------------------------------------------------------
database_id: election_representative
database schema :
CREATE TABLE election (
  Election_ID INTEGER PRIMARY KEY,
  Representative_ID INTEGER,
  Date TEXT,
  Votes REAL,
  Vote_Percent REAL,
  Seats REAL,
  Place REAL,
  FOREIGN KEY (Representative_ID) REFERENCES representative(Representative_ID)
);

CREATE TABLE representative (
  Representative_ID INTEGER PRIMARY KEY,
  Name TEXT,
  State TEXT,
  Party TEXT,
  Lifespan TEXT
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM election WHERE Vote_Percent < 50 AND Date = '2022-01-01';
-- SELECT e.Date, r.Name FROM election e JOIN representative r ON e.Representative_ID = r.Representative_ID WHERE e.Election_ID = 12345;
-- SELECT COUNT(*) FROM representative WHERE State = 'California';
-- SELECT r.Name, e.Date FROM representative r JOIN election e ON r.Representative_ID = e.Representative_ID WHERE e.Votes > 100000 AND e.Date LIKE '2022-%';
-- SELECT COUNT(DISTINCT e.Date) FROM election e JOIN representative r ON e.Representative_ID = r.Representative_ID WHERE r.Party = 'Republican' AND e.Date LIKE '2020-%';  ```
------------------------------------------------------------------------------------------
database_id: voter_2
database schema :
CREATE TABLE Student (
  StuID INTEGER PRIMARY KEY,
  LName TEXT,
  Fname TEXT,
  Age REAL,
  Sex TEXT,
  Major REAL,
  Advisor REAL,
  city_code TEXT
);

CREATE TABLE Voting_record (
  StuID INTEGER,
  Registration_Date TEXT,
  Election_Cycle TEXT,
  President_Vote INTEGER,
  Vice_President_Vote INTEGER,
  Secretary_Vote INTEGER,
  Treasurer_Vote INTEGER,
  Class_President_Vote INTEGER,
  Class_Senator_Vote INTEGER,
  FOREIGN KEY (Class_Senator_Vote) REFERENCES Student(StuID),
  FOREIGN KEY (Class_President_Vote) REFERENCES Student(StuID),
  FOREIGN KEY (Treasurer_Vote) REFERENCES Student(StuID),
  FOREIGN KEY (Secretary_Vote) REFERENCES Student(StuID),
  FOREIGN KEY (Vice_President_Vote) REFERENCES Student(StuID),
  FOREIGN KEY (President_Vote) REFERENCES Student(StuID),
  FOREIGN KEY (StuID) REFERENCES Student(StuID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of students in the Student table?
-- What is the name of the student who voted for president in the election cycle 'Spring 2018'?
-- What is the average age of the students who voted for the class president in the election cycle 'Fall 2017'?
-- What is the name of the advisor of the student who voted for the class senator in the election cycle 'Summer 2019'?
-- What is the number of students who voted for the president in the election cycle 'Fall 2018' and have an advisor who is a female? Answer this question by joining the Student table with the Voting_record table.
------------------------------------------------------------------------------------------
database_id: wedding
database schema :
CREATE TABLE people (
  People_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Country TEXT,
  Is_Male TEXT,
  Age REAL
);

CREATE TABLE church (
  Church_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Organized_by TEXT,
  Open_Date REAL,
  Continuation_of TEXT
);

CREATE TABLE wedding (
  Church_ID INTEGER PRIMARY KEY,
  Male_ID INTEGER,
  Female_ID INTEGER,
  Year REAL,
  FOREIGN KEY (Female_ID) REFERENCES people(People_ID),
  FOREIGN KEY (Male_ID) REFERENCES people(People_ID),
  FOREIGN KEY (Church_ID) REFERENCES church(Church_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the number of males who were married in 2020?
-- How many weddings were performed by the church named "St. Mark's"?
-- What is the age of the person whose name is "Marie" and was married in church "St. Mark's"?
-- Which country has the most people married in the year 2020?
-- What is the name of the church that was organized by "John" and was open in 1990?
------------------------------------------------------------------------------------------
database_id: news_report
database schema :
CREATE TABLE event (
  Event_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT,
  Event_Attendance REAL
);

CREATE TABLE journalist (
  journalist_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT,
  Years_working REAL
);

CREATE TABLE news_report (
  journalist_ID INTEGER PRIMARY KEY,
  Event_ID INTEGER,
  Work_Type TEXT,
  FOREIGN KEY (Event_ID) REFERENCES event(Event_ID),
  FOREIGN KEY (journalist_ID) REFERENCES journalist(journalist_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of journalists who attended events with attendance above 10000?
-- How many journalists are there who have covered at least one event in the year 2015?
-- What is the name of the event with the highest attendance in 2010?
-- Which journalist(s) have covered the most events in the year 2010?
-- What is the name of the journalist who covered the event with the highest attendance in 2010?
------------------------------------------------------------------------------------------
database_id: wine_1
database schema :
CREATE TABLE grapes (
  ID INTEGER PRIMARY KEY,
  Grape TEXT,
  Color TEXT
);

CREATE TABLE appellations (
  No INTEGER PRIMARY KEY,
  Appelation TEXT,
  County TEXT,
  State TEXT,
  Area TEXT,
  isAVA TEXT
);

CREATE TABLE wine (
  No REAL,
  Grape TEXT,
  Winery TEXT,
  Appelation TEXT,
  State TEXT,
  Name TEXT,
  Year REAL,
  Price REAL,
  Score REAL,
  Cases REAL,
  Drink TEXT,
  FOREIGN KEY (Appelation) REFERENCES appellations(Appelation),
  FOREIGN KEY (Grape) REFERENCES grapes(Grape)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average number of cases sold for wines made from red grapes?
-- What are the top 3 counties with the highest total number of wine cases sold?
-- List the names of all wines made in the state of California, sorted by the wine's score in descending order.
-- What is the total number of wines made from the grape 'Cabernet Sauvignon' that have a price higher than $50?
-- Which winery produced the most wines that were awarded a perfect score (100)?
------------------------------------------------------------------------------------------
database_id: customers_and_addresses
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  address_content TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT,
  other_address_details TEXT
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  product_details TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  payment_method TEXT,
  customer_name TEXT,
  date_became_customer DATETIME,
  other_customer_details TEXT
);

CREATE TABLE Customer_Addresses (
  customer_id INTEGER,
  address_id INTEGER,
  date_address_from DATETIME,
  address_type TEXT,
  date_address_to DATETIME,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

CREATE TABLE Customer_Contact_Channels (
  customer_id INTEGER,
  channel_code TEXT,
  active_from_date DATETIME,
  active_to_date DATETIME,
  contact_number TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Customer_Orders (
  order_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  order_status TEXT,
  order_date DATETIME,
  order_details TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Order_Items (
  order_id INTEGER,
  product_id INTEGER,
  order_quantity TEXT,
  FOREIGN KEY (order_id) REFERENCES Customer_Orders(order_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- Here are the 5 questions that can be answered using the provided database schema:
-- How many customers are there in total?
-- What is the average number of orders placed by customers who have a contact channel with 'Email' code?
-- What is the average order quantity of all orders placed by customers in the city of New York?
-- What are the most common payment methods used by customers in the country of India?
------------------------------------------------------------------------------------------
database_id: protein_institute
database schema :
CREATE TABLE building (
  building_id TEXT PRIMARY KEY,
  Name TEXT,
  Street_address TEXT,
  Years_as_tallest TEXT,
  Height_feet REAL,
  Floors REAL
);

CREATE TABLE Institution (
  Institution_id TEXT PRIMARY KEY,
  Institution TEXT,
  Location TEXT,
  Founded REAL,
  Type TEXT,
  Enrollment REAL,
  Team TEXT,
  Primary_Conference TEXT,
  building_id TEXT,
  FOREIGN KEY (building_id) REFERENCES building(building_id)
);

CREATE TABLE protein (
  common_name TEXT PRIMARY KEY,
  protein_name TEXT,
  divergence_from_human_lineage REAL,
  accession_number TEXT,
  sequence_length REAL,
  sequence_identity_to_human_protein TEXT,
  Institution_id TEXT,
  FOREIGN KEY (Institution_id) REFERENCES Institution(Institution_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average height of all buildings that are taller than 100 floors?
-- How many institutions are there that have an enrollment of more than 10,000 students and have a team that plays in the primary conference 'NCAA'?
-- What is the count of proteins with a sequence length greater than 500 amino acids that are related to the institution with the name 'Harvard University'?
-- What are the names of all institutions that have a building with a height of more than 1000 feet and were founded before the year 1800?
-- What is the count of institutions that have a building with a height of more than 500 feet and have a team that plays in the primary conference 'NCAA' and have an enrollment of more than 10,000 students?  JOIN building and institution tables to answer this question.  (ANSWER: 4)
------------------------------------------------------------------------------------------
database_id: school_player
database schema :
CREATE TABLE school (
  School_ID INTEGER PRIMARY KEY,
  School TEXT,
  Location TEXT,
  Enrollment REAL,
  Founded REAL,
  Denomination TEXT,
  Boys_or_Girls TEXT,
  Day_or_Boarding TEXT,
  Year_Entered_Competition REAL,
  School_Colors TEXT
);

CREATE TABLE school_details (
  School_ID INTEGER PRIMARY KEY,
  Nickname TEXT,
  Colors TEXT,
  League TEXT,
  Class TEXT,
  Division TEXT,
  FOREIGN KEY (School_ID) REFERENCES school(School_ID)
);

CREATE TABLE school_performance (
  School_Id INTEGER PRIMARY KEY,
  School_Year TEXT,
  Class_A TEXT,
  Class_AA TEXT,
  FOREIGN KEY (School_Id) REFERENCES school(School_ID)
);

CREATE TABLE player (
  Player_ID INTEGER PRIMARY KEY,
  Player TEXT,
  Team TEXT,
  Age REAL,
  Position TEXT,
  School_ID INTEGER,
  FOREIGN KEY (School_ID) REFERENCES school(School_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many schools are there in the school table?
-- What is the name of the school with the highest enrollment in the school table?
-- What is the school with the highest enrollment in the school table that also has the most awards (assuming the awards are contained in the school_performance table)?
-- What is the average age of players from the school with the highest enrollment in the school table?
-- Which schools in the school table have at least 2000 students in the school_performance table for Class A and Class AA awards in the same school year?  show the school name and enrollment.
------------------------------------------------------------------------------------------
database_id: phone_1
database schema :
CREATE TABLE chip_model (
  Model_name TEXT PRIMARY KEY,
  Launch_year REAL,
  RAM_MiB REAL,
  ROM_MiB REAL,
  Slots TEXT,
  WiFi TEXT,
  Bluetooth TEXT
);

CREATE TABLE screen_mode (
  Graphics_mode INTEGER PRIMARY KEY,
  Char_cells TEXT,
  Pixels TEXT,
  Hardware_colours REAL,
  used_kb REAL,
  map TEXT,
  Type TEXT
);

CREATE TABLE phone (
  Company_name TEXT,
  Hardware_Model_name TEXT PRIMARY KEY,
  Accreditation_type TEXT,
  Accreditation_level TEXT,
  Date TEXT,
  chip_model TEXT,
  screen_mode TEXT,
  FOREIGN KEY (chip_model) REFERENCES chip_model(Model_name),
  FOREIGN KEY (screen_mode) REFERENCES screen_mode(Graphics_mode)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many chip models have at least 64 MB of RAM and at least 128 MB of ROM?
-- What is the average launch year of chip models that have at least one slot for memory expansion?
-- Which company produced the phone with the highest level of accreditation?
-- What is the percentage of phones with a screen mode that has a map of 640x480?
-- What are the chip model names of the phones that were released after 2010 and have at least 256 MB of RAM?  ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ``` ```
------------------------------------------------------------------------------------------
database_id: tvshow
database schema :
CREATE TABLE TV_Channel (
  id TEXT PRIMARY KEY,
  series_name TEXT,
  Country TEXT,
  Language TEXT,
  Content TEXT,
  Pixel_aspect_ratio_PAR TEXT,
  Hight_definition_TV TEXT,
  Pay_per_view_PPV TEXT,
  Package_Option TEXT
);

CREATE TABLE TV_series (
  id INTEGER PRIMARY KEY,
  Episode TEXT,
  Air_Date TEXT,
  Rating TEXT,
  Share REAL,
  18_49_Rating_Share TEXT,
  Viewers_m TEXT,
  Weekly_Rank REAL,
  Channel TEXT,
  FOREIGN KEY (Channel) REFERENCES TV_Channel(id)
);

CREATE TABLE Cartoon (
  id INTEGER PRIMARY KEY,
  Title TEXT,
  Directed_by TEXT,
  Written_by TEXT,
  Original_air_date TEXT,
  Production_code REAL,
  Channel TEXT,
  FOREIGN KEY (Channel) REFERENCES TV_Channel(id)
);

# Here are some example questions that CAN be answered by the schema below:
-- Which TV channels have high-definition TV?
-- What is the average rating of TV series aired on channels that have pay-per-view (PPV) options?
-- Which TV series aired in 2017 have the highest share of 18-49 rating?
-- What is the title of the cartoon that was directed by "Bob Smith"?
-- What is the total number of TV series per channel that have a weekly rank above 10?
------------------------------------------------------------------------------------------
database_id: wrestler
database schema :
CREATE TABLE wrestler (
  Wrestler_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Reign TEXT,
  Days_held TEXT,
  Location TEXT,
  Event TEXT
);

CREATE TABLE Elimination (
  Elimination_ID TEXT PRIMARY KEY,
  Wrestler_ID TEXT,
  Team TEXT,
  Eliminated_By TEXT,
  Elimination_Move TEXT,
  Time TEXT,
  FOREIGN KEY (Wrestler_ID) REFERENCES wrestler(Wrestler_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM wrestler WHERE Days_held = "1";
-- SELECT e.Elimination_Move, w.Name FROM Elimination e JOIN wrestler w ON e.Wrestler_ID = w.Wrestler_ID WHERE w.Name = "John Cena";
-- Which wrestlers, who held the championship for more than 100 days, were eliminated by the champion in the same event?
-- What is the average number of days held by wrestlers in the Elimination table?
-- Which wrestlers were eliminated by a wrestler who also held the championship for more than 100 days?
------------------------------------------------------------------------------------------
database_id: customer_complaints
database schema :
CREATE TABLE Staff (
  staff_id INTEGER PRIMARY KEY,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  email_address TEXT,
  phone_number TEXT
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  customer_type_code TEXT,
  address_line_1 TEXT,
  address_line_2 TEXT,
  town_city TEXT,
  state TEXT,
  email_address TEXT,
  phone_number TEXT
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  parent_product_id REAL,
  product_category_code TEXT,
  date_product_first_available DATETIME,
  date_product_discontinued DATETIME,
  product_name TEXT,
  product_description TEXT,
  product_price REAL
);

CREATE TABLE Complaints (
  complaint_id REAL,
  product_id INTEGER,
  customer_id INTEGER,
  complaint_outcome_code TEXT,
  complaint_status_code TEXT,
  complaint_type_code TEXT,
  date_complaint_raised DATETIME,
  date_complaint_closed DATETIME,
  staff_id INTEGER,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id),
  FOREIGN KEY (staff_id) REFERENCES Staff(staff_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the name of the product with the highest price that is no longer available?
-- What is the total number of complaints raised by male staff members in the "Services" category?
-- How many products are there in the "Electronics" category that are priced higher than $2000?  [product_price > 2000]  [product_category_code = "Electronics"]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT NULL]  [product_id IS NOT
------------------------------------------------------------------------------------------
database_id: department_management
database schema :
CREATE TABLE department (
  Department_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Creation TEXT,
  Ranking REAL,
  Budget_in_Billions REAL,
  Num_Employees REAL
);

CREATE TABLE head (
  head_ID INTEGER PRIMARY KEY,
  name TEXT,
  born_state TEXT,
  age REAL
);

CREATE TABLE management (
  department_ID INTEGER PRIMARY KEY,
  head_ID INTEGER,
  temporary_acting TEXT,
  FOREIGN KEY (head_ID) REFERENCES head(head_ID),
  FOREIGN KEY (department_ID) REFERENCES department(Department_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average age of all department heads?
-- What is the total budget of all departments that are not the head of the department?
-- What is the average ranking of all departments with more than 500 employees?
-- How many departments are headed by people born in the state of "California"?
-- What is the total budget of all departments that have been acting as the head of the department at some point?  OR  What is the total budget of all departments that have had temporary head(s)?  OR  What is the total budget of all departments with temporary head(s) in the past?  OR  What is the total budget of all departments that have had a head in the past?  OR  What is the total budget of all departments that have had temporary acting heads?  OR  What is the total budget of all departments that have had acting heads?  OR  What is the total budget of all departments that have had past temporary acting heads?  OR  What is the total budget of all departments that have been led by temporary heads?  OR  What is the total budget of all departments with past acting head(s)?  OR  What is the total budget of all
------------------------------------------------------------------------------------------
database_id: customers_and_products_contacts
database schema :
CREATE TABLE Addresses (
  address_id INTEGER PRIMARY KEY,
  line_1_number_building TEXT,
  city TEXT,
  zip_postcode TEXT,
  state_province_county TEXT,
  country TEXT
);

CREATE TABLE Products (
  product_id INTEGER PRIMARY KEY,
  product_type_code TEXT,
  product_name TEXT,
  product_price REAL
);

CREATE TABLE Customers (
  customer_id INTEGER PRIMARY KEY,
  payment_method_code TEXT,
  customer_number TEXT,
  customer_name TEXT,
  customer_address TEXT,
  customer_phone TEXT,
  customer_email TEXT
);

CREATE TABLE Contacts (
  contact_id INTEGER PRIMARY KEY,
  customer_id REAL,
  gender TEXT,
  first_name TEXT,
  last_name TEXT,
  contact_phone TEXT
);

CREATE TABLE Customer_Address_History (
  customer_id INTEGER,
  address_id INTEGER,
  date_from DATETIME,
  date_to DATETIME,
  FOREIGN KEY (address_id) REFERENCES Addresses(address_id),
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Customer_Orders (
  order_id INTEGER PRIMARY KEY,
  customer_id INTEGER,
  order_date DATETIME,
  order_status_code TEXT,
  FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Order_Items (
  order_item_id REAL,
  order_id INTEGER,
  product_id INTEGER,
  order_quantity TEXT,
  FOREIGN KEY (order_id) REFERENCES Customer_Orders(order_id),
  FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average price of products ordered by customers from the United States, grouped by product type?
-- How many customers have a contact phone number that starts with the digit 4?
-- What is the total number of orders placed by customers with a payment method of "credit card"?
-- What is the average number of orders placed by customers who have purchased products with a price greater than $100?  ```sql
------------------------------------------------------------------------------------------
database_id: company_1
database schema :
CREATE TABLE works_on (
  Essn INTEGER PRIMARY KEY,
  Pno REAL,
  Hours REAL
);

CREATE TABLE employee (
  Fname TEXT,
  Minit TEXT,
  Lname TEXT,
  Ssn INTEGER PRIMARY KEY,
  Bdate TEXT,
  Address TEXT,
  Sex TEXT,
  Salary REAL,
  Super_ssn REAL,
  Dno REAL
);

CREATE TABLE department (
  Dname TEXT,
  Dnumber INTEGER PRIMARY KEY,
  Mgr_ssn REAL,
  Mgr_start_date TEXT
);

CREATE TABLE project (
  Pname TEXT,
  Pnumber INTEGER PRIMARY KEY,
  Plocation TEXT,
  Dnum REAL
);

CREATE TABLE dependent (
  Essn INTEGER PRIMARY KEY,
  Dependent_name TEXT,
  Sex TEXT,
  Bdate TEXT,
  Relationship TEXT
);

CREATE TABLE dept_locations (
  Dnumber INTEGER PRIMARY KEY,
  Dlocation TEXT
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the average hours worked by employees in department 5?
-- How many employees work on project P-1?
-- What is the average salary of all employees working in the department with department number 5?
-- What is the name of the project with project number 4?
-- What are the names of all employees working on project 3?
------------------------------------------------------------------------------------------
database_id: workshop_paper
database schema :
CREATE TABLE workshop (
  Workshop_ID INTEGER PRIMARY KEY,
  Date TEXT,
  Venue TEXT,
  Name TEXT
);

CREATE TABLE submission (
  Submission_ID INTEGER PRIMARY KEY,
  Scores REAL,
  Author TEXT,
  College TEXT
);

CREATE TABLE Acceptance (
  Submission_ID INTEGER PRIMARY KEY,
  Workshop_ID INTEGER,
  Result TEXT,
  FOREIGN KEY (Workshop_ID) REFERENCES workshop(Workshop_ID),
  FOREIGN KEY (Submission_ID) REFERENCES submission(Submission_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- How many workshops were held at the "University of California, Berkeley" venue?
-- What is the average score of submissions to the workshop with the name "ICML"?
-- Which college submitted the most number of papers to the workshop with the name "NIPS"?
-- How many submissions were accepted to the workshop with the name "CVPR"?
-- What are the names of authors who submitted papers to workshops held at the "Stanford University" venue?  ORDER BY Name;  LIMIT 1;  OFFSET 1;  SELECT Name FROM workshop AS T1 JOIN Acceptance AS T2 ON T1.Workshop_ID = T2.Workshop_ID JOIN submission AS T3 ON T2.Submission_ID = T3.Submission_ID WHERE T1.Venue = 'Stanford University' AND T3.Author IS NOT NULL;  GROUP BY T3.Author;  ORDER BY COUNT(T3.Author) DESC;  LIMIT 2;  SELECT T3.Author FROM workshop AS T1 JOIN Acceptance AS T2 ON T1.Workshop_ID = T2.Workshop_ID JOIN submission AS T3 ON T2.Submission_ID = T3.Submission_ID WHERE T1.Venue
------------------------------------------------------------------------------------------
database_id: epinions_1
database schema :
CREATE TABLE item (
  i_id INTEGER PRIMARY KEY,
  title TEXT
);

CREATE TABLE review (
  a_id INTEGER PRIMARY KEY,
  u_id INTEGER,
  i_id INTEGER,
  rating REAL,
  rank REAL,
  FOREIGN KEY (i_id) REFERENCES item(i_id),
  FOREIGN KEY (u_id) REFERENCES useracct(u_id)
);

CREATE TABLE useracct (
  u_id INTEGER PRIMARY KEY,
  name TEXT
);

CREATE TABLE trust (
  source_u_id INTEGER,
  target_u_id INTEGER,
  trust REAL,
  FOREIGN KEY (target_u_id) REFERENCES useracct(u_id),
  FOREIGN KEY (source_u_id) REFERENCES useracct(u_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- What is the title of the item with i_id 5?
-- How many items have a rating of 5 in the review table?
-- What are the names of the users who have a rating of 4 for an item with title 'Product X'?
-- What is the average rating of items with title containing 'Apple'?
-- How many users have a rating of 4 for an item that is ranked 3 or higher and has a rating of 5?  Show the count only for the top 3 items.  Order by rank in descending order.  Limit to the top 3.  Also, show the count of users for each item.  Include all columns from the review table.  Use a subquery to determine the item ids.  Do not include any items with an i_id less than 4.  Filter the results to show only the items that are ranked 3 or higher.  Use a join to match the item titles.  Filter the results to show only the users with a rating of 4.  Order the results by rank in descending order.  Limit the results to the top 3.  Finally, exclude any items with an
------------------------------------------------------------------------------------------
database_id: party_host
database schema :
CREATE TABLE party (
  Party_ID INTEGER PRIMARY KEY,
  Party_Theme TEXT,
  Location TEXT,
  First_year TEXT,
  Last_year TEXT,
  Number_of_hosts REAL
);

CREATE TABLE host (
  Host_ID INTEGER PRIMARY KEY,
  Name TEXT,
  Nationality TEXT,
  Age TEXT
);

CREATE TABLE party_host (
  Party_ID INTEGER PRIMARY KEY,
  Host_ID INTEGER,
  Is_Main_in_Charge TEXT,
  FOREIGN KEY (Party_ID) REFERENCES party(Party_ID),
  FOREIGN KEY (Host_ID) REFERENCES host(Host_ID)
);

# Here are some example questions that CAN be answered by the schema below:
-- Select all names of hosts who are from Asia and have participated in the party with theme 'Winter Wonderland'.
-- What is the age of the main host in charge for the party with theme 'Summer Party'?
-- What is the average age of hosts who hosted the parties with the highest number of hosts in the party table?
-- What is the average age of the hosts who hosted the parties that took place in the United States?
-- What is the average age of hosts who organized parties with the theme of "Hollywood Glamour"?
------------------------------------------------------------------------------------------
database_id: product_catalog
database schema :
CREATE TABLE Attribute_Definitions (
  attribute_id INTEGER PRIMARY KEY,
  attribute_name TEXT,
  attribute_data_type TEXT
);

CREATE TABLE Catalogs (
  catalog_id INTEGER PRIMARY KEY,
  catalog_name TEXT,
  catalog_publisher TEXT,
  date_of_publication DATETIME,
  date_of_latest_revision DATETIME
);

CREATE TABLE Catalog_Structure (
  catalog_level_number INTEGER PRIMARY KEY,
  catalog_id INTEGER,
  catalog_level_name TEXT,
  FOREIGN KEY (catalog_id) REFERENCES Catalogs(catalog_id)
);

CREATE TABLE Catalog_Contents (
  catalog_entry_id INTEGER PRIMARY KEY,
  catalog_level_number INTEGER,
  parent_entry_id REAL,
  previous_entry_id REAL,
  next_entry_id REAL,
  catalog_entry_name TEXT,
  product_stock_number TEXT,
  price_in_dollars REAL,
  price_in_euros REAL,
  price_in_pounds REAL,
  capacity TEXT,
  length TEXT,
  height TEXT,
  width TEXT,
  FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number)
);

CREATE TABLE Catalog_Contents_Additional_Attributes (
  catalog_entry_id INTEGER,
  catalog_level_number INTEGER,
  attribute_id REAL,
  attribute_value TEXT,
  FOREIGN KEY (catalog_level_number) REFERENCES Catalog_Structure(catalog_level_number),
  FOREIGN KEY (catalog_entry_id) REFERENCES Catalog_Contents(catalog_entry_id)
);

# Here are some example questions that CAN be answered by the schema below:
-- SELECT COUNT(*) FROM Catalogs WHERE date_of_publication > '2022-01-01' AND date_of_latest_revision < '2022-01-01';
-- SELECT T2.attribute_name, T2.attribute_id FROM Catalog_Contents_Additional_Attributes AS T1 INNER JOIN Attribute_Definitions AS T2 ON T1.attribute_id = T2.attribute_id WHERE T1.attribute_value LIKE '%test%';
-- SELECT T1.catalog_id, T1.catalog_name FROM Catalogs AS T1 INNER JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id WHERE T1.catalog_name LIKE 'Catalog%' AND T2.catalog_level_name LIKE 'Main%';
-- SELECT COUNT(DISTINCT T2.attribute_value) FROM Catalog_Contents_Additional_Attributes AS T1 INNER JOIN Attribute_Definitions AS T2 ON T1.attribute_id = T2.attribute_id WHERE T2.attribute_name = 'test';
-- SELECT T1.catalog_entry_name, T1.price_in_dollars, T1.capacity FROM Catalog_Contents AS T1 WHERE T1.price_in_dollars > 10 AND T1
---

# --- Example ---
# Task: Examine all the database schemas provided above and return a ranked list of the 10 most relevant database_ids for answering the following question.
# Q: How many French singers are there?
#
# The 10 most relevant database_ids are:
1. singer
2. orchestra
3. musical
4. concert_singer
5. sports_competition
6. tvshow
7. museum_visit
8. department_store
9. poker_player
10. party_host
# --- End of Example ---


# --- Your Task ---
# Task: Examine all the database schemas provided above and return a ranked list of the 10 most relevant database_ids for answering the following question.
# Q: What are the date and the operating professional's first name of each treatment?
#
# The 10 most relevant database_ids are:
